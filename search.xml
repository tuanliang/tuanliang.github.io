<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS_Flex布局</title>
    <url>/2024/06/20/CSS-Flex%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h2 id="认识flexbox"><a href="#认识flexbox" class="headerlink" title="认识flexbox"></a>认识flexbox</h2><ul>
<li>Flexbox翻译为弹性盒子:<ul>
<li>弹性盒子是一种用于按行或按列布局元素的一维布局方法 ;</li>
<li>元素可以膨胀以填充额外的空间, 收缩以适应更小的空间;</li>
<li>通常我们使用Flexbox来进行布局的方案称之为flex布局(flex layout);</li>
</ul>
</li>
<li><strong>flex布局是目前web开发中使用最多的布局方案</strong>：<ul>
<li>flex 布局（Flexible 布局，弹性布局）;</li>
<li>目前特别在移动端可以说已经完全普及;</li>
<li>在PC端也几乎已经完全普及和使用, 只有非常少数的网站依然在用浮动来布局;</li>
</ul>
</li>
<li>为什么需要flex布局呢?<ul>
<li>长久以来，CSS 布局中唯一可靠且跨浏览器兼容的布局工具只有 floats 和 positioning。</li>
<li>但是这两种方法本身存在很大的局限性, 并且他们用于布局实在是无奈之举;</li>
</ul>
</li>
</ul>
<h2 id="flex布局的重要概念"><a href="#flex布局的重要概念" class="headerlink" title="flex布局的重要概念"></a>flex布局的重要概念</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682432726140-a6d0596f-4a40-4e40-9e6b-06864620d38c.png#averageHue=%23ef9830&clientId=uc30ff908-d264-4&from=paste&height=191&id=u110df350&originHeight=346&originWidth=481&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=41654&status=done&style=none&taskId=u7c23549c-a92b-421e-9b1e-810d90baddc&title=&width=265.9900817871094" alt="image.png"></p>
<ul>
<li>两个重要的概念：<ul>
<li>开启了 flex 布局的元素叫 flex container</li>
<li>flex container 里面的直接子元素叫做 flex item</li>
</ul>
</li>
<li>**当flex container中的子元素变成了flex item时, 具备一下特点: **<ul>
<li>flex item的布局将<strong>受flex container属性的设置来进行控制和布局</strong>;</li>
<li>flex item不再严格区分块级元素和行内级元素;</li>
<li>flex item默认情况下是包裹内容的, 但是可以设置宽度和高度;</li>
</ul>
</li>
<li>设置 display 属性为 flex 或者 inline-flex 可以成为 flex container<ul>
<li>flex： flex container 以 block-level 形式存在</li>
<li>inline-flex： flex container 以 inline-level 形式存在</li>
</ul>
</li>
</ul>
<h2 id="flex布局的模型"><a href="#flex布局的模型" class="headerlink" title="flex布局的模型"></a>flex布局的模型</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682432845690-1340dc28-e6eb-445d-a320-12471d26426b.png#averageHue=%23f0eded&clientId=uc30ff908-d264-4&from=paste&height=490&id=u10b32588&originHeight=618&originWidth=1470&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=120028&status=done&style=none&taskId=u1d7c41bb-0599-45ed-b0c0-40908ece9df&title=&width=1164.356391666662" alt="image.png"></p>
<h2 id="flex相关的属性"><a href="#flex相关的属性" class="headerlink" title="flex相关的属性"></a>flex相关的属性</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682432866164-104e58c1-670d-47aa-8c81-6dec776f9f03.png#averageHue=%23fbfafa&clientId=uc30ff908-d264-4&from=paste&height=379&id=u212d066e&originHeight=479&originWidth=1294&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=67361&status=done&style=none&taskId=uf9bdcb6c-737d-4877-892c-0253ab3cb77&title=&width=1024.9504563378644" alt="image.png"></p>
<h2 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h2><ul>
<li>flex items 默认都是沿着 main axis（主轴）从 main start 开始往 main end 方向排布<ul>
<li>flex-direction 决定了 main axis 的方向，有 4 个取值</li>
<li>row（默认值）、row-reverse、column、column-reverse</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682432914333-70d62ff0-f15d-47cd-9ef6-9be00bc78bd0.png#averageHue=%23f9efec&clientId=uc30ff908-d264-4&from=paste&height=410&id=u70a90123&originHeight=517&originWidth=1217&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=75411&status=done&style=none&taskId=u198ecfad-e12d-4e89-a8e5-15e2ce2b88d&title=&width=963.9603596315154" alt="image.png"></li>
</ul>
<h2 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h2><ul>
<li>flex-wrap 决定了 flex container 是单行还是多行<ul>
<li>nowrap（默认）：单行</li>
<li>wrap：多行</li>
<li>wrap-reverse：多行（对比 wrap，cross start 与 cross end 相反）</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682432965577-3f572c83-0204-4a90-bc5d-e46c16692964.png#averageHue=%23cfa8ab&clientId=uc30ff908-d264-4&from=paste&height=174&id=uaeb8c038&originHeight=322&originWidth=1037&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=71326&status=done&style=none&taskId=ue9fa76b1-f645-4656-addf-0c920ca853a&title=&width=560.4108276367188" alt="image.png"></li>
</ul>
<h2 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h2><ul>
<li>flex-flow 属性是 flex-direction 和 flex-wrap 的简写</li>
<li>顺序任何, 并且都可以省略;</li>
</ul>
<h2 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h2><ul>
<li><strong>justify-content 决定了 flex items 在 main axis 上的对齐方式</strong><ul>
<li>flex-start（默认值）：与 main start 对齐</li>
<li>flex-end：与 main end 对齐</li>
<li>center：居中对齐</li>
<li>space-between：<ul>
<li>✓ flex items 之间的距离相等</li>
<li>✓ 与 main start、main end两端对齐</li>
</ul>
</li>
<li>space-around：<ul>
<li>✓ flex items 之间的距离相等</li>
<li>✓ flex items 与 main start、main end 之间的距离是 flex items 之间距离的一半</li>
</ul>
</li>
<li>space-evenly：<ul>
<li>✓ flex items 之间的距离相等</li>
<li>✓ flex items 与 main start、main end 之间的距离 等于 flex items 之间的距离</li>
</ul>
</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682433105256-e46a5b88-87c1-4df1-b40e-e248f64e4e60.png#averageHue=%23323231&clientId=uc30ff908-d264-4&from=paste&height=322&id=ua3324e74&originHeight=706&originWidth=456&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=103105&status=done&style=none&taskId=ua5b7f972-d658-4369-8525-4c374c1d905&title=&width=208.163330078125" alt="image.png"></li>
</ul>
<h2 id="align-item"><a href="#align-item" class="headerlink" title="align-item"></a>align-item</h2><ul>
<li><strong>align-items 决定了 flex items 在 cross axis 上的对齐方式</strong><ul>
<li>normal：在弹性布局中，效果和stretch一样</li>
<li>stretch：当 flex items 在 cross axis 方向的 size 为 auto 时，会 自动拉伸至填充 flex container</li>
<li>flex-start：与 cross start 对齐</li>
<li>flex-end：与 cross end 对齐</li>
<li>center：居中对齐</li>
<li>baseline：与基准线对齐</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682433182985-cdfdd7ac-b63c-4531-aa1b-4e10cecab4a2.png#averageHue=%2330302f&clientId=uc30ff908-d264-4&from=paste&height=296&id=ub345ffb2&originHeight=699&originWidth=589&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=143081&status=done&style=none&taskId=u43f2917a-4ede-4b39-bedd-b15f575d38c&title=&width=249.52720642089844" alt="image.png"></p>
<h2 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h2><ul>
<li><strong>align-content 决定了多行 flex items 在 cross axis 上的对齐方式，用法与 justify-content 类似</strong><ul>
<li>stretch（默认值）：与 align-items 的 stretch 类似</li>
<li>flex-start：与 cross start 对齐</li>
<li>flex-end：与 cross end 对齐</li>
<li>center：居中对齐</li>
<li>space-between：<ul>
<li>✓ flex items 之间的距离相等</li>
<li>✓ 与 cross start、cross end两端对齐</li>
</ul>
</li>
<li>space-around：<ul>
<li>✓ flex items 之间的距离相等</li>
<li>✓ flex items 与 cross start、cross end 之间的距离是 flex items 之间距离的一半</li>
</ul>
</li>
<li>space-evenly：<ul>
<li>✓ flex items 之间的距离相等</li>
<li>✓ flex items 与 cross start、cross end 之间的距离 等于 flex items 之间的距离</li>
</ul>
</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682433262908-8d3dcc46-5f97-4484-bfe9-6d0f1710a44e.png#averageHue=%23c9a1a5&clientId=uc30ff908-d264-4&from=paste&height=422&id=u40d2d62d&originHeight=657&originWidth=542&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=159955&status=done&style=none&taskId=ub2569256-dd38-4a1c-8d50-4c0192f77ac&title=&width=348.2821350097656" alt="image.png"></li>
</ul>
<h2 id="flex-item属性-order"><a href="#flex-item属性-order" class="headerlink" title="flex-item属性 - order"></a>flex-item属性 - order</h2><ul>
<li>order 决定了 flex items 的排布顺序<ul>
<li>可以设置任意整数（正整数、负整数、0），值越小就越排在前面</li>
<li>默认值是 0</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682433326449-bfcbbd35-0717-454a-a841-a67563d42a59.png#averageHue=%23ef962c&clientId=uc30ff908-d264-4&from=paste&height=268&id=u37923369&originHeight=511&originWidth=824&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=82352&status=done&style=none&taskId=u3e4ca3da-201a-4c7e-bbd7-4a5df116382&title=&width=431.6484375" alt="image.png"></li>
</ul>
<h2 id="flex-item属性-flex-items"><a href="#flex-item属性-flex-items" class="headerlink" title="flex-item属性 - flex items"></a>flex-item属性 - flex items</h2><ul>
<li>flex items 可以通过 align-self 覆盖 flex container 设置的 align-items<ul>
<li>auto（默认值）：遵从 flex container 的 align-items 设置</li>
<li>stretch、flex-start、flex-end、center、baseline，效果跟 align-items 一致</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682433387229-cadb1036-29d4-4624-a23c-100eefea1f77.png#averageHue=%23ca9ca3&clientId=uc30ff908-d264-4&from=paste&height=202&id=ufe045ca7&originHeight=499&originWidth=1024&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=75799&status=done&style=none&taskId=u138f2e56-b03a-498d-912c-8162a037da9&title=&width=414.41082763671875" alt="image.png"></li>
</ul>
<h2 id="flex-item属性-flex-grow"><a href="#flex-item属性-flex-grow" class="headerlink" title="flex-item属性 - flex-grow"></a>flex-item属性 - flex-grow</h2><ul>
<li>** flex-grow 决定了 flex items 如何扩展(拉伸&#x2F;成长) **<ul>
<li>可以设置<strong>任意非负数字</strong>（正小数、正整数、0），默认值是 0</li>
<li>当 flex container 在 main axis 方向上有剩余 size 时，flex-grow 属性才会有效</li>
</ul>
</li>
<li>如果所有 flex items 的 flex-grow 总和 sum 超过 1，每个 flex item 扩展的 size 为<ul>
<li>flex container 的剩余 size * flex-grow &#x2F; sum</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682433472350-46d77fc1-39bd-4fcf-95ed-58ab0fb5205a.png#averageHue=%23f1962b&clientId=uc30ff908-d264-4&from=paste&height=150&id=u761f7d62&originHeight=294&originWidth=927&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=55548&status=done&style=none&taskId=u9a8bac25-daf6-4b63-9b4c-a9c677d6894&title=&width=471.41082763671875" alt="image.png"></li>
</ul>
</li>
<li>flex items 扩展后的最终 size 不能超过 max-width\max-height</li>
</ul>
<h2 id="flex-item属性-flex-shrink"><a href="#flex-item属性-flex-shrink" class="headerlink" title="flex-item属性 - flex-shrink"></a>flex-item属性 - flex-shrink</h2><ul>
<li><strong>flex-shrink 决定了 flex items 如何收缩(缩小)</strong><ul>
<li>可以设置任意非负数字（正小数、正整数、0），默认值是 1</li>
<li>当 flex items 在 main axis 方向上超过了 flex container 的 size，flex-shrink 属性才会有效</li>
</ul>
</li>
<li>如果所有 flex items 的 flex-shrink 总和超过 1，每个 flex item 收缩的 size为<ul>
<li>flex items 超出 flex container 的 size * 收缩比例 &#x2F; 所有 flex items 的收缩比例之和</li>
<li>flex items 收缩后的最终 size 不能小于 min-width\min-height</li>
</ul>
</li>
</ul>
<h2 id="flex-item属性-flex-basis"><a href="#flex-item属性-flex-basis" class="headerlink" title="flex-item属性 - flex-basis"></a>flex-item属性 - flex-basis</h2><ul>
<li>**flex-basis 用来设置 flex items 在 main axis 方向上的 base size **<ul>
<li>auto（默认值）、具体的宽度数值（100px）</li>
</ul>
</li>
<li>决定 flex items 最终 base size 的因素，从优先级高到低<ul>
<li>max-width\max-height\min-width\min-height</li>
<li>flex-basis</li>
<li>width\height</li>
<li>内容本身的 size</li>
</ul>
</li>
</ul>
<h2 id="flex-item属性-flex属性"><a href="#flex-item属性-flex属性" class="headerlink" title="flex-item属性 - flex属性"></a>flex-item属性 - flex属性</h2><ul>
<li><strong>flex 是 flex-grow || flex-shrink || flex-basis 的简写,flex 属性可以指定1个，2个或3个值。</strong></li>
<li>单值语法: 值必须为以下其中之一:<ul>
<li>一个无单位数(<number>): 它会被当作<flex-grow>的值。</li>
<li>一个有效的宽度(width)值: 它会被当作<flex-basis>的值。</li>
<li>关键字none，auto或initial.</li>
</ul>
</li>
<li>双值语法: 第一个值必须为一个无单位数，并且它会被当作<flex-grow>的值。<ul>
<li>第二个值必须为以下之一：<ul>
<li>✓ 一个无单位数：它会被当作<flex-shrink>的值。</li>
<li>✓ 一个有效的宽度值: 它会被当作<flex-basis>的值。</li>
</ul>
</li>
</ul>
</li>
<li>三值语法:<ul>
<li>第一个值必须为一个无单位数，并且它会被当作<flex-grow>的值。</li>
<li>第二个值必须为一个无单位数，并且它会被当作<flex-shrink>的值。</li>
<li>第三个值必须为一个有效的宽度值， 并且它会被当作<flex-basis>的值。</li>
</ul>
</li>
</ul>
<h2 id="思考-如下布局如何解决对其问题"><a href="#思考-如下布局如何解决对其问题" class="headerlink" title="思考: 如下布局如何解决对其问题"></a>思考: 如下布局如何解决对其问题</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682471376417-99d7e787-3538-469d-b249-e6be5ddd1049.png#averageHue=%2370ae52&clientId=uf339a2ea-9703-4&from=paste&height=264&id=u88f3964e&originHeight=333&originWidth=870&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=4248&status=done&style=none&taskId=u0684e470-033e-4ede-a100-f5eadfe65ca&title=&width=689.1088848639428" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682471333702-45a47d80-fab1-4613-9317-f835f6e40cd4.png#averageHue=%23c6b22a&clientId=uf339a2ea-9703-4&from=paste&height=227&id=u08f0709e&originHeight=287&originWidth=880&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=3986&status=done&style=none&taskId=ud85e13e1-8fe1-422f-a21f-15632e98336&title=&width=697.0296766439881" alt="image.png"><br>方法一：如果页面布局不改变，可以自己计算<br>方法二：在最后添加<i>标签，添加的个数为item个数减2</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 控制flex布局主轴的方向 */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* flex-direction: column-reverse; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 设置单行还是多行展示 */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* flex-wrap: wrap-reverse; */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* flex-flow: row-reverse; */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">600px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">90px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.container</span> <span class="selector-tag">i</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">90px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;item item1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;item item2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;item item3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;item item4&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;item item1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;item item2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;item item3&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;item item4&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;item item1&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;item item2&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./js/itemRandomColor.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS元素定位</title>
    <url>/2024/06/17/CSS%E5%85%83%E7%B4%A0%E5%AE%9A%E4%BD%8D/</url>
    <content><![CDATA[<h2 id="margin-padding位置调整"><a href="#margin-padding位置调整" class="headerlink" title="margin-padding位置调整"></a>margin-padding位置调整</h2><ul>
<li>在标准流中，可以使用margin、padding对元素进行定位<ul>
<li>其中margin还可以设置负数</li>
</ul>
</li>
<li>比较明显的缺点是<ul>
<li>设置一个元素的margin或者padding，通常会影响到标准流中其他元素的定位效果</li>
<li>不便于实现元素层叠的效果</li>
</ul>
</li>
<li>如果我们希望一个元素可以跳出标准量,单独的对某个元素进行定位呢?<ul>
<li>我们可以通过position属性来进行设置;</li>
</ul>
</li>
</ul>
<h2 id="认识position属性"><a href="#认识position属性" class="headerlink" title="认识position属性"></a>认识position属性</h2><ul>
<li>利用position可以对元素进行定位，常用取值有5个:</li>
<li>默认值:<ul>
<li>static：默认值, 静态定位</li>
</ul>
</li>
<li>使用下面的值, 可以让元素变成 定位元素(positioned element)<ul>
<li>relative：相对定位</li>
<li>absolute：绝对定位</li>
<li>fixed：固定定位</li>
<li>sticky：粘性定位</li>
</ul>
</li>
</ul>
<h2 id="静态定位-static"><a href="#静态定位-static" class="headerlink" title="静态定位 - static"></a>静态定位 - static</h2><ul>
<li>position属性的默认值</li>
<li>元素按照normal flow布局</li>
<li>left 、right、top、bottom没有任何作用</li>
</ul>
<h2 id="相对定位-relative"><a href="#相对定位-relative" class="headerlink" title="相对定位 - relative"></a>相对定位 - relative</h2><ul>
<li>元素按照normal flow布局</li>
<li>可以通过left、right、top、bottom进行定位</li>
<li>定位参照对象是元素自己原来的位置</li>
<li>left、right、top、bottom用来设置元素的具体位置，对元素的作用如下图所示</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682416409394-93eea992-fdd4-418c-ade8-3066ec7648b5.png#averageHue=%23cf763d&clientId=ua42d7ae5-9e03-4&from=paste&height=204&id=uc94830b7&originHeight=420&originWidth=563&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=20428&status=done&style=none&taskId=ue404ae8a-7b0b-45fa-b6fb-8e26f308b5a&title=&width=273.9158020019531" alt="image.png"></li>
<li>相对定位的应用场景</li>
<li>在不影响其他元素位置的前提下，对当前元素位置进行微调</li>
</ul>
<h2 id="相对定位练习"><a href="#相对定位练习" class="headerlink" title="相对定位练习"></a>相对定位练习</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682416526063-737d99c2-12db-4d77-af43-15383b30db15.png#averageHue=%23e9f0f9&clientId=ua42d7ae5-9e03-4&from=paste&height=160&id=u69d2b8c1&originHeight=651&originWidth=1854&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=1535871&status=done&style=none&taskId=u76fe8279-a275-4132-b628-d07753d59d0&title=&width=455.41082763671875" alt="image.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-left</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../images/mhxy.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="固定定位-fixed"><a href="#固定定位-fixed" class="headerlink" title="固定定位 - fixed"></a>固定定位 - fixed</h2><ul>
<li>元素脱离normal flow（脱离标准流、脱标）</li>
<li>可以通过left、right、top、bottom进行定位</li>
<li>定位参照对象是视口（viewport）</li>
<li>当画布滚动时，固定不动</li>
</ul>
<h2 id="画布-和-视口"><a href="#画布-和-视口" class="headerlink" title="画布 和 视口"></a>画布 和 视口</h2><ul>
<li>视口（Viewport）<ul>
<li>文档的可视区域</li>
<li>如图红框所示</li>
</ul>
</li>
<li>画布（Canvas）<ul>
<li>用于渲染文档的区域  文档内容超出视口范围，可以通过滚动查看</li>
<li>如图黑框所示</li>
</ul>
</li>
<li>宽高对比<ul>
<li>画布 &gt;&#x3D; 视口</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682416677169-1b8234de-b940-4f62-b4da-c9bf1545a6c9.png#averageHue=%23d3d3c5&clientId=ua42d7ae5-9e03-4&from=paste&height=319&id=u1b8fb440&originHeight=568&originWidth=761&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=66944&status=done&style=none&taskId=u08c673b2-b217-4959-83c6-63676286cb3&title=&width=427.74749755859375" alt="image.png"></li>
</ul>
<h2 id="定位元素的特点"><a href="#定位元素的特点" class="headerlink" title="定位元素的特点"></a>定位元素的特点</h2><ul>
<li>可以随意设置宽高</li>
<li>宽高默认由内容决定</li>
<li>不再受标准流的约束<ul>
<li>不再严格按照从上到下、从左到右排布</li>
<li>不再严格区分块级、行内级，块级、行内级的很多特性都会消失</li>
</ul>
</li>
<li>不再给父元素汇报宽高数据</li>
<li>脱标元素内部默认还是按照标准流布局</li>
</ul>
<h2 id="绝对定位-absolut"><a href="#绝对定位-absolut" class="headerlink" title="绝对定位 - absolut"></a>绝对定位 - absolut</h2><ul>
<li>元素脱离normal flow（脱离标准流、脱标）</li>
<li>可以通过left、right、top、bottom进行定位<ul>
<li>定位参照对象是最邻近的定位祖先元素</li>
<li>如果找不到这样的祖先元素，参照对象是视口</li>
</ul>
</li>
<li>定位元素（positioned element）<ul>
<li>position值不为static的元素</li>
<li>也就是position值为relative、absolute、fixed的元素</li>
</ul>
</li>
</ul>
<h2 id="子绝父相"><a href="#子绝父相" class="headerlink" title="子绝父相"></a>子绝父相</h2><ul>
<li>在绝大数情况下，子元素的绝对定位都是相对于父元素进行定位</li>
<li>如果希望子元素相对于父元素进行定位，又不希望父元素脱标，常用解决方案是：<ul>
<li>父元素设置position: relative（让父元素成为定位元素，而且父元素不脱离标准流）</li>
<li>子元素设置position: absolute</li>
<li>简称为“子绝父相”</li>
</ul>
</li>
</ul>
<h2 id="绝对定位练习"><a href="#绝对定位练习" class="headerlink" title="绝对定位练习"></a>绝对定位练习</h2><ul>
<li>绝对定位元素（absolutely positioned element）<ul>
<li>position值为absolute或者fixed的元素</li>
</ul>
</li>
<li>对于绝对定位元素来说<ul>
<li>定位参照对象的宽度 &#x3D; left + right + margin-left + margin-right + 绝对定位元素的实际占用宽度</li>
<li>定位参照对象的高度 &#x3D; top + bottom + margin-top + margin-bottom + 绝对定位元素的实际占用高度</li>
</ul>
</li>
<li>**如果希望绝对定位元素的宽高和定位参照对象一样，可以给绝对定位元素设置以下属性 **<ul>
<li>left: 0、right: 0、top: 0、bottom: 0、margin:0</li>
</ul>
</li>
<li><strong>如果希望绝对定位元素在定位参照对象中居中显示，可以给绝对定位元素设置以下属性</strong><ul>
<li>left: 0、right: 0、top: 0、bottom: 0、margin: auto</li>
<li>另外，还得设置具体的宽高值（宽高小于定位参照对象的宽高）</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682728949742-501c44c3-83c9-4357-ac44-0e8fad737a71.png#averageHue=%23f6e8e6&clientId=u827cf5b9-b853-4&from=paste&height=228&id=ucd02a47c&originHeight=288&originWidth=462&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=56132&status=done&style=none&taskId=u7bec1e58-4d8f-40df-93ef-8869a8bf2a8&title=&width=365.94058023809373" alt="image.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 重置代码 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 公共的CSS */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sprite_01</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">../images/music_sprite_01.png</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sprite_02</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">../images/music_sprite_02.png</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sprite_02_icon_music</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">11px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.sprite_02_icon_play</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">17px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 布局代码 */</span></span></span><br><span class="line"><span class="language-css">    </span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;../images/music_album01.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;音乐封面&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;cover&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;sprite_02 sprite_02_icon_music icon-music&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;count&quot;</span>&gt;</span>62万<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;sprite_02 sprite_02_icon_play icon-play&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;bottom&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">      天气好的话，把耳机分给我一半吧</span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;sprite_02 sprite_02_icon_play&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;sprite_02 sprite_02_icon_music&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="粘性定位-sticky"><a href="#粘性定位-sticky" class="headerlink" title="粘性定位 - sticky"></a>粘性定位 - sticky</h2><ul>
<li>另外还有一个定位的值是position: sticky，比起其他定位值要新一些.<ul>
<li>sticky是一个大家期待已久的属性;</li>
<li>可以看做是相对定位和固定定位的结合体;</li>
<li>它允许被定位的元素表现得像相对定位一样，直到它滚动到某个阈值点;</li>
<li>当达到这个阈值点时, 就会变成固定定位;</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682417704875-9626153f-5387-42e6-8081-4825218bcd15.png#averageHue=%23fdebea&clientId=ua42d7ae5-9e03-4&from=paste&height=273&id=u6b650213&originHeight=345&originWidth=812&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=39063&status=done&style=none&taskId=u1561b670-8953-4a04-9972-87d706dca42&title=&width=643.1682925396799" alt="image.png"></li>
<li>sticky是相对于最近的滚动祖先包含视口的(the nearest ancestor scroll container’s scrollport )</li>
</ul>
<h2 id="position值对比"><a href="#position值对比" class="headerlink" title="position值对比"></a>position值对比</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682417721513-ad000cee-36cc-467f-b5ed-9d9b1d032e21.png#averageHue=%23efe5d5&clientId=ua42d7ae5-9e03-4&from=paste&height=269&id=u962fda89&originHeight=340&originWidth=1505&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=112231&status=done&style=none&taskId=u102c8dd7-f55c-4c0d-a4b8-05e12c78bfa&title=&width=1192.0791628968207" alt="image.png"></p>
<h2 id="CSS属性-z-index"><a href="#CSS属性-z-index" class="headerlink" title="CSS属性 - z-index"></a>CSS属性 - z-index</h2><ul>
<li>z-index属性用来设置定位元素的层叠顺序（仅对定位元素有效）<ul>
<li>取值可以是正整数、负整数、0</li>
</ul>
</li>
<li>比较原则</li>
<li>如果是兄弟关系<ul>
<li>✓ z-index越大，层叠在越上面</li>
<li>✓ z-index相等，写在后面的那个元素层叠在上面</li>
</ul>
</li>
<li>如果不是兄弟关系<ul>
<li>✓ 各自从元素自己以及祖先元素中，找出最邻近的2个定位元素进行比较</li>
<li>✓ 而且这2个定位元素必须有设置z-index的具体数值</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS_html高级元素</title>
    <url>/2024/06/16/CSS-html%E9%AB%98%E7%BA%A7%E5%85%83%E7%B4%A0/</url>
    <content><![CDATA[<h2 id="列表的实现方式"><a href="#列表的实现方式" class="headerlink" title="列表的实现方式"></a>列表的实现方式</h2><ul>
<li>事实上现在很多的列表功能采用了不同的方案来实现:<ul>
<li>方案一: 使用div元素来实现(比如汽车之家, 知乎上的很多列表)<ul>
<li>方案二: 使用列表元素, 使用元素语义化的方式实现;</li>
</ul>
</li>
</ul>
</li>
<li>事实上现在很多的网站对于列表元素没有很强烈的偏好, 更加不拘一格, 按照自己的风格来布局:<ul>
<li>原因是列表元素默认的CSS样式, 让它用起来不是非常方便;</li>
<li>比如列表元素往往有很多的限制, ul&#x2F;ol中只能存放li, li再存放其他元素, 默认样式等;</li>
<li>虽然我们可以通过重置来解决, 但是我们更喜欢自由的div;</li>
</ul>
</li>
<li>HTML提供了3组常用的用来展示列表的元素<ul>
<li>有序列表：ol、li</li>
<li>无序列表：ul、li</li>
<li>定义列表：dl、dt、dd</li>
</ul>
</li>
</ul>
<h2 id="有序列表-–-ol-–-li"><a href="#有序列表-–-ol-–-li" class="headerlink" title="有序列表 – ol – li"></a>有序列表 – ol – li</h2><ul>
<li>ol（ordered list）<ul>
<li>有序列表，直接子元素只能是li</li>
</ul>
</li>
<li>li（list item）<ul>
<li>列表中的每一项</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682414389024-8cf11065-2bec-43e5-bce0-cc2d3a524200.png#averageHue=%23baa48a&clientId=u921b367a-494c-4&from=paste&height=288&id=u6882b94c&originHeight=364&originWidth=1472&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=173281&status=done&style=none&taskId=u1ad27df7-ce5b-41d1-acb9-89f84daf488&title=&width=1165.940550022671" alt="image.png"></li>
</ul>
<h2 id="无序列表-–-ul-li"><a href="#无序列表-–-ul-li" class="headerlink" title="无序列表 – ul - li"></a>无序列表 – ul - li</h2><ul>
<li>ul（unordered list）<ul>
<li>无序列表，直接子元素只能是li</li>
</ul>
</li>
<li>li（list item）<ul>
<li>列表中的每一项</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682414429226-9128535e-d102-417b-b40c-c8b9a8d1b2dd.png#averageHue=%23c4b094&clientId=u921b367a-494c-4&from=paste&height=265&id=u700db144&originHeight=335&originWidth=1466&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=148986&status=done&style=none&taskId=u05db634f-939c-4640-9d44-9912f6a1f9e&title=&width=1161.1880749546438" alt="image.png"></li>
</ul>
<h2 id="列表的练习"><a href="#列表的练习" class="headerlink" title="列表的练习"></a>列表的练习</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682414504657-d7731190-2319-4b91-a9cf-fa6ed460046d.png#averageHue=%23f8f5f4&clientId=u921b367a-494c-4&from=paste&height=318&id=u0a8a5b4c&originHeight=401&originWidth=565&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=29732&status=done&style=none&taskId=u398c35ba-c79d-40c6-937d-1bf50dc00a0&title=&width=447.52473557256053" alt="image.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">ul</span>, <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-top</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#f04142</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span> <span class="selector-tag">a</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-weight</span>: <span class="number">700</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#a82e2e</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#f04142</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">ul</span> &gt; <span class="selector-tag">li</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>) <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#ff9a03</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">i</span><span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">i</span><span class="selector-class">.hot</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;https://lf3-cdn2-tos.bytescm.com/toutiao/toutiao_web_pc/svgs/hot.92a15c5e.svg&quot;</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">i</span><span class="selector-class">.new</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">&quot;https://lf3-cdn2-tos.bytescm.com/toutiao/toutiao_web_pc/svgs/new.b7973b24.svg&quot;</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        美方工作小组抵华参与东航事故调查</span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;item hot&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>2<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        美方工作小组抵华参与东航事故调查</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>3<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        美方工作小组抵华参与东航事故调查</span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;item hot&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>4<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        美方工作小组抵华参与东航事故调查</span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;item hot&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>5<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        美方工作小组抵华参与东航事故调查</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>6<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        美方工作小组抵华参与东航事故调查</span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>7<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        美方工作小组抵华参与东航事故调查</span><br><span class="line">        <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;item new&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="表格常见的元素"><a href="#表格常见的元素" class="headerlink" title="表格常见的元素"></a>表格常见的元素</h2><ul>
<li>编写表格最常见的是下面的元素:</li>
<li>table表格</li>
<li>tr(table row) 表格中的行</li>
<li>td(table data)行中的单元格</li>
<li>需要用到一个非常重要的属性:<ul>
<li>border-collapse CSS 属性是用来决定表格的边框是分开的还是合并的。</li>
<li>table { border-collapse: collapse; }</li>
<li>合并单元格的边框</li>
</ul>
</li>
<li>thead表格的表头</li>
<li>tbody 表格的主体</li>
<li>tfoot 表格的页脚</li>
<li>caption 表格的标题</li>
<li>th 表格的表头单元格</li>
</ul>
<h2 id="如何使用单元格合并呢"><a href="#如何使用单元格合并呢" class="headerlink" title="如何使用单元格合并呢"></a>如何使用单元格合并呢</h2><ul>
<li>单元格合并分成两种情况:</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682415047480-60cf5bfe-b809-4a6c-b906-d3b72124329c.png#averageHue=%23fef2f2&clientId=u921b367a-494c-4&from=paste&height=120&id=ufb1f9a80&originHeight=152&originWidth=761&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=7454&status=done&style=none&taskId=u1cf9001e-7c43-49fe-9575-a81a9f087b9&title=&width=602.7722544614488" alt="image.png"></li>
<li>跨列合并: 使用colspan<ul>
<li>✓ 在最左边的单元格写上colspan属性, 并且省略掉合并的td;</li>
</ul>
</li>
<li>跨行合并: 使用rowspan<ul>
<li>✓ 在最上面的单元格协商rowspan属性, 并且省略掉后面tr中的td;</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682415058134-dbf294de-0c72-4c66-ae55-b3eab3d66ba0.png#averageHue=%2398a686&clientId=u921b367a-494c-4&from=paste&height=285&id=ub1c0c5c4&originHeight=360&originWidth=1458&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=80047&status=done&style=none&taskId=u868e5fe4-b080-4d07-9d61-c92c56a3a20&title=&width=1154.8514415306076" alt="image.png"></li>
</ul>
<h2 id="表格练习"><a href="#表格练习" class="headerlink" title="表格练习"></a>表格练习</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682415125926-ac6526f2-51f2-4ed6-b487-91e741b34dfd.png#averageHue=%23faf4f4&clientId=u921b367a-494c-4&from=paste&height=501&id=uf03def55&originHeight=633&originWidth=1112&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=22758&status=done&style=none&taskId=u9160328a-2eec-4ba2-aebc-7c9a4cc63bd&title=&width=880.7920459410395" alt="image.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">table</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">table</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-weight</span>: <span class="number">700</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">table</span> <span class="selector-tag">tr</span><span class="selector-pseudo">:nth-child</span>(<span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-weight</span>: <span class="number">700</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">table</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span><span class="selector-attr">[rowspan]</span>, <span class="selector-tag">table</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span><span class="selector-attr">[colspan]</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-weight</span>: <span class="number">700</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">table</span> <span class="selector-tag">tr</span> <span class="selector-tag">td</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">36px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#f00</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">colspan</span>=<span class="string">&quot;6&quot;</span>&gt;</span>课程表<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span><span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>星期一<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>星期二<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>星期三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>星期四<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>星期五<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span>上午<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;4&quot;</span>&gt;</span>下午<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span> <span class="attr">rowspan</span>=<span class="string">&quot;2&quot;</span>&gt;</span>晚自习<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">td</span>&gt;</span>英语<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="常见的表单元素"><a href="#常见的表单元素" class="headerlink" title="常见的表单元素"></a>常见的表单元素</h2><ul>
<li>form 表单, 一般情况下，其他表单相关元素都是它的后代元素</li>
<li>input  单行文本输入框、单选框、复选框、按钮等元素</li>
<li>textarea 多行文本框</li>
<li>select、option  下拉选择框</li>
<li>button 按钮</li>
<li>label  表单元素的标题</li>
</ul>
<h2 id="input元素的使用"><a href="#input元素的使用" class="headerlink" title="input元素的使用"></a>input元素的使用</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682415243732-1d23bfc6-9aea-489f-b648-a9c296e27baf.png#averageHue=%23f9f4f3&clientId=u921b367a-494c-4&from=paste&height=550&id=u512f730c&originHeight=695&originWidth=1416&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=217453&status=done&style=none&taskId=udfbbd10e-d9ac-45b2-b720-9db5516a753&title=&width=1121.584116054417" alt="image.png"><br><code>https://developer.mozilla.org/zhCN/docs/Web/HTML/Element/Input</code></p>
<h2 id="布尔属性（boolean-attributes）"><a href="#布尔属性（boolean-attributes）" class="headerlink" title="布尔属性（boolean attributes）"></a>布尔属性（boolean attributes）</h2><ul>
<li>常见的布尔属性有disabled、checked、readonly、multiple、autofocus、selected</li>
<li>布尔属性可以没有属性值，写上属性名就代表使用这个属性<ul>
<li>如果要给布尔属性设值，值就是属性名本身</li>
</ul>
</li>
</ul>
<h2 id="表单按钮"><a href="#表单按钮" class="headerlink" title=" 表单按钮"></a><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682415323255-ede89ffa-8509-4a5e-8d00-24364825498d.png#averageHue=%23577f5c&clientId=u921b367a-494c-4&from=paste&height=143&id=u2b17fbbe&originHeight=180&originWidth=1334&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=65913&status=done&style=none&taskId=u1e3e0197-5c62-4381-8b06-f7a22393006&title=&width=1056.6336234580456" alt="image.png"> 表单按钮</h2><ul>
<li>表单可以实现按钮效果:<ul>
<li>普通按钮（type&#x3D;button）：使用value属性设置按钮文字</li>
<li>重置按钮（type&#x3D;reset）：重置它所属form的所有表单元素（包括input、textarea、select）</li>
<li>提交按钮（type&#x3D;submit）：提交它所属form的表单数据给服务器（包括input、textarea、select）</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682415386348-eb2ceb82-fa9f-4c46-9d86-e2bfa9f1a3a3.png#averageHue=%23748f5f&clientId=u921b367a-494c-4&from=paste&height=113&id=u4003e645&originHeight=143&originWidth=1206&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=74970&status=done&style=none&taskId=u1ca50848-2939-4bd6-afac-2390bf0c552&title=&width=955.2474886734656" alt="image.png"></li>
<li>我们也可以通过按钮来实现:</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682415393406-b1030e1a-b54b-49b1-abc8-db31cad66252.png#averageHue=%23879c6f&clientId=u921b367a-494c-4&from=paste&height=121&id=ue8d0b9e9&originHeight=153&originWidth=1164&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=81639&status=done&style=none&taskId=u50d18b0a-647d-4988-8fc5-795c41ae1eb&title=&width=921.9801631972751" alt="image.png"></li>
</ul>
<h2 id="input和label的关系"><a href="#input和label的关系" class="headerlink" title="input和label的关系"></a>input和label的关系</h2><ul>
<li>label元素一般跟input配合使用，用来表示input的标题</li>
<li>labe可以跟某个input绑定，点击label就可以激活对应的input变成选中</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682415474781-b33a067e-2365-449d-bf6c-2aadf626a0ba.png#averageHue=%2370955f&clientId=u921b367a-494c-4&from=paste&height=227&id=u3dd708c6&originHeight=287&originWidth=1254&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=81645&status=done&style=none&taskId=ued2d70dd-b022-42b5-8c46-8eaa844e607&title=&width=993.267289217683" alt="image.png"></li>
</ul>
<h2 id="radio的使用"><a href="#radio的使用" class="headerlink" title="radio的使用"></a>radio的使用</h2><ul>
<li>我们可以将type类型设置为radio变成单选框:<ul>
<li>name值相同的radio才具备单选功能</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682415532795-9680ba6b-3d91-4d91-9565-53122460a115.png#averageHue=%234a6f59&clientId=u921b367a-494c-4&from=paste&height=190&id=u0ff7d9cd&originHeight=349&originWidth=1003&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=74401&status=done&style=none&taskId=u10bf858c-1788-4cb5-89ad-0827ccc7189&title=&width=546.4108276367188" alt="image.png"></li>
</ul>
<h2 id="checkbox的使用"><a href="#checkbox的使用" class="headerlink" title="checkbox的使用"></a>checkbox的使用</h2><ul>
<li>我们可以将type类型设置为checkbox变成多选框:</li>
<li>属于同一种类型的checkbox，name值要保持一致</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682415578648-4a351590-8870-4309-bd88-1f1c6af40e92.png#averageHue=%23282c35&clientId=u921b367a-494c-4&from=paste&height=241&id=u393c471d&originHeight=437&originWidth=1245&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=135499&status=done&style=none&taskId=ue176ba2b-844a-4e62-9d6e-aa5bee29b21&title=&width=687.4108276367188" alt="image.png"></li>
</ul>
<h2 id="textarea的使用"><a href="#textarea的使用" class="headerlink" title="textarea的使用"></a>textarea的使用</h2><ul>
<li>textarea的常用属性:<ul>
<li>cols：列数</li>
<li>rows：行数</li>
</ul>
</li>
<li>缩放的CSS设置<ul>
<li>禁止缩放：resize: none;</li>
<li>水平缩放：resize: horizontal;</li>
<li>垂直缩放：resize: vertical;</li>
<li>水平垂直缩放：resize: both;</li>
</ul>
</li>
</ul>
<h2 id="select和option的使用"><a href="#select和option的使用" class="headerlink" title="select和option的使用"></a>select和option的使用</h2><ul>
<li>option是select的子元素，一个option代表一个选项</li>
<li>select常用属性<ul>
<li>multiple：可以多选</li>
<li>size：显示多少项</li>
</ul>
</li>
<li>option常用属性<ul>
<li>selected：默认被选中</li>
</ul>
</li>
</ul>
<h2 id="form常见的属性"><a href="#form常见的属性" class="headerlink" title="form常见的属性"></a>form常见的属性</h2><ul>
<li>form通常作为表单元素的父元素:<ul>
<li>form可以将整个表单作为一个整体来进行操作;</li>
<li>比如对整个表单进行重置;</li>
<li>比如对整个表单的数据进行提交;</li>
</ul>
</li>
<li>form常见的属性如下:</li>
<li>action<ul>
<li>用于提交表单数据的请求URL</li>
</ul>
</li>
<li>method<ul>
<li>请求方法（get和post），默认是get</li>
</ul>
</li>
<li>target<ul>
<li>在什么地方打开URL（参考a元素的target）</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS元素的水平垂直居中方案</title>
    <url>/2024/07/05/CSS%E5%85%83%E7%B4%A0%E7%9A%84%E6%B0%B4%E5%B9%B3%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<h2 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h2><h3 id="1-行内级元素"><a href="#1-行内级元素" class="headerlink" title="1.行内级元素:"></a>1.行内级元素:</h3><pre><code>    设置父元素的text-align: center
</code></pre>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">     <span class="attribute">background-color</span>: orange;</span><br><span class="line">     <span class="attribute">text-align</span>: center;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>剧中<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-块级元素"><a href="#2-块级元素" class="headerlink" title="2.块级元素"></a>2.块级元素</h3><pre><code>    设置当前块级元素(宽度) margin: 0 auto;
  不设置宽度，块级元素默认占一行，看不出效果
</code></pre>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: orange;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box1</span> &#123;     </span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;    </span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="number">#f00</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>居中<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-绝对定位"><a href="#3-绝对定位" class="headerlink" title="3.绝对定位"></a>3.绝对定位</h3><pre><code>    元素有宽度情况下, left0/right0/margin: 0 auto;
</code></pre>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">      <span class="attribute">position</span>: relative;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: orange;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.box2</span> &#123;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">      <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="number">#f00</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>居中<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-flex"><a href="#4-flex" class="headerlink" title="4.flex"></a>4.flex</h3><pre><code>    justify-content: center
</code></pre>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"> <span class="selector-class">.container</span> &#123;     </span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">justify-content</span>: center;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: orange;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="selector-class">.box3</span> &#123;</span><br><span class="line">      <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: <span class="number">#f00</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;box3&quot;</span>&gt;</span>居中<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h2><h3 id="1-垂直居中-绝对定位"><a href="#1-垂直居中-绝对定位" class="headerlink" title="1.垂直居中: 绝对定位"></a>1.垂直居中: 绝对定位</h3><p>元素有高度情况下, top0&#x2F;bottom0&#x2F;margin: auto 0;</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line">     <span class="attribute">position</span>: relative;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">     <span class="attribute">background-color</span>: orange;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="selector-class">.two</span> &#123;</span><br><span class="line">     <span class="attribute">position</span>: absolute;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">     <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">     <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">     <span class="attribute">margin</span>: auto <span class="number">0</span>;</span><br><span class="line">     <span class="attribute">background-color</span>: red;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span></span><br><span class="line">      居中</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>弊端:</strong><br>1&gt; 必须使用定位(脱离标准流)<br>2&gt; 必须给元素设置高度</p>
<h3 id="flex布局-直接使用flex"><a href="#flex布局-直接使用flex" class="headerlink" title="flex布局(直接使用flex)"></a>flex布局(直接使用flex)</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line">      <span class="attribute">display</span>: flex;</span><br><span class="line">      <span class="attribute">align-items</span>: center;</span><br><span class="line">      <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">      <span class="attribute">background-color</span>: orange;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="selector-class">.two</span> &#123;</span><br><span class="line">      <span class="attribute">background-color</span>: red;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span></span><br><span class="line">      居中</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>弊端:<br>1&gt; 当前flex局部中所有的元素都会被垂直居中<br>2&gt; 相对来说, 兼容性差一点点(基本可以忽略)</p>
<h3 id="top-translate"><a href="#top-translate" class="headerlink" title="top&#x2F;translate"></a>top&#x2F;translate</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">两件事情:</span><br><span class="line">          1.让元素向下位移父元素的50%</span><br><span class="line">          2.让元素向上位移自身的50%</span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.one</span> &#123;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">     <span class="attribute">background-color</span>: orange;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="selector-class">.two</span> &#123;</span><br><span class="line">     <span class="attribute">display</span>: inline-block;</span><br><span class="line">     <span class="attribute">position</span>: relative;</span><br><span class="line">     <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">      <span class="comment">/* margin-top的百分比是相对于包含块(父元素)的宽度 */</span></span><br><span class="line">     <span class="comment">/* margin-top: 50%; 不能使用margin-top:50%*/</span></span><br><span class="line">     <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">     <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">0</span>, -<span class="number">50%</span>);</span><br><span class="line">     <span class="attribute">background-color</span>: red;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span></span><br><span class="line">      居中</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>





]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS属性-字体</title>
    <url>/2024/05/23/CSS%E5%B1%9E%E6%80%A7-%E5%AD%97%E4%BD%93/</url>
    <content><![CDATA[<h2 id="font-size-重要"><a href="#font-size-重要" class="headerlink" title="font-size(重要)"></a>font-size(重要)</h2><ul>
<li><strong>font-size决定文字的大小</strong></li>
<li>常用的设置<ul>
<li>**具体数值+单位 **</li>
<li>✓ 比如100px</li>
<li>✓ 也可以使用em单位(不推荐)：1em代表100%，2em代表200%，0.5em代表50%</li>
<li><strong>百分比</strong></li>
<li>✓ 基于父元素的font-size计算，比如50%表示等于父元素font-size的一半</li>
</ul>
</li>
</ul>
<h1 id="font-family-重要-不过一般仅设置一次"><a href="#font-family-重要-不过一般仅设置一次" class="headerlink" title="font-family (重要, 不过一般仅设置一次)"></a>font-family (重要, 不过一般仅设置一次)</h1><ul>
<li>font-family用于设置<strong>文字的字体名称</strong><ul>
<li>可以设置1个或者多个字体名称;</li>
<li>浏览器会选择列表中第一个该计算机上有安装的字体;</li>
<li>或者是通过 @font-face 指定的可以直接下载的字体。</li>
</ul>
</li>
</ul>
<h2 id="font-weight-重要"><a href="#font-weight-重要" class="headerlink" title="font-weight(重要)"></a>font-weight(重要)</h2><ul>
<li><strong>font-weight用于设置文字的粗细（重量）</strong></li>
<li><strong>常见的取值:</strong><ul>
<li>100 | 200 | 300 | 400 | 500 | 600 | 700 | 800 | 900 ：每一个数字表示一个重量</li>
<li>normal：等于400</li>
<li>bold：等于700</li>
</ul>
</li>
<li>strong、b、h1~h6等标签的font-weight默认就是bold</li>
</ul>
<h2 id="font-style-一般"><a href="#font-style-一般" class="headerlink" title="font-style(一般)"></a>font-style(一般)</h2><ul>
<li>**font-style用于设置文字的常规、斜体显示 **<ul>
<li>normal：常规显示</li>
<li>italic(斜体)：用字体的斜体显示(通常会有专门的字体)</li>
<li>oblique(倾斜)：文本倾斜显示(仅仅是让文字倾斜)</li>
</ul>
</li>
<li>em、i、cite、address、var、dfn等元素的font-style默认就是italic</li>
</ul>
<h2 id="line-height-常用"><a href="#line-height-常用" class="headerlink" title="line-height(常用)"></a>line-height(常用)</h2><ul>
<li>**line-height用于设置文本的行高 **<ul>
<li>行高可以先简单理解为一行文字所占据的高度</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682400566419-505bc639-425c-4cb3-a1c5-4a4e5c4a9b1f.png#averageHue=%23b1de96&clientId=u45feaea1-65b4-4&from=paste&height=265&id=u0d3cff83&originHeight=335&originWidth=1595&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=125133&status=done&style=none&taskId=u54da3c0e-270e-4cfd-9543-761143c07c4&title=&width=1263.3662889172285" alt="image.png"></p>
<ul>
<li>行高的严格定义是：<strong>两行文字基线（baseline）之间的间距</strong></li>
<li>基线（baseline）：**与小写字母x最底部对齐的线 **</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682400637502-e4cbec30-25b5-4f0d-883b-b52d3e22aca2.png#averageHue=%23cecbca&clientId=u45feaea1-65b4-4&from=paste&height=327&id=u81045b92&originHeight=413&originWidth=1440&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=147686&status=done&style=none&taskId=u93d2c34f-2dca-46e9-bcdd-e0bf9da169f&title=&width=1140.594016326526" alt="image.png"></li>
<li><strong>注意区分height和line-height的区别</strong><ul>
<li>height：元素的整体高度</li>
<li>line-height：元素中每一行文字所占据的高度</li>
</ul>
</li>
<li>应用实例：假设div中只有一行文字，如何让这行文字在div内部垂直居中<ul>
<li>让line-height等同于height</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682400695803-2a2d4d53-f37d-4118-a2b8-197532d0b2dd.png#averageHue=%23010202&clientId=u45feaea1-65b4-4&from=paste&height=192&id=u44a7c4f6&originHeight=243&originWidth=1094&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=30971&status=done&style=none&taskId=ub7361a66-a73f-4144-8876-c1f203ec6d5&title=&width=866.5346207369579" alt="image.png"></li>
</ul>
</li>
</ul>
<h2 id="font"><a href="#font" class="headerlink" title="font"></a>font</h2><ul>
<li><strong>font是一个缩写属性</strong><ul>
<li>font 属性可以用来作为 font-style, font-variant, font-weight, font-size, line-height 和 font-family 属性的简写;</li>
<li><strong>font-style font-variant font-weight font-size&#x2F;line-height font-family</strong></li>
</ul>
</li>
<li>规则:<ul>
<li>font-style、font-variant、font-weight可以随意调换顺序，也可以省略</li>
<li>&#x2F;line-height可以省略，如果不省略，必须跟在font-size后面</li>
<li>font-size、font-family不可以调换顺序，不可以省略</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS属性-文本</title>
    <url>/2024/05/19/CSS%E5%B1%9E%E6%80%A7-%E6%96%87%E6%9C%AC/</url>
    <content><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="CSS属性-–-text-decoration-常用"><a href="#CSS属性-–-text-decoration-常用" class="headerlink" title="CSS属性 – text-decoration(常用)"></a>CSS属性 – text-decoration(常用)</h2><ul>
<li>** text-decoration用S于设置文字的装饰线**<ul>
<li>decoration是装饰&#x2F;装饰品的意思;</li>
</ul>
</li>
<li>text-decoration有如下常见取值:<ul>
<li>none：无任何装饰线<ul>
<li>✓ 可以去除a元素默认的下划线</li>
</ul>
</li>
<li>underline：下划线</li>
<li>overline：上划线</li>
<li>line-through：中划线（删除线）</li>
</ul>
</li>
<li>a元素有下划线的本质是被添加了text-decoration属性</li>
</ul>
<h2 id="text-transform-一般"><a href="#text-transform-一般" class="headerlink" title="text-transform(一般)"></a>text-transform(一般)</h2><ul>
<li><strong>text-transform用于设置文字的大小写转换</strong><ul>
<li>Transform单词是使变形&#x2F;变换(形变);</li>
</ul>
</li>
<li>text-transform有几个常见的值:<ul>
<li>capitalize：(使…首字母大写, 资本化的意思)将每个单词的首字符变为大写</li>
<li>uppercase：(大写字母)将每个单词的所有字符变为大写</li>
<li>lowercase：(小写字母)将每个单词的所有字符变为小写</li>
<li>none：没有任何影响</li>
</ul>
</li>
<li>实际开发中用JavaScript代码转化的更多</li>
</ul>
<h2 id="text-indent-一般"><a href="#text-indent-一般" class="headerlink" title="text-indent(一般)"></a>text-indent(一般)</h2><ul>
<li>text-indent用于设置第一行内容的缩进</li>
<li>text-indent: 2em; 刚好是缩进2个文字</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682398975858-87e0be6b-c8b2-4fd9-bb1b-c3893b5a1d5f.png#averageHue=%23ff9897&clientId=ufc23b97f-28aa-4&from=paste&height=167&id=u3ba4251c&originHeight=211&originWidth=708&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=67272&status=done&style=none&taskId=ue2e1aac1-cbf0-4728-ae45-964711adc68&title=&width=560.7920580272086" alt="image.png"></p>
<h2 id="text-align-重要"><a href="#text-align-重要" class="headerlink" title="text-align(重要)"></a>text-align(重要)</h2><ul>
<li>text-align: 直接翻译过来设置文本的对齐方式;</li>
<li>MDN: 定义行内内容（例如文字）如何相对它的块父元素对齐;</li>
<li>常用的值<ul>
<li>left：左对齐</li>
<li>right：右对齐</li>
<li>center：正中间显示</li>
<li>justify：两端对齐</li>
</ul>
</li>
</ul>
<h2 id="letter-spacing、word-spacing-一般）"><a href="#letter-spacing、word-spacing-一般）" class="headerlink" title="letter-spacing、word-spacing(一般）"></a>letter-spacing、word-spacing(一般）</h2><ul>
<li>letter-spacing、word-spacing分别用于设置字母、单词之间的间距<ul>
<li>默认是0，可以设置为负数</li>
</ul>
</li>
</ul>
<hr>
<h1 id="-1"><a href="#-1" class="headerlink" title=""></a></h1>]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS继承、层叠、元素类型</title>
    <url>/2024/05/29/CSS%E7%BB%A7%E6%89%BF%E3%80%81%E5%B1%82%E5%8F%A0%E3%80%81%E5%85%83%E7%B4%A0%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="CSS的属性继承"><a href="#CSS的属性继承" class="headerlink" title="CSS的属性继承"></a>CSS的属性继承</h2><ul>
<li>CSS的某些属性具有继承性(Inherited):<ul>
<li>如果一个属性具备继承性, 那么在该元素上设置后, 它的后代元素都可以继承这个属性;</li>
<li>当然, 如果后代元素自己有设置该属性, 那么优先使用后代元素自己的属性(不管继承过来的属性权重多高);</li>
</ul>
</li>
<li>如何知道一个属性是否具有继承性呢?<ul>
<li>常见的font-size&#x2F;font-family&#x2F;font-weight&#x2F;line-height&#x2F;color&#x2F;text-align都具有继承性;</li>
<li>这些不用刻意去记, 用的多自然就记住了;</li>
</ul>
</li>
<li>另外要多学会查阅文档, 文档中每个属性都有标明其继承性的:</li>
</ul>
<h2 id="CSS属性的层叠"><a href="#CSS属性的层叠" class="headerlink" title="CSS属性的层叠"></a>CSS属性的层叠</h2><ul>
<li>CSS的翻译是层叠样式表, 什么是层叠呢?<ul>
<li>对于一个元素来说, 相同一个属性我们可以通过不同的选择器给它进行多次设置;</li>
<li>那么属性会被一层层覆盖上去;</li>
<li>但是最终只有一个会生效;</li>
</ul>
</li>
<li>那么多个样式属性覆盖上去, 哪一个会生效呢?<ul>
<li>判断一: 选择器的权重, 权重大的生效, 根据权重可以判断出优先级;</li>
<li>判断二: 先后顺序, 权重相同时, 后面设置的生效;</li>
</ul>
</li>
<li>那么如何知道元素的权重呢?</li>
</ul>
<h2 id="选择器的权重"><a href="#选择器的权重" class="headerlink" title="选择器的权重"></a>选择器的权重</h2><ul>
<li>按照经验，为了方便比较CSS属性的优先级，可以给CSS属性所处的环境定义一个权值（权重）<ul>
<li>!important：10000</li>
<li>内联样式：1000</li>
<li>id选择器：100</li>
<li>类选择器、属性选择器、伪类：10</li>
<li>元素选择器、伪元素：1</li>
<li>通配符：0</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682403960520-8aa966ea-e15c-4078-aec1-4aaedf9d8ac4.png#averageHue=%23f8f8f9&clientId=u25111e73-7d6f-4&from=paste&height=250&id=u5fb46b90&originHeight=316&originWidth=1111&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=51944&status=done&style=none&taskId=u942abdb8-c3df-476e-93f5-5b845ccf9dd&title=&width=879.999966763035" alt="image.png"></li>
</ul>
<h2 id="HTML元素的类型"><a href="#HTML元素的类型" class="headerlink" title="HTML元素的类型"></a>HTML元素的类型</h2><ul>
<li>在前面我们会经常提到div是块级元素会独占一行, span是行内级元素会在同一行显示.<ul>
<li>到底什么是块级元素, 什么是行内级元素呢?</li>
</ul>
</li>
<li>HTML定义元素类型的思路:<ul>
<li>HTML元素有很多, 比如h元素&#x2F;p元素&#x2F;div元素&#x2F;span元素&#x2F;img元素&#x2F;a元素等等;</li>
<li>当我们把这个元素放到页面上时, 这个元素到底占据页面中一行多大的空间呢?<ul>
<li>✓ 为什么我们这里只说一行呢? 因为垂直方向的高度通常是内容决定的;</li>
</ul>
</li>
<li>比如一个h1元素的标题, 我们必然是希望它独占一行的, 其他的内容不应该和我的标题放在一起;</li>
<li>比如一个p元素的段落, 必然也应该独占一行, 其他的内容不应该和我的段落放在一起;</li>
<li>而类似于img&#x2F;span&#x2F;a元素, 通常是对内容的某一个细节的特殊描述, 没有必要独占一行;</li>
</ul>
</li>
<li>所以, 为了区分哪些元素需要独占一行, 哪些元素不需要独占一行, HTML将元素区分(本质是通过CSS的)成了两类:<ul>
<li>块级元素（block-level elements）: 独占父元素的一行</li>
<li>行内级元素（inline-level elements）:多个行内级元素可以在父元素的同一行中显示</li>
</ul>
</li>
</ul>
<h2 id="通过CSS修改元素类型"><a href="#通过CSS修改元素类型" class="headerlink" title="通过CSS修改元素类型"></a>通过CSS修改元素类型</h2><ul>
<li>前面我们说过, <strong>事实上元素没有本质的区别</strong>:<ul>
<li>div是块级元素, span是行内级元素;</li>
<li>div之所以是块级元素仅仅是因为浏览器默认设置了display属性而已;</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682404330287-d5d2ab09-f25e-47e3-99f3-c810cf276d6c.png#averageHue=%23fdfdfc&clientId=u25111e73-7d6f-4&from=paste&height=160&id=u23fac739&originHeight=202&originWidth=1109&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=29968&status=done&style=none&taskId=uce30666d-080c-4086-a28f-905fa8c4175&title=&width=878.4158084070259" alt="image.png"></li>
</ul>
</li>
<li>那么我们是否可以通过display来改变元素的特性呢?</li>
<li>当然可以!</li>
</ul>
<h2 id="CSS属性-display"><a href="#CSS属性-display" class="headerlink" title="CSS属性 - display"></a>CSS属性 - display</h2><ul>
<li>CSS中有个display属性，能修改元素的显示类型，有4个常用值</li>
<li>block：让元素显示为块级元素</li>
<li>inline：让元素显示为行内级元素</li>
<li>inline-block：让元素同时具备行内级、块级元素的特征</li>
<li>none：隐藏元素</li>
<li>事实上display还有其他的值, 比如flex, 后续会专门学习;</li>
</ul>
<h2 id="display值的特性-非常重要"><a href="#display值的特性-非常重要" class="headerlink" title="display值的特性(非常重要)"></a>display值的特性(非常重要)</h2><ul>
<li>block元素:<ul>
<li>独占父元素的一行</li>
<li>可以随意设置宽高</li>
<li>高度默认由内容决定</li>
</ul>
</li>
<li>inline-block元素:<ul>
<li>跟其他行内级元素在同一行显示</li>
<li>可以随意设置宽高</li>
<li>可以这样理解<ul>
<li>✓ 对外来说，它是一个行内级元素</li>
<li>✓ 对内来说，它是一个块级元素</li>
</ul>
</li>
</ul>
</li>
<li>inline:<ul>
<li>跟其他行内级元素在同一行显示;</li>
<li>不可以随意设置宽高;</li>
<li>宽高都由内容决定;</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682404494633-613db223-8fc3-40da-88a7-7f5fce6ee458.png#averageHue=%2351acdf&clientId=u25111e73-7d6f-4&from=paste&height=410&id=u64d92dd1&originHeight=518&originWidth=1000&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=87425&status=done&style=none&taskId=u77d623d5-742d-493d-aeb9-b35ffdf0305&title=&width=792.079178004532" alt="image.png"></li>
</ul>
<h2 id="元素隐藏方法"><a href="#元素隐藏方法" class="headerlink" title="元素隐藏方法"></a>元素隐藏方法</h2><ul>
<li><strong>方法一: display设置为none</strong><ul>
<li>元素不显示出来, 并且也不占据位置, 不占据任何空间(和不存在一样);</li>
</ul>
</li>
<li>**方法二: visibility设置为hidden **<ul>
<li>设置为hidden, 虽然元素不可见, 但是会占据元素应该占据的空间;</li>
<li>默认为visible, 元素是可见的;</li>
</ul>
</li>
<li><strong>方法三: rgba设置颜色, 将a的值设置为0</strong><ul>
<li>rgba的a设置的是alpha值, 可以设置透明度, 不影响子元素;</li>
</ul>
</li>
<li>**方法四: opacity设置透明度, 设置为0 **<ul>
<li>设置整个元素的透明度, 会影响所有的子元素;</li>
</ul>
</li>
</ul>
<h2 id="CSS属性-overflow"><a href="#CSS属性-overflow" class="headerlink" title="CSS属性 - overflow"></a>CSS属性 - overflow</h2><ul>
<li><strong>overflow用于控制内容溢出时的行为</strong></li>
<li>visible：溢出的内容照样可见</li>
<li>hidden：溢出的内容直接裁剪</li>
<li>scroll：溢出的内容被裁剪，但可以通过滚动机制查看<ul>
<li>会一直显示滚动条区域，滚动条区域占用的空间属于width、height</li>
</ul>
</li>
<li>auto：自动根据内容是否溢出来决定是否提供滚动机制</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS设置背景</title>
    <url>/2024/06/15/CSS%E8%AE%BE%E7%BD%AE%E8%83%8C%E6%99%AF/</url>
    <content><![CDATA[<h2 id="background-image"><a href="#background-image" class="headerlink" title="background-image"></a>background-image</h2><ul>
<li>background-image用于设置元素的背景图片<ul>
<li>会盖在(不是覆盖)background-color的上面</li>
</ul>
</li>
<li>如果设置了多张图片<ul>
<li>设置的第一张图片将显示在最上面，其他图片按顺序层叠在下面</li>
</ul>
</li>
<li>注意：如果设置了背景图片后，元素没有具体的宽高，背景图片是不会显示出来的</li>
</ul>
<h2 id="background-repeat"><a href="#background-repeat" class="headerlink" title="background-repeat"></a>background-repeat</h2><ul>
<li>background-repeat用于设置背景图片是否要平铺</li>
<li>常见的设值有<ul>
<li>repeat：平铺</li>
<li>no-repeat：不平铺</li>
<li>repeat-x：只在水平方向平铺</li>
<li>repeat-y：只在垂直平方向平铺</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682413531403-c14446a3-3041-4af6-a94c-548b18bd7a05.png#averageHue=%23f2eae1&clientId=u26e2db9b-6752-4&from=paste&height=290&id=u0aeef72f&originHeight=366&originWidth=661&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=12477&status=done&style=none&taskId=u541ac089-57b3-4545-bb8d-0d0b2feda4b&title=&width=523.5643366609957" alt="image.png"></li>
</ul>
</li>
</ul>
<h2 id="background-size"><a href="#background-size" class="headerlink" title="background-size"></a>background-size</h2><ul>
<li><strong>background-size用于设置背景图片的大小</strong><ul>
<li>auto：默认值, 以背景图本身大小显示</li>
<li>cover：缩放背景图，以完全覆盖铺满元素,可能背景图片部分看不见</li>
<li>contain：缩放背景图，宽度或者高度铺满元素，但是图片保持宽高比</li>
<li><percentage>：百分比，相对于背景区（background positioning area）</li>
<li>length：具体的大小，比如100px</li>
</ul>
</li>
</ul>
<h2 id="background-position"><a href="#background-position" class="headerlink" title="background-position"></a>background-position</h2><ul>
<li><strong>background-position用于设置背景图片在水平、垂直方向上的具体位置</strong><ul>
<li>可以设置具体的数值 比如 20px 30px;</li>
<li>水平方向还可以设值：left、center、right</li>
<li>垂直方向还可以设值：top、center、bottom</li>
<li>如果只设置了1个方向，另一个方向默认是center</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682413757509-3639428b-66ff-4230-8b01-2ada524f955d.png#averageHue=%23f4e7e7&clientId=u26e2db9b-6752-4&from=paste&height=356&id=u15e219c8&originHeight=449&originWidth=1515&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=55327&status=done&style=none&taskId=u81229cb2-2661-454d-aa24-0f741ce6e18&title=&width=1199.9999546768659" alt="image.png"></li>
</ul>
</li>
</ul>
<h2 id="background-attachment"><a href="#background-attachment" class="headerlink" title="background-attachment"></a>background-attachment</h2><ul>
<li>background-attachment决定背景图像的位置是在视口内固定，或者随着包含它的区块滚动。</li>
<li>可以设置以下3个值<ul>
<li>scroll：此关键属性值表示背景相对于元素本身固定， 而不是随着它的内容滚动</li>
<li>local：此关键属性值表示背景相对于元素的内容固定。如果一个元素拥有滚动机制，背景将会随着元素的内容滚动.</li>
<li>fixed：此关键属性值表示背景相对于视口固定。即使一个元素拥有滚动机制，背景也不会随着元素的内容滚动。</li>
</ul>
</li>
</ul>
<h2 id="background-image和img对比"><a href="#background-image和img对比" class="headerlink" title="background-image和img对比"></a>background-image和img对比</h2><ul>
<li>利用background-image和img都能够实现显示图片的需求，在开发中该如何选择？</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682413979877-cecd6988-2e1b-48e7-b842-0561a0d010f0.png#averageHue=%23f1e7d9&clientId=u26e2db9b-6752-4&from=paste&height=257&id=ua29912a5&originHeight=324&originWidth=1256&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=66184&status=done&style=none&taskId=u34875616-b64b-4839-959a-ebd549d663b&title=&width=994.8514475736921" alt="image.png"></li>
<li>总结<ul>
<li>img，作为网页内容的重要组成部分，比如广告图片、LOGO图片、文章配图、产品图片</li>
<li>background-image，可有可无。有，能让网页更加美观。无，也不影响用户获取完整的网页内容信息</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS选择器</title>
    <url>/2024/05/28/CSS%E9%80%89%E6%8B%A9%E5%99%A8/</url>
    <content><![CDATA[<h2 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h2><ul>
<li>通用选择器（universal selector）<ul>
<li>所有的元素都会被选中;</li>
</ul>
</li>
<li>一般用来给所有元素作一些通用性的设置<ul>
<li>比如内边距、外边距;</li>
<li>比如重置一些内容;</li>
</ul>
</li>
<li>效率比较低，尽量不要使用;</li>
</ul>
<h2 id="简单选择器"><a href="#简单选择器" class="headerlink" title="简单选择器"></a>简单选择器</h2><ul>
<li>简单选择器是开发中用的最多的选择器:<ul>
<li>元素选择器（type selectors）, 使用元素的名称;</li>
<li>类选择器（class selectors）, 使用 .类名 ;</li>
<li>id选择器（id selectors）, 使用 #id;</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682401160149-180fac70-badf-4f92-a310-9ee0dcec0b8d.png#averageHue=%23f4f2f4&clientId=u7cf1cd92-1377-4&from=paste&height=230&id=u29b82c16&originHeight=290&originWidth=823&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=35317&status=done&style=none&taskId=u2c3847da-53f2-46fa-af58-7b4cfa49d4e&title=&width=651.8811634977297" alt="image.png"></li>
</ul>
</li>
</ul>
<p>** id注意事项 **</p>
<ul>
<li>一个HTML文档里面的id值<strong>是唯一的，不能重复</strong><ul>
<li>id值如果由多个单词组成，单词之间可以用中划线-、下划线_连接，也可以使用驼峰标识</li>
<li>最好<strong>不要用标签名作为id值</strong></li>
</ul>
</li>
<li>中划线又叫连字符（hyphen）</li>
</ul>
<h2 id="属性选择器-attribute-selectors"><a href="#属性选择器-attribute-selectors" class="headerlink" title="属性选择器(attribute selectors)"></a>属性选择器(attribute selectors)</h2><ul>
<li>拥有某一个属性 [att]</li>
<li>属性等于某个值 [att&#x3D;val]</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682401328970-7956ccc5-764e-434a-b186-88d336916167.png#averageHue=%23769363&clientId=u7cf1cd92-1377-4&from=paste&height=120&id=ue0f86b20&originHeight=152&originWidth=799&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=22753&status=done&style=none&taskId=ua5e160a6-d378-4508-8c9a-3f1fe04212a&title=&width=632.871263225621" alt="image.png"></p>
<ul>
<li><p>其他了解的(不用记)</p>
<ul>
<li></li>
<li></li>
<li></li>
<li></li>
<li><p>[attr~&#x3D;val]: 属性值包含val, 如果有其他值必须以空格和val分割;</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-attr">[title]</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-attr">[title=box]</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">&quot;box&quot;</span>&gt;</span>div元素1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">&quot;box&quot;</span>&gt;</span>div元素2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">&quot;&quot;</span>&gt;</span>div元素3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="后代选择器（descendant-combinator）"><a href="#后代选择器（descendant-combinator）" class="headerlink" title="后代选择器（descendant combinator）"></a>后代选择器（descendant combinator）</h2><ul>
<li><strong>后代选择器一: 所有的后代(直接&#x2F;间接的后代)</strong><ul>
<li>选择器之间以空格分割</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682401468395-b4149d43-3fb9-406d-9ddd-10881e52142b.png#averageHue=%238ba276&clientId=u7cf1cd92-1377-4&from=paste&height=248&id=ud6f2facd&originHeight=313&originWidth=1015&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=62725&status=done&style=none&taskId=u7a4c6502-55ea-4c7f-bed1-95b43de3edc&title=&width=803.9603656745999" alt="image.png"></li>
</ul>
</li>
<li><strong>后代选择器二: 直接子代选择器(必须是直接自带)</strong><ul>
<li>选择器之间以 &gt; 分割;</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682401492426-e80d8b71-ac6e-44e3-94f5-59937a7d6d9d.png#averageHue=%23b99779&clientId=u7cf1cd92-1377-4&from=paste&height=118&id=u59810e8f&originHeight=149&originWidth=843&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=20192&status=done&style=none&taskId=u663908a4-e26d-4e73-90c0-dbb0db467e7&title=&width=667.7227470578205" alt="image.png"></li>
</ul>
</li>
</ul>
<h2 id="兄弟选择器-sibling-combinator"><a href="#兄弟选择器-sibling-combinator" class="headerlink" title="兄弟选择器(sibling combinator)"></a>兄弟选择器(sibling combinator)</h2><ul>
<li><strong>兄弟选择器一:相邻兄弟选择器</strong><ul>
<li>使用符号 + 连接</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682401586914-53c3a0b1-24cb-4fff-94ce-6b1fb66d7386.png#averageHue=%23a4b292&clientId=u7cf1cd92-1377-4&from=paste&height=163&id=ubd88d7f0&originHeight=206&originWidth=1053&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=66817&status=done&style=none&taskId=u3d483234-2730-4599-968d-77e2c212c35&title=&width=834.0593744387721" alt="image.png"></li>
</ul>
</li>
<li>兄弟选择器二: 普遍兄弟选择器 ~<ul>
<li>使用符号 ~ 连接</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682401592851-29a88ba3-2ab5-4627-b389-4a36c96bb122.png#averageHue=%23d4a286&clientId=u7cf1cd92-1377-4&from=paste&height=150&id=u5bce7459&originHeight=189&originWidth=723&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=24094&status=done&style=none&taskId=uac3fbb96-145c-4b88-b1f1-f5ef03e9d11&title=&width=572.6732456972766" alt="image.png"></li>
</ul>
</li>
</ul>
<h2 id="选择器组-–-交集选择器"><a href="#选择器组-–-交集选择器" class="headerlink" title="选择器组 – 交集选择器"></a>选择器组 – 交集选择器</h2><ul>
<li><strong>交集选择器: 需要同时符合两个选择器条件(两个选择器紧密连接)</strong><ul>
<li>在开发中通常为了精准的选择某一个元素;</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682401677948-c991cde1-cddd-4d31-b9c7-cadda4805c20.png#averageHue=%23a49774&clientId=u7cf1cd92-1377-4&from=paste&height=169&id=uacf6b9dc&originHeight=213&originWidth=1326&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=78163&status=done&style=none&taskId=ubc7f0233-2164-429a-842b-8c003eec1b6&title=&width=1050.2969900340092" alt="image.png"></li>
</ul>
</li>
<li><strong>并集选择器: 符合一个选择器条件即可(两个选择器以,号分割)</strong><ul>
<li>在开发中通常为了给多个元素设置相同的样式;</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682401701741-9bcd5faf-1f70-4965-8ad4-87da8622f3e4.png#averageHue=%2398a88a&clientId=u7cf1cd92-1377-4&from=paste&height=170&id=u410d4060&originHeight=214&originWidth=1393&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=76525&status=done&style=none&taskId=ud78e9cfd-6b16-4324-8217-2d94e431bec&title=&width=1103.366294960313" alt="image.png"></li>
</ul>
</li>
</ul>
<h2 id="认识伪类"><a href="#认识伪类" class="headerlink" title="认识伪类"></a>认识伪类</h2><ul>
<li>什么是伪类呢?<ul>
<li>Pseudo-classes: 翻译过来是伪类;</li>
<li>伪类是选择器的一种，它用于选择处于特定状态的元素;</li>
</ul>
</li>
<li>比如我们经常会实现的: 当手指放在一个元素上时, 显示另外一个颜色;<ul>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682401746452-27fb1289-6d73-4c92-92c5-d2d638431c81.png#averageHue=%23fefcfc&clientId=u7cf1cd92-1377-4&from=paste&height=135&id=u8e6b699d&originHeight=171&originWidth=858&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=16639&status=done&style=none&taskId=uc3d6c864-53e8-440d-9221-823c62f4e79&title=&width=679.6039347278884" alt="image.png"></li>
</ul>
</li>
</ul>
<h2 id="伪类-pseudo-classes"><a href="#伪类-pseudo-classes" class="headerlink" title="伪类(pseudo-classes)"></a>伪类(pseudo-classes)</h2><ul>
<li>常见的伪类有</li>
<li>1.动态伪类（dynamic pseudo-classes）<ul>
<li>:link、:visited、:hover、:active、:focus</li>
</ul>
</li>
<li>2.目标伪类（target pseudo-classes）<ul>
<li>:target</li>
</ul>
</li>
<li>3.语言伪类（language pseudo-classes）<ul>
<li>:lang( )</li>
</ul>
</li>
<li>4.元素状态伪类（UI element states pseudo-classes）<ul>
<li>:enabled、:disabled、:checked</li>
</ul>
</li>
<li>5.结构伪类（structural pseudo-classes）(后续学习)<ul>
<li>:nth-child( )、:nth-last-child( )、:nth-of-type( )、:nth-lastof-type( )</li>
<li>:first-child、:last-child、:first-of-type、:last-of-type</li>
<li>:root、:only-child、:only-of-type、:empty</li>
</ul>
</li>
<li>6.否定伪类（negation pseudo-classes）(后续学习)</li>
<li>:not()</li>
</ul>
<h2 id="动态伪类（dynamic-pseudo-classes"><a href="#动态伪类（dynamic-pseudo-classes" class="headerlink" title="动态伪类（dynamic pseudo-classes)"></a>动态伪类（dynamic pseudo-classes)</h2><ul>
<li>使用举例<ul>
<li>a:link 未访问的链接</li>
<li>a:visited 已访问的链接</li>
<li>a:hover 鼠标挪动到链接上(重要)</li>
<li>a:active 激活的链接（鼠标在链接上长按住未松开）</li>
</ul>
</li>
<li>使用注意<ul>
<li>:hover必须放在:link和:visited后面才能完全生效</li>
<li>:active必须放在:hover后面才能完全生效</li>
<li>所以建议的编写顺序是 :link、:visited、:hover、:active</li>
</ul>
</li>
<li>除了a元素，:hover、:active也能用在其他元素上</li>
</ul>
<h2 id="动态伪类-focus"><a href="#动态伪类-focus" class="headerlink" title="动态伪类 - :focus"></a>动态伪类 - :focus</h2><ul>
<li>:focus指当前<strong>拥有输入焦点的元素</strong>（能接收键盘输入）<ul>
<li>文本输入框一聚焦后，背景就会变红色</li>
</ul>
</li>
<li>因为链接a元素可以<strong>被键盘的Tab键选中聚焦，所以:focus也适用于a元素</strong></li>
<li><strong>动态伪类编写顺序建议</strong>为<ul>
<li>:link、:visited、:focus、:hover、:active</li>
</ul>
</li>
<li>直接给a元素设置样式，相当于给a元素的所有动态伪类都设置了<ul>
<li>相当于a:link、a:visited、a:hover、a:active、a:focus的color都是red</li>
</ul>
</li>
</ul>
<p><strong>目标伪类的使用：</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-pseudo">:target</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#theme01&quot;</span>&gt;</span>主题01<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#theme02&quot;</span>&gt;</span>主题02<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#theme03&quot;</span>&gt;</span>主题03<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;theme01&quot;</span>&gt;</span>主题01<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;theme02&quot;</span>&gt;</span>主题02<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;theme03&quot;</span>&gt;</span>主题03<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682402609830-03afef57-9ca9-4666-9452-2d7ee9fad352.png#averageHue=%23fcfafa&clientId=u7cf1cd92-1377-4&from=paste&height=199&id=ue656d8bc&originHeight=251&originWidth=695&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=10362&status=done&style=none&taskId=u9fe4a766-1d17-4515-9936-e71942a49b5&title=&width=550.4950287131497" alt="image.png"></p>
<h2 id="伪元素（pseudo-elements）"><a href="#伪元素（pseudo-elements）" class="headerlink" title="伪元素（pseudo-elements）"></a>伪元素（pseudo-elements）</h2><ul>
<li>常用的伪元素有<ul>
<li>:first-line、::first-line</li>
<li>:first-letter、::first-letter</li>
<li>:before、::before</li>
<li>:after、::after</li>
</ul>
</li>
<li>为了区分伪元素和伪类，建议伪元素使用2个冒号，比如::first-line</li>
</ul>
<h2 id="伪元素-first-line-first-letter-了解"><a href="#伪元素-first-line-first-letter-了解" class="headerlink" title="伪元素 - ::first-line - ::first-letter(了解)"></a>伪元素 - ::first-line - ::first-letter(了解)</h2><ul>
<li>::first-line可以针对首行文本设置属性</li>
<li>::first-letter可以针对首字母设置属性</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682402690267-f28a61db-9116-4573-a07b-acc6528de8c3.png#averageHue=%23d0a03c&clientId=u7cf1cd92-1377-4&from=paste&height=383&id=u56260f49&originHeight=484&originWidth=1334&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=84645&status=done&style=none&taskId=uc515759a-d4d1-455e-8b40-cf43c4356d6&title=&width=1056.6336234580456" alt="image.png"></li>
</ul>
<h2 id="伪元素-before和-after-常用"><a href="#伪元素-before和-after-常用" class="headerlink" title="伪元素 - ::before和::after(常用 )"></a>伪元素 - ::before和::after(常用 )</h2><ul>
<li>::before和::after用来在一个元素的内容之前或之后插入其他内容（可以是文字、图片)</li>
<li>常通过 content 属性来为一个元素添加修饰性的内容。</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682402807867-cccfe9e2-9b5d-4438-a0d6-f270d2e9f561.png#averageHue=%239e7f5f&clientId=u7cf1cd92-1377-4&from=paste&height=295&id=u52d508b1&originHeight=373&originWidth=1277&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=54834&status=done&style=none&taskId=u17f86142-a67d-4684-a594-e1d1567803b&title=&width=1011.4851103117873" alt="image.png"></li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS阶段练习</title>
    <url>/2024/06/26/CSS%E9%98%B6%E6%AE%B5%E7%BB%83%E4%B9%A0/</url>
    <content><![CDATA[<h2 id="小米布局（浮动）"><a href="#小米布局（浮动）" class="headerlink" title="小米布局（浮动）"></a>小米布局（浮动）</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682472056727-87b581d4-b8eb-4718-bd16-51df5610819c.png#averageHue=%23fe3434&clientId=u5fc8930c-9ae6-4&from=paste&height=315&id=uf70e9669&originHeight=876&originWidth=1606&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=15487&status=done&style=none&taskId=u53e02b07-c9ee-4a8d-b107-de3b0cec2da&title=&width=577.4108276367188" alt="image.png"><br>common.css:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.mi_wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1226px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.kl_wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clear_fix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line"></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">visibility</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clear_fix</span> &#123;</span><br><span class="line">  *zoom: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>reset.css:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span>, <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/reset.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css//common.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.dress</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.dress</span> <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">58px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">58px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.dress</span> <span class="selector-class">.header</span> <span class="selector-class">.left_area</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.dress</span> <span class="selector-class">.header</span> <span class="selector-class">.right_area</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">float</span>: right;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.dress</span> <span class="selector-class">.header</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.dress</span> <span class="selector-class">.header</span> <span class="selector-class">.right_area</span> <span class="selector-class">.item</span><span class="selector-pseudo">:hover</span>,</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.dress</span> <span class="selector-class">.header</span> <span class="selector-class">.right_area</span> <span class="selector-class">.item</span><span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">3px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-bottom</span>: <span class="number">2px</span> solid red;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.dress</span> <span class="selector-class">.list</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-right</span>: -<span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.dress</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">float</span>: left;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">234px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-right</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-bottom</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#f00</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease-in;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.dress</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span><span class="selector-class">.item1</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">614px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.dress</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span><span class="selector-class">.item9</span>,</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.dress</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span><span class="selector-class">.item10</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">143px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.dress</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">15px</span> <span class="number">30px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.5</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-<span class="number">2px</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.dress</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;mi_wrapper dress&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header clear_fix&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left_area&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>智能穿戴<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right_area&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item active hot&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>热门<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item info&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>穿戴<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item item1&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item item2&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item item3&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item item4&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item item5&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item item6&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item item7&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item item8&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item item9&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>9<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item item10&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>10<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="网易云布局-flex"><a href="#网易云布局-flex" class="headerlink" title="网易云布局(flex)"></a>网易云布局(flex)</h2><h3 id="导航栏"><a href="#导航栏" class="headerlink" title="导航栏"></a>导航栏</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682490016359-348405f1-f9cc-4987-b379-957460e2415e.png#averageHue=%236a3131&clientId=u4a497ae1-3640-4&from=paste&height=112&id=ue0aef754&originHeight=141&originWidth=1839&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=26184&status=done&style=none&taskId=u4e1da6d7-d4a4-4a0d-8fba-aeaf989fbe7&title=&width=1456.6336083503343" alt="image.png"><br>common.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">font</span>: <span class="number">12px</span> Arial, Helvetica, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper_01</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">1100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.topbar_sprite</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">../images/topbar_sprite.png</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.topbar_icon_hot</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">28px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">19px</span>;</span><br><span class="line">  <span class="attribute">background-position</span>: -<span class="number">190px</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>reset.css</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">body</span>, <span class="selector-tag">h1</span>, <span class="selector-tag">h2</span>, <span class="selector-tag">h3</span>, <span class="selector-tag">ul</span>, <span class="selector-tag">li</span>, <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">text-decoration</span>: none;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">ul</span>, <span class="selector-tag">li</span> &#123;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span> &#123;</span><br><span class="line">  <span class="attribute">outline</span>: none;</span><br><span class="line">  <span class="attribute">border</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: top;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>html</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/reset.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/common.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.top</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#242424</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.topbar</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">69px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">69px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.topbar</span> <span class="selector-class">.bar-left</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.topbar</span> <span class="selector-class">.bar-left</span> <span class="selector-class">.logo</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">./images/topbar_sprite.png</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.top</span> <span class="selector-class">.topbar</span> <span class="selector-class">.logo</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">157px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-right</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-indent</span>: -<span class="number">9999px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.topbar</span> <span class="selector-class">.bar-left</span> <span class="selector-class">.list</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.topbar</span> <span class="selector-class">.bar-left</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.topbar</span> <span class="selector-class">.bar-left</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span><span class="selector-pseudo">:hover</span>,</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.topbar</span> <span class="selector-class">.bar-left</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span><span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.topbar</span> <span class="selector-class">.bar-left</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span><span class="selector-class">.active</span><span class="selector-pseudo">::after</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">content</span>: <span class="string">&quot;&quot;</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">7px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">bottom</span>: -<span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./images/topbar_sprite.png</span>) -<span class="number">226px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.topbar</span> <span class="selector-class">.bar-left</span> <span class="selector-class">.item</span> <span class="selector-class">.icon-hot</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">28px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">19px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">right</span>: -<span class="number">18px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./images/topbar_sprite.png</span>) -<span class="number">190px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.topbar</span> <span class="selector-class">.bar-right</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding-right</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.topbar</span> <span class="selector-class">.bar-right</span> <span class="selector-class">.login</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#787878</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.topbar</span> <span class="selector-class">.bar-right</span> <span class="selector-class">.login</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.topbar</span> <span class="selector-class">.bar-right</span> <span class="selector-class">.login</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#787878</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-decoration</span>: underline;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.topbar</span> <span class="selector-class">.bar-right</span> <span class="selector-class">.anthor</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">90px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#4F4f4f</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.topbar</span> <span class="selector-class">.bar-right</span> <span class="selector-class">.anthor</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.topbar</span> <span class="selector-class">.bar-right</span> <span class="selector-class">.search</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: flex-end;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">158px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#fff</span> <span class="built_in">url</span>(<span class="string">./images/topbar_sprite.png</span>) <span class="number">0</span> -<span class="number">99px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.topbar</span> <span class="selector-class">.bar-right</span> <span class="selector-class">.search</span> <span class="selector-tag">input</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">118px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.nav</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#c20c0c</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#a40011</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.navbar</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding-left</span>: <span class="number">180px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.navbar</span> <span class="selector-class">.list</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.navbar</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.navbar</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">13px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">7px</span> <span class="number">17px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">21px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.navbar</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span><span class="selector-pseudo">:hover</span> <span class="selector-tag">span</span>,</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.navbar</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span><span class="selector-class">.active</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#9b0909</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;topbar wrapper_01&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar-left&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>网易云音乐<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item active&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>发现音乐<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>我的音乐<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>关注<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>商城<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>音乐人<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>下载客户端<span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon-hot&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bar-right&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;search&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;音乐/视频/电台/用户&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;anthor&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>创作者中心<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;login&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;navbar wrapper_01&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item active&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>推荐<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>排行榜<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>歌单<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>主播电台<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>歌手<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>新碟上架<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682496768141-399a65b8-9a0a-43db-9334-9420ba729566.png#averageHue=%234c79a6&clientId=u434d9ab8-422c-4&from=paste&height=325&id=uf51fd7fc&originHeight=410&originWidth=1858&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=715056&status=done&style=none&taskId=u171e5bb5-9a4e-40ee-9da9-c9a2ca97000&title=&width=1471.6831127324203" alt="image.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/reset.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/common.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.banner</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">285px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-top</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./images/banner_bg_02.jpeg</span>) center center / <span class="number">6000px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.banner</span> <span class="selector-class">.area</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">285px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.banner</span> <span class="selector-class">.area-left</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">730px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.banner</span> <span class="selector-class">.area-left</span> <span class="selector-class">.img-list</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.banner</span> <span class="selector-class">.area-left</span> <span class="selector-class">.img-list</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.banner</span> <span class="selector-class">.area-left</span> <span class="selector-class">.img-list</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.banner</span> <span class="selector-class">.area-left</span> <span class="selector-class">.img-list</span> <span class="selector-class">.item</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/*  */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.banner</span> <span class="selector-class">.area-left</span> <span class="selector-class">.dots-list</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">bottom</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.banner</span> <span class="selector-class">.area-left</span> <span class="selector-class">.dots-list</span> <span class="selector-class">.item</span> <span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.banner</span> <span class="selector-class">.area-left</span> <span class="selector-class">.dots-list</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./images/banner_sprite.png</span>) <span class="number">3px</span> -<span class="number">343px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.banner</span> <span class="selector-class">.area-left</span> <span class="selector-class">.dots-list</span> <span class="selector-class">.item</span><span class="selector-class">.active</span>,</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.banner</span> <span class="selector-class">.area-left</span> <span class="selector-class">.dots-list</span> <span class="selector-class">.item</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-position</span>: -<span class="number">16px</span> -<span class="number">343px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.banner</span> <span class="selector-class">.area-right</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">right</span>: -<span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">254px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./images/download_sprite.png</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.banner</span> <span class="selector-class">.area-right</span> <span class="selector-class">.download</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">215px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">56px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">186px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">19px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-indent</span>: -<span class="number">9999px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.banner</span> <span class="selector-class">.area-right</span> <span class="selector-class">.download</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./images/download_sprite.png</span>) <span class="number">0</span> -<span class="number">290px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.banner</span> <span class="selector-class">.area-right</span> <span class="selector-class">.desc</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-css">     */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.banner</span> <span class="selector-class">.area</span> <span class="selector-class">.control</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">37px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">63px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">./images/banner_sprite.png</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.banner</span> <span class="selector-class">.area</span> <span class="selector-class">.control</span><span class="selector-class">.left</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: -<span class="number">70px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">360px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.banner</span> <span class="selector-class">.area</span> <span class="selector-class">.control</span><span class="selector-class">.left</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">430px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.banner</span> <span class="selector-class">.area</span> <span class="selector-class">.control</span><span class="selector-class">.right</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">right</span>: -<span class="number">70px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">508px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.banner</span> <span class="selector-class">.area</span> <span class="selector-class">.control</span><span class="selector-class">.right</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">578px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;area wrapper_03&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;area-left&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;img-list&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/banner_02.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/banner_02.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/banner_02.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/banner_02.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;dots-list&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item active&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;area-right&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;download&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span>士大夫撒旦浪费多少了解房贷首付<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;control left&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;control right&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="主题布局"><a href="#主题布局" class="headerlink" title="主题布局"></a>主题布局</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682498725474-5f003c5a-0382-4844-9454-b2f99402677b.png#averageHue=%23fdfdfd&clientId=u434d9ab8-422c-4&from=paste&height=314&id=ud748391e&originHeight=397&originWidth=1364&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=10946&status=done&style=none&taskId=ua760ed3a-52c5-442f-8931-27e3d1e3bcd&title=&width=1080.3959987981816" alt="image.png"></p>
<h3 id="按钮设置"><a href="#按钮设置" class="headerlink" title="按钮设置"></a>按钮设置</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682576775873-757fe786-7667-46d5-addd-389c71777f45.png#averageHue=%23faf9f9&clientId=u99a01d6c-3b83-4&from=paste&height=86&id=u68e59281&originHeight=109&originWidth=459&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=3660&status=done&style=none&taskId=ua8db699c-2c7d-46e8-8cee-ffe4528550c&title=&width=363.56434270408016" alt="image.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/reset.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/common.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding-top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.apply</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">210px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">31px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">31px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-weight</span>: <span class="number">700</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./images/btn_sprite.png</span>) right -<span class="number">100px</span> no-repeat;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding-right</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.apply</span>&gt;<span class="selector-tag">i</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">31px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./images/btn_sprite.png</span>) <span class="number">0</span> -<span class="number">59px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding-left</span>: <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;apply&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span>&gt;</span>申请成为网易音乐人<span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="总代码"><a href="#总代码" class="headerlink" title="总代码"></a>总代码</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682757567326-9e542676-b739-4f81-b5fe-57b303de143c.png#averageHue=%23f7f6f6&clientId=uf39fce1d-4073-4&from=paste&height=717&id=uec887f97&originHeight=905&originWidth=1037&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=148678&status=done&style=none&taskId=uf0df582c-7f54-4aab-918c-7c10f66516b&title=&width=821.3861075906996" alt="image.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-Ch&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/reset.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/common.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/header1.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/area-right.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.area</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d3d3d3</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-width</span>: <span class="number">0</span> <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">./images/main_bg.png</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 左侧区域 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.area</span> <span class="selector-class">.area-left</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">729px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">20px</span> <span class="number">40px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.recommend-section</span> <span class="selector-class">.list</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex-wrap</span>: wrap;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.recommend-section</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">140px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.recommend-section</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> <span class="selector-class">.top</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.recommend-section</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> <span class="selector-class">.top</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 将图片下面的多出来的区域去除 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">vertical-align</span>: top;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* display: block; */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.recommend-section</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> <span class="selector-class">.top</span> <span class="selector-class">.cover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">./images/cover_sprite.png</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-position</span>: <span class="number">0</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.recommend-section</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> <span class="selector-class">.top</span> <span class="selector-class">.info</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">27px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">27px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">./images/cover_sprite.png</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">537px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.recommend-section</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> <span class="selector-class">.top</span> <span class="selector-class">.info</span> <span class="selector-class">.icon-music</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.recommend-section</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> <span class="selector-class">.top</span> <span class="selector-class">.info</span> <span class="selector-class">.count</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-left</span>: <span class="number">4px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.recommend-section</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> <span class="selector-class">.top</span> <span class="selector-class">.info</span> <span class="selector-class">.icon-play</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: auto <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* display: inline-block; */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* width: 16px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      height: 17px; */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* background-image: url(../images/music_sprite_02.png); */</span></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* background-position: 0 0; */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 底部的样式 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.recommend-section</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> <span class="selector-class">.bottom</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-top</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.recommend-section</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> <span class="selector-class">.bottom</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-decoration</span>: underline;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.iconall_sprite</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">./images/iconall_sprite.png</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.iconall_sprite_redio</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-position</span>: -<span class="number">31px</span> -<span class="number">658px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* 碟片 */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.disc-section</span> <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">186px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">20px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#d3d3d3</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.disc-section</span> <span class="selector-class">.content</span> <span class="selector-class">.inner</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.disc-section</span> <span class="selector-class">.inner</span> <span class="selector-class">.roller</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.disc-section</span> <span class="selector-class">.inner</span> <span class="selector-class">.roller</span> <span class="selector-class">.list</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.disc-section</span> <span class="selector-class">.roller</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">118px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./images/main_sprite.png</span>) no-repeat -<span class="number">260px</span> <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.disc-section</span> <span class="selector-class">.roller</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> <span class="selector-class">.album</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.disc-section</span> <span class="selector-class">.roller</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> <span class="selector-class">.cover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./images/cover_sprite.png</span>) no-repeat <span class="number">0</span> -<span class="number">570px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.disc-section</span> <span class="selector-class">.roller</span> <span class="selector-class">.item</span> <span class="selector-class">.album</span> <span class="selector-class">.play</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">right</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">bottom</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./images/icon_sprite.png</span>) <span class="number">0</span> -<span class="number">85px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.disc-section</span> <span class="selector-class">.roller</span> <span class="selector-class">.item</span> <span class="selector-class">.album</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.play</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.disc-section</span> <span class="selector-class">.roller</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding-right</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-overflow</span>: ellipsis;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.disc-section</span> <span class="selector-class">.roller</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-decoration</span>: underline;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.disc-section</span> <span class="selector-class">.roller</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> <span class="selector-tag">a</span><span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.disc-section</span> <span class="selector-class">.roller</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> <span class="selector-tag">a</span><span class="selector-class">.anthor</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#666</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.disc-section</span> <span class="selector-class">.inner</span> <span class="selector-class">.control</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">17px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">17px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">72px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">./images/main_sprite.png</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.disc-section</span> <span class="selector-class">.inner</span> <span class="selector-class">.control-left</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-position</span>: -<span class="number">260px</span> -<span class="number">75px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.disc-section</span> <span class="selector-class">.inner</span> <span class="selector-class">.control-right</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">right</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-position</span>: -<span class="number">320px</span> -<span class="number">75px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* rank-section */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.rank-section</span> <span class="selector-class">.content</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">472px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-top</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./images/rank_bg.png</span>) no-repeat;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.rank-section</span> <span class="selector-class">.content</span> <span class="selector-class">.rank</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">230px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.rank-section</span> <span class="selector-class">.content</span> <span class="selector-class">.rank</span> <span class="selector-class">.header</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">120px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.rank-section</span> <span class="selector-class">.header</span> <span class="selector-class">.album</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">80px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.rank-section</span> <span class="selector-class">.header</span> <span class="selector-class">.album</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.rank-section</span> <span class="selector-class">.header</span> <span class="selector-class">.album</span> <span class="selector-class">.cover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">left</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">bottom</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./images/cover_sprite.png</span>) no-repeat -<span class="number">145px</span> -<span class="number">57px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.rank-section</span> <span class="selector-class">.info</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.rank-section</span> <span class="selector-class">.info</span> <span class="selector-class">.operation</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-top</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.rank-section</span> <span class="selector-class">.header</span> <span class="selector-class">.info</span> <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">22px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./images/main_sprite.png</span>) no-repeat;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.rank-section</span> <span class="selector-class">.header</span> <span class="selector-class">.info</span> <span class="selector-class">.btn</span><span class="selector-class">.play</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-position</span>: -<span class="number">267px</span> -<span class="number">205px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.rank-section</span> <span class="selector-class">.header</span> <span class="selector-class">.info</span> <span class="selector-class">.btn</span><span class="selector-class">.play</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-position</span>: -<span class="number">267px</span> -<span class="number">235px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.rank-section</span> <span class="selector-class">.header</span> <span class="selector-class">.info</span> <span class="selector-class">.btn</span><span class="selector-class">.favor</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-position</span>: -<span class="number">300px</span> -<span class="number">205px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-left</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.rank-section</span> <span class="selector-class">.header</span> <span class="selector-class">.info</span> <span class="selector-class">.btn</span><span class="selector-class">.favor</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-position</span>: -<span class="number">300px</span> -<span class="number">235px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.rank-section</span> <span class="selector-class">.rank</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding-left</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding-right</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.rank-section</span> <span class="selector-class">.rank</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> <span class="selector-class">.no</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#666</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.rank-section</span> <span class="selector-class">.rank</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span><span class="selector-pseudo">:nth-child</span>(-n+<span class="number">3</span>) <span class="selector-class">.no</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#c10d0c</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.rank-section</span> <span class="selector-class">.rank</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> <span class="selector-class">.song</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-overflow</span>: ellipsis;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.rank-section</span> <span class="selector-class">.rank</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> <span class="selector-class">.song</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-decoration</span>: underline;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.rank-section</span> <span class="selector-class">.rank</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> <span class="selector-class">.operation</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">82px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: space-evenly;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.rank-section</span> <span class="selector-class">.rank</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.operation</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.rank-section</span> <span class="selector-class">.rank</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> <span class="selector-class">.operation</span> <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">17px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">17px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./images/main_sprite.png</span>) no-repeat;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.rank-section</span> <span class="selector-class">.rank</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> <span class="selector-class">.operation</span> <span class="selector-class">.btn</span><span class="selector-class">.play</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-position</span>: -<span class="number">267px</span> -<span class="number">268px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.rank-section</span> <span class="selector-class">.rank</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> <span class="selector-class">.operation</span> <span class="selector-class">.btn</span><span class="selector-class">.add</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./images/iconall_sprite.png</span>) no-repeat;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-position</span>: <span class="number">2px</span> -<span class="number">698px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.rank-section</span> <span class="selector-class">.rank</span> <span class="selector-class">.list</span> <span class="selector-class">.item</span> <span class="selector-class">.operation</span> <span class="selector-class">.btn</span><span class="selector-class">.favor</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-position</span>: -<span class="number">297px</span> -<span class="number">268px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.rank-section</span> <span class="selector-class">.rank</span> <span class="selector-class">.list</span> <span class="selector-class">.more</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: right;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding-right</span>: <span class="number">32px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.rank-section</span> <span class="selector-class">.rank</span> <span class="selector-class">.list</span> <span class="selector-class">.more</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-decoration</span>: underline;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;area wrapper_02&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;area-left&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;recommend-section&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header_type_02&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;head-left&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>热门推荐<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;keywords&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>华语<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>流行<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>摇滚<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>民谣<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>电子<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;head-right&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;more&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>更多<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/recommend_album_01.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;音乐封面&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;cover&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon_sprite icon_sprite_music icon-music&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;count&quot;</span>&gt;</span>62万<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon_sprite icon_sprite_play_01 icon-play&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;bottom&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;iconall_sprite iconall_sprite_radio&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">                天气好的话，把耳机分给我一半吧</span><br><span class="line">              <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;disc-section&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header_type_02&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;head-left&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>新碟上架<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;head-right&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;more&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>更多<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;inner&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;roller&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;album&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/newdisc_album_01.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;cover&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;play&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>以往知道-遗忘之岛-背弃-背起理想<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;anthor&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>十一<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;control control-left&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;control control-right&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;rank-section&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header_type_02&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;head-left&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>榜单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;head-right&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;more&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>更多<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">&quot;rank up-rank&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">dt</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;album&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/rank_up.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;飙升榜&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;cover&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>飙升榜<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;operation&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn play&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn favor&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">dd</span> <span class="attr">class</span>=<span class="string">&quot;list up-list&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;no&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;song&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>在等冬天为你在等我的雪天<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;operation&quot;</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn play&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn add&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                      <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn favor&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;more&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>查看全部 <span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">&quot;rank new-rank&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">&quot;rank origin-rank&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;area-right&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;user-login&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span>的街坊邻居阿桑的歌i人格独立哦比都不能<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>用户登录<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;settle-singer&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header_type_01&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>入驻歌手<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;more&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>查看全部 <span class="symbol">&amp;gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;album&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/singer_01.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;singer&quot;</span>&gt;</span>张惠妹AMee<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span>台湾歌手张惠妹时候覅撒旦发射点立刻但是<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;album&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/singer_01.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;singer&quot;</span>&gt;</span>张惠妹AMee<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span>台湾歌手张惠妹<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;album&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/singer_01.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;singer&quot;</span>&gt;</span>张惠妹AMee<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span>台湾歌手张惠妹<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;album&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./images/singer_01.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;info&quot;</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;singer&quot;</span>&gt;</span>张惠妹AMee<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span>台湾歌手张惠妹<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"></span><br><span class="line">          <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hot-anthor&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header_type_01&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>热门主播<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6~ES13新特性2</title>
    <url>/2024/08/30/ES6-ES13%E6%96%B0%E7%89%B9%E6%80%A72/</url>
    <content><![CDATA[<h3 id="Set的基本使用"><a href="#Set的基本使用" class="headerlink" title="Set的基本使用"></a>Set的基本使用</h3><ul>
<li><strong>Set是一个新增的数据结构，可以用来保存数据，类似于数组，但是和数组的区别是元素不能重复</strong><ul>
<li>创建Set我们需要通过Set构造函数（暂时没有字面量创建的方式）：</li>
</ul>
</li>
<li>我们可以发现Set中存放的元素是不会重复的，那么Set有一个非常常用的功能就是给数组去重。</li>
</ul>
<h3 id="Set的常见方法"><a href="#Set的常见方法" class="headerlink" title="Set的常见方法"></a>Set的常见方法</h3><ul>
<li>Set常见的属性：<ul>
<li>size：返回Set中元素的个数；</li>
</ul>
</li>
<li>Set常用的方法：<ul>
<li>add(value)：添加某个元素，返回Set对象本身；</li>
<li>delete(value)：从set中删除和这个值相等的元素，返回boolean类型；</li>
<li>has(value)：判断set中是否存在某个元素，返回boolean类型；</li>
<li>clear()：清空set中所有的元素，没有返回值；</li>
<li>forEach(callback, [, thisArg])：通过forEach遍历set；</li>
</ul>
</li>
<li>另外Set是支持for of的遍历的。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.创建Set</span></span><br><span class="line"> <span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(set)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 2.添加元素</span></span><br><span class="line"> set.<span class="title function_">add</span>(<span class="number">10</span>)</span><br><span class="line"> set.<span class="title function_">add</span>(<span class="number">22</span>)</span><br><span class="line"> set.<span class="title function_">add</span>(<span class="number">35</span>)</span><br><span class="line"> set.<span class="title function_">add</span>(<span class="number">22</span>)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(set)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> info = &#123;&#125;</span><br><span class="line"> <span class="keyword">const</span> obj = &#123;<span class="attr">name</span>: <span class="string">&quot;obj&quot;</span>&#125;</span><br><span class="line"> set.<span class="title function_">add</span>(info)</span><br><span class="line"> set.<span class="title function_">add</span>(obj)</span><br><span class="line"> set.<span class="title function_">add</span>(obj)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(set)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 3.应用场景: 数组的去重</span></span><br><span class="line"> <span class="keyword">const</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>]</span><br><span class="line"> <span class="comment">// const newNames = []</span></span><br><span class="line"> <span class="comment">// for (const item of names) &#123;</span></span><br><span class="line"> <span class="comment">//   if (!newNames.includes(item)) &#123;</span></span><br><span class="line"> <span class="comment">//     newNames.push(item)</span></span><br><span class="line"> <span class="comment">//   &#125;</span></span><br><span class="line"> <span class="comment">// &#125;</span></span><br><span class="line"> <span class="comment">// console.log(newNames)</span></span><br><span class="line"> <span class="keyword">const</span> newNamesSet = <span class="keyword">new</span> <span class="title class_">Set</span>(names)</span><br><span class="line"> <span class="keyword">const</span> newNames = <span class="title class_">Array</span>.<span class="title function_">from</span>(newNamesSet)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(newNames)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 4.Set的其他属性和方法</span></span><br><span class="line"> <span class="comment">// 属性</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="property">size</span>)</span><br><span class="line"> <span class="comment">// 方法</span></span><br><span class="line"> <span class="comment">// 4.1. add方法</span></span><br><span class="line"> set.<span class="title function_">add</span>(<span class="number">100</span>)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(set)</span><br><span class="line"> <span class="comment">// 4.2. delete方法</span></span><br><span class="line"> set.<span class="title function_">delete</span>(obj)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(set)</span><br><span class="line"> <span class="comment">// 4.3. has方法</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(set.<span class="title function_">has</span>(info))</span><br><span class="line"> <span class="comment">// 4.4. clear方法</span></span><br><span class="line"> <span class="comment">// set.clear()</span></span><br><span class="line"> <span class="comment">// console.log(set)</span></span><br><span class="line"> <span class="comment">// 4.5. forEach</span></span><br><span class="line"> set.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(item))</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 5.set支持for...of</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> set) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="WeakSet使用"><a href="#WeakSet使用" class="headerlink" title="WeakSet使用"></a>WeakSet使用</h3><ul>
<li>和Set类似的另外一个数据结构称之为WeakSet，也是内部元素不能重复的数据结构。</li>
<li>那么和Set有什么区别呢？<ul>
<li>区别一：WeakSet中只能存放对象类型，不能存放基本数据类型；</li>
<li>区别二：WeakSet对元素的引用是弱引用，如果没有其他引用对某个对象进行引用，那么GC可以对该对象进行回收；</li>
</ul>
</li>
<li>WeakSet常见的方法：<ul>
<li>add(value)：添加某个元素，返回WeakSet对象本身；</li>
<li>delete(value)：从WeakSet中删除和这个值相等的元素，返回boolean类型；</li>
<li>has(value)：判断WeakSet中是否存在某个元素，返回boolean类型；</li>
</ul>
</li>
<li>注意：WeakSet不能遍历<ul>
<li>因为WeakSet只是对对象的弱引用，如果我们遍历获取到其中的元素，那么有可能造成对象不能正常的销毁。</li>
<li>所以存储到WeakSet中的对象是没办法获取的；</li>
</ul>
</li>
<li>那么这个东西有什么用呢？<ul>
<li>事实上这个问题并不好回答，我们来使用一个Stack Overflow上的答案；</li>
</ul>
</li>
</ul>
<h3 id="Map的基本使用"><a href="#Map的基本使用" class="headerlink" title="Map的基本使用"></a>Map的基本使用</h3><ul>
<li><strong>另外一个新增的数据结构是Map，用于存储映射关系。</strong></li>
<li>但是我们可能会想，在之前我们可以<strong>使用对象来存储映射关系，他们有什么区别呢</strong>？<ul>
<li>事实上我们对象存储映射关系只能用字符串（ES6新增了Symbol）作为属性名（key）；</li>
<li>某些情况下我们可能希望通过其他类型作为key，比如对象，这个时候会自动将对象转成字符串来作为key；</li>
</ul>
</li>
<li>那么我们就可以使用Map：</li>
<li><strong>Map常见的属性：</strong><ul>
<li>size：返回Map中元素的个数；</li>
</ul>
</li>
<li><strong>Map常见的方法：</strong><ul>
<li>set(key, value)：在Map中添加key、value，并且返回整个Map对象；</li>
<li>get(key)：根据key获取Map中的value；</li>
<li>has(key)：判断是否包括某一个key，返回Boolean类型；</li>
<li>delete(key)：根据key删除一个键值对，返回Boolean类型</li>
<li>clear()：清空所有的元素；</li>
<li>forEach(callback, [, thisArg])：通过forEach遍历Map；</li>
</ul>
</li>
<li><strong>Map也可以通过for of进行遍历。</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> info = &#123; <span class="attr">name</span>: <span class="string">&quot;why&quot;</span> &#125;</span><br><span class="line">    <span class="keyword">const</span> info2 = &#123; <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.对象类型的局限性: 不可以使用复杂类型作为key</span></span><br><span class="line">    <span class="comment">// const obj = &#123;</span></span><br><span class="line">    <span class="comment">//   address: &quot;北京市&quot;,</span></span><br><span class="line">    <span class="comment">//   [info]: &quot;哈哈哈&quot;,</span></span><br><span class="line">    <span class="comment">//   [info2]: &quot;呵呵呵&quot;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// console.log(obj)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.Map映射类型</span></span><br><span class="line">    <span class="keyword">const</span> map = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    map.<span class="title function_">set</span>(info, <span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line">    map.<span class="title function_">set</span>(info2, <span class="string">&quot;bbbb&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(map)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.Map的常见属性和方法</span></span><br><span class="line">    <span class="comment">// console.log(map.size)</span></span><br><span class="line">    <span class="comment">// 3.1. set方法, 设置内容</span></span><br><span class="line">    map.<span class="title function_">set</span>(info, <span class="string">&quot;cccc&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(map)</span><br><span class="line">    <span class="comment">// 3.2. get方法, 获取内容</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">get</span>(info))</span><br><span class="line">    <span class="comment">// 3.3. delete方法, 删除内容</span></span><br><span class="line">    <span class="comment">// map.delete(info)</span></span><br><span class="line">    <span class="comment">// console.log(map)</span></span><br><span class="line">    <span class="comment">// 3.4. has方法, 判断内容</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(map.<span class="title function_">has</span>(info2))</span><br><span class="line">    <span class="comment">// 3.5. clear方法, 清空内容</span></span><br><span class="line">    <span class="comment">// map.clear()</span></span><br><span class="line">    <span class="comment">// console.log(map)</span></span><br><span class="line">    <span class="comment">// 3.6. forEach方法 获取的value</span></span><br><span class="line">    map.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(item))</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4.for...of遍历 获取的是key，value组成的数组</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> map) &#123;</span><br><span class="line">      <span class="keyword">const</span> [key, value] = item</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="WeakMap的使用"><a href="#WeakMap的使用" class="headerlink" title="WeakMap的使用"></a>WeakMap的使用</h3><ul>
<li>和Map类型的另外一个数据结构称之为WeakMap，也是以键值对的形式存在的。</li>
<li>那么和Map有什么区别呢？<ul>
<li>区别一：WeakMap的key只能使用对象，不接受其他的类型作为key；</li>
<li>区别二：WeakMap的key对对象想的引用是弱引用，如果没有其他引用引用这个对象，那么GC可以回收该对象；</li>
</ul>
</li>
<li>WeakMap常见的方法有四个：<ul>
<li>set(key, value)：在Map中添加key、value，并且返回整个Map对象；</li>
<li>get(key)：根据key获取Map中的value；</li>
<li>has(key)：判断是否包括某一个key，返回Boolean类型；</li>
<li>delete(key)：根据key删除一个键值对，返回Boolean类型；</li>
</ul>
</li>
<li>注意：WeakMap也是不能遍历的  没有forEach方法，也不支持通过for of的方式进行遍历；</li>
<li>那么我们的WeakMap有什么作用呢？（后续专门讲解）</li>
</ul>
]]></content>
      <categories>
        <category>JS高级</category>
      </categories>
      <tags>
        <tag>JS高级</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS盒子模型</title>
    <url>/2024/06/14/CSS%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="盒子模型-Box-Model"><a href="#盒子模型-Box-Model" class="headerlink" title="盒子模型(Box Model)"></a>盒子模型(Box Model)</h2><ul>
<li>HTML中的每一个元素都可以看做是一个盒子，如右下图所示，可以具备这4个属性</li>
<li><strong>内容（content）</strong><ul>
<li>元素的内容width&#x2F;height</li>
</ul>
</li>
<li><strong>内边距（padding）</strong><ul>
<li>元素和内容之间的间距</li>
</ul>
</li>
<li><strong>边框（border）</strong><ul>
<li>元素自己的边框</li>
</ul>
</li>
<li><strong>外边距（margin）</strong><ul>
<li>元素和其他元素之间的间距</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682404863888-87e2cc20-16b0-408a-b89b-691c622434b0.png#averageHue=%23f1e8ce&clientId=ud254e90f-85b9-4&from=paste&height=227&id=ubbcfc630&originHeight=494&originWidth=978&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=47914&status=done&style=none&taskId=ub876919e-a4b8-4006-95cc-839b31b7238&title=&width=449.38116455078125" alt="image.png"></li>
</ul>
<hr>
<ul>
<li>因为盒子有四边, 所以margin&#x2F;padding&#x2F;border都包括top&#x2F;right&#x2F;bottom&#x2F;left四个边:</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682404912752-d768e986-14c3-415e-b9e6-3e2cf60ed6cd.png#averageHue=%23d4f7b8&clientId=ud254e90f-85b9-4&from=paste&height=272&id=ub16640f4&originHeight=626&originWidth=984&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=142495&status=done&style=none&taskId=u016f43a3-0336-4036-b8ad-4853687ad1c&title=&width=427.376220703125" alt="image.png"></li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682404918586-33b10504-669b-4a70-8967-78831b4f0ff9.png#averageHue=%23faf0e1&clientId=ud254e90f-85b9-4&from=paste&height=305&id=ue427be00&originHeight=464&originWidth=862&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=57644&status=done&style=none&taskId=u256e472c-9aa5-4828-8641-dd256b96b51&title=&width=565.7474975585938" alt="image.png"></li>
</ul>
<h2 id="内容-–-宽度和高度"><a href="#内容-–-宽度和高度" class="headerlink" title="内容 – 宽度和高度"></a>内容 – 宽度和高度</h2><ul>
<li><p>设置内容是通过宽度和高度设置的:</p>
<ul>
<li>宽度设置: width</li>
<li>高度设置: height</li>
</ul>
</li>
<li><p>注意: 对于行内级非替换元素来说, 设置宽高是无效的!</p>
</li>
<li><p>另外我们还可以设置如下属性:</p>
</li>
<li><p>min-width：最小宽度，无论内容多少，宽度都大于或等于min-width</p>
</li>
<li><p>max-width：最大宽度，无论内容多少，宽度都小于或等于max-width</p>
</li>
<li><p>移动端适配时, 可以设置最大宽度和最小宽度;</p>
</li>
<li><p>下面两个属性不常用:</p>
</li>
<li><p>min-height：最小高度，无论内容多少，高度都大于或等于min-height</p>
</li>
<li><p>max-height：最大高度，无论内容多少，高度都小于或等于max-height</p>
</li>
</ul>
<h2 id="内边距-padding"><a href="#内边距-padding" class="headerlink" title="内边距 - padding"></a>内边距 - padding</h2><ul>
<li>padding属性用于设置盒子的内边距, 通常用于设置边框和内容之间的间距;</li>
<li>padding包括四个方向, 所以有如下的取值:<ul>
<li>padding-top：上内边距</li>
<li>padding-right：右内边距</li>
<li>padding-bottom：下内边距</li>
<li>padding-left：左内边距</li>
</ul>
</li>
<li>padding单独编写是一个缩写属性<ul>
<li>padding-top、padding-right、padding-bottom、padding-left的简写属性</li>
<li>padding缩写属性是从零点钟方向开始, 沿着顺时针转动的, 也就是上右下左;</li>
</ul>
</li>
<li>padding并非必须是四个值, 也可以有其他值;</li>
</ul>
<h2 id="边框-border"><a href="#边框-border" class="headerlink" title="边框 - border"></a>边框 - border</h2><ul>
<li>border用于设置盒子的边框:</li>
<li>边框相对于content&#x2F;padding&#x2F;margin来说特殊一些:<ul>
<li>边框具备宽度width;</li>
<li>边框具备样式style;</li>
<li>边框具备颜色color;</li>
</ul>
</li>
</ul>
<h2 id="设置边框的方式"><a href="#设置边框的方式" class="headerlink" title="设置边框的方式"></a>设置边框的方式</h2><ul>
<li>边框宽度<ul>
<li>border-top-width、border-right-width、border-bottom-width、border-left-width</li>
<li>border-width是上面4个属性的简写属性</li>
</ul>
</li>
<li>边框颜色<ul>
<li>border-top-color、border-right-color、border-bottom-color、border-left-color</li>
<li>border-color是上面4个属性的简写属性</li>
</ul>
</li>
<li>边框样式<ul>
<li>border-top-style、border-right-style、border-bottom-style、border-left-style</li>
<li>border-style是上面4个属性的简写属性</li>
</ul>
</li>
</ul>
<h2 id="边框的样式设置值"><a href="#边框的样式设置值" class="headerlink" title="边框的样式设置值"></a>边框的样式设置值</h2><ul>
<li>边框的样式有很多, 我们可以了解如下的几个:<ul>
<li>groove：凹槽, 沟槽, 边框看上去好象是雕刻在画布之内</li>
<li>ridge：山脊, 和grove相反，边框看上去好象是从画布中凸出来</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682406215274-aab777d7-ba1b-405d-85df-58a3f77a89af.png#averageHue=%23f1f1f1&clientId=ud254e90f-85b9-4&from=paste&height=431&id=ufee692a6&originHeight=544&originWidth=1250&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=32738&status=done&style=none&taskId=ue199bfee-da76-4796-9acf-0d4354e662a&title=&width=990.098972505665" alt="image.png"></li>
</ul>
<h2 id="同时设置的方式"><a href="#同时设置的方式" class="headerlink" title="同时设置的方式"></a>同时设置的方式</h2><ul>
<li>如果我们相对某一边同时设置 宽度 样式 颜色, 可以进行如下设置:<ul>
<li>border-top</li>
<li>border-right</li>
<li>border-bottom</li>
<li>border-left</li>
<li>border：统一设置4个方向的边框</li>
</ul>
</li>
<li>边框颜色、宽度、样式的编写顺序任意</li>
</ul>
<h2 id="圆角-–-border-radius"><a href="#圆角-–-border-radius" class="headerlink" title="圆角 – border-radius"></a>圆角 – border-radius</h2><ul>
<li>border-radius用于设置盒子的圆角</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682406330149-61ffc5d5-93bb-4235-adbe-6cc5438540e2.png#averageHue=%23766e4c&clientId=ud254e90f-85b9-4&from=paste&height=236&id=u41fbda1d&originHeight=298&originWidth=1459&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=474279&status=done&style=none&taskId=u0288c64c-517e-49ca-bfca-9e6fcfd2bea&title=&width=1155.6435207086122" alt="image.png"></li>
<li>border-radius常见的值:<ul>
<li>数值: 通常用来设置小的圆角, 比如6px;</li>
<li>百分比: 通常用来设置一定的弧度或者圆形;</li>
</ul>
</li>
</ul>
<h2 id="border-radius补充"><a href="#border-radius补充" class="headerlink" title="border-radius补充"></a>border-radius补充</h2><ul>
<li>border-radius事实上是一个缩写属性:<ul>
<li>将这四个属性 border-top-left-radius、border-top-right-radius、border-bottom-right-radius，和 border-bottomleft-radius 简写为一个属性。</li>
<li>开发中比较少见一个个圆角设置;</li>
</ul>
</li>
<li>如果一个元素是正方形, 设置border-radius大于或等于50%时，就会变成一个圆.</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682406458716-0f21a465-63ce-4d26-879e-7377000351ce.png#averageHue=%2348dd3a&clientId=ud254e90f-85b9-4&from=paste&height=261&id=ua0f4dcf2&originHeight=329&originWidth=1028&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=74242&status=done&style=none&taskId=u3b391f24-8465-4a21-968e-45458bf90b5&title=&width=814.2573949886588" alt="image.png"></li>
</ul>
<hr>
<p>案例<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682406401205-3350cfbd-2033-4404-ab52-07f9c9f704cc.png#averageHue=%23fdf3f3&clientId=ud254e90f-85b9-4&from=paste&height=75&id=u2788257b&originHeight=108&originWidth=444&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=3377&status=done&style=none&taskId=u4b93e6a8-cb22-4601-9429-1bf5f19292a&title=&width=308.6831359863281" alt="image.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">70px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">13px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.new</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#e1251b</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.vip</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="number">#363634</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#e5d790</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;new&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>新人福利<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;vip&quot;</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>PLUS会员<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="外边距-margin"><a href="#外边距-margin" class="headerlink" title="外边距 - margin"></a>外边距 - margin</h2><ul>
<li>margin属性用于设置盒子的外边距, 通常用于元素和元素之间的间距;</li>
<li>margin包括四个方向, 所以有如下的取值:<ul>
<li>margin-top：上内边距</li>
<li>margin-right：右内边距</li>
<li>margin-bottom：下内边距</li>
<li>margin-left：左内边距</li>
</ul>
</li>
<li>margin单独编写是一个缩写属性：<ul>
<li>margin-top、margin-right、margin-bottom、margin-left的简写属性</li>
<li>margin缩写属性是从零点钟方向开始, 沿着顺时针转动的, 也就是上右下左;</li>
</ul>
</li>
<li>margin也并非必须是四个值, 也可以有其他值;</li>
</ul>
<h2 id="上下margin的传递"><a href="#上下margin的传递" class="headerlink" title="上下margin的传递"></a>上下margin的传递</h2><ul>
<li>margin-top传递<ul>
<li>如果块级元素的顶部线和父元素的顶部线重叠，那么这个块级元素的margin-top值会传递给父元素</li>
</ul>
</li>
<li>margin-bottom传递<ul>
<li>如果块级元素的底部线和父元素的底部线重写，并且父元素的高度是auto，那么这个块级元素的margin-bottom值会传递给父元素</li>
</ul>
</li>
<li>如何防止出现传递问题？<ul>
<li>给父元素设置padding-top\padding-bottom</li>
<li>给父元素设置border</li>
<li>触发BFC: 设置overflow为auto</li>
</ul>
</li>
<li>建议<ul>
<li>margin一般是用来设置兄弟元素之间的间距</li>
<li>padding一般是用来设置父子元素之间的间距</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682411249612-4bbeb372-47a2-4706-92d5-1de9041cccbd.png#averageHue=%23d8a55e&clientId=ud254e90f-85b9-4&from=paste&height=756&id=u9732b6fe&originHeight=955&originWidth=577&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=8169&status=done&style=none&taskId=u0c7a8072-35a0-4a9d-93c1-457207ccb85&title=&width=457.0296857086149" alt="image.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#f00</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.child</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#0f0</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 上下非常特殊 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* height: 300px; */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#00f</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.child1</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#0ff</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-bottom</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 父子元素: margin-top --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- margin-bottom --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>我是div元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="上下margin的折叠"><a href="#上下margin的折叠" class="headerlink" title="上下margin的折叠"></a>上下margin的折叠</h2><ul>
<li>垂直方向上相邻的2个margin（margin-top、margin-bottom）有可能会合并为1个margin，这种现象叫做collapse（折叠）</li>
<li>水平方向上的margin（margin-left、margin-right）永远不会collapse</li>
<li>折叠后最终值的计算规则<ul>
<li>两个值进行比较，取较大的值</li>
</ul>
</li>
<li>如何防止margin collapse？<ul>
<li>只设置其中一个元素的margin</li>
</ul>
</li>
</ul>
<h2 id="上下margin折叠的情况"><a href="#上下margin折叠的情况" class="headerlink" title="上下margin折叠的情况"></a>上下margin折叠的情况</h2><ul>
<li>两个兄弟块级元素之间上下margin的折叠</li>
<li>父子块级元素之间margin的折叠</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682411451277-7f3a76a7-1b59-4f9d-a55d-affaff19bb0a.png#averageHue=%23f5f2e1&clientId=ud254e90f-85b9-4&from=paste&height=445&id=u8e74144c&originHeight=562&originWidth=1575&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=211697&status=done&style=none&taskId=ub5894e7e-765b-4dab-a9f3-cdb6bac467b&title=&width=1247.5247053571377" alt="image.png"></li>
</ul>
<h2 id="外轮廓-outline"><a href="#外轮廓-outline" class="headerlink" title="外轮廓 - outline"></a>外轮廓 - outline</h2><ul>
<li>outline表示元素的外轮廓<ul>
<li>不占用空间</li>
<li>默认显示在border的外面</li>
</ul>
</li>
<li>outline相关属性有<ul>
<li>outline-width: 外轮廓的宽度</li>
<li>outline-style：取值跟border的样式一样，比如solid、dotted等</li>
<li>outline-color: 外轮廓的颜色</li>
<li>outline：outline-width、outline-style、outline-color的简写属性，跟border用法类似</li>
</ul>
</li>
<li>应用实例<ul>
<li>去除a元素、input元素的focus轮廓效果</li>
</ul>
</li>
</ul>
<h2 id="盒子阴影-–-box-shadow"><a href="#盒子阴影-–-box-shadow" class="headerlink" title="盒子阴影 – box-shadow"></a>盒子阴影 – box-shadow</h2><ul>
<li>box-shadow属性可以设置一个或者多个阴影<ul>
<li>每个阴影用<shadow>表示</li>
<li>多个阴影之间用逗号,隔开，从前到后叠加</li>
</ul>
</li>
<li><shadow>的常见格式如下<ul>
<li>第1个<length>：offset-x, 水平方向的偏移，正数往右偏移</li>
<li>第2个<length>：offset-y, 垂直方向的偏移，正数往下偏移</li>
<li>第3个<length>：blur-radius, 模糊半径</li>
<li>第4个<length>：spread-radius, 延伸半径</li>
<li><color>：阴影的颜色，如果没有设置，就跟随color属性的颜色</li>
<li>inset：外框阴影变成内框阴影</li>
</ul>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">#0f0</span>, <span class="number">10px</span> <span class="number">10px</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">#00f</span>;</span><br></pre></td></tr></table></figure>

<h2 id="盒子阴影-–-在线查看"><a href="#盒子阴影-–-在线查看" class="headerlink" title="盒子阴影 – 在线查看"></a>盒子阴影 – 在线查看</h2><ul>
<li>我们可以通过一个网站测试盒子的阴影:</li>
<li><a href="https://html-css-js.com/css/generator/box-shadow/">https://html-css-js.com/css/generator/box-shadow/</a></li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682411826935-1b01274d-a095-4f5c-83b2-6f1e622ae496.png#averageHue=%23f9f7f5&clientId=ud254e90f-85b9-4&from=paste&height=382&id=ub74d444a&originHeight=482&originWidth=1372&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=74148&status=done&style=none&taskId=u34e6d7d4-5d56-49f0-8195-157261e4ff0&title=&width=1086.7326322222177" alt="image.png"></li>
</ul>
<h2 id="文字阴影-text-shadow"><a href="#文字阴影-text-shadow" class="headerlink" title="文字阴影 - text-shadow"></a>文字阴影 - text-shadow</h2><ul>
<li>text-shadow用法类似于box-shadow，用于给文字添加阴影效果</li>
<li><shadow>的常见格式如下<ul>
<li>相当于box-shadow, 它没有spread-radius的值;</li>
</ul>
</li>
<li>我们可以通过一个网站测试文字的阴影:<ul>
<li><a href="https://html-css-js.com/css/generator/box-shadow/">https://html-css-js.com/css/generator/box-shadow/</a></li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682411897659-aa419de4-6884-4f04-ab97-fe3160e9dbde.png#averageHue=%23f5f4f3&clientId=ud254e90f-85b9-4&from=paste&height=268&id=ub5999259&originHeight=338&originWidth=1478&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=69885&status=done&style=none&taskId=uaca3db1a-7bd9-4e6b-9d76-75597ee8c52&title=&width=1170.6930250906983" alt="image.png"></p>
<h2 id="行内非替换元素的注意事项"><a href="#行内非替换元素的注意事项" class="headerlink" title="行内非替换元素的注意事项"></a>行内非替换元素的注意事项</h2><ul>
<li><strong>以下属性对行内级非替换元素不起作用</strong><ul>
<li>width、height、margin-top、margin-bottom</li>
</ul>
</li>
<li><strong>以下属性对行内级非替换元素的效果比较特殊</strong><ul>
<li>padding-top、padding-bottom、上下方向的border</li>
</ul>
</li>
</ul>
<h2 id="综合练习1"><a href="#综合练习1" class="headerlink" title="综合练习1"></a>综合练习1</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682411973283-caf8a5c5-3979-41d9-b626-6f2c8e405503.png#averageHue=%23f4f4f4&clientId=ud254e90f-85b9-4&from=paste&height=359&id=u2e6fa956&originHeight=453&originWidth=504&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=40984&status=done&style=none&taskId=u1fb30fe6-7cf5-487d-bca5-23d56603501&title=&width=399.2079057142841" alt="image.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font</span>: <span class="number">14px</span>/<span class="number">1.5</span> Helvetica Neue,Helvetica,Arial,Microsoft Yahei,Hiragino Sans GB,Heiti SC,WenQuanYi Micro Hei,sans-serif;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.mi</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">234px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.mi</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">160px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.mi</span> <span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">18px</span> <span class="number">0</span> <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.mi</span> <span class="selector-class">.desc</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#b0b0b0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span> <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 一行显示...方法 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-overflow</span>: ellipsis;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.mi</span> <span class="selector-class">.price</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#ff6700</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;mi&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.cnbj1.fds.api.mi-img.com/mi-mall/cfec307342eb35ee4a437f664004c50f.jpg?thumb=1&amp;w=200&amp;h=200&amp;f=webp&amp;q=90&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Redmi 手表<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span>35g超轻/1.4&quot;大屏/多功能NFC/7天长续航<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;price&quot;</span>&gt;</span>299元<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="综合练习2"><a href="#综合练习2" class="headerlink" title="综合练习2"></a>综合练习2</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682412020394-5bb3d8a9-0454-48d4-a2b2-e67360ca4ecb.png#averageHue=%23c2c2c1&clientId=ud254e90f-85b9-4&from=paste&height=261&id=ue50aee98&originHeight=329&originWidth=439&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=72306&status=done&style=none&taskId=u4245c466-f733-4cb2-ad39-dc8e9000273&title=&width=347.7227591439895" alt="image.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">250px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span> <span class="selector-class">.top</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">6px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span> <span class="selector-class">.bottom</span> <span class="selector-class">.desc</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">15px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding-right</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span> <span class="selector-class">.bottom</span> <span class="selector-class">.up</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">13px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">13px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.up-icon</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#999</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">2px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">svg</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">style</span>=<span class="string">&quot;position:absolute;width:0px;height:0px;overflow:hidden;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-activity&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#333&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M518.656 475.904a223.488 223.488 0 0 1-23.296-75.52 366.08 366.08 0 0 1 81.408 14.592 623.104 623.104 0 0 1-58.112 60.928m-69.888-119.04c-11.52-58.112-8.704-55.296-25.6-156.928a265.984 265.984 0 0 0-78.336 46.592c51.2 104.448 60.928 165.376 92.928 290.304 51.2-5.632 211.968-40.704 226.56-130.56 8.704-64-142.336-64-215.04-49.408m37.12 267.264a263.424 263.424 0 0 0-107.52 69.632l43.52 153.6a47.872 47.872 0 0 1-92.928 23.296L216.576 473.088l-72.704-204.8c2.816-5.632 5.888-8.704 8.704-14.336l-14.592-51.2a46.08 46.08 0 0 1 32-57.856 47.616 47.616 0 0 1 58.112 34.304v2.816a334.848 334.848 0 0 1 98.816-43.52c177.152-46.592 203.264 55.04 429.824 23.296L890.368 588.8c-171.52 90.112-232.448-11.52-403.712 35.072&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#F39800&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-ad&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M576.768 153.6c32.768-32.512 132.096 13.824 221.952 103.68S935.168 446.464 902.4 479.232a27.648 27.648 0 0 1-6.144 4.608c-37.632 22.784-640 377.6-640 377.6a110.592 110.592 0 0 1-48.384-30.976 140.288 140.288 0 0 1-34.56-49.152s381.184-588.8 399.36-620.8a34.56 34.56 0 0 1 4.096-6.912z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#9796ED&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M172.288 780.032c-4.864 3.328-35.328 19.968-51.2 28.928a18.688 18.688 0 0 0-9.728 19.456 104.192 104.192 0 0 0 31.488 58.368 117.504 117.504 0 0 0 59.392 33.024 19.2 19.2 0 0 0 19.968-8.448c10.752-17.152 32-51.2 33.024-51.2a110.592 110.592 0 0 1-48.384-30.976 140.288 140.288 0 0 1-34.56-49.152z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#9289F0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M576.768 153.6c32.768-32.512 132.096 13.824 221.952 103.68S935.168 446.464 902.4 479.232a27.648 27.648 0 0 1-6.144 4.608c-37.632 22.784-102.4 60.16-102.4 60.16s-64-4.096-173.312-113.664c-102.4-102.4-112.128-171.008-112.128-171.008s39.936-61.696 62.464-98.816a34.56 34.56 0 0 1 5.888-6.912z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#F7DF88&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M680.458 374.492a230.144 83.712 45 1 0 118.387-118.386 230.144 83.712 45 1 0-118.387 118.386Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#8683EA&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-animal&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M517.376 465.152a144.924 144.924 0 0 1 137.529 99.214c1.28 3.926 2.275 7.85 2.901 11.805a132.267 132.267 0 0 1-14.279 263.765H380.473a132.267 132.267 0 0 1-14.25-263.794 74.044 74.044 0 0 1 2.872-11.776 144.924 144.924 0 0 1 137.529-99.214h10.752zm-96.683-47.047c50.262-3.783 85.618-59.165 79.047-123.733-6.599-64.57-52.65-113.892-102.912-110.109-50.232 3.755-85.617 59.165-79.018 123.733 6.599 64.57 52.65 113.864 102.912 110.08zm182.614 0c50.233 3.755 96.284-45.511 102.883-110.109 6.6-64.568-28.786-119.978-79.018-123.733-50.262-3.783-96.313 45.511-102.912 110.08-6.6 64.569 28.785 119.979 79.018 123.733zM717.426 551.14c39.082 21.816 96.91-4.267 129.138-58.226 32.256-53.96 26.709-115.37-12.374-137.188-39.11-21.817-96.938 4.267-129.166 58.226-32.256 53.96-26.71 115.37 12.402 137.188zm-410.852 0c39.111-21.817 44.658-83.229 12.402-137.188-32.228-53.96-90.055-80.043-129.138-58.226-39.11 21.817-44.658 83.229-12.43 137.188 32.256 53.959 90.084 80.042 129.166 58.226z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FB7299&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M621.511 113.778c76.231-.939 138.468 74.012 149.504 173.34 37.746-13.312 75.861-12.914 107.293 4.324 70.712 38.77 80.753 147.968 22.442 243.91a272.327 272.327 0 0 1-71.11 78.337c9.158 22.87 14.221 47.843 14.221 73.984v23.438a199.111 199.111 0 0 1-199.11 199.111H379.25a199.111 199.111 0 0 1-199.111-199.11v-23.44c0-26.168 5.063-51.114 14.222-74.012a272.1 272.1 0 0 1-71.111-78.307c-58.311-95.943-48.27-205.141 22.442-243.911 31.432-17.238 69.547-17.636 107.321-4.352 11.008-99.3 73.245-174.25 149.476-173.312 42.41.54 81.152 24.462 109.511 62.777 28.36-38.287 67.1-62.237 109.511-62.777z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFD7E7&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M512 465.152a141.198 141.198 0 0 1 134.741 98.958l.086.256c1.905 6.087 3.015 12.231 3.356 18.29a132.267 132.267 0 0 1-9.728 264.164h-256.91a132.267 132.267 0 0 1-9.671-264.192l-.2 4.58a76.853 76.853 0 0 1 3.5-22.842l.085-.284A141.198 141.198 0 0 1 512 465.18zm-91.307-47.047c50.262-3.783 85.618-59.165 79.047-123.733-6.599-64.57-52.65-113.892-102.912-110.109-50.232 3.755-85.617 59.165-79.018 123.733 6.599 64.57 52.65 113.864 102.912 110.08zm182.614 0c50.233 3.755 96.284-45.511 102.883-110.109 6.6-64.568-28.786-119.978-79.018-123.733-50.262-3.783-96.313 45.511-102.912 110.08-6.6 64.569 28.785 119.979 79.018 123.733zM717.426 551.14c39.082 21.816 96.91-4.267 129.138-58.226 32.256-53.96 26.709-115.37-12.374-137.188-39.11-21.817-96.938 4.267-129.166 58.226-32.256 53.96-26.71 115.37 12.402 137.188zm-410.852 0c39.111-21.817 44.658-83.229 12.402-137.188-32.228-53.96-90.055-80.043-129.138-58.226-39.11 21.817-44.658 83.229-12.43 137.188 32.256 53.959 90.084 80.042 129.166 58.226z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FB7299&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-anime&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m588.8 359.68-12.032-7.424L727.04 145.664a30.976 30.976 0 0 0-51.2-36.352l-153.6 210.176L281.6 170.24a30.976 30.976 0 1 0-33.024 52.736L486.4 369.92l-22.784 31.488a30.976 30.976 0 1 0 51.2 36.352l25.6-35.072 16.128 9.728A30.976 30.976 0 1 0 588.8 359.68zM710.4 850.688a53.248 53.248 0 1 0 106.496 0 53.248 53.248 0 1 0-106.496 0ZM261.12 797.44a53.248 53.248 0 1 0 53.504 53.248 53.248 53.248 0 0 0-53.504-53.248z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FB813A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M234.24 314.368h556.288q92.928 0 92.928 92.928V768q0 92.928-92.928 92.928H234.24q-92.928 0-92.928-92.928V407.296q0-92.928 92.928-92.928Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FDDE80&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M392.192 575.232a128.256 128.256 0 1 0 256.512 0 128.256 128.256 0 1 0-256.512 0Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFF&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M476.928 546.56c0-26.88 19.2-37.632 42.24-25.6l49.664 28.672a25.6 25.6 0 0 1 0 48.64l-49.664 28.672c-23.04 13.568-42.24 2.56-42.24-24.32z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FB813A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-blackroom&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M0 0h1024v1024H0z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M874.675 156.595c14.848 0 27.136 11.187 28.8 25.6l.205 3.405v335.949c0 14.873-11.213 27.136-25.626 28.825l-3.379.18H697.702l-54.476 54.502a29.03 29.03 0 0 1-35.354 4.429l-2.944-2.023-2.74-2.406-54.527-54.528-134.912.026c-13.747 0-25.242-9.55-28.263-22.35l-.563-3.276-.205-3.38V382.567H370.74c-13.721 0-25.216-9.523-28.237-22.348l-.563-3.252-.205-3.404V185.6c0-14.874 11.213-27.136 25.626-28.826l3.38-.179h503.935z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#AAF6C4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M755.2 268.8c18.611 0 33.92 14.003 36.02 32.026l.255 4.25v435.2c0 18.585-14.003 33.92-32.051 36.018l-4.224.256H422.733L287.36 878.08c-21.683 16.256-51.763 3.738-57.165-20.992l-.665-4.02-.205-3.993v-72.55h-54.4c-17.152 0-31.54-11.93-35.303-27.955l-.716-4.096-.256-4.199v-435.2c0-18.611 14.028-33.945 32.05-36.019l4.225-.256H755.2z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#59D498&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M392.525 563.2a32 32 0 0 1 3.277 63.846l-3.277.154h-108.8a32 32 0 0 1-3.251-63.846l3.25-.154h108.8zm108.8-145.075a32 32 0 0 1 3.277 63.846l-3.277.154h-217.6a32 32 0 0 1-3.251-63.821l3.25-.18h217.6z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFF&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-broadcast&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M665.6 852.48H194.56c-38.4 0-66.56-30.72-66.56-69.12v-281.6c0-38.4 30.72-69.12 66.56-69.12H665.6c38.4 0 66.56 30.72 66.56 69.12v284.16c0 35.84-30.72 66.56-66.56 66.56M688.768 282.138c0 76.8-61.44 138.24-135.68 138.24s-133.12-61.44-133.12-138.24 61.44-138.24 135.68-138.24 133.12 64 133.12 138.24&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FE6998&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M384 332.8c0 48.64-38.4 89.6-87.04 89.6s-87.04-38.4-87.04-89.6 38.4-89.6 87.04-89.6S384 284.16 384 332.8&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FF5B61&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m414.72 558.08 115.2 69.12c15.36 10.24 15.36 30.72 0 40.96l-115.2 69.12c-15.36 10.24-35.84-2.56-35.84-20.48V578.56c2.56-17.92 20.48-28.16 35.84-20.48&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FDDE80&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m790.912 511.59-168.96 99.84c-30.72 17.92-30.72 66.56 0 84.48l168.96 99.84c30.72 17.92 71.68-5.12 71.68-43.52V555.11c0-38.4-38.4-61.44-71.68-43.52&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FE6998&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-car&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M210.688 588.8h25.6a51.2 51.2 0 0 1 51.2 45.568l14.08 128A51.2 51.2 0 0 1 256 819.2h-30.976a51.2 51.2 0 0 1-51.2-45.568l-14.08-128A51.2 51.2 0 0 1 204.8 588.8zm577.536 0h25.6a51.2 51.2 0 0 1 51.2 51.2 41.984 41.984 0 0 1 0 5.632l-14.08 128a51.2 51.2 0 0 1-51.2 45.568h-25.6a51.2 51.2 0 0 1-51.2-51.2 41.984 41.984 0 0 1 0-5.632l14.08-128a51.2 51.2 0 0 1 51.2-45.568zm118.272-195.84a38.656 38.656 0 0 1-25.6 48.128l-25.6 7.424a38.4 38.4 0 0 1-22.528-73.472l25.6-7.424a38.144 38.144 0 0 1 48.128 25.344zm-691.2 29.952a38.4 38.4 0 0 1-47.872 25.6l-25.6-7.424a38.656 38.656 0 0 1-25.6-48.128 38.144 38.144 0 0 1 47.872-25.6l25.6 7.424a38.4 38.4 0 0 1 25.6 48.128z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#23ADE5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M292.608 201.216A1109.76 1109.76 0 0 1 512 179.2a1165.568 1165.568 0 0 1 224 22.016 51.2 51.2 0 0 1 38.144 32L870.4 486.4v230.4a25.6 25.6 0 0 1-25.6 25.6H179.2a25.6 25.6 0 0 1-25.6-25.6V486.4L256 232.704a51.2 51.2 0 0 1 36.608-31.488z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#48CFE5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M230.4 512h102.4q25.6 0 25.6 25.6v25.6q0 25.6-25.6 25.6H230.4q-25.6 0-25.6-25.6v-25.6q0-25.6 25.6-25.6ZM691.2 512h102.4q25.6 0 25.6 25.6v25.6q0 25.6-25.6 25.6H691.2q-25.6 0-25.6-25.6v-25.6q0-25.6 25.6-25.6Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFF&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M327.68 270.848A1000.96 1000.96 0 0 1 499.712 256a1429.248 1429.248 0 0 1 196.864 15.36 25.6 25.6 0 0 1 20.992 18.176l39.68 134.656a25.6 25.6 0 0 1-17.408 31.744 24.064 24.064 0 0 1-9.472 0q-125.184-12.032-230.4-12.032a1894.4 1894.4 0 0 0-204.8 11.264 25.6 25.6 0 0 1-28.16-22.784 25.6 25.6 0 0 1 0-9.984L307.2 288.768a25.6 25.6 0 0 1 20.48-17.92z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FDDE80&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M614.4 358.4a102.4 102.4 0 0 0-100.864 86.784h51.2a51.2 51.2 0 0 1 99.072 5.12l51.2 4.352A102.4 102.4 0 0 0 614.4 358.4z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#23ADE5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-cinema&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M682.24 716.8c34.56 0 71.936-2.56 106.496 0 61.184 0 74.752 39.936 76.8 93.184a32 32 0 0 0 64 0c0-71.936-25.6-143.872-106.752-157.184a807.168 807.168 0 0 0-138.496 0 32 32 0 0 0-2.56 64&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FB813A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M860.672 489.472A354.304 354.304 0 1 0 506.368 844.8a358.4 358.4 0 0 0 354.304-355.328&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FB813A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M695.552 566.528a79.872 79.872 0 1 1 79.872-80.128 79.872 79.872 0 0 1-79.872 79.872M508.928 384a79.872 79.872 0 0 1-79.872-79.872 80.128 80.128 0 0 1 160 0A80.128 80.128 0 0 1 508.928 384m0 372.992a79.872 79.872 0 0 1-79.872-79.872 81.92 81.92 0 0 1 79.872-79.872A80.128 80.128 0 0 1 588.8 675.84a78.592 78.592 0 0 1-80.128 79.872M322.56 566.528a79.872 79.872 0 1 1 79.872-80.128 79.872 79.872 0 0 1-79.872 79.872M512 128a372.992 372.992 0 1 0 372.736 371.968A374.016 374.016 0 0 0 512 128&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFBA7B&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M567.552 489.472a58.624 58.624 0 1 0-58.624 58.624 59.136 59.136 0 0 0 58.624-58.624&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FB952C&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-cinephile&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M226.816 201.728h571.136q79.616 0 79.616 79.616v458.24q0 79.616-79.616 79.616H226.816q-79.616 0-79.616-79.616v-458.24q0-79.616 79.616-79.616Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#9796ED&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M222.976 269.312h77.056v57.856h-77.056zm167.168 0H467.2v57.856h-77.056zm167.168 0h77.056v57.856h-77.056zm167.168 0h77.056v57.856H724.48zM222.976 693.76h77.056v57.856h-77.056zm167.168 0H467.2v57.856h-77.056zm167.168 0h77.056v57.856h-77.056zM147.2 375.296h730.368v270.08H147.2z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#7B78EA&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m544.721 506.356 2.535-2.535q23.351-23.351 46.703 0l199.664 199.665q23.351 23.351 0 46.703l-2.534 2.534q-23.352 23.351-46.703 0L544.72 553.059q-23.351-23.352 0-46.703Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFD043&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M708.352 418.816h-25.6v-24.32a13.568 13.568 0 0 0-13.568-13.568H665.6a13.312 13.312 0 0 0-13.312 13.568v24.32h-25.6a13.568 13.568 0 0 0-13.568 13.568v5.632a13.568 13.568 0 0 0 13.568 13.568h25.6v24.32a13.312 13.312 0 0 0 13.312 13.568h5.632a13.568 13.568 0 0 0 13.568-13.568v-24.32h25.6a13.312 13.312 0 0 0 13.312-13.568v-5.632a13.312 13.312 0 0 0-15.36-13.568zm-190.464 0h-25.6v-24.32a13.312 13.312 0 0 0-13.312-13.568h-5.632a13.568 13.568 0 0 0-13.568 13.568v24.32H435.2a13.312 13.312 0 0 0-13.312 13.568v5.632a13.312 13.312 0 0 0 13.312 13.568h25.6v24.32a13.568 13.568 0 0 0 13.568 13.568H480a13.312 13.312 0 0 0 13.312-13.568v-24.32h25.6a13.312 13.312 0 0 0 13.312-13.568v-5.632a13.312 13.312 0 0 0-14.336-13.568zm-24.32 153.344h-18.432v-18.432a10.24 10.24 0 0 0-10.24-10.24H460.8a10.24 10.24 0 0 0-10.24 10.24v18.432h-18.432a10.24 10.24 0 0 0-10.24 10.24v4.352a10.24 10.24 0 0 0 10.24 10.24h18.432V614.4a10.24 10.24 0 0 0 10.24 10.24h4.352a10.24 10.24 0 0 0 10.24-10.24v-18.432h18.432a10.24 10.24 0 0 0 10.24-10.24v-4.352a10.24 10.24 0 0 0-10.496-9.216z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFD778&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-comic&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M722.204 843.492h-551.68a70.144 70.144 0 0 1-69.973-69.917V400.896a70.144 70.144 0 0 1 69.973-69.945h551.68a70.144 70.144 0 0 1 69.917 69.973v372.623a70.144 70.144 0 0 1-69.917 69.945&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FDDE80&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M710.315 341.703c22.613-7.339 38.2-29.099 36.067-52.793a143.616 143.616 0 0 0-6.542-32.142C700.36 135.14 510.72 87.723 316.274 150.869 121.799 214.016-3.783 363.804 35.698 485.461c3.413 10.525 7.993 20.452 13.596 29.81 12.231 20.423 37.604 28.871 60.217 21.533l600.804-195.1z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#9796ED&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m281.031 123.676 11.236 34.617c4.977 15.332 21.617 23.78 36.92 18.802 15.332-4.978 23.809-21.59 18.83-36.92l-11.235-34.59a29.383 29.383 0 0 0-36.92-18.801c-15.36 4.95-23.809 21.59-18.83 36.892&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#7B78EB&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M444.16 714.07a139.748 139.748 0 0 0 138.297-119.553 17.493 17.493 0 0 0-17.124-20.195H322.987a17.493 17.493 0 0 0-17.124 20.195A139.776 139.776 0 0 0 444.16 714.07&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFAF66&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m704.796 680.903-85.845-40.619s12.288 55.752 71.396 92.672c-.086.74-.285 1.423-.37 2.19-12.715 94.55 38.2 179.4 113.692 189.554 75.492 10.127 146.973-58.31 159.687-152.86 12.687-94.52-38.2-179.4-113.72-189.525-60.018-8.079-117.42 33.65-144.84 98.588z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#9796ED&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m856.064 682.012-19.797 99.158a6.57 6.57 0 0 1-6.457 5.29h-17.778a6.6 6.6 0 0 1-6.542-7.537l14.478-99.13a6.542 6.542 0 0 1 6.485-5.66h23.154c4.181 0 7.282 3.812 6.457 7.88M833.166 818.09l-2.986 16.298a6.57 6.57 0 0 1-6.457 5.405h-20.964a6.6 6.6 0 0 1-6.485-7.652l2.645-16.27a6.6 6.6 0 0 1 6.485-5.547h21.277c4.124 0 7.253 3.727 6.485 7.766&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#C5C2FF&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-competition&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">defs</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span>:element-icons;<span class="attribute">src</span>:<span class="built_in">url</span>(<span class="string">chrome-extension://moombeodfomdpjnpocobemoiaemednkg/fonts/element-icons.woff</span>) <span class="built_in">format</span>(<span class="string">&quot;woff&quot;</span>),<span class="built_in">url</span>(<span class="string">&quot;chrome-extension://moombeodfomdpjnpocobemoiaemednkg/fonts/element-icons.ttf &quot;</span>) <span class="built_in">format</span>(<span class="string">&quot;truetype&quot;</span>)&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">defs</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M545.03 736.563v68.01h108.108a23.997 23.997 0 0 1 24.002 23.997v17.833a23.997 23.997 0 0 1-24.002 23.997h-282.27a23.997 23.997 0 0 1-24.003-24.003V828.57a23.997 23.997 0 0 1 24.002-23.998h108.109v-68.014c-57.334-7.639-108.467-34.888-146.432-74.783-103.526-30.924-171.49-125.808-202.27-278.917-12.545-62.382 28.042-123.085 90.639-135.588a115.978 115.978 0 0 1 22.707-2.242h20.68V227.2a48 48 0 0 1 48-48h399.41a48 48 0 0 1 48 48v17.828h20.67c7.629 0 15.232.752 22.707 2.242 62.597 12.498 103.179 73.206 90.64 135.588-30.777 153.104-98.74 247.987-202.26 278.917-37.97 39.895-89.104 67.144-146.433 74.783zM270.34 545.653a248.545 248.545 0 0 1-6.041-54.614V310.856h-20.685c-3.262 0-6.523.322-9.728.962-26.83 5.356-44.222 31.37-38.846 58.112 15.78 78.49 40.755 136.643 75.295 175.719zm489.37-234.797v180.183c0 18.76-2.09 37.038-6.042 54.605 34.535-39.076 59.51-97.234 75.29-175.719 5.376-26.737-12.017-52.751-38.846-58.107a49.705 49.705 0 0 0-9.728-.962h-20.674z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFD778&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m512 487.639-59.791 31.217a12.8 12.8 0 0 1-18.535-13.527l11.392-65.982-48.19-46.653a12.8 12.8 0 0 1 7.077-21.863l66.683-9.625 29.9-60.176a12.8 12.8 0 0 1 22.928 0l29.9 60.176 66.683 9.625a12.8 12.8 0 0 1 7.076 21.863l-48.19 46.653 11.393 65.982a12.8 12.8 0 0 1-18.535 13.527L512 487.639z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FB813A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-dance&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M956.672 513.792a476.416 476.416 0 0 0-890.368 0L512 727.296l-95.232 45.568a117.76 117.76 0 0 0 192.256 0L512 727.04z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FC6B8A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m512 727.296 208.64-99.84a222.976 222.976 0 0 0-416.768 0z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFF&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m405.453 751.54 541.184-258.586 14.029 29.312-541.184 258.61z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FF5C7A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m666.624 545.792-18.688-15.36-112.64 135.424L575.488 492.8l-23.552-5.632-40.192 172.544-40.448-172.544-23.808 5.632 40.704 173.056-112.896-135.424-18.688 15.36 111.616 134.144-391.68-186.88L62.72 522.24 603.904 780.8l14.08-29.44-87.552-41.728 136.192-163.84z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#F14767&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-danjiyouxi&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M512 153.6h-.026q50.458 0 50.458 50.458v100.864q0 50.457-50.458 50.457H512q-50.458 0-50.458-50.457V204.058q0-50.458 50.458-50.458Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FB952C&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M637.056 254.49H386.944C219.187 254.49 83.2 390.477 83.2 558.234c0 167.73 135.987 303.718 303.744 303.718h250.112c167.757 0 303.744-135.987 303.744-303.718 0-167.757-135.987-303.744-303.744-303.744z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFF&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M637.056 254.49H386.944C219.187 254.49 83.2 390.477 83.2 558.234c0 167.73 135.987 303.718 303.744 303.718h250.112c167.757 0 303.744-135.987 303.744-303.718 0-167.757-135.987-303.744-303.744-303.744zM404.787 611.84h-35.712v35.712a35.738 35.738 0 0 1-71.475 0V611.84h-35.738a35.738 35.738 0 0 1 0-71.475H297.6v-35.738a35.738 35.738 0 0 1 71.475 0v35.738h35.738a35.738 35.738 0 0 1 0 71.475zm285.901 71.424a107.213 107.213 0 1 1 0-214.4 107.213 107.213 0 0 1 0 214.4z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#F55E55&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M639.923 576.102a53.606 53.606 0 1 0 107.213 0 53.606 53.606 0 0 0-107.213 0z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FB952C&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-digital&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m298.496 284.928 17.664-51.2a36.608 36.608 0 0 1 33.28-22.016h325.376a37.12 37.12 0 0 1 34.304 22.016l17.408 51.2h88.576a69.376 69.376 0 0 1 66.56 70.656v377.344a69.12 69.12 0 0 1-67.84 70.144H209.92a69.12 69.12 0 0 1-68.352-70.144V355.584a69.376 69.376 0 0 1 68.352-70.656z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFBA7B&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M141.568 457.728h740.096v271.36a69.632 69.632 0 0 1-73.728 73.984H210.688a69.12 69.12 0 0 1-69.12-69.376z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FB952C&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M512 358.4a197.376 197.376 0 1 1-197.376 197.376A197.632 197.632 0 0 1 512 358.4z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FB952C&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M512 409.6a148.224 148.224 0 1 1-147.968 147.968A147.968 147.968 0 0 1 512 409.6z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFF&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M512 457.728a98.816 98.816 0 1 1-98.56 98.56 98.56 98.56 0 0 1 98.56-98.56z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FB952C&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M733.696 358.4h73.984a25.6 25.6 0 0 1 25.6 25.6 25.6 25.6 0 0 1-25.6 25.6h-73.984a25.6 25.6 0 0 1-25.6-25.6 25.6 25.6 0 0 1 25.6-25.6z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFF&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-documentary&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M404.9 386.765c-70.897-2.565-143.347 12.06-196.65 38.182-48.848 23.963-117.63 89.46-121.928 135.563h735.323c-3.217 0-12.015-9.428-14.738-11.52-5.017-3.825-9.742-7.808-14.76-11.543-11.902-8.91-24.66-16.897-37.147-24.975a1040.175 1040.175 0 0 0-77.063-45.585c-52.47-27.945-107.865-50.805-165.69-65.002a533.88 533.88 0 0 0-107.347-15.12&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#47CFE5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M744.605 489.163c-12.713 32.31-136.71 36.765-181.395 36.765H137.802c-15.232 0-29.767 5.197-39.757 14.265-9.9 8.977-14.107 20.767-11.7 32.355 0 .112 0 .27.09.337 9.293 43.672 35.73 83.34 76.365 114.683 1.62 1.26 3.263 2.52 4.928 3.735 106.74 78.457 292.522 81.157 423.45 43.875 41.445-11.79 80.865-28.17 115.177-49.635 38.992-24.39 78.795-57.308 102.308-91.733 3.465-5.062 41.22-61.177 41.962-60.885l-106.02-43.762z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#47CFE5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m918.058 505.317-29.88-17.077a75.082 75.082 0 0 0-70.11-2.138 75.375 75.375 0 0 0-37.418-59.354l-29.925-17.078a11.453 11.453 0 0 0-15.66 4.275l-7.83 13.703a59.063 59.063 0 0 0 21.96 80.572l15.795 9.045a.045.045 0 0 1-.045.045l51.48 29.43.045-.045 17.46 9.99a59.085 59.085 0 0 0 80.573-21.938l7.83-13.725a11.543 11.543 0 0 0-4.275-15.705&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#2BBAE4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M654.515 712.497C351.327 720.867 266.3 564.425 266.3 564.425H85.782a31.995 31.995 0 0 0 .63 8.46c9.293 43.672 35.73 83.34 76.365 114.683 1.62 1.282 3.263 2.52 4.928 3.735 106.717 78.457 292.5 81.18 423.428 43.875a509.692 509.692 0 0 0 63.382-22.68&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#E5E6E6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M654.515 712.497c-65.16 1.8-120.15-4.41-166.567-14.242-49.005-10.373-26.168 59.31-3.218 56.79 37.485-4.072 73.665-10.598 106.403-19.913a502.358 502.358 0 0 0 63.382-22.635&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#E4E5E4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M407.127 674.923c21.578 69.84 69.705 117.652 116.775 113.647 3.735-.338 6.233-4.072 5.513-7.74L504.98 655.212a5.715 5.715 0 0 0-6.682-4.5l-86.715 16.898a5.782 5.782 0 0 0-4.455 7.313&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#47CFE5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M441.238 614.712a29.295 29.295 0 1 1-58.613.023 29.295 29.295 0 0 1 58.612-.022&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#0099BC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M252.597 310.467a64.282 64.282 0 0 1 64.305-64.102c18.81 0 35.73 8.122 47.52 21.127a64.17 64.17 0 0 1 111.713 42.975 16.56 16.56 0 0 1-16.582 16.583 16.56 16.56 0 0 1-16.605-16.583 31.05 31.05 0 0 0-61.988-2.16h-.18l.113 77.468a16.582 16.582 0 1 1-33.188 0v-75.397c0-17.033-13.928-30.938-30.96-30.938a31.05 31.05 0 0 0-31.027 31.027 16.56 16.56 0 1 1-33.12 0&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#47CFE5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M364.332 408.027a22.253 22.253 0 0 1-22.207-22.23V310.4a25.358 25.358 0 1 0-50.715.09 22.23 22.23 0 0 1-44.415 0c0-38.453 31.365-69.75 69.907-69.75a69.75 69.75 0 0 1 47.52 18.765 70.2 70.2 0 0 1 47.61-18.765c38.453 0 69.75 31.297 69.75 69.75a22.23 22.23 0 0 1-44.437 0 25.425 25.425 0 0 0-50.738-1.778l-.157 2.385.09 74.7a22.253 22.253 0 0 1-22.208 22.23zm-47.542-134.19c20.16 0 36.562 16.403 36.562 36.563v75.42a10.98 10.98 0 1 0 21.915 0l-.09-83.093h.923a36.742 36.742 0 0 1 35.82-28.867c20.205 0 36.653 16.447 36.653 36.652a10.98 10.98 0 0 0 21.937 0c0-32.265-26.235-58.5-58.5-58.5-16.448 0-32.288 7.02-43.447 19.305l-4.163 4.545-4.162-4.612a58.635 58.635 0 0 0-43.336-19.283 58.635 58.635 0 0 0-58.657 58.5 10.957 10.957 0 0 0 21.915 0 36.675 36.675 0 0 1 36.63-36.63z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#47CFE5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M389.87 621.283h-66.33a47.79 47.79 0 0 1-35.032-15.593l-23.715-25.695a28.575 28.575 0 0 0-20.88-9.293H91.048a6.525 6.525 0 1 1 0-13.095h152.887c11.453 0 22.567 4.928 30.488 13.523l23.715 25.718c6.66 7.2 15.93 11.34 25.425 11.34h66.33a6.525 6.525 0 1 1-.023 13.095&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#0099BC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-douga&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M273.408 166.912h477.696c58.368 0 105.984 47.616 105.984 105.984v477.696c0 58.368-47.616 105.984-105.984 105.984H273.408c-58.368 0-105.984-47.616-105.984-105.984V273.408c-.512-58.368 47.616-106.496 105.984-106.496z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#7B78EB&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M512 525.312v98.816c33.28-14.848 72.704.512 87.552 33.792 14.848 33.28-.512 72.704-33.792 87.552-16.896 7.68-35.84 7.68-53.248 0v111.616H273.408c-58.368 0-105.984-47.616-105.984-105.984V512H304.64c-21.504 19.456-24.064 53.248-4.608 74.752 19.456 21.504 53.248 24.064 74.752 4.608 21.504-18.944 24.064-53.248 4.608-74.752L374.784 512H512v-40.96c-4.096.512-9.216.512-13.312 0-51.2 0-86.016-47.616-86.016-105.984s20.992-108.032 86.016-108.032H512v-90.112h238.592c58.368 0 105.984 47.616 105.984 105.984V524.8H735.744c20.992-23.552 19.456-59.392-3.584-80.896-23.552-20.992-59.392-19.456-80.896 3.584-19.968 21.504-19.968 55.296 0 76.8H512z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#9796ED&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M512 525.312v98.816l13.312-4.096c35.84-7.68 72.704 15.872 79.872 52.224 7.68 35.84-18.432 72.192-54.272 78.848-4.096 1.024-8.704 1.024-13.312 1.024-9.216 0-16.384-3.072-25.088-6.144V857.6h-14.336V724.992l18.432 8.192c27.136 11.776 58.368-.512 70.144-27.648 11.776-27.136-.512-58.368-27.648-70.144-13.312-5.632-28.672-5.632-42.496 0l-18.432 8.192v-117.76h-98.304c14.848 33.28-.512 72.704-33.792 87.552-33.28 14.848-72.704-.512-87.552-33.792-7.68-16.896-7.68-35.84 0-53.248H166.912V512h137.216c-21.504 19.456-24.064 53.248-4.608 74.752 19.456 21.504 53.248 24.064 74.752 4.608 21.504-19.456 24.064-53.248 4.608-74.752L374.272 512H512v-39.936h-13.312c-51.2 0-86.016-47.104-86.016-105.984s20.992-109.568 86.016-109.568H512v-89.6h13.312v105.984h-26.624c-49.664 0-73.216 33.28-73.216 94.208 0 53.248 30.72 92.672 73.216 92.672 3.584.512 7.68.512 11.264 0l15.36-2.048V512h102.912c-13.824-35.84 4.096-76.8 40.448-90.624 35.84-13.824 76.8 4.096 90.624 40.448 6.144 15.872 6.144 33.792 0 50.176h97.792v13.312H736.256c20.992-23.552 19.456-59.392-3.584-80.896-23.552-20.992-59.392-19.456-80.896 3.584-19.968 21.504-19.968 55.296 0 76.8H512z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#6A68C6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M444.928 693.248c-23.04 13.312-52.224 5.12-65.024-17.408-4.096-7.68-6.144-15.36-6.144-24.064V392.192c0-26.624 20.992-47.616 47.616-47.616 8.704 0 16.896 2.048 24.576 6.656L667.648 483.84c23.04 13.312 30.208 42.496 16.896 65.024-4.096 6.656-10.24 12.8-16.896 16.896&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FDDE80&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-ent&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m570.647 415.186 30.592 30.592q36.204 36.204 0 72.408l-360.59 360.59q-36.204 36.204-72.408 0l-30.593-30.592q-36.203-36.204 0-72.407l360.59-360.591q36.205-36.204 72.409 0Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FF8693&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m369.92 543.744 137.472-137.472a38.912 38.912 0 0 1 54.528 0l48.384 48.64a38.4 38.4 0 0 1 0 54.528L472.32 647.424z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FC6376&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m298.989 643.872 72.601 72.576q12.855 12.85.004 25.705l-1.628 1.63q-12.85 12.854-25.705.004l-72.602-72.576q-12.854-12.85-.004-25.705l1.629-1.63q12.85-12.854 25.705-.004Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFA9B1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M737.024 547.584a99.328 99.328 0 0 1 62.72-62.72l51.2-13.568A27.136 27.136 0 0 0 864 421.632L826.624 384a98.816 98.816 0 0 1-22.784-85.76l16.896-63.232c7.168-27.136-8.96-43.52-36.096-36.096l-63.232 16.896a98.816 98.816 0 0 1-85.76-23.04l-37.376-36.864a27.136 27.136 0 0 0-49.408 13.312l-13.824 51.2a97.792 97.792 0 0 1-62.464 62.72l-51.2 13.824a27.136 27.136 0 0 0-13.312 49.408L445.44 384a97.536 97.536 0 0 1 23.04 85.504l-16.896 63.232c-7.424 27.392 8.96 43.52 36.096 36.352l63.232-16.896a97.792 97.792 0 0 1 85.76 22.784l37.376 37.376a26.88 26.88 0 0 0 49.408-13.312z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FDDE80&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m886.272 417.536-74.752-75.008 30.464-114.432a41.216 41.216 0 0 0-8.704-41.472 41.728 41.728 0 0 0-41.472-7.424l-114.432 30.72-74.752-76.032a41.728 41.728 0 0 0-39.424-13.312 41.216 41.216 0 0 0-28.416 31.488l-27.392 102.4L404.48 281.6a42.24 42.24 0 0 0-31.744 28.16 42.24 42.24 0 0 0 13.312 40.448l74.752 75.008-30.72 114.432a41.728 41.728 0 0 0 8.96 41.472 37.888 37.888 0 0 0 27.392 10.752 56.832 56.832 0 0 0 14.08-2.048l114.432-30.72 74.752 75.008a45.824 45.824 0 0 0 31.232 14.336 34.304 34.304 0 0 0 8.96 0 41.216 41.216 0 0 0 28.416-31.488l27.392-102.4 102.4-27.392a41.984 41.984 0 0 0 31.488-28.416 40.96 40.96 0 0 0-13.312-41.216zm-84.736-203.52h5.12a16.896 16.896 0 0 1 0 5.12l-25.6 93.696-72.96-73.728zm-32 139.776-34.56 128-128 34.56-102.4-102.4 34.56-128 128-34.56zm-199.424-192c0-2.56 1.792-4.096 1.792-4.608a9.984 9.984 0 0 1 4.096 3.072l59.648 59.648-87.296 23.296zM412.416 323.84 409.6 320a12.8 12.8 0 0 1 4.864-2.048l81.152-21.76L472.064 384zm58.368 230.4a18.944 18.944 0 0 1-5.12 0 17.92 17.92 0 0 1 0-5.12l25.6-93.696L563.2 528.64zm230.4 51.2c0 2.816-1.536 4.096-1.536 4.864a20.992 20.992 0 0 1-4.352-3.328l-59.392-59.392 87.296-23.552zm156.16-156.16-81.152 21.76L799.488 384l59.392 59.392a40.96 40.96 0 0 1 3.328 3.84 12.8 12.8 0 0 1-4.096 2.56z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FCC029&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-fashion&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M691.2 204.8a44.032 44.032 0 0 1 29.952 34.048 117.76 117.76 0 0 1-13.056 76.8s-19.2 29.952-24.32 39.936a235.008 235.008 0 0 0-25.6 107.008v40.704H365.312v-39.424a235.008 235.008 0 0 0-25.6-107.008c-5.12-9.984-24.32-39.936-24.32-39.936a117.76 117.76 0 0 1-13.056-76.8 44.544 44.544 0 0 1 34.56-35.328v-57.088a29.952 29.952 0 0 1 27.136-31.744 29.952 29.952 0 0 1 27.648 31.744v73.728A237.056 237.056 0 0 0 512 253.952a241.408 241.408 0 0 0 125.184-35.072v-71.168a27.136 27.136 0 1 1 53.76 0z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FF6A9B&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M658.432 487.936h-293.12L204.8 780.288a36.352 36.352 0 0 0 10.24 46.592 492.288 492.288 0 0 0 595.456 0 36.608 36.608 0 0 0 8.704-47.36z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FF9DC6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M409.6 537.6a9.984 9.984 0 0 0-13.568 4.608l-124.16 250.624a10.496 10.496 0 0 0 4.608 13.568 14.848 14.848 0 0 0 4.608 0 9.984 9.984 0 0 0 8.96-5.632l124.16-250.88A10.24 10.24 0 0 0 409.6 537.6zm46.336 105.472a9.984 9.984 0 0 0-12.032 7.424l-40.448 170.752a10.24 10.24 0 0 0 7.424 12.288h2.304a9.728 9.728 0 0 0 9.728-7.936l40.448-170.752a9.984 9.984 0 0 0-7.424-11.776zm294.912 148.736-124.16-250.624A9.984 9.984 0 0 0 614.4 537.6a10.24 10.24 0 0 0-4.608 13.312l124.16 250.88a9.984 9.984 0 0 0 8.96 5.632 14.848 14.848 0 0 0 4.608 0 10.496 10.496 0 0 0 3.328-15.616zM579.84 650.496a9.984 9.984 0 0 0-19.456 4.608l40.448 170.752a9.728 9.728 0 0 0 9.728 7.936h2.304a10.24 10.24 0 0 0 7.424-12.288z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FF6A9B&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-food&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M116.78099999999999 503.883a75.294 75.294 0 1 0 150.588 0 75.294 75.294 0 1 0-150.588 0ZM267.36899999999997 411.211a75.294 75.294 0 1 0 150.589 0 75.294 75.294 0 1 0-150.589 0Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FA942D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M209.453 480.723a75.294 75.294 0 1 0 150.588 0 75.294 75.294 0 1 0-150.588 0Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FE5D79&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M638.042 532.841a127.428 127.428 0 1 0 254.856 0 127.428 127.428 0 1 0-254.856 0Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FA942D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M499.05 457.547a133.21 133.21 0 1 0 266.42 0 133.21 133.21 0 1 0-266.42 0Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FA942D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M522.21 556.017a150.588 150.588 0 1 0 301.176 0 150.588 150.588 0 1 0-301.176 0Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FE5D79&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M932.292 474.925a28.762 28.762 0 0 1 28.747 28.763l-.045 1.355-.09 1.355c-14.306 150.92-130.606 272.866-280.742 299.189l20.179 80.745a23.16 23.16 0 0 1-22.468 28.778H343.37a23.16 23.16 0 0 1-22.467-28.778l20.178-80.745C192.813 779.595 77.552 660.329 60.928 512.015l-.557-5.376a28.958 28.958 0 0 1 28.822-31.714h843.084z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FDDC7A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M442.549 196.924h136.147c21.263 0 39.8 14.457 44.95 35.087l60.732 242.914H336.866l60.732-242.899a46.336 46.336 0 0 1 44.95-35.102z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#F6C338&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M688.038 192.904c9.442-30.178 28.386-29.41 34.68-47.586 7.063-20.45 9.367-45.719 6.927-75.822 16.851 17.936 25.977 37.015 30.946 62.284 4.894 24.937-9.126 44.182-29.063 74.48-19.923 30.314-8.81 67.615 0 94.916-16.851-17.92-59.904-55.777-43.475-108.272zm-404.676-38.656c11.324-37.708 34.063-36.774 41.607-59.483C333.463 69.21 336.233 37.632 333.282 0c20.239 22.408 31.202 46.26 37.165 77.854 5.873 31.172-10.948 55.22-34.876 93.109-23.944 37.873-10.602 84.48 0 118.633-20.24-22.422-71.936-69.722-52.21-135.348z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#C6D2E1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M510.63 706.605a92.672 92.672 0 0 1 92.672 92.672V915.11H417.958V799.277a92.672 92.672 0 0 1 92.672-92.672z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#F5BC20&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-game&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M256.512 166.144h510.976q90.112 0 90.112 90.112v510.976q0 90.112-90.112 90.112H256.512q-90.112 0-90.112-90.112V256.256q0-90.112 90.112-90.112Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#58D598&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M307.2 325.632h136.448V462.08H307.2zm272.896 0h136.448V462.08H580.096zM443.648 462.336v75.776h-64.256v204.544h59.392V674.56h146.432v68.096h59.136V538.112h-64.256v-75.776H443.648z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#17AD8A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-gaoxiao&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M512 131.282c-210.288 0-380.718 170.43-380.718 380.718S301.712 892.718 512 892.718 892.718 722.288 892.718 512c0-209.841-170.43-380.718-380.718-380.718zm0 675.998c-132.359 0-239.511-102.715-239.511-229.744 0-110.697 107.126-42.64 239.511-42.64 132.359 0 239.511-65.825 239.511 42.614C751.065 704.118 643.912 807.253 512 807.253z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFD46A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M512 807.28c-132.359 0-239.511-102.715-239.511-229.744 0-110.697 107.126-42.64 239.511-42.64 132.359 0 239.511-65.825 239.511 42.614C751.065 704.118 643.912 807.253 512 807.253z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFF&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M511.79 667.097c-61.571 0-112.955 30.877-126.687 72.651a220.554 220.554 0 0 0 253.794 0C624.3 698 572.915 667.097 511.79 667.097zM280.839 304.102a26.256 26.256 0 0 1 32.111-13.654l2.862 1.13 127.344 60.205a26.256 26.256 0 0 1 3.36 45.608l-2.966 1.706-122.224 60.206a26.256 26.256 0 0 1-25.863-45.607l2.652-1.497 73.44-36.207-78.192-36.943a26.256 26.256 0 0 1-13.653-32.112l1.129-2.835zm463.662 0a26.256 26.256 0 0 0-32.112-13.654l-2.836 1.13-127.37 60.205a26.256 26.256 0 0 0-3.334 45.608l2.94 1.706 122.224 60.206a26.256 26.256 0 0 0 25.889-45.607l-2.678-1.497-73.413-36.207 78.191-36.943a26.256 26.256 0 0 0 13.654-32.112l-1.155-2.835z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FD621D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-gongkaike&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 40 40&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">&quot;14&quot;</span> <span class="attr">height</span>=<span class="string">&quot;3&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;1.5&quot;</span> <span class="attr">transform</span>=<span class="string">&quot;matrix(-.17365 .9848 -.98266 -.18541 17.38 20)&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFD778&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span><span class="tag">&lt;<span class="name">rect</span> <span class="attr">width</span>=<span class="string">&quot;14&quot;</span> <span class="attr">height</span>=<span class="string">&quot;3&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;1.5&quot;</span> <span class="attr">transform</span>=<span class="string">&quot;matrix(-.17365 -.9848 .98681 -.16186 26.425 33.752)&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFD778&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;7&quot;</span> <span class="attr">y</span>=<span class="string">&quot;6&quot;</span> <span class="attr">width</span>=<span class="string">&quot;26.654&quot;</span> <span class="attr">height</span>=<span class="string">&quot;20.042&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;2&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#7B78EA&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span><span class="tag">&lt;<span class="name">rect</span> <span class="attr">x</span>=<span class="string">&quot;4&quot;</span> <span class="attr">y</span>=<span class="string">&quot;23.815&quot;</span> <span class="attr">width</span>=<span class="string">&quot;32&quot;</span> <span class="attr">height</span>=<span class="string">&quot;3&quot;</span> <span class="attr">rx</span>=<span class="string">&quot;1.5&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFD778&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;m24.638 15.197-5.43 3.671a.753.753 0 0 1-.59.113.756.756 0 0 1-.279-.13.8.8 0 0 1-.21-.235.82.82 0 0 1-.129-.442v-7.35a.854.854 0 0 1 .233-.583.767.767 0 0 1 .555-.24.715.715 0 0 1 .42.129l5.43 3.67a.832.832 0 0 1 .344.521.87.87 0 0 1-.105.624.79.79 0 0 1-.239.252Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFD778&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-guochandonghuatuijian&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M873.472 321.792c-46.08-46.592-102.4-73.472-161.536-40.192a177.152 177.152 0 0 0-51.2-161.536s-83.456 107.52-15.104 219.648c-12.288 13.568-24.32 27.136-36.352 39.424-26.88 27.136 14.592 69.12 41.216 41.984l68.608-69.632c40.704-40.96 76.8-23.808 112.896 12.288 26.624 26.88 68.096-15.104 41.472-41.984z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#58D598&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M705.024 344.576a189.696 189.696 0 0 0-270.848 0 195.072 195.072 0 0 0-41.216 62.464 249.088 249.088 0 0 0-177.664 74.496 256 256 0 0 0 0 359.68 248.576 248.576 0 0 0 354.816 0 256 256 0 0 0 73.472-179.2 190.976 190.976 0 0 0 61.44-41.728 195.84 195.84 0 0 0 0-275.712z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FF5C7A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M514.304 808.704a187.136 187.136 0 0 1-267.264-5.12 193.536 193.536 0 0 1 5.12-271.104s-45.056 120.832 43.776 214.272a210.176 210.176 0 0 0 218.368 61.952&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#F14767&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-guochuang&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M873.472 321.792c-46.08-46.592-102.4-73.472-161.536-40.192a177.152 177.152 0 0 0-51.2-161.536s-83.456 107.52-15.104 219.648c-12.288 13.568-24.32 27.136-36.352 39.424-26.88 27.136 14.592 69.12 41.216 41.984l68.608-69.632c40.704-40.96 76.8-23.808 112.896 12.288 26.624 26.88 68.096-15.104 41.472-41.984z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#58D598&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M705.024 344.576a189.696 189.696 0 0 0-270.848 0 195.072 195.072 0 0 0-41.216 62.464 249.088 249.088 0 0 0-177.664 74.496 256 256 0 0 0 0 359.68 248.576 248.576 0 0 0 354.816 0 256 256 0 0 0 73.472-179.2 190.976 190.976 0 0 0 61.44-41.728 195.84 195.84 0 0 0 0-275.712z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FF5C7A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M514.304 808.704a187.136 187.136 0 0 1-267.264-5.12 193.536 193.536 0 0 1 5.12-271.104s-45.056 120.832 43.776 214.272a210.176 210.176 0 0 0 218.368 61.952&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#F14767&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-information&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M760.686 768a21.943 21.943 0 0 0 19.836 21.84l2.107.103a21.943 21.943 0 0 0 21.84-19.836l.102-2.107V321.829h29.258a58.514 58.514 0 0 1 58.514 58.514V819.2a58.514 58.514 0 0 1-58.514 58.514H190.17a58.514 58.514 0 0 1-58.514-58.514V204.8a58.514 58.514 0 0 1 58.514-58.514h512a58.514 58.514 0 0 1 58.515 58.514V768z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#7DD3E0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M248.686 234.057h394.971q29.257 0 29.257 29.257V526.63q0 29.257-29.257 29.257H248.686q-29.257 0-29.257-29.257V263.314q0-29.257 29.257-29.257Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#3DA9D3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m404.773 300.515 129.462 80.925a15.945 15.945 0 0 1 0 27.063l-129.462 80.925a15.945 15.945 0 0 1-24.43-13.531v-161.85a15.945 15.945 0 0 1 24.43-13.532z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFD469&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M248.686 614.4h394.971q29.257 0 29.257 29.257t-29.257 29.257H248.686q-29.257 0-29.257-29.257t29.257-29.257ZM248.686 731.429h219.428q29.257 0 29.257 29.257t-29.257 29.257H248.686q-29.257 0-29.257-29.257t29.257-29.257Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#3DA9D3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-kichiku&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M918.784 510.208a187.904 187.904 0 0 0-88.832-159.488 156.416 156.416 0 0 0 1.792-22.016A150.784 150.784 0 0 0 620.8 190.208a151.04 151.04 0 0 0-216.32 0 150.784 150.784 0 0 0-210.944 138.496 156.416 156.416 0 0 0 1.792 22.016 187.648 187.648 0 0 0-13.824 309.504v1.536a215.296 215.296 0 0 0 332.8 179.2 215.04 215.04 0 0 0 332.8-179.2v-2.56a187.904 187.904 0 0 0 71.68-148.992z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FC6B8A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M680.704 479.744A150.528 150.528 0 0 1 572.672 435.2a150.016 150.016 0 0 1-120.064 0 150.528 150.528 0 0 1-108.032 45.824h-11.264v167.168A166.4 166.4 0 0 0 499.2 814.08h33.536a166.4 166.4 0 0 0 165.888-165.888V478.464a137.216 137.216 0 0 1-17.92 1.28z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFF&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M476.928 651.264a33.536 33.536 0 1 0 67.072 0 33.536 33.536 0 1 0-67.072 0Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#E2006C&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M635.904 554.496H614.4v-21.504a12.032 12.032 0 0 0-11.776-11.776h-4.864a12.032 12.032 0 0 0-11.776 11.776v21.504h-21.248a11.776 11.776 0 0 0-11.776 11.52v5.12a11.776 11.776 0 0 0 11.776 11.52h21.248v21.504a12.032 12.032 0 0 0 11.776 11.776h4.864A12.032 12.032 0 0 0 614.4 604.16v-21.504h21.248a11.776 11.776 0 0 0 11.776-11.52v-5.12a11.776 11.776 0 0 0-11.52-11.52zm-179.968 0H435.2v-21.504a12.032 12.032 0 0 0-11.776-11.776h-4.864a12.032 12.032 0 0 0-11.776 11.776v21.504H384a11.776 11.776 0 0 0-11.776 11.52v5.12A11.776 11.776 0 0 0 384 582.656h21.248v21.504a12.032 12.032 0 0 0 11.776 11.776h4.864A12.032 12.032 0 0 0 435.2 604.16v-21.504h21.248a11.52 11.52 0 0 0 11.776-11.52v-5.12a11.52 11.52 0 0 0-12.288-11.52z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FF5C7A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M600.32 651.008a12.288 12.288 0 0 0-12.288 12.544c0 34.048-34.816 61.696-76.8 61.696s-76.8-27.648-76.8-61.696a12.544 12.544 0 1 0-25.6 0c0 47.616 45.824 86.528 102.4 86.528s102.4-38.912 102.4-86.528a12.544 12.544 0 0 0-13.312-12.544z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#EB53A8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-knowledge&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M492.27 147.73A255.343 255.343 0 0 1 627.2 620.261v51.2a37.547 37.547 0 0 1-25.6 34.134H379.733a44.655 44.655 0 0 1-25.6-34.134v-51.2A256.649 256.649 0 0 1 492.271 147.73z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFA200&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M550.4 534.93v-76.8h51.2c46.61 0 51.2-26.787 51.2-42.668v-128c0-23.116-17.203-42.666-51.2-42.666H388.267c-42.104 0-59.734 21.111-59.734 42.666v76.8h102.4v-68.266H550.4v119.466h-51.2c-60.501-.563-76.8 24.406-76.8 42.667v76.8h128zm-62.669 24.532a59.733 59.733 0 1 1-59.733 59.734 59.733 59.733 0 0 1 59.733-59.734z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFF0D3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M354.133 739.738H627.2v8.533a128 128 0 0 1-128 128h-17.067a128 128 0 0 1-128-128v-8.533z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#5FB5EC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M746.667 210.662h119.466a17.067 17.067 0 0 1 0 34.134H746.667a17.067 17.067 0 0 1 0-34.134zM806.4 150.93a17.067 17.067 0 0 1 17.067 17.067v119.466a17.067 17.067 0 0 1-34.134 0V167.996a17.067 17.067 0 0 1 17.067-17.067zM157.867 662.93h119.466a17.067 17.067 0 0 1 0 34.132H157.867a17.067 17.067 0 0 1 0-34.133zm59.733-59.734a17.067 17.067 0 0 1 17.067 17.066V739.73a17.067 17.067 0 0 1-34.134 0V620.262a17.067 17.067 0 0 1 17.067-17.066z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFE074&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M200.533 662.938h34.134v34.133h-34.134zM789.333 210.67h34.134v34.134h-34.134z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFE074&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-life&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M881.408 664.064V504.32a168.192 168.192 0 0 0-128-162.56l-7.936-1.792v144.896a12.288 12.288 0 0 1-14.592 11.776 170.752 170.752 0 0 0-30.464-2.816H561.664v-27.648a37.632 37.632 0 0 1 11.776-27.648 175.872 175.872 0 0 0 57.856-135.68A179.2 179.2 0 0 0 460.8 132.352 175.872 175.872 0 0 0 279.808 308.48V409.6h32.256a225.536 225.536 0 0 0 15.872 19.2 36.608 36.608 0 0 1 9.472 25.6v42.496A193.792 193.792 0 0 0 179.2 712.96a197.12 197.12 0 0 0 197.12 166.656h325.12a148.48 148.48 0 0 0 45.568-6.144 217.088 217.088 0 0 0 64.256-31.744 176.896 176.896 0 0 0 18.176-15.616l4.608-4.352a156.16 156.16 0 0 0 47.36-111.872v-35.84c.512-3.072.256-6.656 0-9.984z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFD778&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M468.736 238.592a40.192 40.192 0 1 0 40.192 40.192 40.192 40.192 0 0 0-40.192-40.192zm-145.152 124.16H217.6a34.816 34.816 0 1 0 0 69.376h106.24a34.816 34.816 0 1 0 0-69.376z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FB813A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-live&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M392.448 275.911a92.416 92.416 0 1 1-184.832 0 92.416 92.416 0 0 1 184.832 0&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#23ADE5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m826.624 464.583-63.744 36.864v-48.64a72.206 72.206 0 0 0-71.68-71.936H190.72a72.192 72.192 0 0 0-71.936 71.936v295.424a71.936 71.936 0 0 0 71.936 71.936H691.2a71.936 71.936 0 0 0 71.936-71.936v-23.808l63.488 37.888a51.2 51.2 0 0 0 76.8-44.544V508.871a51.2 51.2 0 0 0-76.8-44.288m-253.696-95.232c79.46.142 143.986-64.156 144.128-143.616.142-79.46-64.156-143.986-143.616-144.128-79.26-.142-143.701 63.858-144.128 143.104-.427 79.46 63.644 144.213 143.104 144.64h.512&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#48CFE5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m425.216 512.967 124.16 71.936a25.6 25.6 0 0 1 0 42.496l-124.16 71.68a25.6 25.6 0 0 1-37.12-21.248v-143.36a25.6 25.6 0 0 1 37.12-21.504&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FDDE80&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-manhua&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M738.629 807.087H260.446c-33.443-.075-60.541-28.997-60.641-64.712V397.312c.1-35.715 27.198-64.687 60.64-64.762H738.63c33.442.125 60.516 29.072 60.59 64.787V742.35c-.1 35.715-27.173 64.637-60.59 64.737&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFE494&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M497.564 701.015A125.278 125.278 0 0 0 621.543 593.82a15.685 15.685 0 0 0-15.36-18.107H388.92a15.685 15.685 0 0 0-15.335 18.107 125.303 125.303 0 0 0 123.98 107.195&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#F6C435&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M748.669 342.19c20.28-6.568 34.241-26.074 32.343-47.328a128.75 128.75 0 0 0-5.869-28.797c-35.39-109.043-205.4-151.552-379.73-94.957C221.085 227.728 108.47 362.02 143.86 471.065a130.061 130.061 0 0 0 12.188 26.724c10.989 18.332 33.717 25.9 53.997 19.331l538.624-174.954z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#9796ED&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m363.82 146.732 10.065 31.044c4.47 13.737 19.381 21.305 33.093 16.859 13.736-4.47 21.354-19.356 16.883-33.093l-10.065-31.02a26.3 26.3 0 0 0-49.976 16.235m383.425 499.537-80.496-36.415s11.539 49.977 66.935 83.094c-.075.65-.25 1.249-.35 1.948-11.914 84.768 35.815 160.843 106.596 169.934 70.756 9.092 137.765-52.274 149.704-137.04 11.888-84.743-35.815-160.844-106.621-169.91-56.27-7.243-110.068 30.17-135.768 88.414z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#9796ED&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m890.38 647.293-17.757 88.913a5.894 5.894 0 0 1-5.795 4.745h-15.934a5.92 5.92 0 0 1-5.87-6.768l12.988-88.888a5.87 5.87 0 0 1 5.794-5.07h20.755c3.747 0 6.544 3.421 5.795 7.068m-20.53 121.98-2.673 14.611a5.894 5.894 0 0 1-5.794 4.846h-18.782a5.92 5.92 0 0 1-5.82-6.844l2.374-14.585a5.92 5.92 0 0 1 5.819-4.995h19.056a5.902 5.902 0 0 1 5.82 6.993&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFF&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-love&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M131.56 512a380.44 380.44 0 1 0 760.88 0 380.44 380.44 0 1 0-760.88 0Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#00AEEC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M600.518 766.255c-13.183 0-22.6-11.3-22.6-22.6 0-92.286 75.335-167.62 169.503-167.62 13.184 0 22.6 11.3 22.6 22.6s-11.3 22.6-22.6 22.6c-67.801 0-124.302 54.618-124.302 122.42 0 13.183-9.417 22.6-22.6 22.6zm-177.036 0c-13.184 0-22.6-11.3-22.6-22.6 0-67.802-56.502-122.42-124.303-122.42-13.184 0-22.6-11.3-22.6-22.6s11.3-22.6 22.6-22.6c94.168 0 169.503 75.334 169.503 167.62 0 13.183-9.417 22.6-22.6 22.6zm-82.869-459.542c33.901-28.25 79.102-37.668 122.42-24.484 5.65 1.883 7.533 9.417 3.766 15.067l-62.151 62.151c-7.534 7.533-7.534 20.717 0 28.25 7.533 7.534 20.717 7.534 28.25 0l69.685-69.684c50.851-50.851 133.72-50.851 186.454 0 50.85 50.85 50.85 131.836 0 182.687L523.3 664.553c-7.533 7.533-18.833 7.533-24.484 0L325.546 495.05c-47.084-58.385-39.55-141.253 15.067-188.337z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFF&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-match&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M545.03 736.563v68.01h108.108a23.997 23.997 0 0 1 24.002 23.997v17.833a23.997 23.997 0 0 1-24.002 23.997h-282.27a23.997 23.997 0 0 1-24.003-24.003V828.57a23.997 23.997 0 0 1 24.002-23.998h108.109v-68.014c-57.334-7.639-108.467-34.888-146.432-74.783-103.526-30.924-171.49-125.808-202.27-278.917-12.545-62.382 28.042-123.085 90.639-135.588a115.978 115.978 0 0 1 22.707-2.242h20.68V227.2a48 48 0 0 1 48-48h399.41a48 48 0 0 1 48 48v17.828h20.67c7.629 0 15.232.752 22.707 2.242 62.597 12.498 103.179 73.206 90.64 135.588-30.777 153.104-98.74 247.987-202.26 278.917-37.97 39.895-89.104 67.144-146.433 74.783zM270.34 545.653a248.545 248.545 0 0 1-6.041-54.614V310.856h-20.685c-3.262 0-6.523.322-9.728.962-26.83 5.356-44.222 31.37-38.846 58.112 15.78 78.49 40.755 136.643 75.295 175.719zm489.37-234.797v180.183c0 18.76-2.09 37.038-6.042 54.605 34.535-39.076 59.51-97.234 75.29-175.719 5.376-26.737-12.017-52.751-38.846-58.107a49.705 49.705 0 0 0-9.728-.962h-20.674z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFD778&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m512 487.639-59.791 31.217a12.8 12.8 0 0 1-18.535-13.527l11.392-65.982-48.19-46.653a12.8 12.8 0 0 1 7.077-21.863l66.683-9.625 29.9-60.176a12.8 12.8 0 0 1 22.928 0l29.9 60.176 66.683 9.625a12.8 12.8 0 0 1 7.076 21.863l-48.19 46.653 11.393 65.982a12.8 12.8 0 0 1-18.535 13.527L512 487.639z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FB813A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-movie&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M954.624 452.864H919.04v-168.96a37.376 37.376 0 0 0-25.6-36.608 36.608 36.608 0 0 0-46.592 34.304v170.24H199.936V282.88a37.632 37.632 0 0 0-25.6-36.608A36.352 36.352 0 0 0 128 281.6v170.24H92.16a15.616 15.616 0 0 0-15.36 15.872V550.4a15.36 15.36 0 0 0 15.36 15.616h26.88v85.248a135.68 135.68 0 0 0 134.4 136.192h114.432a135.68 135.68 0 0 0 134.4-136.192v-20.992a7.936 7.936 0 0 1 7.68-7.936h25.6a7.68 7.68 0 0 1 7.68 7.936v20.992a135.936 135.936 0 0 0 134.4 136.192H793.6A135.68 135.68 0 0 0 928 651.264v-85.248h25.6a15.36 15.36 0 0 0 15.36-15.616v-81.664a15.616 15.616 0 0 0-15.36-15.872&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#E5E6E6&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M361.216 727.552h-102.4A87.296 87.296 0 0 1 172.8 640v-79.872a61.184 61.184 0 0 1 60.416-61.44h153.6a61.184 61.184 0 0 1 60.416 61.44V640a87.296 87.296 0 0 1-86.528 87.552&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FF5C7A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M685.568 727.552h102.4A87.296 87.296 0 0 0 873.984 640v-79.872a61.184 61.184 0 0 0-60.416-61.44h-153.6a61.184 61.184 0 0 0-60.416 61.44V640a87.296 87.296 0 0 0 86.528 87.552&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#2CBAE5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-music&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M881.92 460.8a335.36 335.36 0 0 0-334.336-335.104h-73.216A335.616 335.616 0 0 0 139.776 460.8v313.6a18.688 18.688 0 0 0 18.432 18.688h41.984c13.568 46.336 37.888 80.384 88.576 80.384h98.304a37.376 37.376 0 0 0 37.376-36.864l1.28-284.672a36.864 36.864 0 0 0-37.12-37.12h-99.84a111.616 111.616 0 0 0-51.2 12.8V454.4a242.432 242.432 0 0 1 241.664-241.664h67.328A242.176 242.176 0 0 1 787.968 454.4v74.496a110.592 110.592 0 0 0-54.272-14.08h-99.84a36.864 36.864 0 0 0-37.12 37.12v284.672a37.376 37.376 0 0 0 37.376 36.864h98.304c51.2 0 75.008-34.048 88.576-80.384h41.984a18.688 18.688 0 0 0 18.432-18.688z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#45C7DD&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m646.1859999999999 792.7090000000001.274-196.096q.046-32.512 32.558-32.466l1.024.001q32.512.045 32.466 32.557l-.274 196.096q-.045 32.512-32.557 32.467l-1.024-.002q-32.512-.045-32.467-32.557ZM307.26800000000003 792.7349999999999l.274-196.096q.045-32.512 32.557-32.467l1.024.002q32.512.045 32.467 32.557l-.274 196.096q-.045 32.512-32.557 32.466l-1.024-.001q-32.512-.045-32.467-32.557Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FF5C7A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-musicplus&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M153.6 256h716.8q25.6 0 25.6 25.6v512q0 25.6-25.6 25.6H153.6q-25.6 0-25.6-25.6v-512q0-25.6 25.6-25.6Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#3DA9D3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M153.6 256h153.6v563.2H153.6a25.6 25.6 0 0 1-25.6-25.6v-512a25.6 25.6 0 0 1 25.6-25.6zm716.8 0H716.8v563.2h153.6a25.6 25.6 0 0 0 25.6-25.6v-512a25.6 25.6 0 0 0-25.6-25.6z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#7DD3E0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M783.36 320h46.08q15.36 0 15.36 15.36v20.48q0 15.36-15.36 15.36h-46.08q-15.36 0-15.36-15.36v-20.48Q768 320 783.36 320ZM783.36 448h46.08q15.36 0 15.36 15.36v20.48q0 15.36-15.36 15.36h-46.08q-15.36 0-15.36-15.36v-20.48Q768 448 783.36 448ZM783.36 576h46.08q15.36 0 15.36 15.36v20.48q0 15.36-15.36 15.36h-46.08q-15.36 0-15.36-15.36v-20.48Q768 576 783.36 576ZM783.36 704h46.08q15.36 0 15.36 15.36v20.48q0 15.36-15.36 15.36h-46.08q-15.36 0-15.36-15.36v-20.48Q768 704 783.36 704Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#3DA9D3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M576 180.736c8.78-2.611 15.898-1.92 21.35 2.074 5.479 3.993 11.008 9.83 16.64 17.459 5.607 7.654 12.544 16.256 20.762 25.856 8.243 9.574 19.456 18.509 33.69 26.777 12.236 7.68 22.963 12.954 32.204 15.77l25.959 7.86a146.846 146.846 0 0 1 23.654 9.266s17.741 9.984 25.523 20.48c8.116 10.906 14.874 19.661 16.615 30.976 1.715 11.341 1.613 21.914-.461 31.693a72.73 72.73 0 0 1-9.574 24.576c-4.276 6.58-7.86 9.933-10.752 9.933-2.868.026-5.402-1.613-7.604-5.043-2.227-3.38-3.84-9.984-4.864-19.763-1.69-15.872-6.656-27.034-14.976-33.46-8.32-6.425-21.35-9.984-39.142-10.726a96.051 96.051 0 0 1-48.922-15.616 283.047 283.047 0 0 1-34.97-26.803c-8.882-7.373-15.794-9.549-20.889-6.298-4.992 3.226-7.577 8.115-7.731 14.746l-.563 26.752-6.707 273.792-.794 35.405c.154 9.856-1.664 21.196-5.427 33.996-3.789 12.8-10.675 25.293-20.66 37.453-9.932 12.16-23.09 23.22-39.475 33.229s-36.582 17.357-60.595 22.067c-24.448 4.762-46.413 3.584-65.894-3.507-19.456-7.091-34.381-17.434-44.775-31.027-10.24-12.928-15.436-29.594-14.77-47.514.69-18.048 8.857-36.045 24.473-53.965s32.435-31.283 50.432-40.115a198.81 198.81 0 0 1 51.814-17.715 178.842 178.842 0 0 1 44.314-3.02c13.005 1.049 22.579 2.38 28.749 3.942 0 0 6.45-280.167 8.294-341.607.23-12.109 3.584-22.323 9.933-30.976 6.4-8.55 14.771-14.208 25.139-16.947zm160.922 288.18a12.8 12.8 0 0 1 .358 2.969v40.96l41.728-6.912a12.8 12.8 0 0 1 14.9 12.595v15.002a12.8 12.8 0 0 1-10.702 12.646l-45.952 7.629.026 45.363a12.8 12.8 0 0 1-9.83 12.442l-15.36 3.66a12.8 12.8 0 0 1-15.77-12.441V560.64l-41.114 6.86a12.8 12.8 0 0 1-14.899-12.62v-15.002a12.8 12.8 0 0 1 10.701-12.646l45.312-7.552v-44.134a12.8 12.8 0 0 1 9.83-12.468l15.36-3.635a12.8 12.8 0 0 1 15.412 9.472z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFD469&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M194.56 320h46.08Q256 320 256 335.36v20.48q0 15.36-15.36 15.36h-46.08q-15.36 0-15.36-15.36v-20.48q0-15.36 15.36-15.36ZM194.56 448h46.08Q256 448 256 463.36v20.48q0 15.36-15.36 15.36h-46.08q-15.36 0-15.36-15.36v-20.48q0-15.36 15.36-15.36ZM194.56 576h46.08Q256 576 256 591.36v20.48q0 15.36-15.36 15.36h-46.08q-15.36 0-15.36-15.36v-20.48q0-15.36 15.36-15.36ZM194.56 704h46.08Q256 704 256 719.36v20.48q0 15.36-15.36 15.36h-46.08q-15.36 0-15.36-15.36v-20.48q0-15.36 15.36-15.36Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#3DA9D3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-read&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M778.496 142.08h-537.6a56.832 56.832 0 0 0-60.16 54.016v630.528a56.832 56.832 0 0 0 59.136 54.016h537.6a56.832 56.832 0 0 0 59.136-54.016V196.096a56.832 56.832 0 0 0-59.136-54.016z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#54E2E2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M298.496 679.168h421.376a25.6 25.6 0 0 0 0-52.736H298.496a25.6 25.6 0 1 0 0 52.736zm421.376 53.76H298.496a25.6 25.6 0 1 0 0 52.736h421.376a25.6 25.6 0 0 0 0-52.736zM352.256 237.056h314.112q80.128 0 80.128 80.128v154.368q0 80.128-80.128 80.128H352.256q-80.128 0-80.128-80.128V317.184q0-80.128 80.128-80.128Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#23ADE5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M355.584 361.472a49.408 49.408 0 1 0 98.816 0 49.408 49.408 0 1 0-98.816 0ZM375.552 551.936l120.832-144.384a44.544 44.544 0 0 1 68.352 0l120.832 144.384z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#2EC3E5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-sports&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m497.894 517.862 23.885 29.261a58.573 58.573 0 0 1-5.606 80.051L241.946 880.742a47.718 47.718 0 0 1-65.613-.768 49.818 49.818 0 0 1-4.301-66.816l108.57-136.37 126.105-158.362a58.573 58.573 0 0 1 91.187-.564z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#1BAD8B&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M698.931 153.6a117.146 117.146 0 0 1 11.418 233.728l60.416 45.9c4.352 3.329 10.163 3.918 15.104 1.588l73.625-34.637a46.285 46.285 0 0 1 59.11 17.587 44.34 44.34 0 0 1-11.929 59.316l-125.952 90.265a58.573 58.573 0 0 1-65.945 1.562l-66.048-42.752-44.135 47.77 70.605 83.327a58.012 58.012 0 0 1 4.608 6.196l1.946 3.302a58.573 58.573 0 0 1-22.861 79.616L466.79 852.71a49.382 49.382 0 0 1-65.74-16.998 52.096 52.096 0 0 1 11.904-68.582l105.548-83.175-106.29-68.3-1.537-1.025a59.75 59.75 0 0 1-.896-.614l-13.824-7.168a58.573 58.573 0 0 1-23.296-82.278l71.68-118.887-30.72-13.824a14.643 14.643 0 0 0-14.336 1.331l-80.486 55.604a48.87 48.87 0 0 1-62.669-5.965 39.347 39.347 0 0 1 1.792-56.858l128.282-115.149a58.573 58.573 0 0 1 57.446-12.032l143.54 47.258A117.146 117.146 0 0 1 698.93 153.6z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#57D59A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-spread&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">defs</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"><span class="keyword">@font-face</span>&#123;<span class="attribute">font-family</span>:element-icons;<span class="attribute">src</span>:<span class="built_in">url</span>(<span class="string">chrome-extension://moombeodfomdpjnpocobemoiaemednkg/fonts/element-icons.woff</span>) <span class="built_in">format</span>(<span class="string">&quot;woff&quot;</span>),<span class="built_in">url</span>(<span class="string">&quot;chrome-extension://moombeodfomdpjnpocobemoiaemednkg/fonts/element-icons.ttf &quot;</span>) <span class="built_in">format</span>(<span class="string">&quot;truetype&quot;</span>)&#125;</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span><span class="tag">&lt;/<span class="name">defs</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M324.557 660.316v56.832c0 30.193 24.473 54.672 54.671 54.672 30.193 0 54.672-24.474 54.672-54.672v-14.05l-109.343-42.782zm186.47 72.965c-7.961 65.72-63.933 116.639-131.799 116.639-73.328 0-132.772-59.443-132.772-132.772V629.75L129.3 583.91v.067a39.05 39.05 0 1 1-78.1 0V411.72a39.05 39.05 0 0 1 78.1 0v.066l499.85-195.594V192.65a39.05 39.05 0 1 1 78.106 0v610.396a39.05 39.05 0 1 1-78.105 0v-23.541L511.032 733.28z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFD778&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M808.786 458.732H933.75a39.05 39.05 0 0 1 39.05 39.05v.133a39.05 39.05 0 0 1-39.05 39.05H808.786a39.05 39.05 0 0 1-39.05-39.05v-.133a39.05 39.05 0 0 1 39.05-39.05zm-3.313 130.437 108.258 62.612a39.05 39.05 0 0 1 14.284 53.3l-.056.102a39.045 39.045 0 0 1-53.376 14.3l-108.257-62.618a39.05 39.05 0 0 1-14.285-53.299l.056-.097a39.045 39.045 0 0 1 53.376-14.3zm-39.147-250.343 108.257-62.612a39.045 39.045 0 0 1 53.376 14.305l.051.092a39.05 39.05 0 0 1-14.285 53.305l-108.247 62.612a39.045 39.045 0 0 1-53.376-14.3l-.05-.097a39.05 39.05 0 0 1 14.279-53.3z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FB813A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-tech&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M510.208 683.264H396.032l-50.688 209.408h329.472l-50.688-209.408h-113.92z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFD778&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M535.552 150.528v-28.16a25.6 25.6 0 1 0-51.2 0v28.16A271.872 271.872 0 0 0 239.36 420.096v97.28a25.6 25.6 0 0 0 26.88 26.88h487.936a25.6 25.6 0 0 0 25.6-26.88v-97.28a271.616 271.616 0 0 0-244.224-269.568z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#48CFE5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M228.864 464.64h562.432q103.168 0 103.168 103.168v15.36q0 103.168-103.168 103.168H228.864q-103.168 0-103.168-103.168v-15.36q0-103.168 103.168-103.168Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#2CBAE5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M742.4 537.6a37.632 37.632 0 1 0 37.632 37.632A37.376 37.376 0 0 0 742.4 537.6zm-465.664 0a37.632 37.632 0 1 0 37.632 37.632 37.632 37.632 0 0 0-37.632-37.632z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFD778&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-teleplay&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M271.616 247.808a212.224 212.224 0 0 0-49.664 172.8l25.6 126.72c56.832 21.76 60.16 87.552 67.328 149.248a1167.872 1167.872 0 0 1 190.208-14.08 1247.488 1247.488 0 0 1 196.096 14.08c7.68-61.696 4.352-126.72 59.904-148.736l25.6-128a211.712 211.712 0 0 0-49.92-172.288 218.624 218.624 0 0 0-165.12-74.752H436.736a218.624 218.624 0 0 0-165.12 74.752&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFB161&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m505.088 412.672-34.816-34.56a19.456 19.456 0 0 0-27.392 27.392l25.6 25.6-25.6 25.6a19.456 19.456 0 0 0 27.392 27.392l34.816-34.56 35.072 34.56a18.688 18.688 0 0 0 13.568 5.632 19.456 19.456 0 0 0 13.824-33.024l-25.6-25.6 25.6-25.6a19.456 19.456 0 0 0-13.824-33.024 18.688 18.688 0 0 0-13.568 5.632z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFE494&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M822.016 482.56a130.816 130.816 0 0 0-133.888 128v68.864L320 680.96v-69.376a130.304 130.304 0 0 0-120.32-128h-13.568A81.92 81.92 0 0 0 102.4 563.2a76.8 76.8 0 0 0 0 13.312 79.104 79.104 0 0 0 38.912 54.784l8.96 4.352h2.304a25.6 25.6 0 0 1 15.36 22.016v63.744a112.384 112.384 0 0 0 80.896 105.472 51.2 51.2 0 0 0 98.816 5.888h313.088a51.2 51.2 0 0 0 98.816-5.888 112.384 112.384 0 0 0 79.104-105.472v-70.656a25.6 25.6 0 0 1 8.192-11.52h1.536l4.608-2.816a80.384 80.384 0 0 0 51.2-61.44v-12.032a81.92 81.92 0 0 0-83.712-79.616&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FB952C&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-topic&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M880.64 520.448C880.64 642.56 768 742.4 627.712 742.4H409.6l-165.632 74.496-92.928-258.56a146.688 146.688 0 0 1-3.072-37.888V482.56C147.968 360.448 258.56 256 398.08 256h232.704c136.448 0 249.856 104.448 249.856 226.56v37.888zm-238.336-311.04h-256a280.064 280.064 0 0 0-279.04 273.152v43.776a250.88 250.88 0 0 0 3.072 46.336L215.04 878.08l183.04-90.112h244.224c153.6 0 279.04-116.48 279.04-261.632V482.56a279.808 279.808 0 0 0-279.04-273.152zm58.112 351.744a51.2 51.2 0 0 1-51.2-51.2 55.552 55.552 0 0 1 58.112-52.48 54.528 54.528 0 0 1 51.2 55.296 57.088 57.088 0 0 1-58.112 49.408m-179.2 0a51.2 51.2 0 0 1-51.2-51.2 55.552 55.552 0 0 1 58.112-52.48 54.528 54.528 0 0 1 51.2 55.296 59.392 59.392 0 0 1-58.112 49.408m-179.2 0a51.2 51.2 0 0 1-51.2-51.2 55.552 55.552 0 0 1 58.112-52.48 54.528 54.528 0 0 1 51.2 55.296 59.648 59.648 0 0 1-58.112 49.408m279.04-270.336H412.672c-122.112 0-224 87.296-224 188.928V512a111.36 111.36 0 0 0 3.072 31.744L267.264 768l110.592-58.112H645.12A194.048 194.048 0 0 0 842.752 512v-29.44c-2.816-104.448-102.4-191.744-223.744-191.744&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-tuiguang&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M324.557 660.316v56.832c0 30.193 24.473 54.672 54.671 54.672 30.193 0 54.672-24.474 54.672-54.672v-14.05l-109.343-42.782zm186.47 72.965c-7.961 65.72-63.933 116.639-131.799 116.639-73.328 0-132.772-59.443-132.772-132.772V629.75L129.3 583.91v.067a39.05 39.05 0 1 1-78.1 0V411.72a39.05 39.05 0 0 1 78.1 0v.066l499.85-195.594V192.65a39.05 39.05 0 1 1 78.106 0v610.396a39.05 39.05 0 1 1-78.105 0v-23.541L511.032 733.28z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFD778&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M808.786 458.732H933.75a39.05 39.05 0 0 1 39.05 39.05v.133a39.05 39.05 0 0 1-39.05 39.05H808.786a39.05 39.05 0 0 1-39.05-39.05v-.133a39.05 39.05 0 0 1 39.05-39.05zm-3.313 130.437 108.258 62.612a39.05 39.05 0 0 1 14.284 53.3l-.056.102a39.045 39.045 0 0 1-53.376 14.3l-108.257-62.618a39.05 39.05 0 0 1-14.285-53.299l.056-.097a39.045 39.045 0 0 1 53.376-14.3zm-39.147-250.343 108.257-62.612a39.045 39.045 0 0 1 53.376 14.305l.051.092a39.05 39.05 0 0 1-14.285 53.305l-108.247 62.612a39.045 39.045 0 0 1-53.376-14.3l-.05-.097a39.05 39.05 0 0 1 14.279-53.3z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FB813A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-vlog&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M824.195 570.693V462.049l49.951-49.951v200.704a74.927 74.927 0 0 1-44.956 68.682L574.44 792.601l-142.636-30.795 377.582-168.31a24.976 24.976 0 0 0 14.81-22.803z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#7C79EE&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M799.22 312.195h49.95q24.976 0 24.976 24.976v124.878q0 24.975-24.975 24.975H799.22q-24.976 0-24.976-24.975V337.17q0-24.976 24.976-24.976Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#7C79EE&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M249.756 162.341h449.561q99.903 0 99.903 99.903V512q0 99.902-99.903 99.902h-449.56q-99.903 0-99.903-99.902V262.244q0-99.903 99.902-99.903Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#9796ED&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M299.707 212.293H624.39q49.951 0 49.951 49.95V512q0 49.951-49.95 49.951H299.706q-49.95 0-49.95-49.951V262.244q0-49.951 49.95-49.951Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFE494&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m438.447 300.606 104.822 69.907a24.976 24.976 0 0 1 0 41.56l-104.822 69.881a24.976 24.976 0 0 1-38.837-20.78V321.412a24.976 24.976 0 0 1 38.837-20.805z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#7C79EE&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M474.537 649.366h99.902a49.951 49.951 0 0 1 49.951 49.951v137.366a49.951 49.951 0 0 1-49.951 49.951h-99.902a49.951 49.951 0 0 1-49.952-49.951V699.317a49.951 49.951 0 0 1 49.952-49.951z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#9796ED&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-vtuber&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M212.557 605.082c-.077 42.854-13.799 82.048-41.037 117.606-40.909 53.325-83.917 69.274-77.824 85.197 11.34 35.405 45.568 49.024 102.656 40.883 36.787 61.44 95.488 90.01 176.026 85.606 88.601-9.6 119.654-92.006 93.107-247.219l-252.903-82.048zm522.112-13.67a293.504 293.504 0 0 1-52.352 122.828c-40.448 55.706-31.386 56.934-25.344 73.6 7.782 21.453 24.013 50.048 48.742 85.811 80.205 26.931 158.362 13.056 234.496-41.574 30.95-25.344-15.974-57.267-51.942-136.602-10.317-22.784-5.069-88.013 15.77-195.66l-169.37 91.596z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#23ADE5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m706.202 689.664 113.28-16.384c35.993-44.646 69.888-54.502 101.683-29.517 47.693 37.427 8.269 142.029-71.501 102.759-1.74 0-51.507 5.53-149.35 16.64l5.888-73.524zm-285.568 69.811a41.882 41.882 0 0 1 18.508 56.73l-36.096 69.709a43.136 43.136 0 0 1-57.548 18.764 41.882 41.882 0 0 1-18.484-56.73l36.045-69.708a43.136 43.136 0 0 1 57.575-18.765z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFE6DF&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M465.46 698.112c-35.508-.666-67.457 23.296-95.873 71.834-.051.358 18.1 20.172 54.451 59.468l-18.585 64.154c2.662 36.173 57.062 54.272 163.174 54.272s165.146-21.427 177.152-64.23l-30.72-93.236c50.79-1.126 76.211-7.424 76.211-18.841 0-17.152-27.673-97.536-27.673-115.328 0-11.853-26.445-5.632-79.309 18.688l-218.829 23.219z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#47CFE5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m528.538 684.083 56.192-4.915 22.912 53.683c-23.962 27.955-38.35 41.805-43.085 41.523-6.375-.025-22.912-11.161-49.639-33.408l13.62-56.883z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FED878&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m560.512 728.013-37.427 106.393 53.888 79.079 38.86-87.168z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FED878&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M574.54 705.024c290.484-44.826 302.72-134.016 290.51-252.928-12.237-118.886-160.282-200.422-330.752-182.093-170.42 18.33-298.676 129.587-286.464 248.474 12.21 118.912 36.224 231.321 326.707 186.521z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFE6DF&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M388.02 350.848c25.65 24.32 31.743 31.411 85.452 58.445 105.14 42.752 245.811 9.344 192.205-92.928 19.533 43.417 96.256 99.763 131.43 118.502-8.755 137.216-15.565 200.781 8.755 209.101 19.584 6.707 83.584-40.064 102.119-171.187 19.712-239.463-231.783-433.152-347.955-354.304-276.276-94.515-476.8 224.87-420.378 440.09 30.72 113.689 139.392 207.923 174.746 182.348 24.806-17.92 3.276-148.429-35.047-228.864 48.717-40.448 68.71-57.625 108.672-161.177z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#23ADE5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m337.306 490.163 2.38.359 129.357 29.184c13.159 2.944 16.896 19.353 7.424 27.904l-2.073 1.587L368.46 618.7a16.282 16.282 0 0 1-19.968-25.6l2.099-1.639 73.805-48.435-91.879-20.736a16.307 16.307 0 0 1-12.646-17.075l.358-2.38a16.307 16.307 0 0 1 17.076-12.673zM653.928 504.238a86.58 42.317 84 1 0 84.17-8.847 86.58 42.317 84 1 0-84.17 8.847Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#24A7DA&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m625.254 565.632 2.407.256a16.282 16.282 0 0 1 13.235 18.867c-8.525 48.205-28.672 71.527-57.446 67.712a58.778 58.778 0 0 1-24.628-9.958l-1.33-.947-1.511 1.28c-28.621 22.912-55.885 15.052-71.04-22.63l-1.69-4.48a16.282 16.282 0 0 1 30.72-10.906l2.176 5.888c5.658 14.13 9.984 16.204 20.045 6.86l4.045-4.044 4.659-5.095a16.307 16.307 0 0 1 23.04-1.331l1.843 1.971c2.867 3.584 11.853 10.291 17.946 11.085 7.526 1.024 15.232-7.885 21.069-41.062a16.307 16.307 0 0 1 16.46-13.466z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#24A7DA&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-yinpin&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M870.4 436.992a168.192 168.192 0 0 1-183.552 153.6A170.24 170.24 0 0 1 537.6 401.92a168.192 168.192 0 0 1 183.552-153.6A170.24 170.24 0 0 1 870.4 436.992&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFBA7B&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M738.56 806.4c148.992-131.072 169.472-360.448 53.504-529.408-7.68-11.264-128-22.272-128-22.272L194.304 665.6a60.16 60.16 0 0 0-4.352 83.712v1.536C334.592 921.6 579.584 947.2 738.56 806.4&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFBA7B&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M371.2 645.12a207.872 207.872 0 0 0 182.784-195.584 30.208 30.208 0 0 0-33.28-31.744L179.2 455.424a30.464 30.464 0 0 0-25.6 38.144A204.8 204.8 0 0 0 371.2 645.12&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FB952C&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M723.2 338.432a35.072 35.072 0 1 0 30.72 38.656 34.816 34.816 0 0 0-30.72-38.656M539.904 281.6l54.272 23.552a51.2 51.2 0 0 1 25.6 66.56l-5.888 14.336a49.408 49.408 0 0 1-65.024 25.6l-54.272-23.552a6.912 6.912 0 0 1 0-12.544l53.76-22.272a7.168 7.168 0 0 0 3.84-8.96l-21.76-55.04a6.656 6.656 0 0 1 8.704-8.96&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FB813A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M442.112 142.336A17.408 17.408 0 0 0 425.216 128h-3.84a17.664 17.664 0 0 0-17.408 17.664v113.152a76.8 76.8 0 0 0-29.184 0 83.2 83.2 0 0 0-67.584 71.68c0 30.72 30.464 48.64 68.096 40.192a83.2 83.2 0 0 0 67.84-70.912v-157.44z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FC611F&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-zhishi&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M781.367 132.313c60.919 0 110.32 50.371 110.32 112.514V778.16c0 62.1-49.359 112.472-110.32 112.472H518.75c0-16.116-25.692-29.152-57.375-29.152S404 874.56 404 890.633H284.82c-60.918 0-110.32-50.372-110.32-112.43V244.827c0-62.143 49.36-112.514 110.32-112.514h496.547z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FBC92A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M781.367 132.313c60.919 0 110.32 50.371 110.32 112.514v209.671c-49.485 4.894-86.062 22.022-86.062 42.399 0 20.376 36.577 37.547 86.063 42.356v34.72c0 62.143-49.36 112.515-110.32 112.515H284.82c-60.918 0-110.32-50.372-110.32-112.515V244.827c0-62.143 49.36-112.514 110.32-112.514h496.547z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFEA85&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M346.625 686.487a114.75 58.345 0 1 0 229.5 0 114.75 58.345 0 1 0-229.5 0Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FBC92A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M260.563 803.136a43.031 42.188 0 1 0 86.062 0 43.031 42.188 0 1 0-86.063 0ZM490.063 803.136a71.719 42.188 0 1 0 143.437 0 71.719 42.188 0 1 0-143.438 0Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#F4B828&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M674.506 477.448a27.21 27.21 0 0 1 39.024 1.224 28.519 28.519 0 0 1-1.182 39.74 238.022 238.022 0 0 1-330.918 0 28.519 28.519 0 0 1-1.182-39.74 27.21 27.21 0 0 1 38.982-1.224 183.642 183.642 0 0 0 255.276 0zM734.792 272.923h5.19a41.766 41.766 0 0 1 41.343 42.188v56.278c0 23.288-18.478 42.188-41.344 42.188h-5.189a41.766 41.766 0 0 1-41.344-42.188v-56.278c0-23.288 18.52-42.188 41.344-42.188zm-380.995 0h5.189a41.766 41.766 0 0 1 41.344 42.188v56.278c0 23.288-18.52 42.188-41.344 42.188h-5.19a41.766 41.766 0 0 1-41.343-42.188v-56.278c0-23.288 18.478-42.188 41.344-42.188z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FBC92A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;channel-zongyi&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M25.115 625.015c127-67.634 201.653-43.033 188.69 73.103l-.724 5.894c-13.961 104.648 52.674 162.367 81.945 128.3l1.698-2.123a24.976 24.976 0 1 1 40.211 29.646c-28.747 39.012-82.12 39.936-122.33 6.444-39.312-32.768-59.442-90.661-51.95-161.018l1.449-12.088.8-7.992c3.695-46.13-12.14-59.967-61.416-41.76l-8.517 3.347-9.166 3.922-9.79 4.495-10.49 5.145-11.114 5.695-5.844 3.072a24.976 24.976 0 1 1-23.477-44.082z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#EC0000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m419.355 437.872 237.268 148.256-217.887 254.8a79.922 79.922 0 0 1-103.1 15.835l-18.806-11.738a79.922 79.922 0 0 1-30.97-99.628l133.52-307.525z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FF5C00&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M385.488 416.718 690.49 607.282l-92.335 72.38c-29.621 20.454-77.899 9.74-144.859-32.094-66.984-41.86-97.78-80.572-92.384-116.137l24.576-114.713z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#EC0000&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M432.167 681.484a26.524 26.524 0 0 1 6.569 39.187l-19.107 23.577a22.828 22.828 0 0 1-38.412-23.976l12.862-27.499a26.524 26.524 0 0 1 38.088-11.289z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFD3A5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M391.831 255.75c-76.025 121.631-39.036 281.9 82.62 357.9 121.656 76.026 281.924 39.038 357.925-82.619 76.026-121.63 39.037-281.9-82.62-357.9-121.655-76.026-281.899-39.037-357.925 82.62z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FF962A&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m749.757 173.106 5.145 3.322a258.997 258.997 0 0 1 112.165 167.336 77.55 77.55 0 0 1-11.413 36.89c-35.066 56.17-139.364 54.271-232.973-4.222-93.584-58.443-140.987-151.377-105.897-207.547 6.894-11.04 16.484-19.856 28.148-26.4a259.047 259.047 0 0 1 204.8 30.621z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFB468&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M842.317 513.698a264.242 264.242 0 0 1-9.94 17.333c-76.026 121.657-236.27 158.645-357.901 82.645-121.681-76.026-158.67-236.27-82.67-357.926a278.773 278.773 0 0 1 11.24-16.559c-62.44 119.159-23.353 268.139 92.584 340.593 114.713 71.68 263.718 42.883 344.09-62.614l2.597-3.497z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FF6B18&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M380.168 236.694c-49.702 79.522 16.234 210.394 147.231 292.24 131.022 81.87 277.53 83.743 327.23 4.22 16.434-26.299 20.23-58.193 13.188-92.11 13.986 45.955 11.189 90.787-12.138 128.125-58.468 93.559-219.686 98.33-360.049 10.615-140.363-87.715-206.748-234.696-148.28-328.28 23.477-37.588 62.889-59.816 110.717-67.309-33.967 8.492-61.315 25.975-77.9 52.499z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFB468&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m458.017 184.22 2.298-1.798c-26.824 21.054-43.833 37.338-51.05 48.877-43.858 70.182 17.657 187.742 139.313 263.743 121.657 76.025 253.952 79.572 297.81 9.39 7.742-12.388 14.86-33.642 21.354-63.787 7.143 34.041 3.396 66.085-13.112 92.51-49.702 79.522-196.209 77.673-327.23-4.222-131.023-81.845-196.934-212.717-147.232-292.24 16.584-26.523 43.932-44.006 77.849-52.473z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFD3A5&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;creator-audio&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 25 24&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">rect</span> <span class="attr">opacity</span>=<span class="string">&quot;.01&quot;</span> <span class="attr">x</span>=<span class="string">&quot;.5&quot;</span> <span class="attr">width</span>=<span class="string">&quot;24&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#C4C4C4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M5 2.5h10A4.5 4.5 0 0 1 19.5 7v4.5a1 1 0 1 0 2 0V7A6.5 6.5 0 0 0 15 .5H5A2.5 2.5 0 0 0 2.5 3v17A2.5 2.5 0 0 0 5 22.5h9.5a1 1 0 1 0 0-2H5a.5.5 0 0 1-.5-.5V3a.5.5 0 0 1 .5-.5Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#61666D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M21.561 14.348a1.5 1.5 0 0 0-2.121 0l-2.475 2.475a1 1 0 1 0 1.414 1.414l2.121-2.121 2.122 2.121a1 1 0 1 0 1.414-1.414l-2.475-2.475Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#61666D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M20.5 13.976a1 1 0 0 1 1 1V21.5a1 1 0 1 1-2 0v-6.524a1 1 0 0 1 1-1Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#61666D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M12.75 8.548v3&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;#61666D&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M8.75 12.922c0-.759.645-1.374 1.44-1.374h2.56v1.625c0 .76-.644 1.375-1.44 1.375h-1.12c-.795 0-1.44-.616-1.44-1.375v-.25Z&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;#61666D&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;m15.25 9.048-2.5-.5&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;#61666D&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;creator-magic&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 26 24&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M24 0H0v24h24V0Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#fff&quot;</span> <span class="attr">fill-opacity</span>=<span class="string">&quot;.01&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M23.06 14.348a1.5 1.5 0 0 0-2.12 0l-2.476 2.475a1 1 0 1 0 1.415 1.414L22 16.116l2.121 2.121a1 1 0 1 0 1.415-1.414l-2.475-2.475Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#61666D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M22 13.976a1 1 0 0 1 1 1V21.5a1 1 0 1 1-2 0v-6.524a1 1 0 0 1 1-1Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#61666D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M24 0H0v24h24V0Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#fff&quot;</span> <span class="attr">fill-opacity</span>=<span class="string">&quot;.01&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M22 11.488c0-5.523-4.477-10-10-10s-10 4.477-10 10c0 5.522 4.477 10 10 10a9.955 9.955 0 0 0 4.954-1.312&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;#61666D&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M12 15.413c1.607 0 2.25-1.286 2.25-1.286h-4.5s.643 1.286 2.25 1.286ZM15.5 8.487v2M8.5 8.487v2&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;#61666D&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;creator-manage&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 25 24&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">rect</span> <span class="attr">opacity</span>=<span class="string">&quot;.01&quot;</span> <span class="attr">x</span>=<span class="string">&quot;.5&quot;</span> <span class="attr">width</span>=<span class="string">&quot;24&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#C4C4C4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M5 2.5h10A4.5 4.5 0 0 1 19.5 7v4.281a1 1 0 1 0 2 0V7A6.5 6.5 0 0 0 15 .5H5A2.5 2.5 0 0 0 2.5 3v17A2.5 2.5 0 0 0 5 22.5h5.5a1 1 0 1 0 0-2H5a.5.5 0 0 1-.5-.5V3a.5.5 0 0 1 .5-.5Zm9 8.866a1 1 0 0 0 0-1.732l-3-1.732a1 1 0 0 0-1.5.866v3.464a1 1 0 0 0 1.5.866l3-1.732Zm7.19 6.872-1.595 2.763h-3.19l-1.596-2.763 1.596-2.763h3.19l1.596 2.763Zm1.733-1a2 2 0 0 1 0 2l-1.596 2.763a2 2 0 0 1-1.732 1h-3.19a2 2 0 0 1-1.732-1l-1.596-2.763a2 2 0 0 1 0-2l1.596-2.763a2 2 0 0 1 1.732-1h3.19a2 2 0 0 1 1.732 1l1.596 2.763ZM18 16.988a1.25 1.25 0 1 0 0 2.5 1.25 1.25 0 0 0 0-2.5Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#61666D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;creator-note&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 25 24&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">rect</span> <span class="attr">opacity</span>=<span class="string">&quot;.01&quot;</span> <span class="attr">width</span>=<span class="string">&quot;24&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#C4C4C4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M4.5 2.5h10A4.5 4.5 0 0 1 19 7v4.5a1 1 0 1 0 2 0V7A6.5 6.5 0 0 0 14.5.5h-10A2.5 2.5 0 0 0 2 3v17a2.5 2.5 0 0 0 2.5 2.5h9.761a1 1 0 1 0 0-2H4.5A.5.5 0 0 1 4 20V3a.5.5 0 0 1 .5-.5Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#61666D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M6 9a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H7a1 1 0 0 1-1-1ZM6 13a1 1 0 0 1 1-1h3a1 1 0 1 1 0 2H7a1 1 0 0 1-1-1ZM21.05 14.348a1.5 1.5 0 0 0-2.121 0l-2.475 2.475a1 1 0 1 0 1.414 1.414l2.122-2.121 2.12 2.121a1 1 0 1 0 1.415-1.414l-2.475-2.475Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#61666D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M19.99 13.976a1 1 0 0 1 1 1V21.5a1 1 0 1 1-2 0v-6.524a1 1 0 0 1 1-1Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#61666D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;creator-video&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 26 24&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">rect</span> <span class="attr">opacity</span>=<span class="string">&quot;.01&quot;</span> <span class="attr">x</span>=<span class="string">&quot;1.556&quot;</span> <span class="attr">width</span>=<span class="string">&quot;24&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#C4C4C4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M21.556 10.187a1 1 0 0 0-1 1v1.384a1 1 0 0 0 2 0v-1.384a1 1 0 0 0-1-1Zm-7 10.313a1 1 0 1 0 0 2h1a1 1 0 1 0 0-2h-1ZM22.61 15.348a1.5 1.5 0 0 0-2.122 0l-2.475 2.475a1 1 0 0 0 1.414 1.414l2.122-2.121 2.121 2.121a1 1 0 0 0 1.414-1.414l-2.475-2.475Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#61666D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M21.549 14.976a1 1 0 0 1 1 1V22.5a1 1 0 1 1-2 0v-6.524a1 1 0 0 1 1-1ZM3.209 5.5h16.347a1 1 0 0 1 1 1v5.391h2V6.5a3 3 0 0 0-3-3H3.209a3 3 0 0 0-3 3v13a3 3 0 0 0 3 3h12.244v-2H3.209a1 1 0 0 1-1-1v-13a1 1 0 0 1 1-1Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#61666D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M13.362 12.134a1 1 0 0 1 0 1.732l-3 1.732a1 1 0 0 1-1.5-.866v-3.464a1 1 0 0 1 1.5-.866l3 1.732Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#61666D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;header-channel&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 21 21&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;5.688&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;14&quot;</span> <span class="attr">r</span>=<span class="string">&quot;3.5&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span><span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;10.5&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;5.688&quot;</span> <span class="attr">r</span>=<span class="string">&quot;3.5&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span><span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;15.313&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;14&quot;</span> <span class="attr">r</span>=<span class="string">&quot;3.5&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;header-collect&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 20 21&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;m11.05 3.168 1.741 3.528c.163.33.48.56.844.613l3.894.566a1.12 1.12 0 0 1 .621 1.911l-2.817 2.747a1.12 1.12 0 0 0-.323.993l.666 3.877a1.12 1.12 0 0 1-1.626 1.181l-3.484-1.83a1.12 1.12 0 0 0-1.042 0l-3.483 1.83a1.12 1.12 0 0 1-1.626-1.18l.664-3.878a1.119 1.119 0 0 0-.321-.993L1.939 9.786a1.121 1.121 0 0 1 .622-1.911l3.894-.566a1.12 1.12 0 0 0 .843-.613L9.04 3.168a1.121 1.121 0 0 1 2.01 0Z&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;1.6&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M11.603 11.874a1.618 1.618 0 0 1-3.12-.017&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;1.6&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;header-creation&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 20 21&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M10 1.743c-.07 0-.14 0-.212.002-3.934.11-7.204 3.404-7.286 7.338a7.478 7.478 0 0 0 2.868 6.05.83.83 0 0 1 .303.472l.631 2.842a2.082 2.082 0 0 0 2.032 1.63h3.326c.976 0 1.822-.678 2.034-1.633l.632-2.842a.825.825 0 0 1 .3-.467A7.478 7.478 0 0 0 17.5 9.243a7.5 7.5 0 0 0-7.5-7.5Zm0 1.666a5.84 5.84 0 0 1 5.834 5.834 5.798 5.798 0 0 1-2.236 4.582 2.505 2.505 0 0 0-.85 1.235H7.253a2.516 2.516 0 0 0-.85-1.236 5.786 5.786 0 0 1-2.233-4.706c.063-3.063 2.605-5.622 5.665-5.706.055-.002.111-.003.166-.003ZM7.637 16.76l.295 1.326c.042.191.21.324.404.324h3.326a.413.413 0 0 0 .407-.326l.294-1.323H7.637Zm2.72-10.662a.8.8 0 0 1 .359 1.074l-.609 1.216h1.08a.8.8 0 0 1 .716 1.158l-1.188 2.374a.8.8 0 1 1-1.43-.716l.607-1.216h-1.08a.8.8 0 0 1-.715-1.158l1.187-2.374a.8.8 0 0 1 1.074-.358Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;header-creator&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 18 18&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M12.082 10h2.06c.909 0 1.646.737 1.646 1.647v1.235c0 .91-.737 1.647-1.647 1.647H3.847c-.91 0-1.647-.737-1.647-1.647v-1.235c0-.91.737-1.647 1.647-1.647h2.059M8.994 11.235V3.824M12.082 6.294 8.994 3.206 5.906 6.294&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;1.7&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;header-download&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 20 20&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M16.703 10.764c.716 0 1.297.548 1.297 1.223v4.79c0 .675-.58 1.223-1.297 1.223h-4.595c-.716 0-1.297-.547-1.297-1.223v-4.79c0-.675.58-1.223 1.297-1.223h4.595ZM2.81 13.465c.448 0 .81.342.81.764v2.854c0 .422-.362.764-.81.764-.448 0-.811-.342-.811-.764v-2.854c0-.422.363-.764.81-.764Zm5.621 0c.448 0 .811.342.811.764v2.854c0 .422-.363.764-.81.764-.448 0-.811-.342-.811-.764v-2.854c0-.422.363-.764.81-.764Zm-2.81.662c.447 0 .81.343.81.765v1.528c0 .422-.363.765-.81.765-.448 0-.811-.342-.811-.765v-1.528c0-.422.363-.765.81-.765Zm10.756-1.834h-3.946v4.178h3.946v-4.178Zm-7.946-1.529c.448 0 .811.343.811.765s-.363.764-.81.764H2.81c-.448 0-.811-.342-.811-.764s.363-.765.81-.765h5.622ZM7.892 2c.716 0 1.297.548 1.297 1.223v4.79c0 .675-.58 1.223-1.297 1.223H3.297C2.581 9.236 2 8.688 2 8.013v-4.79C2 2.548 2.58 2 3.297 2h4.595Zm8.81 0C17.42 2 18 2.548 18 3.223v4.79c0 .675-.58 1.223-1.297 1.223h-4.595c-.716 0-1.297-.548-1.297-1.223v-4.79c0-.675.58-1.223 1.297-1.223h4.595ZM7.569 3.529H3.622v4.178h3.946V3.529Zm8.81 0h-3.946v4.178h3.946V3.529Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;header-dynamic&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 22 22&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M0 0h22v22H0V0Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#fff&quot;</span> <span class="attr">fill-opacity</span>=<span class="string">&quot;.01&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M11 11a4.583 4.583 0 1 1 0-9.167V11ZM11 11a4.583 4.583 0 0 1-9.167 0H11ZM11 11a4.583 4.583 0 0 1 9.167 0H11ZM11 11a4.583 4.583 0 0 1 0 9.167V11Z&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;#61666D&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;header-history&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 20 21&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M10 1.743a9 9 0 1 0 0 18 9 9 0 0 0 0-18Zm0 1.636c4.061 0 7.364 3.304 7.364 7.364 0 4.06-3.303 7.363-7.363 7.363-4.061 0-7.364-3.303-7.364-7.363 0-4.06 3.303-7.364 7.364-7.364Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#61666D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M10 6.652v4.091M12.454 10.743H10&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;#61666D&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;1.7&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;header-login&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 18 18&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M6.75 8.25v2.625m4.5-2.625v2.625m-3.938-6.75H5.928c-1.418 0-2.128 0-2.67.276-.476.243-.864.63-1.107 1.107-.276.542-.276 1.252-.276 2.67v2.769c0 1.419 0 2.128.276 2.67.243.476.63.864 1.107 1.107C3.8 15 4.51 15 5.928 15h6.144c1.419 0 2.128 0 2.67-.276.476-.243.864-.63 1.107-1.107.276-.542.276-1.252.276-2.67V8.178c0-1.418 0-2.128-.276-2.67a2.533 2.533 0 0 0-1.107-1.107c-.542-.276-1.252-.276-2.67-.276h-1.384m-3.376 0h3.376m-3.376 0-1.687-2.25m5.063 2.25 1.687-2.25&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;#fff&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;1.333&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M5.175 1.275a.75.75 0 0 1 1.05.15l1.463 1.95h2.625l1.462-1.95a.75.75 0 1 1 1.2.9l-.788 1.05c.508.003.94.011 1.31.041.523.043.984.133 1.412.351a3.6 3.6 0 0 1 1.574 1.574c.218.428.308.89.35 1.411.042.506.042 1.13.042 1.901v1.819c0 .77 0 1.395-.041 1.9-.043.523-.133.984-.351 1.412a3.6 3.6 0 0 1-1.574 1.574c-.428.218-.89.308-1.411.35-.506.042-1.13.042-1.901.042H6.403c-.77 0-1.395 0-1.901-.041-.522-.043-.983-.133-1.411-.351a3.6 3.6 0 0 1-1.574-1.574c-.218-.428-.308-.89-.35-1.411-.042-.506-.042-1.13-.042-1.901V8.653c0-.77 0-1.395.041-1.901.043-.522.133-.983.351-1.411a3.6 3.6 0 0 1 1.574-1.574c.428-.218.89-.308 1.411-.35.37-.03.803-.04 1.311-.041l-.788-1.051a.75.75 0 0 1 .15-1.05Zm-.55 3.636c-.43.035-.672.1-.853.193a2.1 2.1 0 0 0-.918.918c-.093.181-.158.423-.193.852-.035.438-.036 1-.036 1.811v1.755c0 .81 0 1.373.036 1.81.035.43.1.672.193.853a2.1 2.1 0 0 0 .918.918c.181.093.423.158.852.193.438.035 1 .036 1.811.036h5.13c.81 0 1.373 0 1.81-.036.43-.035.672-.1.853-.193a2.1 2.1 0 0 0 .918-.918c.093-.181.158-.423.193-.852.035-.438.036-1 .036-1.811V8.685c0-.81 0-1.373-.036-1.81-.035-.43-.1-.672-.193-.853a2.1 2.1 0 0 0-.918-.918c-.181-.093-.423-.158-.852-.193-.438-.035-1-.036-1.811-.036h-5.13c-.81 0-1.373 0-1.81.036ZM6.75 7.5a.75.75 0 0 1 .75.75v2.625a.75.75 0 0 1-1.5 0V8.25a.75.75 0 0 1 .75-.75Zm4.5 0a.75.75 0 0 1 .75.75v2.625a.75.75 0 0 1-1.5 0V8.25a.75.75 0 0 1 .75-.75Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#61666D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;header-message&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 20 20&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M15.435 17.315H4.567A3.571 3.571 0 0 1 1 13.748V5.31c0-1.966 1.6-3.567 3.567-3.567h10.866c1.966 0 3.567 1.6 3.567 3.567v8.438a3.57 3.57 0 0 1-3.565 3.567ZM4.567 3.543c-.974 0-1.766.793-1.766 1.767v8.438c0 .973.792 1.766 1.766 1.766h10.866c.974 0 1.766-.793 1.766-1.766V5.31c0-.974-.792-1.767-1.766-1.767H4.567Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M10 10.743c-.488 0-.978-.133-1.403-.398l-.056-.039L4.333 7.2a.778.778 0 0 1-.143-1.147.918.918 0 0 1 1.23-.134l4.174 3.083a.826.826 0 0 0 .813 0L14.58 5.92a.918.918 0 0 1 1.23.134.78.78 0 0 1-.143 1.147L11.4 10.345a2.655 2.655 0 0 1-1.402.398Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;header-hot&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 22 22&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;m4.89 17.272.003.002a8.562 8.562 0 0 0 6.07 2.515c2.287 0 4.248-.735 5.648-2.178l.002-.002c1.387-1.475 2.17-3.427 2.13-5.427.042-.799-.051-2.819-1.334-5.427v-.001c-.2-.399-.593-.688-1.07-.784a1.409 1.409 0 0 0-1.278.387c-.152.13-.281.26-.396.375l-.001.001-.031.031c-.422-3.408-2.025-5.027-3.468-5.76a.669.669 0 0 0-.061-.053.325.325 0 0 0-.135-.062c-.741-.28-1.559.123-1.845.887v.002c-.618 1.688-1.771 2.845-2.958 3.989-1.648 1.564-3.407 3.27-3.364 6.326-.043 1.962.743 3.79 2.089 5.179Zm-1.84-4.207a6.746 6.746 0 0 1-.048-.971C2.959 9.13 4.653 7.478 6.305 5.912c1.185-1.144 2.37-2.33 3.006-4.065.254-.678.974-1.017 1.61-.763.041 0 .084.043.126.085.88.44 1.838 1.227 2.528 2.604-.69-1.377-1.648-2.164-2.528-2.604-.042-.042-.085-.085-.127-.085-.635-.254-1.355.085-1.609.763-.635 1.736-1.82 2.921-3.006 4.065-1.652 1.566-3.346 3.218-3.303 6.182-.008.328.009.652.048.97Zm11.427-5.883c.106-.085.212-.19.328-.307.117-.117.244-.244.392-.37a1.21 1.21 0 0 1 1.1-.34c.424.085.763.34.932.678-.169-.339-.508-.593-.931-.677a1.21 1.21 0 0 0-1.101.338c-.148.127-.275.254-.392.37l-.143.143a2.69 2.69 0 0 1-.185.165Zm-1.78-.823c.146.796.186 1.62.17 2.39a12.118 12.118 0 0 0-.17-2.39Zm4.039 4.306c.075.483.112.974.112 1.471v.043c0 1.524-.55 3.048-1.609 4.15-1.186 1.1-2.71 1.693-4.319 1.608a6.533 6.533 0 0 0 0 0c1.61.085 3.133-.508 4.32-1.609 1.058-1.1 1.608-2.625 1.608-4.15v-.042c0-.497-.037-.988-.112-1.47Zm-5.805 7.073c1.55.081 3.02-.488 4.168-1.552 1.016-1.06 1.55-2.531 1.55-4.008v-.042c0-1.274-.252-2.51-.754-3.641-.651.622-1.11.996-1.477 1.192-.206.11-.391.17-.572.18a1.156 1.156 0 0 1-.499-.085c-.426-.16-.68-.58-.68-1.033v-.004c.022-1.048-.062-2.19-.372-3.21-.285-.941-.758-1.767-1.505-2.328-.824 1.742-2.065 2.979-3.203 4.076l-.079.077c-1.536 1.494-2.695 2.62-2.655 4.772v.004c0 1.388.53 2.692 1.508 3.67l.003.002a6.333 6.333 0 0 0 4.556 1.93h.01Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;header-order&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">rect</span> <span class="attr">opacity</span>=<span class="string">&quot;.01&quot;</span> <span class="attr">width</span>=<span class="string">&quot;24&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#C4C4C4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M8.5 4h7a.5.5 0 0 1 .5.5v2a.5.5 0 0 1-.5.5h-7a.5.5 0 0 1-.5-.5v-2a.5.5 0 0 1 .5-.5Zm-2-1c.456-.607 1.182-1 2-1h7c.818 0 1.544.393 2 1h2C20.88 3 22 4.063 22 5.375v14.25C22 20.937 20.88 22 19.5 22h-15C3.12 22 2 20.937 2 19.625V5.375C2 4.063 3.12 3 4.5 3h2ZM6 4.9H4.5c-.276 0-.5.213-.5.475v14.25c0 .262.224.475.5.475h15c.276 0 .5-.213.5-.475V5.375a.488.488 0 0 0-.5-.475H18v1.6A2.5 2.5 0 0 1 15.5 9h-7A2.5 2.5 0 0 1 6 6.5V4.9Zm0 7.6a1 1 0 0 1 1-1h7a1 1 0 1 1 0 2H7a1 1 0 0 1-1-1Zm1 3a1 1 0 1 0 0 2h3a1 1 0 1 0 0-2H7Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#61666D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;header-search&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 19 18&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M17.345 15.7c.293.292.13.572-.152.863-.043.065-.097.119-.14.162-.282.248-.607.399-.868.14l-3.5-3.483a6.938 6.938 0 0 1-4.238 1.445c-3.826 0-6.947-3.096-6.947-6.914C1.5 4.106 4.61 1 8.447 1c3.826 0 6.947 3.095 6.947 6.913a6.908 6.908 0 0 1-1.528 4.325l3.48 3.462ZM3.136 7.903c0 2.912 2.385 5.274 5.3 5.274 2.916 0 5.3-2.362 5.3-5.274s-2.384-5.274-5.3-5.274c-2.926 0-5.3 2.372-5.3 5.274Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;header-subscription&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 20 21&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M0 .743h20v20H0v-20Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#fff&quot;</span> <span class="attr">fill-opacity</span>=<span class="string">&quot;.01&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M6.633 6.576A3.368 3.368 0 0 1 9.2 3.306v6.541a3.368 3.368 0 0 1-2.567-3.27ZM10 1.61A4.967 4.967 0 0 0 6.35 9.943H1.667a.8.8 0 0 0-.8.8A4.967 4.967 0 0 0 9.2 14.394v4.682a.8.8 0 0 0 .8.8 4.967 4.967 0 0 0 3.652-8.333h4.681a.8.8 0 0 0 .8-.8A4.967 4.967 0 0 0 10.8 7.091V2.41a.8.8 0 0 0-.8-.8Zm-4.167 12.5a3.368 3.368 0 0 1-3.27-2.567h6.541a3.368 3.368 0 0 1-3.27 2.567Zm5.063-4.167h6.542a3.368 3.368 0 0 0-6.542 0ZM10.8 18.18V11.64a3.368 3.368 0 0 1 0 6.541Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#61666D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;header-vip&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 22 21&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M11 1.743a9 9 0 1 0 0 18 9 9 0 0 0 0-18Zm0 1.636c4.06 0 7.364 3.303 7.364 7.364 0 4.06-3.303 7.363-7.364 7.363-4.06 0-7.363-3.303-7.363-7.363 0-4.06 3.303-7.364 7.363-7.364Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M9.576 6.881c.194.347.338.72.429 1.105a2.13 2.13 0 0 1-.075 1.081c-.881.206-1.78.326-2.685.361-.021 0-.047.066-.074.196.018.393.136.773.346 1.105.206.262.32.148.56.075a4.27 4.27 0 0 1 1.49-.165c.174.115-.608 1.204-.823 1.53-.214.329-1.062 1.383-1.499 1.532-.436.146-.329.384.074.696.435.251.964.28 1.425.082.407-.21.743-.534.964-.935.131-.327 1.17-2.684 1.293-2.897.124-.213.297-.262.562-.353a6.257 6.257 0 0 1 2.066-.245c.577.1 1.071.123 1.13-.425a1.317 1.317 0 0 0-.618-1.278 2.953 2.953 0 0 0-1.598.172c-.248.083-.899.377-.98.303-.083-.073.213-.77-.083-1.35a1.722 1.722 0 0 0-1.426-.82c-.386 0-.543.181-.478.23Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M11.467 11.465a.256.256 0 0 0-.016.324c.074.122 2.57 2.32 2.858 2.556.288.234.42.154.723-.811.305-.966-1.202-1.502-1.646-1.72a5.988 5.988 0 0 0-1.4-.406c-.065-.004-.15-.012-.236-.012-.11 0-.218.014-.283.069Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;history-carplay&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 16 17&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M2.113 9.853c0-1.491 1.31-2.694 2.835-2.627a69.63 69.63 0 0 0 6.104 0c1.526-.067 2.835 1.136 2.835 2.627v2.02a.5.5 0 0 1-.5.5H2.613a.5.5 0 0 1-.5-.5v-2.02Z&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;#979797&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M4.227 4.548A1.5 1.5 0 0 1 5.692 3.37h4.743A1.5 1.5 0 0 1 11.9 4.548L12.438 7c-.266.031-.62.07-1.032.11-.942.09-2.186.18-3.406.18-1.22 0-2.431-.09-3.34-.18a39.698 39.698 0 0 1-.972-.108l.539-2.454Z&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;#979797&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;4.722&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;9.824&quot;</span> <span class="attr">r</span>=<span class="string">&quot;.766&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#979797&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span><span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;11.278&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;9.824&quot;</span> <span class="attr">r</span>=<span class="string">&quot;.766&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#979797&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M3.04 12.702h.817L3.6 13.775a.284.284 0 0 1-.56-.067v-1.006ZM12.918 12.702H12.1l.258 1.073a.284.284 0 0 0 .56-.067v-1.006Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#D8D8D8&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;#979797&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;history-ipad&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 16 16&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M4.6 13.5A1.5 1.5 0 0 1 3.1 12V4a1.5 1.5 0 0 1 1.5-1.5h6.796a1.5 1.5 0 0 1 1.5 1.5v8a1.5 1.5 0 0 1-1.5 1.5H4.6Z&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M8.5 11.5h-1&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;history-pc&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 16 16&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M10.55 13a.5.5 0 1 1 0 1h-5a.5.5 0 0 1 0-1h5Zm2.5-11a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2h-10a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h10Zm0 1h-10a1 1 0 0 0-.993.883L2.05 4v6a1 1 0 0 0 .883.993L3.05 11h10a1 1 0 0 0 .993-.883L14.05 10V4a1 1 0 0 0-1-1Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M7 11h2l1 3H6l1-3Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;history-phone&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 16 16&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M9.096 2.5V3a.5.5 0 0 1-.5.5H7.404a.5.5 0 0 1-.5-.5v-.5h2.192Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#61666D&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;#61666D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;history-tv&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 16 16&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M13 2a2 2 0 0 1 2 2v6a2 2 0 0 1-2 2H3a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h10Zm0 1H3a1 1 0 0 0-.993.883L2 4v6a1 1 0 0 0 .883.993L3 11h10a1 1 0 0 0 .993-.883L14 10V4a1 1 0 0 0-1-1Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#999&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M6.188 6.09V9.3h-.96V6.089h-1.09v-.788h3.14v.788h-1.09Zm5.408-.789L10.336 9.3H9.13L7.855 5.301h1.12l.764 2.982h.044l.753-2.982h1.06Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#999&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M3.5 11.5 3 13M4.182 11.5 3 13M12.5 11.5 13 13M11.864 11.5 13 13&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;#979797&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;history-vioce&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 16 16&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M4 13.5A1.5 1.5 0 0 1 2.5 12V4A1.5 1.5 0 0 1 4 2.5h8A1.5 1.5 0 0 1 13.5 4v8a1.5 1.5 0 0 1-1.5 1.5H4Z&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;#979797&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M5 8.5a.5.5 0 0 1-.5-.5V5a.5.5 0 0 1 .5-.5h6a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-.5.5H5Z&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;#979797&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;4.397&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;10.444&quot;</span> <span class="attr">r</span>=<span class="string">&quot;.45&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#979797&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span><span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;6.199&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;10.444&quot;</span> <span class="attr">r</span>=<span class="string">&quot;.45&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#979797&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span><span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;5.204&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;11.714&quot;</span> <span class="attr">r</span>=<span class="string">&quot;.45&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#979797&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span><span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;8&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;10.444&quot;</span> <span class="attr">r</span>=<span class="string">&quot;.45&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#979797&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span><span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;7.006&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;11.714&quot;</span> <span class="attr">r</span>=<span class="string">&quot;.45&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#979797&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span><span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;9.801&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;10.444&quot;</span> <span class="attr">r</span>=<span class="string">&quot;.45&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#979797&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span><span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;11.603&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;10.444&quot;</span> <span class="attr">r</span>=<span class="string">&quot;.45&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#979797&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span><span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;8.807&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;11.714&quot;</span> <span class="attr">r</span>=<span class="string">&quot;.45&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#979797&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span><span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;10.609&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;11.714&quot;</span> <span class="attr">r</span>=<span class="string">&quot;.45&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#979797&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;palette-ad&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 32 16&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M4 .5h24A3.5 3.5 0 0 1 31.5 4v8a3.5 3.5 0 0 1-3.5 3.5H4A3.5 3.5 0 0 1 .5 12V4A3.5 3.5 0 0 1 4 .5ZM0 4a4 4 0 0 1 4-4h24a4 4 0 0 1 4 4v8a4 4 0 0 1-4 4H4a4 4 0 0 1-4-4V4Zm9.364-1.816.948-.168c.228.432.444.912.66 1.452h4.368v.828H6.448v2.688c-.048 2.628-.456 4.728-1.236 6.312l-.708-.636c.672-1.368 1.032-3.252 1.056-5.676V3.468h4.464c-.192-.468-.42-.9-.66-1.284Zm8.76 6.588h7.824v4.416h-.876v-.636H19v.636h-.876V8.772ZM19 9.6v2.136h6.072V9.6H19Zm2.712-4.884h-2.868a8.735 8.735 0 0 1-1.452 1.536l-.516-.684c1.08-.864 1.824-1.932 2.208-3.192l.864.096a7.808 7.808 0 0 1-.588 1.416h2.352V2.184h.876v1.704h3.924v.828h-3.924V6.66h4.836v.852H16.576V6.66h5.136V4.716Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;palette-channel&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M9.45 9V6.5a2.7 2.7 0 1 0-2.7 2.7h2.5a.2.2 0 0 0 .2-.2Zm-2.7-7a4.5 4.5 0 0 0 0 9h2.5a2 2 0 0 0 2-2V6.5A4.5 4.5 0 0 0 6.75 2ZM9.45 14.5V17a2.7 2.7 0 1 1-2.7-2.7h2.5c.11 0 .2.09.2.2Zm-2.7 7a4.5 4.5 0 1 1 0-9h2.5a2 2 0 0 1 2 2V17a4.5 4.5 0 0 1-4.5 4.5ZM14.75 9.2h2.5a2.7 2.7 0 1 0-2.7-2.7V9c0 .11.09.2.2.2Zm2.5-7.2a4.5 4.5 0 0 0-4.5 4.5V9a2 2 0 0 0 2 2h2.5a4.5 4.5 0 1 0 0-9ZM14.75 14.3h2.5a2.7 2.7 0 1 1-2.7 2.7v-2.5c0-.11.09-.2.2-.2Zm2.5 7.2a4.5 4.5 0 0 1-4.5-4.5v-2.5a2 2 0 0 1 2-2h2.5a4.5 4.5 0 1 1 0 9Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;palette-service&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M20.4 9.6V9A8.4 8.4 0 0 0 3.6 9v.6A2.37 2.37 0 0 0 1.35 12v3a2.36 2.36 0 0 0 2.4 2.4h1.5a2.36 2.36 0 0 0 2.4-2.4v-3A2.37 2.37 0 0 0 5.4 9.6V9a6.6 6.6 0 1 1 13.2 0v.6a2.37 2.37 0 0 0-2.25 2.4v3a2.42 2.42 0 0 0 1.93 2.36 7.25 7.25 0 0 1-4.45 3.25A3.44 3.44 0 0 0 12 20.1a3 3 0 0 0-1.68.44 1.38 1.38 0 0 0 0 2.42 3 3 0 0 0 1.68.44 2.47 2.47 0 0 0 2.2-1 9.06 9.06 0 0 0 6.07-5 2.36 2.36 0 0 0 2.38-2.4v-3a2.37 2.37 0 0 0-2.25-2.4ZM18.15 12a.551.551 0 0 1 .6-.6h1.5a.551.551 0 0 1 .6.6v3a.548.548 0 0 1-.6.6h-1.5a.55.55 0 0 1-.6-.6v-3Zm-15 0a.61.61 0 0 1 .16-.44.611.611 0 0 1 .44-.16h1.5a.55.55 0 0 1 .6.6v3a.55.55 0 0 1-.6.6h-1.5a.61.61 0 0 1-.44-.16.61.61 0 0 1-.16-.44v-3Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;palette-sort&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 10 10&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;.65&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;1.35&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;9.35&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;1.35&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;1.3&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">line</span>&gt;</span><span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;.65&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;5.35&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;9.35&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;5.35&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;1.3&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">line</span>&gt;</span><span class="tag">&lt;<span class="name">line</span> <span class="attr">x1</span>=<span class="string">&quot;.65&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;9.35&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;9.35&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;9.35&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;1.3&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">line</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;palette-top&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 15 8&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M6.821.627a1 1 0 0 1 1.358 0l3.938 3.638C12.787 4.883 12.35 6 11.44 6H3.56c-.91 0-1.347-1.117-.678-1.735L6.82.627Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;rate-crown-gold&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 43 24&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M2 0h41c-6.118 2.651-9.759 6.623-10.922 11.914C30 21.375 24 24 21 24H0V2a2 2 0 0 1 2-2Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#gold_linear)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M15.18 9.26a.302.302 0 0 1 .06.06L18 13l3.39-1.695a.3.3 0 0 1 .423.35l-1.606 5.62a1 1 0 0 1-.961.725h-8.492a1 1 0 0 1-.961-.725l-1.606-5.62a.3.3 0 0 1 .423-.35L12 13l2.76-3.68a.3.3 0 0 1 .42-.06ZM15 14a1 1 0 1 0 0 2 1 1 0 0 0 0-2ZM7.5 8a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm15 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM15 5.7a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#ED9600&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">defs</span>&gt;</span><span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;gold_linear&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;23&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;0&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;23&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;24&quot;</span> <span class="attr">gradientUnits</span>=<span class="string">&quot;userSpaceOnUse&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">stop</span> <span class="attr">stop-color</span>=<span class="string">&quot;#FE0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">stop</span>&gt;</span><span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;1&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#FFC901&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">stop</span>&gt;</span><span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span><span class="tag">&lt;/<span class="name">defs</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;rate-crown-sliver&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 43 24&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M2 0h41c-6.118 2.651-9.759 6.623-10.922 11.914C30 21.375 24 24 21 24H0V2a2 2 0 0 1 2-2Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;url(#sliver_linear)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M15.18 9.26a.302.302 0 0 1 .06.06L18 13l3.39-1.695a.3.3 0 0 1 .423.35l-1.606 5.62a1 1 0 0 1-.961.725h-8.492a1 1 0 0 1-.961-.725l-1.606-5.62a.3.3 0 0 1 .423-.35L12 13l2.76-3.68a.3.3 0 0 1 .42-.06ZM15 14a1 1 0 1 0 0 2 1 1 0 0 0 0-2ZM7.5 8a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Zm15 0a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3ZM15 5.7a1.5 1.5 0 1 1 0 3 1.5 1.5 0 0 1 0-3Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#5F95A9&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">defs</span>&gt;</span><span class="tag">&lt;<span class="name">linearGradient</span> <span class="attr">id</span>=<span class="string">&quot;sliver_linear&quot;</span> <span class="attr">x1</span>=<span class="string">&quot;23&quot;</span> <span class="attr">y1</span>=<span class="string">&quot;24&quot;</span> <span class="attr">x2</span>=<span class="string">&quot;23&quot;</span> <span class="attr">y2</span>=<span class="string">&quot;0&quot;</span> <span class="attr">gradientUnits</span>=<span class="string">&quot;userSpaceOnUse&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">stop</span> <span class="attr">stop-color</span>=<span class="string">&quot;#ADC1D1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">stop</span>&gt;</span><span class="tag">&lt;<span class="name">stop</span> <span class="attr">offset</span>=<span class="string">&quot;1&quot;</span> <span class="attr">stop-color</span>=<span class="string">&quot;#D5DCE3&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">stop</span>&gt;</span><span class="tag">&lt;/<span class="name">linearGradient</span>&gt;</span><span class="tag">&lt;/<span class="name">defs</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;user-auth-company&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M141.211 512a370.789 370.789 0 1 0 741.578 0 370.789 370.789 0 1 0-741.578 0Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#333&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M93.09 512a418.91 418.91 0 1 0 837.82 0 418.91 418.91 0 1 0-837.82 0Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#4ac7ff&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M474.112 763.95a33.28 33.28 0 0 1-14.057 4.05 21.039 21.039 0 0 1-21.318-20.806 19.55 19.55 0 0 1 1.21-5.865l40.495-187.438-167.657.326a21.225 21.225 0 0 1-21.876-20.806 20.433 20.433 0 0 1 9.495-16.85l250.182-255.767c4.608-2.793 9.542-4.747 14.662-4.794a21.132 21.132 0 0 1 21.364 20.852 19.968 19.968 0 0 1-2.792 9.775l-40.216 184.32h167.843a21.178 21.178 0 0 1 21.644 20.852 20.294 20.294 0 0 1-9.495 16.943L474.112 763.95z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#fff&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;user-auth-people&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M0 512a512 512 0 1 0 1024 0A512 512 0 1 0 0 512z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFF&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M93.09 512a418.91 418.91 0 1 0 837.82 0 418.91 418.91 0 1 0-837.82 0z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFC62E&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M474.112 763.95a33.28 33.28 0 0 1-14.057 4.05 21.039 21.039 0 0 1-21.318-20.806 19.55 19.55 0 0 1 1.21-5.865l40.495-187.438-167.657.326a21.225 21.225 0 0 1-21.876-20.806 20.433 20.433 0 0 1 9.495-16.85l250.182-255.767c4.608-2.793 9.542-4.747 14.662-4.794a21.132 21.132 0 0 1 21.364 20.852 19.968 19.968 0 0 1-2.792 9.775l-40.216 184.32h167.843a21.178 21.178 0 0 1 21.644 20.852 20.294 20.294 0 0 1-9.495 16.943L474.112 763.95z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#FFF&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;user-cheese&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">rect</span> <span class="attr">opacity</span>=<span class="string">&quot;.01&quot;</span> <span class="attr">width</span>=<span class="string">&quot;24&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#C4C4C4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M11.372 1h4.494C18.689 1 21 3.311 21 6.134v11.875A5.006 5.006 0 0 1 16.009 23H4.722A2.731 2.731 0 0 1 2 20.277V3.723A2.731 2.731 0 0 1 4.722 1h6.65ZM10 3H8v5.151l.106-.039a2.578 2.578 0 0 1 1.79 0l.104.039V3ZM6 3v7.058c0 .398.293.7.627.7a.574.574 0 0 0 .2-.037l1.975-.734a.568.568 0 0 1 .397 0l1.975.734a.574.574 0 0 0 .2.037c.333 0 .626-.302.626-.7V3h3.867A3.136 3.136 0 0 1 19 6.134v11.875A2.995 2.995 0 0 1 16.009 21H4.722A.732.732 0 0 1 4 20.277V3.723C4 3.331 4.331 3 4.722 3h1.277Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#61666D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;user-lang&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">opacity</span>=<span class="string">&quot;.01&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M0 0h24v24H0V0Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#C4C4C4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M12 22C6.477 22 2 17.523 2 12S6.477 2 12 2s10 4.477 10 10-4.477 10-10 10Zm-2.29-2.333A17.9 17.9 0 0 1 8.027 13H4.062a8.008 8.008 0 0 0 5.648 6.667ZM10.03 13c.151 2.439.848 4.73 1.97 6.752A15.906 15.906 0 0 0 13.97 13h-3.94Zm9.908 0h-3.965a17.9 17.9 0 0 1-1.683 6.667A8.008 8.008 0 0 0 19.938 13ZM4.062 11h3.965A17.9 17.9 0 0 1 9.71 4.333 8.008 8.008 0 0 0 4.062 11Zm5.969 0h3.938A15.904 15.904 0 0 0 12 4.248 15.906 15.906 0 0 0 10.03 11h.001Zm4.259-6.667A17.9 17.9 0 0 1 15.973 11h3.965a8.008 8.008 0 0 0-5.648-6.667Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#61666D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;user-live&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">rect</span> <span class="attr">opacity</span>=<span class="string">&quot;.01&quot;</span> <span class="attr">width</span>=<span class="string">&quot;24&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#C4C4C4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M16.5 2h-13A2.507 2.507 0 0 0 1 4.5v14C1 19.875 2.125 21 3.5 21h13c1.375 0 2.5-1.125 2.5-2.5v-14C19 3.125 17.875 2 16.5 2Zm0 2c.271 0 .5.229.5.5v14c0 .271-.229.5-.5.5h-13a.507.507 0 0 1-.5-.5v-14c0-.271.229-.5.5-.5h13Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#61666D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M21.054 5c-.107 0-.216.01-.325.03l-2.1.392C17.69 5.598 17 6.509 17 7.576v7.496c0 1.068.69 1.979 1.63 2.155l2.1.391c.109.021.218.03.325.03 1.054 0 1.946-.959 1.946-2.184V7.185C23 5.959 22.108 5 21.054 5Zm-.086 2.021c.017.036.032.09.032.164v8.279a.388.388 0 0 1-.032.164l-1.915-.357a.355.355 0 0 1-.053-.199V7.576c0-.101.032-.168.053-.198l1.915-.357ZM5 7a1 1 0 0 1 1-1h3a1 1 0 0 1 0 2H6a1 1 0 0 1-1-1Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#61666D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;user-logout&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M23.228 12.133A1.061 1.061 0 0 0 23 10.979l-2.995-2.995a1.059 1.059 0 1 0-1.497 1.498l1.187 1.187h-9.423a1.058 1.058 0 1 0 0 2.118h9.423l-1.187 1.187a1.059 1.059 0 1 0 1.497 1.498L23 12.477c.097-.098.175-.214.228-.344Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#61666D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M16.262 17.718a8.471 8.471 0 1 1 0-11.98&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;#61666D&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;user-pay&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">opacity</span>=<span class="string">&quot;.01&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M0 0h24v24H0V0Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#C4C4C4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M20.5 8h-5.22A3.291 3.291 0 0 0 12 11.281v1.438A3.291 3.291 0 0 0 15.28 16h5.22a2.5 2.5 0 0 0 2.5-2.5v-3A2.5 2.5 0 0 0 20.5 8Zm0 2c.275 0 .5.225.5.5v3c0 .275-.225.5-.5.5h-5.22A1.299 1.299 0 0 1 14 12.719v-1.438c0-.694.587-1.281 1.28-1.281h5.22Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#61666D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M4.433 2h15.133A2.44 2.44 0 0 1 22 4.434V9h-2V4.434A.44.44 0 0 0 19.566 4H4.433A.439.439 0 0 0 4 4.434v15.132c0 .236.198.434.433.434h15.133a.44.44 0 0 0 .434-.434V15h2v4.566A2.44 2.44 0 0 1 19.566 22H4.433A2.44 2.44 0 0 1 2 19.566V4.434A2.44 2.44 0 0 1 4.433 2Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#61666D&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;user-shop&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 24 24&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">rect</span> <span class="attr">opacity</span>=<span class="string">&quot;.01&quot;</span> <span class="attr">x</span>=<span class="string">&quot;2.182&quot;</span> <span class="attr">y</span>=<span class="string">&quot;2.182&quot;</span> <span class="attr">width</span>=<span class="string">&quot;19.636&quot;</span> <span class="attr">height</span>=<span class="string">&quot;19.636&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#C4C4C4&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M2 9a2 2 0 0 1 2-2h16a2 2 0 0 1 2 2v2l-.7.42a3.5 3.5 0 0 1-3.6 0L17 11l-.7.42a3.5 3.5 0 0 1-3.6 0L12 11l-.7.42a3.5 3.5 0 0 1-3.6 0L7 11l-.7.42a3.5 3.5 0 0 1-3.6 0L2 11V9Z&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;#61666D&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M4 12.245v7.922a1.5 1.5 0 0 0 1.5 1.5h13a1.5 1.5 0 0 0 1.5-1.5V12M4 6.911v-2.41A1.5 1.5 0 0 1 5.5 3h13A1.5 1.5 0 0 1 20 4.5V7&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;#61666D&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M14.5 17h-5v4.666h5V17Z&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;#61666D&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;widget-agree&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 17 16&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M9.78 2.335a.553.553 0 0 0-.452.196c-.176.206-.248.376-.336.626l-.03.088c-.088.253-.2.576-.433.988-.396.702-.785 1.163-1.346 1.516-.361.227-.682.413-1.016.51v6.408h5.178c.841 0 1.574-.573 1.778-1.39l1.03-4.118a.667.667 0 0 0-.647-.828h-2.85a.5.5 0 0 1-.454-.71l.003-.005.009-.021a5.588 5.588 0 0 0 .156-.404c.091-.269.184-.606.213-.926.051-.564.063-.923-.166-1.357-.245-.465-.495-.56-.636-.573Zm1.596 2.996h2.13a1.667 1.667 0 0 1 1.617 2.07l-1.03 4.12a2.833 2.833 0 0 1-2.748 2.146H4A2.167 2.167 0 0 1 1.833 11.5V7.497c0-1.196.97-2.166 2.167-2.166h1.667c.215 0 .44-.086.984-.428.376-.237.663-.551 1.008-1.162.186-.33.272-.576.358-.824l.032-.092c.104-.295.225-.6.52-.944a1.552 1.552 0 0 1 1.303-.542c.565.052 1.072.424 1.43 1.103.375.712.33 1.331.277 1.913-.032.351-.117.696-.204.976Zm-6.21 7.336V6.33H4c-.644 0-1.167.522-1.167 1.166V11.5c0 .644.523 1.167 1.167 1.167h1.167Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;widget-arrow&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;145.067&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">d</span>=<span class="string">&quot;m341.333 170.667 341.334 341.332-341.334 341.335&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;widget-bookmark&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 15 15&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M9.695 2.188c.902-.007 1.79.365 2.618 1.065.9.762 1.292 1.946 1.28 3.118-.011 1.175-.427 2.404-1.232 3.312-1.468 1.659-3.227 3.009-4.078 3.623a1.332 1.332 0 0 1-1.566-.002c-.848-.615-2.6-1.963-4.077-3.62-.806-.902-1.222-2.132-1.233-3.308-.012-1.173.38-2.36 1.28-3.123.805-.681 1.692-1.05 2.596-1.05.783 0 1.536.277 2.216.797.674-.52 1.416-.807 2.196-.812Zm.007.937c-.625.004-1.264.267-1.887.833a.469.469 0 0 1-.63 0c-.618-.561-1.267-.817-1.902-.817-.637 0-1.317.258-1.99.828-.63.533-.959 1.418-.949 2.398.01.977.359 1.98.995 2.694 1.413 1.582 3.102 2.885 3.928 3.484a.394.394 0 0 0 .468 0c.829-.598 2.523-1.9 3.924-3.483.639-.721.987-1.725.997-2.7.01-.978-.319-1.86-.949-2.393-.7-.593-1.379-.848-2.005-.844Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;widget-coin&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M512 64c247.424 0 448 200.576 448 448S759.424 960 512 960 64 759.424 64 512 264.576 64 512 64zm0 64c-212.077 0-384 171.923-384 384s171.923 384 384 384 384-171.923 384-384-171.923-384-384-384zm155.52 118.144c20.224 0 36.608 14.912 36.608 33.28 0 18.432-16.384 33.344-36.608 33.344H545.28v61.12c107.27 5.592 192.973 90.674 199.523 197.165l.029.595.384 11.904v44.48c.003.159.004.347.004.536 0 18.38-14.9 33.28-33.28 33.28-16.467 0-30.141-11.96-32.809-27.668l-.028-.196-.512-5.952v-44.48c-.282-71.949-53.31-131.428-122.408-141.79l-.792-.098-10.112-1.152v311.04c.003.159.004.347.004.536 0 18.38-14.9 33.28-33.28 33.28-16.467 0-30.141-11.96-32.809-27.668l-.028-.196-.512-6.016V440.512c-71.128 5.419-127.509 61.8-132.898 132.441l-.03.487-.384 10.112v44.48c.003.159.004.347.004.536 0 18.38-14.9 33.28-33.28 33.28-16.467 0-30.141-11.96-32.809-27.668l-.028-.196-.512-5.952v-44.48c.339-108.061 82.027-196.938 187.017-208.618l.951-.086 11.904-.96v-61.12H350.717c-20.16 0-36.48-14.912-36.48-33.28 0-18.432 16.32-33.28 36.48-33.28h316.8z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;widget-danmaku&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M800 128c89.6 0 160 70.4 160 160v448c0 89.6-70.4 160-160 160H224c-89.6 0-160-70.4-160-160V288c0-89.6 70.4-160 160-160h576zm0 64H224c-51.2 0-91.072 36.864-95.552 86.528L128 288v448c0 51.2 36.864 91.072 86.528 95.552L224 832h576c51.2 0 91.072-36.864 95.552-86.528L896 736V288c0-54.4-41.6-96-96-96zM368 576v64h-64v-64h64zm416 0v64H432v-64h352zM304 384v64h-64v-64h64zm448 0v64H368v-64h384z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;widget-download&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 23 26&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M2.455 8.246c-2.278 0-3.32 2.833-1.595 4.312l8.676 7.433a2.952 2.952 0 0 0 3.84 0l8.677-7.433c1.728-1.48.679-4.312-1.596-4.312H17.1V3.108A3.113 3.113 0 0 0 13.99 0H8.484a3.114 3.114 0 0 0-3.11 3.108v5.138h-2.92Zm2.638 14.663a1.273 1.273 0 1 0 0 2.546H17.82a1.273 1.273 0 1 0 0-2.546H5.093Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;widget-entry-arrow&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 7 11&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M1.104 1.104a.355.355 0 0 0 0 .502l3.888 3.887-3.888 3.888a.355.355 0 0 0 .502.502l3.97-3.972a.591.591 0 0 0 0-.836l-3.97-3.971a.355.355 0 0 0-.502 0Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M1.104 1.606 1.81.898l-.707.708Zm0-.502.707.707-.707-.707Zm3.888 4.39.707.706a1 1 0 0 0 0-1.414l-.707.707ZM1.104 9.38l-.707-.707.707.707Zm0 .502-.707.707.707-.707Zm.502 0-.708-.708.708.708Zm3.97-3.972.708.707-.707-.707Zm0-.836-.706.707.707-.707Zm-3.97-3.971-.708.707.708-.707ZM1.81.898a.645.645 0 0 1 0 .913L.397.397c-.53.529-.53 1.387 0 1.916L1.81.898Zm3.888 3.888L1.81.898.397 2.313 4.284 6.2 5.7 4.786ZM1.81 10.088 5.699 6.2 4.284 4.786.397 8.674l1.414 1.414Zm0-.913a.645.645 0 0 1 0 .913L.397 8.674c-.53.529-.53 1.387 0 1.916L1.81 9.175Zm-.913 0a.645.645 0 0 1 .913 0L.397 10.59c.529.529 1.387.529 1.916 0L.898 9.175Zm3.972-3.97L.898 9.174l1.415 1.415 3.971-3.972L4.87 5.204Zm0 .577a.409.409 0 0 1 0-.578l1.414 1.414a1.591 1.591 0 0 0 0-2.25L4.87 5.782ZM.898 1.811 4.87 5.782l1.414-1.414L2.313.397.898 1.81Zm.913 0a.645.645 0 0 1-.913 0L2.313.397a1.355 1.355 0 0 0-1.916 0L1.81 1.81Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;widget-favorite&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M722.88 311.04c-36.771-6.091-67.347-28.365-84.62-59.115l-.308-.597L565.44 99.712c-20.736-47.616-86.144-47.616-109.888 0l-65.28 142.848c-17.92 35.712-50.56 62.528-89.152 68.48l-154.496 23.808c-47.488 5.952-68.288 65.472-32.64 101.184l115.84 119.04c26.688 26.816 38.592 65.536 32.64 104.192L235.776 825.92c-8.96 50.624 44.544 86.4 89.088 62.528l130.688-71.424c16.599-9.818 36.582-15.619 57.92-15.619s41.321 5.801 58.457 15.913l130.151 71.131c44.608 23.808 95.104-11.904 89.152-62.528l-29.696-166.656c-1.052-5.987-1.654-12.88-1.654-19.914 0-32.801 13.084-62.547 34.318-84.302l115.816-119.016c35.648-35.712 14.848-95.232-32.64-101.184L722.88 311.041zm25.472 199.424c-40.704 40.768-59.2 99.904-50.048 158.592l28.48 159.936-124.672-68.16c-25.433-14.826-55.984-23.578-88.578-23.578-28.767 0-55.942 6.817-79.997 18.925l1.023-.467-134.528 73.344 25.6-159.68c9.152-59.072-9.28-118.208-50.56-159.488l-110.08-113.152 145.856-22.4c59.008-9.152 109.376-48.512 136.64-103.168l63.104-137.92 65.472 136.96c22.08 53.248 76.352 94.72 137.088 104.064L858.944 396.8 748.352 510.464z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;widget-follow&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 44 44&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">g</span> <span class="attr">filter</span>=<span class="string">&quot;url(#filter0_d_1644_110696)&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M29.148 22.427a1.056 1.056 0 1 0-2.112 0v1.884h-2.005a1.056 1.056 0 0 0 0 2.112h2.005v1.912a1.056 1.056 0 0 0 2.112 0v-1.912h1.976a1.056 1.056 0 0 0 0-2.112h-1.976v-1.884Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#fff&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M24.684 31.24c-.44.32-.884.633-1.334.94a1.34 1.34 0 0 1-1.49.002 52.583 52.583 0 0 1-2.85-2.085c-.51-.4-1.006-.816-1.486-1.249l-.204-.181c-.502-.445-1.302-1.153-1.623-1.456-1.088-1.03-1.868-1.984-2.386-2.917a6.394 6.394 0 0 1-.845-3.168c0-1.796.507-3.61 1.652-4.8 1.125-1.173 2.47-1.668 4.134-1.66 1.534 0 3.225.776 4.324 1.832l.013.012.015-.013c1.151-1.074 2.957-1.83 4.46-1.83 1.687 0 3.005.48 4.142 1.66 1.145 1.189 1.536 3.002 1.536 4.798&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;#fff&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2.592&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span> <span class="attr">stroke-linejoin</span>=<span class="string">&quot;round&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">g</span>&gt;</span><span class="tag">&lt;<span class="name">defs</span>&gt;</span><span class="tag">&lt;<span class="name">filter</span> <span class="attr">id</span>=<span class="string">&quot;filter0_d_1644_110696&quot;</span> <span class="attr">x</span>=<span class="string">&quot;9.17&quot;</span> <span class="attr">y</span>=<span class="string">&quot;13.371&quot;</span> <span class="attr">width</span>=<span class="string">&quot;26.867&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24.333&quot;</span> <span class="attr">filterUnits</span>=<span class="string">&quot;userSpaceOnUse&quot;</span> <span class="attr">color-interpolation-filters</span>=<span class="string">&quot;sRGB&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">feFlood</span> <span class="attr">flood-opacity</span>=<span class="string">&quot;0&quot;</span> <span class="attr">result</span>=<span class="string">&quot;BackgroundImageFix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">feFlood</span>&gt;</span><span class="tag">&lt;<span class="name">feColorMatrix</span> <span class="attr">in</span>=<span class="string">&quot;SourceAlpha&quot;</span> <span class="attr">values</span>=<span class="string">&quot;0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0&quot;</span> <span class="attr">result</span>=<span class="string">&quot;hardAlpha&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">feColorMatrix</span>&gt;</span><span class="tag">&lt;<span class="name">feOffset</span> <span class="attr">dy</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">feOffset</span>&gt;</span><span class="tag">&lt;<span class="name">feGaussianBlur</span> <span class="attr">stdDeviation</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">feGaussianBlur</span>&gt;</span><span class="tag">&lt;<span class="name">feColorMatrix</span> <span class="attr">values</span>=<span class="string">&quot;0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.2 0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">feColorMatrix</span>&gt;</span><span class="tag">&lt;<span class="name">feBlend</span> <span class="attr">in2</span>=<span class="string">&quot;BackgroundImageFix&quot;</span> <span class="attr">result</span>=<span class="string">&quot;effect1_dropShadow_1644_110696&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">feBlend</span>&gt;</span><span class="tag">&lt;<span class="name">feBlend</span> <span class="attr">in</span>=<span class="string">&quot;SourceGraphic&quot;</span> <span class="attr">in2</span>=<span class="string">&quot;effect1_dropShadow_1644_110696&quot;</span> <span class="attr">result</span>=<span class="string">&quot;shape&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">feBlend</span>&gt;</span><span class="tag">&lt;/<span class="name">filter</span>&gt;</span><span class="tag">&lt;/<span class="name">defs</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;widget-followed&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 45 45&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">g</span> <span class="attr">filter</span>=<span class="string">&quot;url(#filter0_d_1644_133773)&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M31.79 14.297c-1.546-1.261-3.204-1.93-4.887-1.918-1.457.01-2.841.527-4.1 1.463-1.27-.937-2.676-1.435-4.137-1.435-1.687 0-3.343.663-4.846 1.89-1.68 1.372-2.463 3.786-2.44 5.897.021 2.117.773 4.123 2.277 5.748 2.958 3.196 6.58 5.69 8.006 6.668.685.47 1.597.471 2.283.002 1.43-.977 5.057-3.485 7.996-6.686 1.502-1.635 2.269-3.612 2.29-5.726.023-2.11-.763-4.532-2.443-5.903Zm-3.68 5.906a1 1 0 1 0-1.372-1.455l-4.214 3.974-2.101-1.91a1 1 0 0 0-1.346 1.48l2.786 2.533a1 1 0 0 0 1.36-.012l4.887-4.61Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">g</span>&gt;</span><span class="tag">&lt;<span class="name">defs</span>&gt;</span><span class="tag">&lt;<span class="name">filter</span> <span class="attr">id</span>=<span class="string">&quot;filter0_d_1644_133773&quot;</span> <span class="attr">x</span>=<span class="string">&quot;9.379&quot;</span> <span class="attr">y</span>=<span class="string">&quot;12.379&quot;</span> <span class="attr">width</span>=<span class="string">&quot;26.855&quot;</span> <span class="attr">height</span>=<span class="string">&quot;24.584&quot;</span> <span class="attr">filterUnits</span>=<span class="string">&quot;userSpaceOnUse&quot;</span> <span class="attr">color-interpolation-filters</span>=<span class="string">&quot;sRGB&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">feFlood</span> <span class="attr">flood-opacity</span>=<span class="string">&quot;0&quot;</span> <span class="attr">result</span>=<span class="string">&quot;BackgroundImageFix&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">feFlood</span>&gt;</span><span class="tag">&lt;<span class="name">feColorMatrix</span> <span class="attr">in</span>=<span class="string">&quot;SourceAlpha&quot;</span> <span class="attr">values</span>=<span class="string">&quot;0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0&quot;</span> <span class="attr">result</span>=<span class="string">&quot;hardAlpha&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">feColorMatrix</span>&gt;</span><span class="tag">&lt;<span class="name">feOffset</span> <span class="attr">dy</span>=<span class="string">&quot;2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">feOffset</span>&gt;</span><span class="tag">&lt;<span class="name">feGaussianBlur</span> <span class="attr">stdDeviation</span>=<span class="string">&quot;1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">feGaussianBlur</span>&gt;</span><span class="tag">&lt;<span class="name">feColorMatrix</span> <span class="attr">values</span>=<span class="string">&quot;0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.2 0&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">feColorMatrix</span>&gt;</span><span class="tag">&lt;<span class="name">feBlend</span> <span class="attr">in2</span>=<span class="string">&quot;BackgroundImageFix&quot;</span> <span class="attr">result</span>=<span class="string">&quot;effect1_dropShadow_1644_133773&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">feBlend</span>&gt;</span><span class="tag">&lt;<span class="name">feBlend</span> <span class="attr">in</span>=<span class="string">&quot;SourceGraphic&quot;</span> <span class="attr">in2</span>=<span class="string">&quot;effect1_dropShadow_1644_133773&quot;</span> <span class="attr">result</span>=<span class="string">&quot;shape&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">feBlend</span>&gt;</span><span class="tag">&lt;/<span class="name">filter</span>&gt;</span><span class="tag">&lt;/<span class="name">defs</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;widget-gongyi&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 56 56&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">circle</span> <span class="attr">cx</span>=<span class="string">&quot;28&quot;</span> <span class="attr">cy</span>=<span class="string">&quot;28&quot;</span> <span class="attr">r</span>=<span class="string">&quot;28&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#00AEEC&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">circle</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M41 32.78c-4.49 0-8.129 3.603-8.129 8.047M23.129 40.828c0-4.445-3.64-8.048-8.129-8.048&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;#fff&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;2.5&quot;</span> <span class="attr">stroke-linecap</span>=<span class="string">&quot;round&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M18.534 16.728a7.327 7.327 0 0 1 6.78-1.435c.344.1.43.53.176.782l-3.412 3.37a1.097 1.097 0 0 0 0 1.56 1.124 1.124 0 0 0 1.58 0l3.948-3.9c2.835-2.802 7.432-2.802 10.267 0a7.112 7.112 0 0 1 0 10.143l-9.169 9.058a1 1 0 0 1-1.405 0l-9.565-9.449.015-.015a7.113 7.113 0 0 1 .785-10.114Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;#fff&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;widget-play-count&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 16 16&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M3.833 2.667a2.5 2.5 0 0 0-2.5 2.5v5.666a2.5 2.5 0 0 0 2.5 2.5h8.334a2.5 2.5 0 0 0 2.5-2.5V5.167a2.5 2.5 0 0 0-2.5-2.5H3.833Zm-1.5 2.5a1.5 1.5 0 0 1 1.5-1.5h8.334a1.5 1.5 0 0 1 1.5 1.5v5.666a1.5 1.5 0 0 1-1.5 1.5H3.833a1.5 1.5 0 0 1-1.5-1.5V5.167Zm8.25 3.266a.5.5 0 0 0 0-.866l-3.5-2.02a.5.5 0 0 0-.75.432v4.042a.5.5 0 0 0 .75.433l3.5-2.021Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;widget-people&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 1024 1024&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M261.02 371.451c0-77.623 62.926-140.549 140.549-140.549s140.549 62.926 140.549 140.549S479.192 512 401.569 512 261.02 449.074 261.02 371.451zm140.549-200.784c-110.89 0-200.784 89.895-200.784 200.785 0 76.316 42.577 142.687 105.273 176.656-113.878 39.533-195.626 147.776-195.626 275.107 0 16.637 13.484 30.118 30.118 30.118s30.118-13.481 30.118-30.118c0-127.524 103.378-230.9 230.902-230.9s230.904 103.376 230.904 230.9c0 16.637 13.481 30.118 30.118 30.118 16.631 0 30.118-13.481 30.118-30.118 0-127.331-81.751-235.574-195.628-275.107 62.696-33.968 105.275-100.34 105.275-176.656 0-110.89-89.896-200.785-200.787-200.785zm271.057 381.49c0-16.634 13.487-30.118 30.118-30.118h.018c60.982-.01 110.417-49.448 110.417-110.432 0-60.907-49.309-110.297-110.188-110.431l-.247.001c-14.993 0-29.22 2.972-42.171 8.331-15.372 6.358-32.985-.948-39.346-16.318s.946-32.985 16.318-39.343c20.131-8.326 42.171-12.905 65.199-12.905v-.001c94.256 0 170.671 76.41 170.671 170.666 0 55.967-26.943 105.642-68.56 136.765 64.831 35.96 108.713 105.099 108.713 184.489 0 16.637-13.481 30.118-30.118 30.118-16.631 0-30.118-13.481-30.118-30.118 0-83.167-67.421-150.588-150.588-150.588-16.631 0-30.118-13.482-30.118-30.116z&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;widget-play-logo&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 48 48&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M17.664 5.39a2 2 0 1 0-3.328 2.22l2.026 3.038c-2.277.093-4.173.218-5.689.344-3.59.297-6.353 3.098-6.69 6.648C3.741 20.197 3.5 23.59 3.5 27c0 3.41.24 6.803.483 9.36.337 3.55 3.1 6.35 6.69 6.648 2.976.247 7.418.492 13.327.492s10.35-.245 13.327-.492c3.59-.297 6.353-3.099 6.69-6.648.242-2.557.483-5.95.483-9.36 0-3.41-.24-6.803-.483-9.36-.337-3.55-3.1-6.35-6.69-6.648-1.516-.126-3.412-.251-5.689-.344l2.026-3.039a2 2 0 1 0-3.328-2.218l-3.42 5.13a203.698 203.698 0 0 0-5.832 0l-3.42-5.13ZM30.75 24.836c1.667.962 1.667 3.368 0 4.33l-9 5.196c-1.667.962-3.75-.24-3.75-2.165V21.804c0-1.925 2.083-3.127 3.75-2.165l9 5.196Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">opacity</span>=<span class="string">&quot;.9&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;widget-roll&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 12 12&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M12 6.002C12 3.142 10.205.664 7.683.024a.75.75 0 0 0-.369 1.454C9.15 1.943 10.5 3.807 10.5 6c0 1.8-.908 3.38-2.25 4.144V8.25a.75.75 0 0 0-1.499 0v2.796c0 .045.004.089.013.132a.75.75 0 0 0 .932.798c2.516-.643 4.304-3.118 4.304-5.973ZM4.524.005H4.49a.757.757 0 0 0-.172.022C1.797.658 0 3.14 0 6.004c0 2.86 1.788 5.337 4.304 5.974a.75.75 0 0 0 .367-1.454C2.846 10.062 1.5 8.198 1.5 6.004c0-1.805.91-3.385 2.25-4.147V3.55a.75.75 0 0 0 1.5 0V.745a.75.75 0 0 0-.023-.173l-.01-.04A.654.654 0 0 0 5.155.39.756.756 0 0 0 4.58.01h.001a.665.665 0 0 0-.056-.004Z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;widget-sina&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 34 30&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M27.211 10.657c-.551 0-1.102-.551-1.102-1.102.183-1.287-.552-2.573-2.022-2.94h-.55c-.552 0-1.103-.552-1.103-1.103 0-.551.55-1.102 1.102-1.102 2.573 0 4.594 2.021 4.594 4.593v.368c0 .918-.367 1.286-.919 1.286M13.247 19.66c-.368 0-.552.368-.552.736 0 .367.368.55.552.55.183 0 .55-.367.55-.55.185-.368-.183-.736-.55-.736m-3.124.552c-.918 0-1.654.735-1.654 1.653 0 .92.736 1.654 1.654 1.654.919 0 1.654-.735 1.654-1.654 0-.918-.735-1.653-1.654-1.653m2.94 5.145c-2.94.734-5.88-.552-6.431-3.124-.551-2.573 1.286-4.961 4.226-5.696 2.94-.735 5.88.551 6.431 3.123.551 2.573-1.286 4.962-4.226 5.697m-.735-11.576c-5.512.367-9.922 3.491-9.738 7.166.183 3.675 4.96 6.247 10.473 5.88 5.513-.368 9.922-3.491 9.739-7.167-.184-3.674-4.962-6.063-10.474-5.88m10.474-4.96c2.388 1.102.918 5.512.918 5.512a5.7 5.7 0 0 1 3.308 1.654c2.572 2.94.367 9.187-8.453 12.127-7.9 2.572-15.802 0-18.006-4.962-2.205-5.328 2.204-13.413 9.738-17.639.919-.551 3.858-1.47 5.512.368.919 1.102 0 4.226 0 4.226s3.491-2.94 6.982-1.286m10.107 1.837c0 .735-.736 1.47-1.47 1.47-.735 0-1.47-.735-1.47-1.47v-.184c.55-3.674-2.022-6.982-5.696-7.533h-1.103c-.735 0-1.47-.735-1.47-1.47S22.434 0 23.17 0h.184c5.328 0 9.738 4.41 9.738 9.738v.735c-.183 0-.183.184-.183.184&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;widget-tv-tips&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 60 60&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;页面-1&quot;</span> <span class="attr">stroke</span>=<span class="string">&quot;none&quot;</span> <span class="attr">stroke-width</span>=<span class="string">&quot;1&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;小电视刷新加载-双列&quot;</span> <span class="attr">transform</span>=<span class="string">&quot;translate(-154 -68)&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">g</span> <span class="attr">id</span>=<span class="string">&quot;小电视&quot;</span> <span class="attr">transform</span>=<span class="string">&quot;translate(154 68)&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">rect</span> <span class="attr">id</span>=<span class="string">&quot;矩形&quot;</span> <span class="attr">x</span>=<span class="string">&quot;0&quot;</span> <span class="attr">y</span>=<span class="string">&quot;0&quot;</span> <span class="attr">width</span>=<span class="string">&quot;60&quot;</span> <span class="attr">height</span>=<span class="string">&quot;60&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">rect</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M39.081 8.418c1.268-.157 2.43.712 2.67 1.955.057.296.04.539-.003.762-.045.22-.122.419-.225.598-.05.09-.11.174-.169.258l-.177.252-.357.502a70.382 70.382 0 0 1-1.473 1.974c-.092.118-.185.233-.277.35.706.023 1.413.05 2.12.08 1.487.067 2.974.15 4.462.26l.07.005.078.007.158.016c.106.008.21.024.316.04l.157.022.156.03a7.88 7.88 0 0 1 1.525.447 7.956 7.956 0 0 1 4.747 5.65c.026.104.044.209.063.314l.028.158.022.159.021.159c.008.054.012.095.017.144l.031.28a106.32 106.32 0 0 1 .62 12.39 94.188 94.188 0 0 1-.145 4.517 86.153 86.153 0 0 1-.259 3.385l-.057.564-.03.281-.015.141a8.038 8.038 0 0 1-.726 2.625 8.062 8.062 0 0 1-1.453 2.128 7.944 7.944 0 0 1-4.487 2.372c-.106.016-.212.035-.319.046l-.316.033-.557.046-1.114.086c-.743.056-1.486.104-2.23.151a192.107 192.107 0 0 1-22.317.054 154.773 154.773 0 0 1-4.458-.313l-.139-.012-.07-.006-.078-.007c-.107-.012-.214-.022-.32-.037l-.319-.049-.316-.063a7.974 7.974 0 0 1-3.44-1.7 8.02 8.02 0 0 1-2.762-4.979l-.04-.319-.03-.281a88.767 88.767 0 0 1-.277-3.382 99.285 99.285 0 0 1-.145-9.03c.085-3.007.296-6.007.62-8.996a8.058 8.058 0 0 1 .676-2.46 7.899 7.899 0 0 1 1.415-2.117 7.871 7.871 0 0 1 5.028-2.473l.157-.015.14-.01.278-.02 1.116-.073a169.996 169.996 0 0 1 5.153-.236c-.095-.12-.192-.24-.286-.362a70.382 70.382 0 0 1-1.474-1.974l-.357-.502-.177-.252c-.059-.084-.119-.168-.17-.258a2.016 2.016 0 0 1-.224-.598 1.934 1.934 0 0 1-.003-.762 2.428 2.428 0 0 1 2.67-1.955c.297.037.522.127.719.238.195.111.359.246.497.399.07.076.13.16.191.242l.184.247.365.496c.48.666.956 1.336 1.413 2.018.458.683.904 1.374 1.332 2.079.166.274.33.55.49.829a325.8 325.8 0 0 1 5.279-.02c.54.003 1.08.008 1.62.014.16-.276.321-.55.486-.823.428-.705.874-1.396 1.332-2.079.458-.682.933-1.352 1.413-2.018l.365-.496.184-.247c.061-.083.122-.166.191-.242.139-.153.302-.288.497-.4.197-.11.422-.2.72-.237ZM30.673 19.5c-2.619 0-4.97.03-7.197.09a172.005 172.005 0 0 0-6.51.276l-1.103.072-.359.025-.146.013a3.362 3.362 0 0 0-2.706 1.952c-.149.328-.25.693-.289 1.052a109.34 109.34 0 0 0-.595 8.63 95.201 95.201 0 0 0 .139 8.614 84.698 84.698 0 0 0 .262 3.202l.023.225.026.203c.015.1.03.178.043.235l.007.031a3.472 3.472 0 0 0 2.598 2.594l.166.033.158.024.164.018.205.018c1.416.12 2.872.222 4.33.304a190.612 190.612 0 0 0 10.445.294 190.038 190.038 0 0 0 11.336-.346c.663-.042 1.432-.092 2.166-.147l1.103-.085.496-.041.227-.024.137-.02a3.422 3.422 0 0 0 1.891-1.005l.013-.014a3.482 3.482 0 0 0 .937-1.985l.01-.078.047-.44.054-.536a83.256 83.256 0 0 0 .244-3.19 90.42 90.42 0 0 0 .138-4.299c.022-2.876-.076-5.782-.293-8.63a100.416 100.416 0 0 0-.298-3.215l-.029-.256-.009-.082-.026-.194-.028-.152-.016-.073a3.398 3.398 0 0 0-2.537-2.556l-.058-.013-.144-.027-.152-.022-.162-.016-.061-.005c-1.339-.1-2.755-.182-4.326-.251-2.744-.12-5.603-.185-8.739-.2-.527-.002-1.055-.003-1.582-.003Zm5.08 15.823c.102-.355.433-.517.8-.445.39.077.67.395.594.787l-.019.093-.017.082-.037.158a7.55 7.55 0 0 1-.285.92c-.157.402-.35.799-.604 1.18-.254.38-.58.747-1.006 1.036a2.897 2.897 0 0 1-.706.348c-.253.085-.521.13-.783.139-.51.016-1.025-.1-1.474-.318a3.902 3.902 0 0 1-1.145-.851 5.692 5.692 0 0 1-.672-.88 5.682 5.682 0 0 1-.672.88 3.904 3.904 0 0 1-1.145.851c-.45.218-.964.334-1.474.318a2.77 2.77 0 0 1-.783-.139 2.897 2.897 0 0 1-.706-.348 3.739 3.739 0 0 1-1.006-1.036 6.076 6.076 0 0 1-.603-1.18 7.809 7.809 0 0 1-.286-.92l-.037-.158-.017-.082-.018-.093c-.077-.392.203-.71.592-.787.368-.072.699.09.802.445l.018.064.031.109.038.122a6.766 6.766 0 0 0 .273.73c.137.314.296.612.48.866.186.253.387.468.6.606.215.139.43.206.67.211.257.009.512-.041.756-.155.246-.112.48-.293.704-.51.223-.22.427-.484.609-.77a5.69 5.69 0 0 0 .375-.672l.054-.114.045-.099.029-.064a.717.717 0 0 1 .671-.425h.004a.717.717 0 0 1 .667.425l.03.064.044.1.054.113a5.771 5.771 0 0 0 .375.671c.182.287.386.55.61.77.223.218.458.399.703.51.244.115.5.165.755.156a1.24 1.24 0 0 0 .67-.21c.214-.14.415-.354.6-.607.185-.254.344-.552.481-.866a6.298 6.298 0 0 0 .273-.73l.038-.122.031-.109Zm-1.03-7.666c.235-.824.898-1.38 1.717-1.144.38.11.76.22 1.135.341l.563.18.56.188c.743.255 1.48.523 2.21.807.367.139.73.286 1.092.433.363.148.726.294 1.084.451a24.249 24.249 0 0 1 1.593.758c.176.092.345.185.525.291.627.367.731 1.043.499 1.765-.268.833-1.131 1.564-1.959 1.294l-.035-.011c-.17-.055-.351-.121-.527-.186a29.122 29.122 0 0 1-.53-.202c-.176-.07-.352-.138-.527-.211-.176-.07-.351-.142-.525-.217-.35-.144-.697-.297-1.046-.442l-1.049-.436c-.699-.29-1.4-.572-2.1-.85l-1.052-.414c-.35-.14-.701-.265-1.05-.404l-.043-.017c-.727-.292-.756-1.2-.535-1.974Zm-10.128-1.144c.82-.236 1.482.32 1.718 1.144.22.774.192 1.682-.535 1.974l-.043.017c-.349.139-.7.264-1.05.404l-1.052.413c-.7.279-1.401.56-2.1.85l-1.049.437c-.35.145-.696.298-1.046.442-.174.075-.35.147-.525.217-.175.073-.352.141-.528.21-.175.07-.352.137-.53.203-.175.065-.357.13-.526.186l-.035.011c-.828.27-1.691-.461-1.96-1.294-.232-.722-.127-1.398.5-1.765.18-.106.349-.199.524-.291a24.251 24.251 0 0 1 1.593-.758c.36-.157.722-.303 1.084-.451.363-.147.726-.294 1.092-.433.73-.284 1.468-.552 2.211-.807l.56-.189.563-.179a39.2 39.2 0 0 1 1.134-.34Z&quot;</span> <span class="attr">id</span>=<span class="string">&quot;形状结合&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">g</span>&gt;</span><span class="tag">&lt;/<span class="name">g</span>&gt;</span><span class="tag">&lt;/<span class="name">g</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;widget-up&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 14 10.666&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M0 2.5A2.5 2.5 0 0 1 2.5 0h8.334a2.5 2.5 0 0 1 2.5 2.5v5.666a2.5 2.5 0 0 1-2.5 2.5H2.5a2.5 2.5 0 0 1-2.5-2.5ZM2.5 1A1.5 1.5 0 0 0 1 2.5v5.666a1.5 1.5 0 0 0 1.5 1.5h8.334a1.5 1.5 0 0 0 1.5-1.5V2.5a1.5 1.5 0 0 0-1.5-1.5zM3 2.833a.5.5 0 0 1 .5.5v2.5a1 1 0 1 0 2 0v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-4 0v-2.5a.5.5 0 0 1 .5-.5Zm4.667 0a.5.5 0 0 0-.5.5v4a.5.5 0 1 0 1 0v-.667H9.25a1.917 1.917 0 1 0 0-3.833zM9.25 5.666H8.167V3.833H9.25a.917.917 0 1 1 0 1.833z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span> <span class="attr">id</span>=<span class="string">&quot;path48&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;widget-watch-later&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 200 200&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M17.5 100c0-45.563 36.937-82.5 82.501-82.5 44.504 0 80.778 35.238 82.442 79.334l-7.138-7.137a7.5 7.5 0 0 0-10.607 10.606l20.001 20a7.5 7.5 0 0 0 10.607 0l20.002-20a7.5 7.5 0 0 0-10.607-10.606l-7.245 7.245c-1.616-52.432-44.63-94.441-97.455-94.441-53.848 0-97.501 43.652-97.501 97.5s43.653 97.5 97.501 97.5c32.719 0 61.673-16.123 79.346-40.825a7.5 7.5 0 0 0-12.199-8.728c-14.978 20.934-39.472 34.553-67.147 34.553-45.564 0-82.501-36.937-82.501-82.5zm109.888-12.922c9.215 5.743 9.215 20.101 0 25.843l-29.62 18.46c-9.215 5.742-20.734-1.436-20.734-12.922V81.541c0-11.486 11.519-18.664 20.734-12.921l29.62 18.459z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;widget-watch-save&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 200 200&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">d</span>=<span class="string">&quot;M176.725 56.608c1.507 1.508 2.44 3.591 2.44 5.892s-.932 4.384-2.44 5.892l-92.883 92.892c-2.262 2.264-5.388 3.664-8.842 3.664s-6.579-1.4-8.842-3.664l-51.217-51.225a8.333 8.333 0 1 1 11.781-11.785l48.277 48.277 89.942-89.942c1.508-1.507 3.591-2.44 5.892-2.44s4.384.932 5.892 2.44z&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span><span class="tag">&lt;<span class="name">symbol</span> <span class="attr">id</span>=<span class="string">&quot;widget-wechat&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;none&quot;</span> <span class="attr">viewBox</span>=<span class="string">&quot;0 0 36 29&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">path</span> <span class="attr">fill-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">clip-rule</span>=<span class="string">&quot;evenodd&quot;</span> <span class="attr">d</span>=<span class="string">&quot;M17.423 5.197c-.99 0-1.782.77-1.782 1.732s.792 1.732 1.782 1.732 1.782-.77 1.782-1.732c0-.963-.792-1.732-1.782-1.732m-8.514 0c-.988 0-1.781.77-1.781 1.732S7.92 8.66 8.909 8.66c.99 0 1.783-.77 1.783-1.732 0-.963-.793-1.732-1.783-1.732m4.95 12.895c0 .962.198 1.924.594 2.694h-1.187c-1.387 0-2.97-.192-4.357-.577L3.96 22.52l1.188-3.85C1.98 16.745 0 13.857 0 10.393 0 4.62 5.94 0 13.067 0c6.533 0 11.88 3.85 12.87 8.66h-.99c-6.139 0-11.088 4.235-11.088 9.431m15.047-4.234c-.792 0-1.387.577-1.387 1.347 0 .771.595 1.348 1.387 1.348s1.386-.577 1.386-1.348c0-.77-.595-1.347-1.386-1.347m-7.127 0c-.792 0-1.386.577-1.386 1.347 0 .771.594 1.348 1.386 1.348.791 0 1.385-.577 1.385-1.348 0-.77-.594-1.347-1.386-1.347m9.701 11.356.99 3.079-3.563-1.924c-1.188.384-2.376.577-3.761.577-5.743 0-10.494-3.85-10.494-8.66 0-4.812 4.751-8.662 10.494-8.662 5.74 0 10.492 3.85 10.492 8.661 0 2.695-1.583 5.197-4.158 6.929&quot;</span> <span class="attr">fill</span>=<span class="string">&quot;currentColor&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">path</span>&gt;</span><span class="tag">&lt;/<span class="name">symbol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://i1.hdslb.com/bfs/archive/f2d34e358dc760a56f11d9b080f98be24495c6fa.jpg@672w_378h_1c.webp&quot;</span> <span class="attr">referrerpolicy</span>=<span class="string">&quot;no-referrer&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;bottom&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>450W  真 核 弹 ! RTX 3090TI 首发测试<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;up&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">&quot;up-icon&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#widget-up&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>阿狸才不是受 · 3-29<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="综合练习3"><a href="#综合练习3" class="headerlink" title="综合练习3"></a>综合练习3</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682412060765-6a8235bd-52a6-4057-a316-e5dcf9ca0fa4.png#averageHue=%23ede7e2&clientId=ud254e90f-85b9-4&from=paste&height=350&id=u6e539cdc&originHeight=442&originWidth=348&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=79111&status=done&style=none&taskId=u0c3bde4b-eb0c-400b-b92b-b886c10e092&title=&width=275.64355394557714" alt="image.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#f5f5f5</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font</span>: <span class="number">12px</span>/<span class="number">1.5</span> Microsoft YaHei,Heiti SC,tahoma,arial,Hiragino Sans GB,<span class="string">&quot;\5B8B\4F53&quot;</span>,sans-serif;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">230px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">322px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">30px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">box-sizing</span>: border-box;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-decoration</span>: none;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#666</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span> <span class="selector-class">.album</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span> <span class="selector-class">.album</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">150px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span> <span class="selector-class">.desc</span> <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-top</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-overflow</span>: ellipsis;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: -webkit-box;</span></span><br><span class="line"><span class="language-css">      -webkit-line-clamp: <span class="number">2</span>;</span></span><br><span class="line"><span class="language-css">      -webkit-box-orient: vertical;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span> <span class="selector-class">.desc</span> <span class="selector-class">.price</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#e1251b</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span> <span class="selector-class">.desc</span> <span class="selector-class">.price</span> <span class="selector-class">.symbol</span>, <span class="selector-class">.item</span> <span class="selector-class">.desc</span> <span class="selector-class">.price</span> <span class="selector-class">.float</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span> <span class="selector-class">.desc</span> <span class="selector-class">.price</span> <span class="selector-class">.integer</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-weight</span>: <span class="number">700</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;album&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://img12.360buyimg.com/jdcms/s150x150_jfs/t1/129042/8/23901/164867/62451158E5a292e4c/5b754fa08ceea9c8.jpg.webp&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;desc&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>美的(Midea)空气炸锅大容量家用多功能电炸锅智能定时无油低脂煎炸锅温控炸鸡薯机条空气烤箱 EDB(4.5升)一年只换不修2022年2月上新<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;price&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;symbol&quot;</span>&gt;</span>¥<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;integer&quot;</span>&gt;</span>399.<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span>00<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="CSS属性-box-sizing"><a href="#CSS属性-box-sizing" class="headerlink" title="CSS属性 - box-sizing"></a>CSS属性 - box-sizing</h2><ul>
<li><strong>box-sizing用来设置盒子模型中宽高的行为</strong></li>
<li><strong>content-box</strong><ul>
<li>padding、border都布置在width、height外边</li>
</ul>
</li>
<li><strong>border-box</strong><ul>
<li>padding、border都布置在width、height里边</li>
</ul>
</li>
</ul>
<hr>
<p>** box-sizing: content-box**</p>
<ul>
<li>元素的实际占用宽度 &#x3D; border + padding + width</li>
<li>元素的实际占用高度 &#x3D; border + padding + height</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682412245965-782af3bb-e93c-4084-ac01-b85bb5bf8245.png#averageHue=%23d3f7b8&clientId=ud254e90f-85b9-4&from=paste&height=308&id=u742ac9fe&originHeight=534&originWidth=780&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=108779&status=done&style=none&taskId=u08eed9e5-ab4b-4160-b4ad-b2f5d6a02b5&title=&width=449.7969970703125" alt="image.png"></li>
</ul>
<p>** box-sizing: border-box  **</p>
<ul>
<li>元素的实际占用宽度 &#x3D; width</li>
<li>元素的实际占用高度 &#x3D; height</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1682412276156-f42fbfb8-e7dc-4b35-a558-d2835a01f828.png#averageHue=%23d2f2b8&clientId=ud254e90f-85b9-4&from=paste&height=257&id=ud858075c&originHeight=529&originWidth=910&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=276636&status=done&style=none&taskId=u5c5deb14-c8d8-4f6a-86ce-0982693998a&title=&width=441.41082763671875" alt="image.png"></li>
</ul>
<h2 id="元素的水平居中方案"><a href="#元素的水平居中方案" class="headerlink" title="元素的水平居中方案"></a>元素的水平居中方案</h2><ul>
<li>在一些需求中，需要元素在父元素中水平居中显示（父元素一般都是块级元素、inline-block）</li>
<li>行内级元素(包括inline-block元素)<ul>
<li>水平居中：在父元素中设置text-align: center</li>
</ul>
</li>
<li>块级元素<ul>
<li>水平居中：margin: 0 auto</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6~ES13新特性3</title>
    <url>/2024/08/30/ES6-ES13%E6%96%B0%E7%89%B9%E6%80%A73/</url>
    <content><![CDATA[<h3 id="ES7-Array-Includes"><a href="#ES7-Array-Includes" class="headerlink" title="ES7-Array Includes"></a><strong>ES7-Array Includes</strong></h3><ul>
<li>在ES7之前，如果我们想判断一个数组中是否包含某个元素，需要通过 indexOf获取结果，并且判断是否为 -1。</li>
<li>在ES7中，我们可以通过includes来判断一个数组中是否包含一个指定的元素，根据情况，如果包含则返回 true，否则返回false。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688438852654-bc330a18-c873-4e5c-82d6-e4bfb47de801.png#averageHue=%232b3039&clientId=u1081b15e-bb4f-4&from=paste&height=198&id=u23fb8e9c&originHeight=487&originWidth=811&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=149522&status=done&style=none&taskId=u91433c20-a688-45e2-86a0-0e84da920ab&title=&width=330.376220703125" alt="image.png"></li>
</ul>
<h3 id="ES7–指数exponentiation运算符"><a href="#ES7–指数exponentiation运算符" class="headerlink" title="ES7–指数exponentiation运算符"></a><strong>ES7–指数exponentiation运算符</strong></h3><ul>
<li>在ES7之前，计算数字的乘方需要通过 Math.pow方法来完成。</li>
<li>在ES7中，增加了 ** 运算符，可以对数字来计算乘方。</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688438924560-b288135a-cf63-4e59-b9f1-103d37d49c6a.png#averageHue=%232b3038&clientId=u1081b15e-bb4f-4&from=paste&height=100&id=u7564e5f0&originHeight=219&originWidth=711&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=73623&status=done&style=none&taskId=ue5a2fc4f-4705-4c62-8057-6947810bcad&title=&width=326.1559143066406" alt="image.png"></p>
<h3 id="ES8-Object-values"><a href="#ES8-Object-values" class="headerlink" title="ES8-Object values"></a><strong>ES8-Object values</strong></h3><ul>
<li>之前我们可以通过 Object.keys获取一个对象所有的key</li>
<li>在ES8中提供了 Object.values来获取所有的value值：</li>
</ul>
<h3 id="ES8-Object-entries"><a href="#ES8-Object-entries" class="headerlink" title="ES8-Object entries"></a><strong>ES8-Object entries</strong></h3><ul>
<li>通过 Object.entries可以获取到一个数组，数组中会存放可枚举属性的键值对数组。<ul>
<li>可以针对对象、数组、字符串进行操作；</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">   <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">   <span class="attr">height</span>: <span class="number">1.88</span>,</span><br><span class="line">   <span class="attr">address</span>: <span class="string">&quot;广州市&quot;</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 1.获取所有的key</span></span><br><span class="line"> <span class="keyword">const</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(obj)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(keys)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 2.ES8 Object.values</span></span><br><span class="line"> <span class="keyword">const</span> values = <span class="title class_">Object</span>.<span class="title function_">values</span>(obj)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(values)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 3.ES8 Object.entries</span></span><br><span class="line"> <span class="comment">// 3.1. 对对象操作</span></span><br><span class="line"> <span class="keyword">const</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(obj)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(entries)</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">const</span> entry <span class="keyword">of</span> entries) &#123;</span><br><span class="line">   <span class="keyword">const</span> [key, value] = entry</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(key, value)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 3.2. 对数组/字符串操作(了解)</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>([<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>]))</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">entries</span>(<span class="string">&quot;Hello&quot;</span>))</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688439193004-58026863-0bc2-4fe0-9453-59998fbeb3c8.png#averageHue=%23fdfcfc&clientId=u1081b15e-bb4f-4&from=paste&height=360&id=uc39f8bca&originHeight=455&originWidth=420&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=26222&status=done&style=none&taskId=ud0391c8c-1952-4b9a-8ac5-d90c25f48bb&title=&width=332.6732547619034" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688439206202-cc9b7c96-8876-47f5-922f-f36b3b6f8d71.png#averageHue=%23fcfbfb&clientId=u1081b15e-bb4f-4&from=paste&height=302&id=ua32ea4d4&originHeight=381&originWidth=408&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=18930&status=done&style=none&taskId=u3397d4e9-00e3-4515-bae7-a65b2115f8b&title=&width=323.16830462584903" alt="image.png"></p>
<h3 id="ES8-String-Padding"><a href="#ES8-String-Padding" class="headerlink" title="ES8-String Padding"></a><strong>ES8-String Padding</strong></h3><ul>
<li>某些字符串我们需要对其进行前后的填充，来实现某种格式化效果，ES8中增加了 padStart和 padEnd方法，分别是对字符串的首尾进行填充的。</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688439283676-afae6a4b-57c1-457e-992a-820705e84a6e.png#averageHue=%232b313a&clientId=u1081b15e-bb4f-4&from=paste&height=94&id=u1e0a34d8&originHeight=214&originWidth=1252&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=130534&status=done&style=none&taskId=ub98e5507-7055-4b86-b3c5-203434c01bf&title=&width=547.4108276367188" alt="image.png"></p>
<ul>
<li>我们简单具一个应用场景：比如需要对身份证、银行卡的前面位数进行隐藏：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.应用场景一: 对时间进行格式化</span></span><br><span class="line">   <span class="keyword">const</span> minute = <span class="string">&quot;15&quot;</span>.<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">   <span class="keyword">const</span> second = <span class="string">&quot;6&quot;</span>.<span class="title function_">padStart</span>(<span class="number">2</span>, <span class="string">&quot;0&quot;</span>)</span><br><span class="line"></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;minute&#125;</span>:<span class="subst">$&#123;second&#125;</span>`</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 2.应用场景二: 对一些敏感数据格式化</span></span><br><span class="line">   <span class="keyword">let</span> cardNumber = <span class="string">&quot;132666200001018899&quot;</span></span><br><span class="line">   <span class="keyword">const</span> sliceNumber = cardNumber.<span class="title function_">slice</span>(-<span class="number">4</span>)</span><br><span class="line">   cardNumber = sliceNumber.<span class="title function_">padStart</span>(cardNumber.<span class="property">length</span>, <span class="string">&quot;*&quot;</span>)</span><br><span class="line">   <span class="keyword">const</span> cardEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.card&quot;</span>)</span><br><span class="line">   cardEl.<span class="property">textContent</span> = cardNumber</span><br></pre></td></tr></table></figure>

<h3 id="ES8-Trailing-Commas"><a href="#ES8-Trailing-Commas" class="headerlink" title="ES8-Trailing Commas"></a><strong>ES8-Trailing Commas</strong></h3><ul>
<li>在ES8中，我们允许在函数定义和调用时多加一个逗号：</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688440327051-2f6859e2-2cd7-4a06-964a-19144c174257.png#averageHue=%232a2e37&clientId=ua1407788-59cb-4&from=paste&height=124&id=ue3f33b45&originHeight=280&originWidth=632&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=54092&status=done&style=none&taskId=ubb72ab3c-949e-492b-95d7-28d10d18f3f&title=&width=279.5395812988281" alt="image.png"></li>
</ul>
<h3 id="ES10-flat-flatMap"><a href="#ES10-flat-flatMap" class="headerlink" title="ES10-flat flatMap"></a><strong>ES10-flat flatMap</strong></h3><ul>
<li>flat() 方法会按照一个可指定的深度递归遍历数组，并将所有元素与遍历到的子数组中的元素合并为一个新数组返回。</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688440532391-55306b62-2675-4360-9cb2-294a4985acfe.png#averageHue=%232a2f37&clientId=ua1407788-59cb-4&from=paste&height=200&id=u3ed10a36&originHeight=364&originWidth=893&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=112578&status=done&style=none&taskId=u110101eb-0646-4ec4-92bc-e222714d958&title=&width=491.32666015625" alt="image.png"></p>
<ul>
<li>flatMap() 方法首先使用映射函数映射每个元素，然后将结果压缩成一个新数组。<ul>
<li>注意一：flatMap是先进行map操作，再做flat的操作；</li>
<li>注意二：flatMap中的flat相当于深度为1；</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688440538451-e155f4d9-1936-43c1-902d-401b668823f8.png#averageHue=%232a2e37&clientId=ua1407788-59cb-4&from=paste&height=145&id=u8606ec20&originHeight=224&originWidth=960&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=77366&status=done&style=none&taskId=ud8da9a92-3936-411b-be7e-ad1b67148ca&title=&width=620.4108276367188" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688440597643-3b1b02ac-a37b-48b5-8cb7-7b9a1feadf6e.png#averageHue=%23fdfcfc&clientId=ua1407788-59cb-4&from=paste&height=40&id=u9a9fa782&originHeight=50&originWidth=664&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=4194&status=done&style=none&taskId=u22984f08-b9c4-4705-a9e2-c5940ccad60&title=&width=525.9405741950092" alt="image.png"></p>
<h3 id="ES10-ObjectfromEntries"><a href="#ES10-ObjectfromEntries" class="headerlink" title="ES10-ObjectfromEntries"></a><strong>ES10-ObjectfromEntries</strong></h3><ul>
<li><p>在前面，我们可以通过 Object.entries将一个对象转换成 entries</p>
</li>
<li><p>那么如果我们有一个entries了，如何将其转换成对象呢？</p>
<ul>
<li>ES10提供了 Object.formEntries来完成转换：</li>
</ul>
</li>
<li><p>那么这个方法有什么应用场景呢？</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.对象</span></span><br><span class="line">    <span class="keyword">const</span> obj = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="number">1.88</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> entries = <span class="title class_">Object</span>.<span class="title function_">entries</span>(obj)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(entries)</span><br><span class="line">    <span class="keyword">const</span> info = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(entries)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(info)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.应用</span></span><br><span class="line">    <span class="keyword">const</span> searchString = <span class="string">&quot;?name=why&amp;age=18&amp;height=1.88&quot;</span></span><br><span class="line">    <span class="keyword">const</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(searchString)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params.<span class="title function_">get</span>(<span class="string">&quot;name&quot;</span>))</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params.<span class="title function_">get</span>(<span class="string">&quot;age&quot;</span>))</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params.<span class="title function_">entries</span>())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> params.<span class="title function_">entries</span>()) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> paramObj = <span class="title class_">Object</span>.<span class="title function_">fromEntries</span>(params)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(paramObj)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688440878231-5f2be4e9-b9ca-42db-877b-010640b05793.png#averageHue=%23fcfbfb&clientId=ua1407788-59cb-4&from=paste&height=269&id=u6a614167&originHeight=339&originWidth=462&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=26357&status=done&style=none&taskId=u804ffcd4-d545-46ad-a7c7-13d189ddad7&title=&width=365.94058023809373" alt="image.png"></p>
<h3 id="ES10-trimStarttrimEnd"><a href="#ES10-trimStarttrimEnd" class="headerlink" title="ES10-trimStarttrimEnd"></a><strong>ES10-trimStarttrimEnd</strong></h3><ul>
<li>去除一个字符串首尾的空格，我们可以通过trim方法，如果单独去除前面或者后面呢？<ul>
<li>ES10中给我们提供了trimStart和trimEnd；</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> message = <span class="string">&quot;   Hello World    &quot;</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="title function_">trim</span>())</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="title function_">trimStart</span>())</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(message.<span class="title function_">trimEnd</span>())</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688440945378-6fc37de6-2d72-4c01-a45c-84f64559f8b7.png#averageHue=%23abc9aa&clientId=ua1407788-59cb-4&from=paste&height=56&id=u93412967&originHeight=71&originWidth=218&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=1403&status=done&style=none&taskId=u4eda443c-4fcb-437c-afad-b4f12a8a311&title=&width=172.67326080498796" alt="image.png"></p>
<h3 id="ES11-BigInt"><a href="#ES11-BigInt" class="headerlink" title="ES11-BigInt"></a><strong>ES11-BigInt</strong></h3><ul>
<li>在早期的JavaScript中，我们不能正确的表示过大的数字：<ul>
<li>大于MAX_SAFE_INTEGER的数值，表示的可能是不正确的。</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688441048079-0aa536d3-06df-4187-889c-0bc9fd92420f.png#averageHue=%232e323b&clientId=ua1407788-59cb-4&from=paste&height=129&id=u0200d947&originHeight=291&originWidth=888&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=137266&status=done&style=none&taskId=u01cad583-a1aa-43b2-8b46-4a39ea56ba3&title=&width=392.35888671875" alt="image.png"></p>
<ul>
<li>那么ES11中，引入了新的数据类型BigInt，用于表示大的整数：<ul>
<li>BitInt的表示方法是在数值的后面加上n</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>)</span><br><span class="line"><span class="keyword">const</span> num1 = <span class="number">9007199254740992n</span></span><br><span class="line"><span class="keyword">const</span> num2 = <span class="number">9007199254740993n</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num1, num2)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688441089827-c22b01f2-6720-4425-b0e7-9d5b4b49b51b.png#averageHue=%23fdfcfa&clientId=ua1407788-59cb-4&from=paste&height=55&id=ud4f47436&originHeight=70&originWidth=365&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=3840&status=done&style=none&taskId=u15c2b68d-de19-4568-9952-f314dab2812&title=&width=289.1088999716542" alt="image.png"></p>
<h3 id="ES11-Optional-Chaining"><a href="#ES11-Optional-Chaining" class="headerlink" title="ES11-Optional Chaining"></a><strong>ES11-Optional Chaining</strong></h3><p>可选链也是ES11中新增一个特性，主要作用是让我们的代码在进行null和undefined判断时更加清晰和简洁：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688441907164-552dde19-a3bf-4964-9abc-b8315b9a87b7.png#averageHue=%23292d35&clientId=ua1407788-59cb-4&from=paste&height=277&id=u962385ad&originHeight=722&originWidth=1042&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=167617&status=done&style=none&taskId=uc50340a6-38f4-42ca-ba7f-f40635ed4b8&title=&width=400.41082763671875" alt="image.png"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">``</span><span class="keyword">const</span> obj = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">      <span class="attr">friend</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;kobe&quot;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">obj?.<span class="property">friend</span>?.<span class="property">running</span>?.<span class="title function_">running</span>()<span class="comment">//结果为空</span></span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="keyword">const</span> obj = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">      <span class="attr">friend</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;kobe&quot;</span>,</span><br><span class="line">        <span class="attr">running</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;running~&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">obj?.<span class="property">friend</span>?.<span class="property">running</span>?.<span class="title function_">running</span>()<span class="comment">//running~</span></span><br></pre></td></tr></table></figure>

<h3 id="ES11-GlobalThis、"><a href="#ES11-GlobalThis、" class="headerlink" title="ES11-GlobalThis、"></a><strong>ES11-GlobalThis、</strong></h3><ul>
<li>在之前我们希望获取JavaScript环境的全局对象，不同的环境获取的方式是不一样的<ul>
<li>比如在浏览器中可以通过this、window来获取；</li>
<li>比如在Node中我们需要通过global来获取；</li>
</ul>
</li>
<li>在ES11中对获取全局对象进行了统一的规范：globalThis</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688442072452-8388d945-7ec8-4c3b-8718-89710baa05ef.png#averageHue=%23313740&clientId=ua1407788-59cb-4&from=paste&height=88&id=u4685f583&originHeight=159&originWidth=684&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=76918&status=done&style=none&taskId=u01e94462-b021-4f08-98be-ceede0ca008&title=&width=376.78216552734375" alt="image.png"></p>
<h3 id="ES11-for-in标准化"><a href="#ES11-for-in标准化" class="headerlink" title="ES11-for..in标准化"></a><strong>ES11-for..in标准化</strong></h3><ul>
<li>在ES11之前，虽然很多浏览器支持for…in来遍历对象类型，但是并没有被ECMA标准化。</li>
<li>在ES11中，对其进行了标准化，for…in是用于遍历对象的key的：</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688442118289-2892c6c9-1818-4114-b252-85407df64f4b.png#averageHue=%23292d35&clientId=ua1407788-59cb-4&from=paste&height=188&id=u8f2de8a7&originHeight=453&originWidth=624&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=80429&status=done&style=none&taskId=u167a45da-b92b-4e65-9836-8d437a1a6bf&title=&width=259.2054138183594" alt="image.png"></li>
</ul>
]]></content>
      <categories>
        <category>JS高级</category>
      </categories>
      <tags>
        <tag>JS高级</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基础-BOM操作</title>
    <url>/2024/08/25/JS%E5%9F%BA%E7%A1%80-BOM%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="认识BOM"><a href="#认识BOM" class="headerlink" title="认识BOM"></a>认识BOM</h3><ul>
<li>BOM：浏览器对象模型<ul>
<li>简称 BOM，由浏览器提供的用于处理文档之外的所有内容的其他对象；</li>
<li>比如navigator、location、history等对象；</li>
</ul>
</li>
<li>JavaScript有一个非常重要的运行环境就是浏览器<ul>
<li>而且浏览器本身又作为一个应用程序需要对其本身进行操作；</li>
<li>所以通常浏览器会有对应的对象模型</li>
<li>我们可以将BOM看成是连接JavaScript脚本与浏览器窗口的桥梁</li>
</ul>
</li>
<li>BOM主要包括一下的对象模型<ul>
<li>window：包括全局属性、方法，控制浏览器窗口相关的属性、方法；</li>
<li>location：浏览器连接到的对象的位置（URL）；</li>
<li>history：操作浏览器的历史；</li>
<li>navigator：用户代理（浏览器）的状态和标识（很少用到）；</li>
<li>screen：屏幕窗口信息（很少用到）；</li>
</ul>
</li>
</ul>
<h3 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h3><ul>
<li>window对象在浏览器中可以从两个视角来看待：<ul>
<li>视角一：全局对象。<ul>
<li>我们知道ECMAScript其实是有一个全局对象的，这个全局对象在Node中是global；</li>
<li>在浏览器中就是window对象；</li>
</ul>
</li>
<li>视角二：浏览器窗口对象。<ul>
<li>作为浏览器窗口时，提供了对浏览器操作的相关的API；</li>
</ul>
</li>
</ul>
</li>
<li>当然，这两个视角存在大量重叠的地方，所以不需要刻意去区分它们：<ul>
<li>事实上对于浏览器和Node中全局对象名称不一样的情况，目前已经指定了对应的标准，称之为globalThis，并且大多数现代 浏览器都支持它；</li>
<li>放在window对象上的所有属性都可以被访问；</li>
<li>使用var定义的变量会被添加到window对象中；</li>
<li>window默认给我们提供了全局的函数和类：<strong>setTimeout、Math、Date、Object</strong>等；</li>
</ul>
</li>
</ul>
<h3 id="window对象的作用"><a href="#window对象的作用" class="headerlink" title="window对象的作用"></a>window对象的作用</h3><ul>
<li>事实上window对象上肩负的重担是非常大的：<ul>
<li>第一：包含大量的属性，localStorage、console、location、history、screenX、scrollX等等（大概60+个属性）；</li>
<li>第二：包含大量的方法，alert、close、scrollTo、open等等（大概40+个方法）；</li>
<li>第三：包含大量的事件，focus、blur、load、hashchange等等（大概30+个事件）；</li>
<li>第四：包含从EventTarget继承过来的方法，addEventListener、removeEventListener、dispatchEvent方法；</li>
</ul>
</li>
<li>那么这些大量的属性、方法、事件在哪里查看呢？<ul>
<li>MDN文档：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window">https://developer.mozilla.org/zh-CN/docs/Web/API/Window</a></li>
</ul>
</li>
<li>查看MDN文档时，我们会发现有很多不同的符号，这里我解释一下是什么意思：<ul>
<li>删除符号：表示这个API已经废弃，不推荐继续使用了；</li>
<li>点踩符号：表示这个API不属于W3C规范，某些浏览器有实现（所以兼容性的问题）；</li>
<li>实验符号：该API是实验性特性，以后可能会修改，并且存在兼容性问题；</li>
</ul>
</li>
</ul>
<h3 id="window常见的属性"><a href="#window常见的属性" class="headerlink" title="window常见的属性"></a>window常见的属性</h3><p>我们来看一下常见的window属性：  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683698308924-0f87c097-c6dc-4f37-8372-668f3f946c9a.png#averageHue=%23455545&clientId=u875de969-956a-4&from=paste&height=277&id=u31e98e9d&originHeight=486&originWidth=1128&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=127210&status=done&style=none&taskId=u1efbf641-0e43-4c64-9b12-42814788436&title=&width=642.4058837890625" alt="image.png"></p>
<h3 id="window常见的方法"><a href="#window常见的方法" class="headerlink" title="window常见的方法"></a>window常见的方法</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683698337801-031af395-9f8c-44d4-b106-818813f9b9f7.png#averageHue=%233b5256&clientId=u875de969-956a-4&from=paste&height=341&id=u74143ae9&originHeight=589&originWidth=983&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=122942&status=done&style=none&taskId=ue9954e88-1f72-4ab8-9885-828179b1815&title=&width=568.4108276367188" alt="image.png"></p>
<h3 id="window常见的事件"><a href="#window常见的事件" class="headerlink" title="window常见的事件"></a>window常见的事件</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683698362891-fcd830f7-3f56-432c-a7c9-6369e751a411.png#averageHue=%232a2f38&clientId=u875de969-956a-4&from=paste&height=402&id=ud071f59b&originHeight=654&originWidth=692&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=120612&status=done&style=none&taskId=u63b999f3-bfe3-40b4-8049-847f113eb7d&title=&width=425.1187744140625" alt="image.png"></p>
<h3 id="location对象常见的属性"><a href="#location对象常见的属性" class="headerlink" title="location对象常见的属性"></a>location对象常见的属性</h3><ul>
<li>location对象用于表示window上当前链接到的URL信息。</li>
<li>常见的属性有哪些呢？<ul>
<li>href: 当前window对应的超链接URL, 整个URL；</li>
<li>protocol: 当前的协议；</li>
<li>host: 主机地址；</li>
<li>hostname: 主机地址(不带端口)；</li>
<li>port: 端口；</li>
<li>pathname: 路径；</li>
<li>search: 查询字符串；</li>
<li>hash: 哈希值；</li>
<li>username：URL中的username（很多浏览器已经禁用）；</li>
<li>password：URL中的password（很多浏览器已经禁用）；</li>
</ul>
</li>
</ul>
<h3 id="Location对象常见的方法"><a href="#Location对象常见的方法" class="headerlink" title="Location对象常见的方法"></a>Location对象常见的方法</h3><ul>
<li>我们会发现location其实是URL的一个抽象实现：</li>
<li>location有如下常用的方法：<ul>
<li>assign：赋值一个新的URL，并且跳转到该URL中；</li>
<li>replace：打开一个新的URL，并且跳转到该URL中（不同的是不会在浏览记录中留下之前的记录）；</li>
<li>reload：重新加载页面，可以传入一个Boolean类型；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683699239400-08b3c7f3-5156-4952-9bdd-e02c8c87dac1.png#averageHue=%233e607b&clientId=u74f89599-e3af-4&from=paste&height=150&id=u05b4d090&originHeight=222&originWidth=970&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=68242&status=done&style=none&taskId=u5406781a-aaaa-4681-a130-880ee6b0cc5&title=&width=656.4108276367188" alt="image.png"></li>
</ul>
</li>
</ul>
<h3 id="URLSearchParams"><a href="#URLSearchParams" class="headerlink" title="URLSearchParams"></a>URLSearchParams</h3><ul>
<li><strong>URLSearchParams 定义了一些实用的方法来处理 URL 的查询字符串。</strong><ul>
<li>可以将一个字符串转化成URLSearchParams类型；<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683699469019-47c8170f-d323-4015-8912-5e8394b40f00.png#averageHue=%232a303a&clientId=u74f89599-e3af-4&from=paste&height=96&id=u780b72ee&originHeight=121&originWidth=1076&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=86017&status=done&style=none&taskId=uae92d155-b45d-451b-aec3-7031cf097ac&title=&width=852.2771955328764" alt="image.png"></li>
<li>也可以将一个URLSearchParams类型转成字符串；</li>
</ul>
</li>
<li><strong>URLSearchParams常见的方法有如下</strong><ul>
<li>get：获取搜索参数的值；</li>
<li>set：设置一个搜索参数和值；</li>
<li>append：追加一个搜索参数和值；</li>
<li>has：判断是否有某个搜索参数；</li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams">https://developer.mozilla.org/zh-CN/docs/Web/API/URLSearchParams</a></li>
</ul>
</li>
<li>中文会使用encodeURIComponent和decodeURIComponent进行编码和解码</li>
</ul>
<h3 id="history对象常见属性和方法"><a href="#history对象常见属性和方法" class="headerlink" title="history对象常见属性和方法"></a>history对象常见属性和方法</h3><ul>
<li>history对象允许我们访问浏览器曾经的会话历史记录。</li>
<li>有两个属性：<ul>
<li>length：会话中的记录条数；</li>
<li>state：当前保留的状态值；</li>
</ul>
</li>
<li>有五个方法：<ul>
<li>back()：返回上一页，等价于history.go(-1)；</li>
<li>forward()：前进下一页，等价于history.go(1)；</li>
<li>go()：加载历史中的某一页；</li>
<li>pushState()：打开一个指定的地址；</li>
<li>replaceState()：打开一个新的地址，并且使用replace；<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683699927133-8a255ac2-1a99-4da2-aa5c-3c32b7888000.png#averageHue=%232b3039&clientId=u74f89599-e3af-4&from=paste&height=308&id=u0e87d489&originHeight=537&originWidth=735&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=125641&status=done&style=none&taskId=u16419669-d9cd-41f1-95ae-e1f4265f9af&title=&width=422.17816162109375" alt="image.png"></li>
</ul>
</li>
<li>history和hash目前是vue、react等框架实现路由的底层原理，具体的实现方式后续讲解。</li>
</ul>
<h3 id="JSON基本语法"><a href="#JSON基本语法" class="headerlink" title="JSON基本语法"></a>JSON基本语法</h3><ul>
<li>JSON的顶层支持三种类型的值：<ul>
<li>简单值：数字（Number）、字符串（String，不支持单引号）、布尔类型（Boolean）、null类型；</li>
<li>对象值：由key、value组成，key是字符串类型，并且必须添加双引号，值可以是简单值、对象值、数组值；</li>
<li>数组值：数组的值可以是简单值、对象值、数组值；</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683700246781-19fdb2ab-aa60-4cfe-9bf9-5e818b812384.png#averageHue=%23333b3a&clientId=u74f89599-e3af-4&from=paste&height=188&id=ua06bf31f&originHeight=299&originWidth=776&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=38895&status=done&style=none&taskId=u55c4e55c-31c4-46ad-b57b-df79e98599f&title=&width=487.628662109375" alt="image.png"></li>
</ul>
<h3 id="JSON序列化"><a href="#JSON序列化" class="headerlink" title="JSON序列化"></a>JSON序列化</h3><ul>
<li>某些情况下我们希望将JavaScript中的复杂类型转化成JSON格式的字符串，这样方便对其进行处理：<ul>
<li>比如我们希望将一个对象保存到localStorage中；</li>
<li>但是如果我们直接存放一个对象，这个对象会被转化成 [object Object] 格式的字符串，并不是我们想要的结果；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683700289112-692577fe-5498-4cc2-9de9-714688770025.png#averageHue=%236c895b&clientId=u74f89599-e3af-4&from=paste&height=249&id=u7a3bf8dd&originHeight=445&originWidth=1172&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=56438&status=done&style=none&taskId=u881e0c69-fafd-4722-abbf-137bb1abe14&title=&width=656.4083862304688" alt="image.png"></li>
</ul>
</li>
<li>在ES5中引用了JSON全局对象，该对象有两个常用的方法：<ul>
<li>stringify方法：将JavaScript类型转成对应的JSON字符串；</li>
<li>parse方法：解析JSON字符串，转回对应的JavaScript类型；</li>
</ul>
</li>
<li>那么上面的代码我们可以通过如下的方法来使用：  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683700356057-ca68886b-0d1a-4bd3-9ab8-254434102499.png#averageHue=%233c6d75&clientId=u74f89599-e3af-4&from=paste&height=189&id=u12d03f2d&originHeight=310&originWidth=996&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=90961&status=done&style=none&taskId=u066e49b0-a999-4390-8175-da4d28d41a8&title=&width=606.4108276367188" alt="image.png"></li>
</ul>
<h3 id="Stringify的参数replace"><a href="#Stringify的参数replace" class="headerlink" title="Stringify的参数replace"></a>Stringify的参数replace</h3><ul>
<li>JSON.stringify() 方法将一个 JavaScript 对象或值转换为 JSON 字符串：<ul>
<li>如果指定了一个 replacer 函数，则可以选择性地替换值；</li>
<li>如果指定的 replacer 是数组，则可选择性地仅包含数组指定的属性；</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683700597577-4423fe48-3682-45cf-9505-1a2b716f6d3a.png#averageHue=%232a2e36&clientId=u74f89599-e3af-4&from=paste&height=407&id=u830fd943&originHeight=540&originWidth=1098&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=129837&status=done&style=none&taskId=u03346c3a-7ce3-48a7-be43-356fa0d29d2&title=&width=828.4108276367188" alt="image.png"></p>
<h3 id="Stringify的参数space"><a href="#Stringify的参数space" class="headerlink" title="Stringify的参数space"></a>Stringify的参数space</h3><p>如果对象本身包含toJSON方法，那么会直接使用toJSON方法的结果：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683700635265-eee65d26-4286-4afd-a936-040c05b30b24.png#averageHue=%233d6373&clientId=u74f89599-e3af-4&from=paste&height=324&id=u4e2fb733&originHeight=487&originWidth=741&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=84029&status=done&style=none&taskId=ub768be3a-8a8f-4012-8f34-008498c50d3&title=&width=492.9306640625" alt="image.png"></p>
<h3 id="parse方法"><a href="#parse方法" class="headerlink" title="parse方法"></a>parse方法</h3><ul>
<li>JSON.parse() 方法用来解析JSON字符串，构造由字符串描述的JavaScript值或对象。<ul>
<li>提供可选的 <strong>reviver</strong> 函数用以在返回之前对所得到的对象执行变换(操作)。</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">   <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> objJSONString = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(objJSONString)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> newObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(objJSONString, <span class="keyword">function</span>(<span class="params">key, value</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> (key === <span class="string">&quot;age&quot;</span>) &#123;</span><br><span class="line">     <span class="keyword">return</span> value + <span class="number">2</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> value</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(newObj)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683701028412-097d17a2-3b90-4e45-b6fe-e12eccac7723.png#averageHue=%23fcfbfa&clientId=u74f89599-e3af-4&from=paste&height=93&id=ud55556fe&originHeight=117&originWidth=283&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=6168&status=done&style=none&taskId=u665c78b2-0551-4ca3-97e6-cd1d76d8f92&title=&width=224.15840737528254" alt="image.png"></p>
<ul>
<li>JSON的方法可以帮我们实现对象的深拷贝：<ul>
<li>但是目前我们还没有了解什么是对象的拷贝、浅拷贝、深拷贝的概念；</li>
<li>我们会在JavaScript高级中学习；</li>
</ul>
</li>
</ul>
<h3 id="认识Storage"><a href="#认识Storage" class="headerlink" title="认识Storage"></a>认识Storage</h3><ul>
<li>WebStorage主要提供了一种机制，可以让浏览器提供一种比cookie更直观的key、value存储方式：<ul>
<li>localStorage：本地存储，提供的是一种永久性的存储方法，在关闭掉网页重新打开时，存储的内容依然保留；</li>
<li>sessionStorage：会话存储，提供的是本次会话的存储，在关闭掉会话时，存储的内容会被清除；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683701086552-7b16c293-caf7-41c1-a53f-2ef2011474e0.png#averageHue=%23a9bd9d&clientId=u74f89599-e3af-4&from=paste&height=382&id=u11153d7c&originHeight=482&originWidth=1118&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=155089&status=done&style=none&taskId=ud82207f4-ee7c-44ff-921e-1ae8a3bd916&title=&width=885.5445210090667" alt="image.png"></li>
</ul>
</li>
<li>我们会发现localStorage和sessionStorage看起来非常的相似。</li>
<li>那么它们有什么区别呢？<ul>
<li>验证一：关闭网页后重新打开，localStorage会保留，而sessionStorage会被删除</li>
<li>验证二：在页面内实现跳转，localStorage会保留，sessionStorage也会保留；</li>
<li>验证三：在页面外实现跳转（打开新的网页），localStorage会保留，sessionStorage不会被保留；</li>
</ul>
</li>
</ul>
<h3 id="Storage常见的方法和属性"><a href="#Storage常见的方法和属性" class="headerlink" title="Storage常见的方法和属性"></a>Storage常见的方法和属性</h3><ul>
<li>Storage有如下的属性和方法：</li>
<li>属性：<ul>
<li>Storage.length：只读属性<ul>
<li>返回一个整数，表示存储在Storage对象中的数据项数量；</li>
</ul>
</li>
</ul>
</li>
<li>方法：<ul>
<li>Storage.key()：该方法接受一个数值n作为参数，返回存储中的第n个key名称；</li>
<li>Storage.getItem()：该方法接受一个key作为参数，并且返回key对应的value；</li>
<li>Storage.setItem()：该方法接受一个key和value，并且将会把key和value添加到存储中。<ul>
<li>如果key存储，则更新其对应的值；</li>
</ul>
</li>
<li>Storage.removeItem()：该方法接受一个key作为参数，并把该key从存储中删除；</li>
<li>Storage.clear()：该方法的作用是清空存储中的所有key</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JS基础</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基础-函数</title>
    <url>/2024/08/12/JS%E5%9F%BA%E7%A1%80-%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="arguments参数"><a href="#arguments参数" class="headerlink" title="arguments参数"></a>arguments参数</h2><ul>
<li>事实上在函数有一个特别的对象：arguments对象<ul>
<li>默认情况下，arguments对象是所有（非箭头）函数中都可用的局部变量；</li>
<li>该对象中存放着所有的调用者传入的参数，从0位置开始，依次存放；</li>
<li>arguments变量的类型是一个object类型（ array-like ），不是一个数组，但是和数组的用法看起来很相似；</li>
<li>如果调用者传入的参数多余函数接收的参数，可以通过arguments去获取所有的参数；</li>
</ul>
</li>
</ul>
<h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><ul>
<li>既然函数可以作为一个值相互赋值，那么也可以传递给另外一个函数。<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683450196910-6ad8174c-356c-4aad-86b9-31356e6f54e6.png#averageHue=%235b7e53&clientId=u61ebfe73-e80d-4&from=paste&height=152&id=u0cd2d1eb&originHeight=233&originWidth=861&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=37703&status=done&style=none&taskId=ub425b072-8f7f-4b17-8b43-20d7c26d65a&title=&width=559.9727172851562" alt="image.png"></li>
<li>foo这种函数我们也可以称之为高阶函数；</li>
<li>高阶函数必须至少满足两个条件之一：<ul>
<li>接受一个或多个函数作为输入；</li>
<li>输出一个函数；</li>
</ul>
</li>
<li>匿名函数的理解：<ul>
<li>如果在传入一个函数时，我们没有指定这个函数的名词或者通过函数表达式指定函数对应的变量，那么这个函数称之为匿名 函数。</li>
</ul>
</li>
</ul>
<p><strong>1.函数回调的概念理解</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.函数回调的概念理解</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">fn</span>) &#123;</span><br><span class="line">  <span class="comment">// 通过fn去调用bar函数的过程, 称之为函数的回调</span></span><br><span class="line">  <span class="title function_">fn</span>()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bar函数被执行了~&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">foo</span>(bar)</span><br></pre></td></tr></table></figure>

<p><strong>2.函数回调的案例</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.函数回调的案例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">url, callback</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;根据URL向服务器发送网络请求&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;需要花费比较长的时间拿到对应的结果&quot;</span>)</span><br><span class="line">  <span class="keyword">var</span> list = [<span class="string">&quot;javascript&quot;</span>, <span class="string">&quot;javascript学习&quot;</span>, <span class="string">&quot;JavaScript高级编程&quot;</span>]</span><br><span class="line">  <span class="title function_">callback</span>(list)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handleResult</span>(<span class="params">res</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;在handleResult中拿到结果:&quot;</span>, res)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">request</span>(<span class="string">&quot;url&quot;</span>, handleResult)</span><br></pre></td></tr></table></figure>

<p>3.<strong>函数回调的案例重构</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.函数回调的案例重构</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">request</span>(<span class="params">url, callback</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;根据URL向服务器发送网络请求&quot;</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;需要花费比较长的时间拿到对应的结果&quot;</span>)</span><br><span class="line">      <span class="keyword">var</span> list = [<span class="string">&quot;javascript&quot;</span>, <span class="string">&quot;javascript学习&quot;</span>, <span class="string">&quot;JavaScript高级编程&quot;</span>]</span><br><span class="line">      <span class="title function_">callback</span>(list)</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    <span class="comment">// 传入的函数是没有名字, 匿名函数</span></span><br><span class="line">    <span class="title function_">request</span>(<span class="string">&quot;url&quot;</span>, <span class="keyword">function</span>(<span class="params">res</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;在handleResult中拿到结果:&quot;</span>, res)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683450326844-2ebae428-9860-42fa-bb4a-31a2aadc339b.png#averageHue=%23fafaf9&clientId=u61ebfe73-e80d-4&from=paste&height=148&id=u3c59ee09&originHeight=187&originWidth=782&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=13134&status=done&style=none&taskId=ue377a124-a088-4cda-ba63-68b6452fb6c&title=&width=619.405917199544" alt="image.png"></p>
<h2 id="对象的常见操作"><a href="#对象的常见操作" class="headerlink" title="对象的常见操作"></a>对象的常见操作</h2><ul>
<li>访问对象的属性；<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683450677201-bd15f783-2c69-4edd-940f-8949a2743202.png#averageHue=%23827f60&clientId=u61ebfe73-e80d-4&from=paste&height=95&id=u8de80ed5&originHeight=120&originWidth=858&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=29582&status=done&style=none&taskId=u6a9c8f56-ca63-4646-a7ad-ac629c810e2&title=&width=679.6039347278884" alt="image.png"></li>
<li>修改对象的属性；<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683450685084-9063e58b-d69e-409f-aebc-a415842365f0.png#averageHue=%23787b55&clientId=u61ebfe73-e80d-4&from=paste&height=102&id=u5f73360d&originHeight=129&originWidth=1079&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=27541&status=done&style=none&taskId=u30bb1bfd-a91d-4c73-b6a5-66794e2c70a&title=&width=854.65343306689" alt="image.png"></li>
<li>添加对象的属性；<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683450691666-7469218d-4205-427a-ac87-93e954f58e8d.png#averageHue=%23647a50&clientId=u61ebfe73-e80d-4&from=paste&height=96&id=u7ed5d467&originHeight=121&originWidth=942&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=31602&status=done&style=none&taskId=uaa13d064-da71-4550-a917-f10b469b87c&title=&width=746.1385856802691" alt="image.png"></li>
<li>删除对象的属性：delete操作符  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683450697139-6c006d21-4645-492c-86f0-ddf83f70bb21.png#averageHue=%235a534b&clientId=u61ebfe73-e80d-4&from=paste&height=67&id=u7adfbba5&originHeight=84&originWidth=1021&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=18754&status=done&style=none&taskId=ud706afed-eb8a-498f-b153-d569a26d19c&title=&width=808.7128407426271" alt="image.png"></li>
</ul>
<h2 id="方括号和引用的使用"><a href="#方括号和引用的使用" class="headerlink" title="方括号和引用的使用"></a>方括号和引用的使用</h2><ul>
<li>为什么需要使用方括号呢？<ul>
<li>对于多次属性来说，JavaScript是无法理解的。<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683451648379-9da7cc87-4ef7-4011-acd1-5a052f14f635.png#averageHue=%236e8a5a&clientId=u61ebfe73-e80d-4&from=paste&height=73&id=uf3633f24&originHeight=92&originWidth=827&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=25191&status=done&style=none&taskId=u96e94cae-170c-4e5b-a853-5f7d140a385&title=&width=655.0494802097479" alt="image.png"></li>
</ul>
</li>
<li>这是因为<strong>点符号</strong>要求 key 是<strong>有效的变量标识符</strong><ul>
<li>不包含空格，不以数字开头，也不包含特殊字符（允许使用 $ 和 _）；</li>
</ul>
</li>
<li><strong>这个时候我们可以使用方括号：</strong><ul>
<li>方括号运行我们在定义或者操作属性时更加的灵活；</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683451685786-892ec644-467d-4a7c-92f1-9059baae41e1.png#averageHue=%23648d5e&clientId=u61ebfe73-e80d-4&from=paste&height=198&id=u9b56b4ab&originHeight=250&originWidth=782&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=51606&status=done&style=none&taskId=u63ca0ae9-591e-41df-a676-a726f8beb0a&title=&width=619.405917199544" alt="image.png"></li>
</ul>
</li>
</ul>
<h2 id="对象的遍历"><a href="#对象的遍历" class="headerlink" title="对象的遍历"></a>对象的遍历</h2><ul>
<li><strong>对象的遍历（迭代）：表示获取对象中所有的属性和方法。</strong><ul>
<li>Object.keys() 方法会返回一个由一个给定对象的自身可枚举属性组成的数组；</li>
</ul>
</li>
<li>**遍历方式一：普通for循环 **</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> info = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="number">1.88</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// console.log(Object.keys(info))</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 对对象进行遍历</span></span><br><span class="line">  <span class="comment">// 1.普通for循环</span></span><br><span class="line">  <span class="keyword">var</span> infoKeys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(info)</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; infoKeys.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> key = infoKeys[i]</span><br><span class="line">    <span class="keyword">var</span> value = info[key]</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`key: <span class="subst">$&#123;key&#125;</span>, value: <span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683452092308-887ea6be-6113-47f6-bf9c-37aaa1ccb7bd.png#averageHue=%23fdfcfb&clientId=u61ebfe73-e80d-4&from=paste&height=156&id=u0380d03d&originHeight=197&originWidth=532&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=12357&status=done&style=none&taskId=ufb5fdf6f-73aa-4ed3-905a-c5c2e767a95&title=&width=421.386122698411" alt="image.png"></p>
<ul>
<li>**遍历方式二：for in 遍历方法  **</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> info) &#123;</span><br><span class="line">     <span class="keyword">var</span> value = info[key]</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`key: <span class="subst">$&#123;key&#125;</span>, value: <span class="subst">$&#123;value&#125;</span>`</span>)</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="栈内存和堆内存"><a href="#栈内存和堆内存" class="headerlink" title="栈内存和堆内存"></a>栈内存和堆内存</h2><ul>
<li>我们知道程序是需要加载到内存中来执行的，我们可以将内存划分为两个区域：栈内存和堆内存。<ul>
<li>原始类型占据的空间是在栈内存中分配的；</li>
<li>对象类型占据的空间是在堆内存中分配的；</li>
</ul>
</li>
</ul>
<h2 id="值类型和引用类型"><a href="#值类型和引用类型" class="headerlink" title="值类型和引用类型"></a>值类型和引用类型</h2><ul>
<li><strong>原始类型的保存方式：在变量中保存的是值本身</strong><ul>
<li>所以原始类型也被称之为值类型；</li>
</ul>
</li>
<li><strong>对象类型的保存方式：在变量中保存的是对象的“引用”</strong><ul>
<li>所以对象类型也被称之为引用类型；</li>
</ul>
</li>
</ul>
<h2 id="思考下面的现象"><a href="#思考下面的现象" class="headerlink" title="思考下面的现象"></a>思考下面的现象</h2><p>现象一：两个对象的比较<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683452311298-8ff6b8b4-0065-444b-a42e-b670b77678f5.png#averageHue=%23536859&clientId=u61ebfe73-e80d-4&from=paste&height=152&id=ub4f378a5&originHeight=256&originWidth=845&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=40123&status=done&style=none&taskId=u8a0879f6-2414-49a4-b81b-2d865a600d7&title=&width=502.306884765625" alt="image.png"><br>现象二：引用的赋值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// // 2.现象二: 引用的赋值</span></span><br><span class="line">   <span class="keyword">var</span> info = &#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">     <span class="attr">friend</span>: &#123;</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&quot;kobe&quot;</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> friend = info.<span class="property">friend</span></span><br><span class="line">   friend.<span class="property">name</span> = <span class="string">&quot;james&quot;</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">friend</span>.<span class="property">name</span>) <span class="comment">// james</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683454026851-e4583f86-9c25-4700-a4f9-eeb0f3474871.png#averageHue=%23272b33&clientId=u61ebfe73-e80d-4&from=paste&height=361&id=ub0cbe92e&originHeight=795&originWidth=1465&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=97640&status=done&style=none&taskId=u9e333ab2-cd1f-432d-bdb0-17dd42b2fd7&title=&width=664.4108276367188" alt="函数传递-引用传递-创建新对象.png"><br>3.现象三: 值传递</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a</span>) &#123;</span><br><span class="line">   a = <span class="number">200</span></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> num = <span class="number">100</span></span><br><span class="line"> <span class="title function_">foo</span>(num)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(num) <span class="comment">// 100</span></span><br></pre></td></tr></table></figure>

<p>4.现象四: 引用传递,<br><strong>但是在函数中创建了一个新对象, 没有对传入对象进行修改</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a</span>) &#123;</span><br><span class="line">     a = &#123;</span><br><span class="line">       <span class="attr">name</span>: <span class="string">&quot;why&quot;</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> obj = &#123; </span><br><span class="line">     <span class="attr">name</span>: <span class="string">&quot;obj&quot;</span> </span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">foo</span>(obj)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)<span class="comment">//name:&quot;obj&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683454578586-56d04a9b-afbb-49e2-a130-f79c11929fb0.png#averageHue=%23272b33&clientId=u61ebfe73-e80d-4&from=paste&height=302&id=u3d1fd87f&originHeight=795&originWidth=1465&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=97640&status=done&style=none&taskId=ube307be4-cea0-41d5-8823-0e6fbea36a3&title=&width=556.4108276367188" alt="函数传递-引用传递-创建新对象.png"><br>5.现象五: 引用传递<br>** 但是对传入的对象进行修改**</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">a</span>) &#123;</span><br><span class="line">     a.<span class="property">name</span> = <span class="string">&quot;why&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> obj = &#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&quot;obj&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">foo</span>(obj)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)<span class="comment">//name=&quot;why&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683454507878-4d961a62-42a1-4b0e-9c60-95ac9345f476.png#averageHue=%23282c34&clientId=u61ebfe73-e80d-4&from=paste&height=363&id=YjASY&originHeight=801&originWidth=1375&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=84363&status=done&style=none&taskId=u75e15919-3bc4-4ed7-819d-9e15e6a00b3&title=&width=623.4108276367188" alt="函数传递-引用传递-修改引用属性.png"></p>
<h2 id="this指向什么？"><a href="#this指向什么？" class="headerlink" title="this指向什么？"></a>this指向什么？</h2><ul>
<li>目前掌握两个this的判断方法：<ul>
<li>在全局环境下面，this指向window；</li>
<li>通过对象调用，this指向调用的对象；</li>
</ul>
</li>
</ul>
<p><strong>情况一: 如果普通的函数被默认调用, 那么this指向的就是window</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">// 情况一: 如果普通的函数被默认调用, 那么this指向的就是window   </span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="title function_">foo</span>(<span class="string">&quot;abc&quot;</span>, <span class="number">123</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">sayHello</span>(<span class="params">name</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="title function_">sayHello</span>()</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683465766298-83be4b3a-dc08-44e9-994f-3a922e8b6c69.png#averageHue=%23fdfdfc&clientId=uefca109d-f9bd-4&from=paste&height=72&id=u5166eb4a&originHeight=91&originWidth=707&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=3473&status=done&style=none&taskId=u4bd88c20-8aea-4382-9a45-ea3a3cce8fc&title=&width=559.9999788492041" alt="image.png"><br><strong>情况二: 如果函数它是被某一个对象来引用并且调用它, 那么this会指向这个对象(调用的那个调用)</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">  <span class="attr">running</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span> === obj)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">running</span>()</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683465827699-3694ad65-90b2-4a92-911b-0d6bb6ec85b1.png#averageHue=%23fefdfd&clientId=uefca109d-f9bd-4&from=paste&height=59&id=u250c7ccb&originHeight=75&originWidth=657&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=5059&status=done&style=none&taskId=u2fdf150c-4e2d-4b2b-ae18-9f4dac412fb&title=&width=520.3960199489775" alt="image.png"><br><strong>题目一:</strong><br><strong>谁调用就指向谁</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">  <span class="attr">running</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)   </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> fn = obj.<span class="property">running</span></span><br><span class="line"><span class="title function_">fn</span>() <span class="comment">// window</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683465946776-55750744-1032-4683-98df-76f9374c22ea.png#averageHue=%23fdfcfb&clientId=uefca109d-f9bd-4&from=paste&height=34&id=ua12228b1&originHeight=43&originWidth=893&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=5804&status=done&style=none&taskId=u1ce11fd8-7ed7-4650-8481-289d293ceea&title=&width=707.326705958047" alt="image.png"><br><strong>题目二:</strong><br><strong>谁调用就指向谁</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span> () &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>) <span class="comment">// obj对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">  <span class="attr">bar</span>: bar</span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="title function_">bar</span>()<span class="comment">// obj对象</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683465995960-cdd2b5c7-ca1a-49e5-9102-c394ff92b802.png#averageHue=%23fdfdfc&clientId=uefca109d-f9bd-4&from=paste&height=29&id=ue0afa475&originHeight=37&originWidth=435&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=2281&status=done&style=none&taskId=u13296eef-3b91-464e-9e81-1b35c509da0&title=&width=344.5544424319714" alt="image.png"></p>
<h2 id="JavaScript中的类（ES5）"><a href="#JavaScript中的类（ES5）" class="headerlink" title="JavaScript中的类（ES5）"></a>JavaScript中的类（ES5）</h2><ul>
<li>JavaScript中的构造函数是怎么样的？<ul>
<li>构造函数也是一个普通的函数，从表现形式来说，和千千万万个普通的函数没有任何区别；</li>
<li>那么如果这么一个普通的函数被使用new操作符来调用了，那么这个函数就称之为是一个构造函数；</li>
</ul>
</li>
<li>如果一个函数被使用new操作符调用了，那么它会执行如下操作：<ul>
<li><ol>
<li>在内存中创建一个新的对象（空对象）；</li>
</ol>
</li>
<li><ol start="2">
<li>这个对象内部的[[prototype]]属性会被赋值为该构造函数的prototype属性；</li>
</ol>
</li>
<li><ol start="3">
<li>构造函数内部的this，会指向创建出来的新对象；</li>
</ol>
</li>
<li><ol start="4">
<li>执行函数的内部代码（函数体代码）；</li>
</ol>
</li>
<li><ol start="5">
<li>如果构造函数没有返回非空对象，则返回创建出来的新对象；</li>
</ol>
</li>
</ul>
</li>
<li>工厂方法创建对象有一个比较大的问题：我们在打印对象时，对象的类型都是Object类型</li>
<li>我们来通过构造函数实现一下： <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683509377395-ed0c2747-9696-453f-8ba9-cb98eb91019f.png#averageHue=%23658058&clientId=uc10aa067-2a81-4&from=paste&height=318&id=u7f11920d&originHeight=402&originWidth=1027&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=75757&status=done&style=none&taskId=u6ac2d35a-c22f-432b-bcd8-2fe78cd4a1a&title=&width=813.4653158106543" alt="image.png"><ul>
<li>这个构造函数可以确保我们的对象是有Person的类型的（实际是constructor的属性）</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JS基础</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基础-DOM实战</title>
    <url>/2024/08/25/JS%E5%9F%BA%E7%A1%80-DOM%E5%AE%9E%E6%88%98/</url>
    <content><![CDATA[<h3 id="window定时器方法"><a href="#window定时器方法" class="headerlink" title="window定时器方法"></a>window定时器方法</h3><ul>
<li>有时我们并不想立即执行一个函数，而是等待特定一段时间之后再执行，我们称之为“计划调用”。</li>
<li>目前有两种方式可以实现：<ul>
<li>setTimeout 允许我们将函数推迟到一段时间间隔之后再执行。</li>
<li>setInterval 允许我们重复运行一个函数，从一段时间间隔之后开始运行，之后以该时间间隔连续重复运行该函数。</li>
</ul>
</li>
<li>并且通常情况下有提供对应的取消方法：<ul>
<li>clearTimeout：取消setTimeout的定时器；</li>
<li>clearInterval：取消setInterval的定时器；</li>
</ul>
</li>
<li>大多数运行环境都有内置的调度程序，并且提供了这些方法：<ul>
<li>目前来讲，所有浏览器以及 Node.js 都支持这两个方法；</li>
<li>所以我们后续学习Node的时候，也可以在Node中使用它们；</li>
</ul>
</li>
</ul>
<h3 id="setTimeout的使用"><a href="#setTimeout的使用" class="headerlink" title="setTimeout的使用"></a>setTimeout的使用</h3><ul>
<li>setTimeout的语法如下：<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683625865682-e8ed5f2d-b88b-4cf7-bd78-db5deaea35ec.png#averageHue=%23eae7e6&clientId=u475818d1-94b2-4&from=paste&height=25&id=u058ac9b5&originHeight=41&originWidth=900&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=23021&status=done&style=none&taskId=u92546d3d-3249-4ff5-8b56-0c25d56d87c&title=&width=540.8712158203125" alt="image.png"><ul>
<li>func|code：想要执行的函数或代码字符串。<ul>
<li>一般传入的都是函数，由于某些历史原因，支持传入代码字符串，但是不建议这样做；</li>
</ul>
</li>
<li>delay：执行前的延时，以毫秒为单位（1000 毫秒 &#x3D; 1 秒），默认值是 0；</li>
<li>arg1，arg2…：要传入被执行函数（或代码字符串）的参数列表；</li>
</ul>
</li>
<li>clearTimeout方法：<ul>
<li>setTimeout 在调用时会返回一个“定时器标识符”，我们可以使用它来取消执行。</li>
</ul>
</li>
</ul>
<h3 id="setInterval的使用"><a href="#setInterval的使用" class="headerlink" title="setInterval的使用"></a>setInterval的使用</h3><ul>
<li>setInterval 方法和 setTimeout 的语法相同：<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683625965412-c3fad426-2d39-4d95-9d63-5987cfa50aab.png#averageHue=%23ebe8e7&clientId=u475818d1-94b2-4&from=paste&height=29&id=u844af4c1&originHeight=47&originWidth=943&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=24819&status=done&style=none&taskId=u1a92d2dd-d6c3-43c2-a605-f242f0dd3ba&title=&width=588.4009399414062" alt="image.png"><ul>
<li>所有参数的意义也是相同的；</li>
<li>不过与 setTimeout 只执行一次不同，setInterval 是每间隔给定的时间周期性执行；</li>
</ul>
</li>
<li>clearInterval方法：<ul>
<li>setInterval也会返回一个“定时器标识符”，我们可以通过clearInterval来取消这个定时器。</li>
</ul>
</li>
<li>关于定时器还有一些宏任务相关的概念，我们会在JavaScript高级中讲解。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;out&quot;</span>&gt;</span>取消setTimeout定时器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;itv&quot;</span>&gt;</span>取消setInterval定时器<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.setTimeout</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">name, age, height</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo被调用----&quot;</span>, name, age, height)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> timeoutID = <span class="built_in">setTimeout</span>(foo, <span class="number">3000</span>, <span class="string">&quot;why&quot;</span>, <span class="number">18</span>, <span class="number">1.88</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> timeoutBtn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.out&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    timeoutBtn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 取消调度</span></span></span><br><span class="line"><span class="language-javascript">      <span class="built_in">clearTimeout</span>(timeoutID)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.setInterval</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// function bar() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(&quot;bar被调用++++&quot;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var itvID = setInterval(bar, 3000)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var itvBtn = document.querySelector(&quot;.itv&quot;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// itvBtn.onclick = function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   clearInterval(itvID)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="案例实战一-–-消息滚动切换"><a href="#案例实战一-–-消息滚动切换" class="headerlink" title="案例实战一 – 消息滚动切换"></a>案例实战一 – 消息滚动切换</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683679224206-9f4aafad-1254-4655-8863-94369b8cebad.png#averageHue=%23e7e5e4&clientId=uff947126-13e2-4&from=paste&height=74&id=u9fed21ec&originHeight=93&originWidth=376&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=8339&status=done&style=none&taskId=u5f3c6680-8a03-48fc-b3f4-ae3ca717661&title=&width=297.82177092970403" alt="image.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.tip-bar</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">4</span>);</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">16px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-right</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">13px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-right</span>: <span class="number">8px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tip-bar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;https://bfs.biyao.com/group1/M01/A2/67/rBACVGA_iOuAYaTxAAAPbted3yE165.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>183***138对这件商品感兴趣<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.从服务器拿到数据ajax/fetch请求</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">let</span> tipList = [</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">icon</span>: <span class="string">&#x27;https://bfs.biyao.com/group1/M01/A6/97/rBACYWBCHqyAFH5tAAANZXX5Eww646.png&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">title</span>: <span class="string">&#x27;coderwhy对这件商品感兴趣&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">icon</span>: <span class="string">&#x27;https://bfs.biyao.com/group1/M01/A2/67/rBACVGA_iOuAYaTxAAAPbted3yE165.png&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">title</span>: <span class="string">&#x27;123***814对这件商品感兴趣&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">icon</span>: <span class="string">&#x27;https://bfs.biyao.com/group1/M00/7F/4E/rBACYV16HseAP-PnAAAW9bbVoKE463.png&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">title</span>: <span class="string">&#x27;刘军对这件商品感兴趣&#x27;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    ]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.动态的切换数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.1.获取元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> tipBar = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.tip-bar&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> imgEl = tipBar.<span class="title function_">querySelector</span>(<span class="string">&quot;img&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> spanEl = tipBar.<span class="title function_">querySelector</span>(<span class="string">&quot;span&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.2.3s切换一次数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> currentIndex = <span class="number">0</span> <span class="comment">// 记录当前展示到的索引位置</span></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setInterval</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1&gt; 根据索引获取item</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> tipItem = tipList[currentIndex]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2&gt; 给DOM设置内容</span></span></span><br><span class="line"><span class="language-javascript">      imgEl.<span class="property">src</span> = tipItem.<span class="property">icon</span></span></span><br><span class="line"><span class="language-javascript">      spanEl.<span class="property">textContent</span> = tipItem.<span class="property">title</span></span></span><br><span class="line"><span class="language-javascript">      </span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 3&gt; 重新计算索引</span></span></span><br><span class="line"><span class="language-javascript">      currentIndex++</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (currentIndex === tipList.<span class="property">length</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        currentIndex = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">3000</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 随机</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// Math.floor(Math.random() * tipList.length)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="案例实战二-–-关闭头部消息"><a href="#案例实战二-–-关闭头部消息" class="headerlink" title="案例实战二 – 关闭头部消息"></a>案例实战二 – 关闭头部消息</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683680034189-c2e1fa42-a9e9-4cbd-a455-dc7900c0832e.png#averageHue=%2397756f&clientId=ucaeff1c3-ab16-4&from=paste&height=63&id=ucbf7a284&originHeight=80&originWidth=558&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=7170&status=done&style=none&taskId=ua5053eb6-6f55-4a48-9707-50671c0b25a&title=&width=441.9801813265288" alt="image.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.top-bar</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex-direction</span>: row;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">45px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">375px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: black;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* 关键 */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition</span>: all .<span class="number">5s</span> ease-out;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.delete</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex-direction</span>: row;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.delete</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.logo</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-left</span>: <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-right</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: white;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="attribute">white-space</span>: nowrap;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-overflow</span>: ellipsis;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">94px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">45px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#F63515</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;top-bar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;delete&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/delete.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span> <span class="attr">src</span>=<span class="string">&quot;./img/logo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>打开京东App,购物更轻松<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>立即打开<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.获取元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> topBar = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.top-bar&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> deleteEl = topBar.<span class="title function_">querySelector</span>(<span class="string">&quot;.delete&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.监听delete的点击</span></span></span><br><span class="line"><span class="language-javascript">    deleteEl.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      topBar.<span class="property">style</span>.<span class="property">height</span> = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// setTimeout(function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   topBar.remove()</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;, 300)</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.监听过渡动画结束</span></span></span><br><span class="line"><span class="language-javascript">    topBar.<span class="property">ontransitionend</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      topBar.<span class="title function_">remove</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="案例实战三-–-侧边栏展示"><a href="#案例实战三-–-侧边栏展示" class="headerlink" title="案例实战三 – 侧边栏展示"></a>案例实战三 – 侧边栏展示</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683683008829-1c909a22-f393-4ca5-a44a-02a3d05eb8d5.png#averageHue=%23f3f2f1&clientId=ucaeff1c3-ab16-4&from=paste&height=245&id=ua21a5af6&originHeight=309&originWidth=216&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=6365&status=done&style=none&taskId=u04d11155-5acd-4813-848a-ecc5ec370b9&title=&width=171.0891024489789" alt="image.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.tool-bar</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">30%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">right</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex-direction</span>: column;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: relative;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-bottom</span>: <span class="number">1px</span>;</span></span><br><span class="line"><span class="language-css">      </span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#7a6e6e</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">3px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.icon</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-image</span>: <span class="built_in">url</span>(<span class="string">./img/toolbars.png</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* .icon01 &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      background-position: -48px 0;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    .icon02 &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      background-position: -48px -50px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    .icon03 &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      background-position: -48px -100px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    &#125;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    .icon04 &#123;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      background-position: -48px -150px;</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    &#125; */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.name</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: absolute;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">z-index</span>: -<span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">right</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* left: -62px; */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">top</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      </span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">35px</span>;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">12px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#7a6e6e</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">3px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">transition</span>: width .<span class="number">2s</span> ease;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span><span class="selector-pseudo">:hover</span>,</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span><span class="selector-pseudo">:hover</span> <span class="selector-class">.name</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#cd1926</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tool-bar&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon icon01&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>购物车<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon icon02&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>收藏<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon icon03&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>限时活动<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;icon icon04&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;name&quot;</span>&gt;</span>大礼包<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.动态给icon设置backgroundPosition</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> iconEls = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.icon&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; iconEls.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> iconEl = iconEls[i]</span></span><br><span class="line"><span class="language-javascript">      iconEl.<span class="property">style</span>.<span class="property">backgroundPosition</span> = <span class="string">`-48px -<span class="subst">$&#123;<span class="number">50</span>*i&#125;</span>px`</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.实现鼠标进入动画</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 方案一: mouseenter(不能使用事件委托)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> itemEls = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.item&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> itemEl <span class="keyword">of</span> itemEls) &#123;</span></span><br><span class="line"><span class="language-javascript">      itemEl.<span class="property">onmouseenter</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> nameEl = <span class="variable language_">this</span>.<span class="property">children</span>[<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">        nameEl.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&quot;62px&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      itemEl.<span class="property">onmouseleave</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> nameEl = <span class="variable language_">this</span>.<span class="property">children</span>[<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">        nameEl.<span class="property">style</span>.<span class="property">width</span> = <span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 方案二: mouseover(使用事件委托)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var toolbarEl = document.querySelector(&quot;.tool-bar&quot;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// toolbarEl.onmouseover = function(event) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   handleMouseEvent(event, 62)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// toolbarEl.onmouseout = function(event) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   handleMouseEvent(event, 0)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// function handleMouseEvent(event, width) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   if (event.target !== toolbarEl) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     // var itemEl = event.target.classList.contains(&quot;item&quot;) ? event.target: event.target.parentElement</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     // 1.获取唯一的item</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     var itemEl = null</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     if (event.target.classList.contains(&quot;item&quot;)) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//       itemEl = event.target</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     &#125; else &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//       itemEl = event.target.parentElement</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     // 2.根据item获取nameElement</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     var nameEl = itemEl.children[1]</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     // 3.设置宽度</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     nameEl.style.width = `$&#123;width&#125;px`</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="案例实战四-–-登录框"><a href="#案例实战四-–-登录框" class="headerlink" title="案例实战四 – 登录框"></a>案例实战四 – 登录框</h3><h3 id="案例实战五-–-王者荣耀tabControl"><a href="#案例实战五-–-王者荣耀tabControl" class="headerlink" title="案例实战五 – 王者荣耀tabControl"></a>案例实战五 – 王者荣耀tabControl</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683685680597-8e9daef8-4f08-461e-bd72-3de3697f7fbe.png#averageHue=%23fcfcfb&clientId=ucaeff1c3-ab16-4&from=paste&height=122&id=u7f804a7c&originHeight=154&originWidth=1472&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=7988&status=done&style=none&taskId=ued19dce1-ac42-436d-b3a3-3ffef1a9976&title=&width=1165.940550022671" alt="image.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>王者荣耀-main-news<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/reset.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/common.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.main</span> <span class="selector-class">.section-content</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: space-between;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.main</span> <span class="selector-class">.section-content</span> <span class="selector-class">.left-content</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">872px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">1000px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.main</span> <span class="selector-class">.section-content</span> <span class="selector-class">.right-content</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">295px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">500px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main main_wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;section-content&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left-content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content-center&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;section_header&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header_left&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>内容中心<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header_right&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;more&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>更多<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;tab_control&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item active&quot;</span>&gt;</span>精品栏目<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>赛事精品<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;line&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>英雄攻略<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.获取元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> tabControl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.tab_control&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.监听鼠标进入(事件委托)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> activeLiEl = tabControl.<span class="title function_">querySelector</span>(<span class="string">&quot;.active&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    tabControl.<span class="property">onmouseover</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1.拿到事件发生的对象</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> itemEl = event.<span class="property">target</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (itemEl.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;item&quot;</span>)) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 其他的取消active</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.for循环所有的item</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.querySelector(&quot;.active&quot;)</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.记录当前的active对应的item</span></span></span><br><span class="line"><span class="language-javascript">        activeLiEl.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;active&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 当前进入的item变成active</span></span></span><br><span class="line"><span class="language-javascript">        itemEl.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;active&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 将最新的itemEl变成activeLiEl</span></span></span><br><span class="line"><span class="language-javascript">        activeLiEl = itemEl</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="案例实战六-–-王者轮播图"><a href="#案例实战六-–-王者轮播图" class="headerlink" title="案例实战六 – 王者轮播图"></a>案例实战六 – 王者轮播图</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683686501332-8ad7a631-b8eb-445a-a0de-391b4fb30186.png#averageHue=%238fd9f3&clientId=ucaeff1c3-ab16-4&from=paste&height=261&id=ue6d6d726&originHeight=447&originWidth=839&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=580804&status=done&style=none&taskId=u3326f1ce-5318-49db-965a-eb9d6134e74&title=&width=489.55438232421875" alt="image.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>王者荣耀-main-news<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/reset.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./css/common.css&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.main</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.news-section</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">342px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.news-section</span> <span class="selector-class">.banner</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">605px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#000</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">overflow</span>: hidden;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.news-section</span> <span class="selector-class">.banner</span> <span class="selector-class">.image-list</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">604px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* overflow: hidden; */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.news-section</span> <span class="selector-class">.banner</span> <span class="selector-class">.image-list</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex-shrink</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.news-section</span> <span class="selector-class">.banner</span> <span class="selector-class">.image-list</span> <span class="selector-class">.item</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.news-section</span> <span class="selector-class">.banner</span> <span class="selector-class">.image-list</span> <span class="selector-class">.item</span> <span class="selector-tag">a</span> <span class="selector-tag">img</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.news-section</span> <span class="selector-class">.banner</span> <span class="selector-class">.title-list</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">44px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">line-height</span>: <span class="number">44px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.news-section</span> <span class="selector-class">.banner</span> <span class="selector-class">.title-list</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.news-section</span> <span class="selector-class">.banner</span> <span class="selector-class">.title-list</span> <span class="selector-class">.item</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">14px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#b1b2be</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.news-section</span> <span class="selector-class">.banner</span> <span class="selector-class">.title-list</span> <span class="selector-class">.item</span><span class="selector-class">.active</span> <span class="selector-tag">a</span>,</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.news-section</span> <span class="selector-class">.banner</span> <span class="selector-class">.title-list</span> <span class="selector-class">.item</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#f3c258</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,.<span class="number">15</span>);</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.news-section</span> <span class="selector-class">.news</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">flex</span>: <span class="number">1</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: purple;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.news-section</span> <span class="selector-class">.download</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">236px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: skyblue;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.news-section</span> <span class="selector-class">.download</span> <span class="selector-tag">a</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">./img/main_sprite.png</span>) no-repeat;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.news-section</span> <span class="selector-class">.download</span> <span class="selector-tag">a</span><span class="selector-class">.download-btn</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">128px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">219px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.news-section</span> <span class="selector-class">.download</span> <span class="selector-tag">a</span><span class="selector-class">.guard-btn</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">106px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">350px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.news-section</span> <span class="selector-class">.download</span> <span class="selector-tag">a</span><span class="selector-class">.experience-btn</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">108px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-position</span>: <span class="number">0</span> -<span class="number">461px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main main_wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;news-section&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;banner&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;image-list&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/banner_01.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/banner_02.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/banner_03.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/banner_04.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/banner_05.jpeg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;title-list&quot;</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item active&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>桑启的旅途故事<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>启示之音抢先听<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>谁成为版本之子<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>观赛体验升级<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>季后赛开战<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;news&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;download&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;download-btn&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;guard-btn&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">&quot;experience-btn&quot;</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.获取元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> titleListEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.title-list&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> activeItemEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.active&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> imageListEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.image-list&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.底部titles的切换, 同时进行轮播</span></span></span><br><span class="line"><span class="language-javascript">    titleListEl.<span class="property">onmouseover</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1.1.确定发生鼠标进入的元素</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> itemEl = event.<span class="property">target</span>.<span class="property">parentElement</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (!itemEl.<span class="property">classList</span>.<span class="title function_">contains</span>(<span class="string">&quot;item&quot;</span>)) <span class="keyword">return</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1.2.移除之前的active</span></span></span><br><span class="line"><span class="language-javascript">      activeItemEl.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;active&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1.3.将active添加到鼠标进入的元素</span></span></span><br><span class="line"><span class="language-javascript">      itemEl.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;active&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1.4.让activeItemEl指向最新的元素</span></span></span><br><span class="line"><span class="language-javascript">      activeItemEl = itemEl</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1.5.移动对应的imageListEl</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1.5.1. 获取itemEl所在的索引</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// for (var i = 0; i &lt; titleListEl.children.length; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   if (titleListEl.children[i] === itemEl) break</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> index = <span class="title class_">Array</span>.<span class="title function_">from</span>(titleListEl.<span class="property">children</span>).<span class="title function_">findIndex</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> item === itemEl</span></span><br><span class="line"><span class="language-javascript">      &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      imageListEl.<span class="property">style</span>.<span class="property">transform</span> = <span class="string">`translateX(<span class="subst">$&#123;-<span class="number">604</span> * index&#125;</span>px)`</span></span></span><br><span class="line"><span class="language-javascript">      imageListEl.<span class="property">style</span>.<span class="property">transition</span> = <span class="string">`all 300ms ease`</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="案例实战七-–-书籍购物车"><a href="#案例实战七-–-书籍购物车" class="headerlink" title="案例实战七 – 书籍购物车"></a>案例实战七 – 书籍购物车</h3>]]></content>
      <categories>
        <category>JS基础</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基础_变量和数据类型</title>
    <url>/2024/07/11/JS%E5%9F%BA%E7%A1%80-%E5%8F%98%E9%87%8F%E5%92%8C%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="VSCode插件和配置"><a href="#VSCode插件和配置" class="headerlink" title="VSCode插件和配置"></a>VSCode插件和配置</h2><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683442154094-498bf848-9ab3-4360-baad-d046417af499.png#averageHue=%23a1b3b1&clientId=ub8aa0559-b6f7-4&from=paste&height=195&id=uc07a23ca&originHeight=271&originWidth=458&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=26286&status=done&style=none&taskId=u770f02c5-2282-4b30-bd75-3d039d71b99&title=&width=328.7722473144531" alt="image.png"><br>输入<code>clg</code>即可输入console.log()</p>
<p>在setting.json添加</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 大括号连线设置</span></span><br><span class="line">  <span class="attr">&quot;editor.bracketPairColorization.enabled&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;editor.guides.bracketPairs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;active&quot;</span></span><br></pre></td></tr></table></figure>

<p>选中大括号，可以查看范围</p>
<h2 id="变量的命名格式"><a href="#变量的命名格式" class="headerlink" title="变量的命名格式"></a>变量的命名格式</h2><ul>
<li>在JavaScript中如何命名一个变量呢？包含两部分：<ul>
<li><strong>变量的声明：</strong>在JavaScript中声明一个变量使用var关键字（后续学习ES6还有let、const声明方式）</li>
<li><strong>变量的赋值</strong>：使用 &#x3D; 给变量进行赋值；</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683442840399-301017e6-fbb8-4f87-a04f-a2dacd031d04.png#averageHue=%23769558&clientId=ub8aa0559-b6f7-4&from=paste&height=47&id=udecd5157&originHeight=59&originWidth=493&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=8302&status=done&style=none&taskId=uac5eef98-64bc-4c3a-8974-e22b1546752&title=&width=390.49503475623425" alt="image.png"></li>
</ul>
</li>
<li>这个过程也可以分开操作：</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683442847469-25e03ada-619e-4e64-ae0e-167eebdb0e6e.png#averageHue=%237a985d&clientId=ub8aa0559-b6f7-4&from=paste&height=90&id=uda4fefd5&originHeight=113&originWidth=624&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=14228&status=done&style=none&taskId=u7933c41b-74f8-4964-a446-565bcce4b41&title=&width=494.25740707482794" alt="image.png"></li>
<li>同时声明多个变量：</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683442864119-c91f3969-5031-4c6c-af7b-52e705bc784e.png#averageHue=%23648255&clientId=ub8aa0559-b6f7-4&from=paste&height=163&id=u60101505&originHeight=206&originWidth=1215&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=64531&status=done&style=none&taskId=uef48906a-d622-45f0-864b-561afe5ac1c&title=&width=962.3762012755063" alt="image.png"></li>
</ul>
<h2 id="变量的命名规范"><a href="#变量的命名规范" class="headerlink" title="变量的命名规范"></a>变量的命名规范</h2><ul>
<li><strong>变量命名规则：必须遵守</strong><ul>
<li>1.第一个字符必须是一个字母、下划线（ _ ）或一个美元符号（ $ ）</li>
<li>2.其他字符可以是字母、下划线、美元符号或数字</li>
<li>3.不能使用关键字和保留字命名：</li>
<li>4.变量严格区分大小写</li>
</ul>
</li>
<li><strong>变量命名规范：建议遵守</strong><ul>
<li>多个单词使用驼峰标识；</li>
<li>赋值 &#x3D; 两边都加上一个空格；</li>
<li>一条语句结束后加上分号; 也有很多人的习惯是不加；</li>
<li>变量应该做到见名知意；</li>
</ul>
</li>
</ul>
<h2 id="变量的使用注意"><a href="#变量的使用注意" class="headerlink" title="变量的使用注意"></a>变量的使用注意</h2><ul>
<li>注意一：如果一个变量未声明（declaration）就直接使用，那么会报错；<ul>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683443055468-f235a638-4e8f-4650-9a4c-781b34e08b82.png#averageHue=%23c2b39a&clientId=ub8aa0559-b6f7-4&from=paste&height=92&id=u06b350a7&originHeight=116&originWidth=1163&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=40023&status=done&style=none&taskId=ud91636e6-cfda-4115-89db-acce71be66c&title=&width=921.1880840192706" alt="image.png"></li>
</ul>
</li>
<li>注意二：如果一个变量有声明，但是没有赋值，那么默认值是undefined<ul>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683443061993-d6070bf6-4f24-42a1-a5de-4fc464cd8104.png#averageHue=%23ad9e8f&clientId=ub8aa0559-b6f7-4&from=paste&height=86&id=ue18489fd&originHeight=108&originWidth=1039&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=18677&status=done&style=none&taskId=uc6cf8855-2626-4ca2-a9d0-79b08152175&title=&width=822.9702659467087" alt="image.png"></li>
</ul>
</li>
<li>注意三：如果没有使用var声明变量也可以，但是不推荐（事实上会被添加到window对象上）<ul>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683443068581-ce5bc3b7-cc6d-4377-9946-74930d01db91.png#averageHue=%23a49a7d&clientId=ub8aa0559-b6f7-4&from=paste&height=124&id=u89fd199f&originHeight=156&originWidth=982&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=39808&status=done&style=none&taskId=u4425d578-c60b-45f0-bf32-915257f61b5&title=&width=777.8217528004503" alt="image.png"></li>
</ul>
</li>
</ul>
<h2 id="JavaScript的数据类型"><a href="#JavaScript的数据类型" class="headerlink" title="JavaScript的数据类型"></a>JavaScript的数据类型</h2><ul>
<li>在 JavaScript 中有 8 种基本的数据类型（7 种原始类型和 1 种复杂类型）<ul>
<li>Number</li>
<li>String</li>
<li>Boolean</li>
<li>Undefined</li>
<li>Null</li>
<li>Object</li>
<li>BigInt（后续了解）</li>
<li>Symbol（后续了解）</li>
</ul>
</li>
</ul>
<h2 id="typeof操作符"><a href="#typeof操作符" class="headerlink" title="typeof操作符"></a>typeof操作符</h2><ul>
<li>对一个值使用 typeof 操作符会返回下列字符串之一:<ul>
<li>“undefined”表示值未定义;</li>
<li>“boolean”表示值为布尔值;</li>
<li>“string”表示值为字符串;</li>
<li>“number”表示值为数值;</li>
<li>“object”表示值为对象(而不是函数)或 null;</li>
<li>“function”表示值为函数;</li>
<li>“symbol”表示值为符号；</li>
</ul>
</li>
<li>typeof()的用法：<ul>
<li>你可能还会遇到另一种语法：typeof(x)，它与 typeof x 相同；</li>
<li>typeof是一个操作符，并非是一个函数，()只是将后续的内容当做一个整体而已；</li>
</ul>
</li>
</ul>
<h2 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h2><ul>
<li>number 类型代表<strong>整数</strong>和<strong>浮点数</strong>。<ul>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683443815432-201840ea-c6a9-49f2-ab02-9ca37e2f212c.png#averageHue=%23858b82&clientId=ub8aa0559-b6f7-4&from=paste&height=67&id=u22f6b8c3&originHeight=84&originWidth=591&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=14397&status=done&style=none&taskId=uf3c4a407-042f-4597-8533-dc52116a27a&title=&width=468.1187942006784" alt="image.png"></li>
</ul>
</li>
<li>数字number可以有很多操作，比如，乘法 *、除法 &#x2F;、加法 +、减法 - 等等。</li>
<li>除了常规的数字，还包括所谓的“特殊数值”也属于Number类型（了解）<ul>
<li><strong>Infinity</strong>：代表数学概念中的 <strong>无穷大 ∞</strong>，也可以表示-Infinity；<ul>
<li>比如 1&#x2F;0 得到的就是无穷大；</li>
</ul>
</li>
<li><strong>NaN</strong>：NaN 代表一个<strong>计算错误</strong>，它是一个<strong>错误的操作</strong>所得到的结果；<ul>
<li>比如 字符串和一个数字相乘；</li>
</ul>
</li>
</ul>
</li>
<li>数字表示的范围：<ul>
<li>最小正数值：Number.MIN_VALUE，这个值为： 5e-324，小于这个的数字会被转化为0</li>
<li>最大正数值：Number.MAX_VALUE，这个值为： 1.7976931348623157e+308</li>
</ul>
</li>
<li><strong>isNaN</strong><ul>
<li>用于判断是否不是一个数字。不是数字返回true，是数字返回false。</li>
</ul>
</li>
</ul>
<h2 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h2><ul>
<li>JavaScript 中的字符串必须被括在引号里，有三种包含字符串的方式。<ul>
<li>双引号：”Hello”</li>
<li>单引号：’Hello’</li>
<li>反引号：<code>Hello</code>（ES6之后学习）</li>
</ul>
</li>
<li>前后的引号类型必须一致：<ul>
<li>如果在字符串里面本身包括单引号，可以使用双引号；</li>
<li>如果在字符串里面本身包括双引号，可以使用单引号；</li>
</ul>
</li>
<li>除了普通的可打印字符以外，一些有特殊功能的字符可以通过转义字符的形式放入字符串中：<ul>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683444280464-19661439-3090-491a-b0a1-d086c61b00f4.png#averageHue=%23fae9d7&clientId=ub8aa0559-b6f7-4&from=paste&height=320&id=u5a24de22&originHeight=404&originWidth=933&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=32644&status=done&style=none&taskId=u3aaa39a6-feb9-4d12-a114-162d368854b&title=&width=739.0098730782283" alt="image.png"></li>
</ul>
</li>
<li>转义字符串开发中只有特殊场景才会用到，暂时掌握 \’\” \t \n四个的用法即可。</li>
<li>操作一：字符串拼接，通过+运算符  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683444321730-a62a29ef-24bc-4ad2-aa76-d878eb64e92d.png#averageHue=%2371965e&clientId=ub8aa0559-b6f7-4&from=paste&height=117&id=u2b93ce29&originHeight=148&originWidth=713&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=25523&status=done&style=none&taskId=uf5108857-a9ba-4f31-8209-3b3ad97acf6&title=&width=564.7524539172313" alt="image.png"></li>
<li>操作二：获取字符串长度  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683444335192-17e09f58-26dc-45b0-9236-69e45eb49054.png#averageHue=%23757e43&clientId=ub8aa0559-b6f7-4&from=paste&height=56&id=uae8e0f6a&originHeight=71&originWidth=769&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=17557&status=done&style=none&taskId=u1e30a242-2b95-453a-b942-06b2b1be595&title=&width=609.108887885485" alt="image.png"></li>
</ul>
<h2 id="Undefined类型"><a href="#Undefined类型" class="headerlink" title="Undefined类型"></a>Undefined类型</h2><ul>
<li><strong>Undefined 类型只有一个值，就是特殊值 undefined。</strong><ul>
<li>如果我们声明一个变量，但是没有对其进行初始化时，它默认就是undefined<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683444429946-891eff70-7fc5-4380-95ec-b478fb21ef29.png#averageHue=%23678889&clientId=ub8aa0559-b6f7-4&from=paste&height=93&id=u94c03369&originHeight=117&originWidth=890&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=39648&status=done&style=none&taskId=u533681f2-a550-457a-9ade-4e174885fa3&title=&width=704.9504684240334" alt="image.png"></li>
</ul>
</li>
<li>下面的代码是一样的<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683444444482-f9f71bd2-11a3-4dd8-9780-e5b781be6ea5.png#averageHue=%236f6f61&clientId=ub8aa0559-b6f7-4&from=paste&height=79&id=ufdb15b5b&originHeight=100&originWidth=797&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=14800&status=done&style=none&taskId=u03948ed5-f3fb-4d01-9b77-5e6dc87f7d5&title=&width=631.287104869612" alt="image.png"></li>
<li>这里有两个注意事项：<ul>
<li>注意一：最好在变量定义的时候进行初始化，而不只是声明一个变量；</li>
<li>注意二：不要显示的将一个变量赋值为undefined<ul>
<li>如果变量刚开始什么都没有，我们可以初始化为0、空字符串、null等值；</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Null类型"><a href="#Null类型" class="headerlink" title="Null类型"></a>Null类型</h2><ul>
<li><strong>Null 类型同样只有一个值，即特殊值 null。</strong><ul>
<li>null类型通常用来表示一个对象为空，所以通常我们在给一个对象进行初始化时，会赋值为null；<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683444577469-f5022627-1aa2-419f-b601-52630cc879f5.png#averageHue=%2392805c&clientId=ub8aa0559-b6f7-4&from=paste&height=238&id=uaf46b396&originHeight=301&originWidth=921&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=41981&status=done&style=none&taskId=u08f95cd5-f03b-419d-a86c-87f6b556fb1&title=&width=729.504922942174" alt="image.png"></li>
</ul>
</li>
<li>null和undefined的关系<ul>
<li>undefined通常只有在一个变量声明但是未初始化时，它的默认值是undefined才会用到；</li>
<li>并且我们不推荐直接给一个变量赋值为undefined，所以很少主动来使用；</li>
<li>null值非常常用，当一个变量准备保存一个对象，但是这个对象不确定时，我们可以先赋值为null；</li>
</ul>
</li>
</ul>
<h2 id="字符串String的转换"><a href="#字符串String的转换" class="headerlink" title="字符串String的转换"></a>字符串String的转换</h2><ul>
<li>其他类型经常需要转换成字符串类型，比如和字符串拼接在一起或者使用字符串中的方法。</li>
<li><strong>转换方式一：隐式转换</strong><ul>
<li>一个字符串和另一个字符串进行+操作；<ul>
<li>如果+运算符左右两边有一个是字符串，那么另一边会自动转换成字符串类型进行拼接；</li>
</ul>
</li>
<li>某些函数的执行也会自动将参数转为字符串类型；<ul>
<li>比如console.log函数；</li>
</ul>
</li>
</ul>
</li>
<li><strong>转换方式二：显式转换</strong><ul>
<li>调用String()函数；</li>
<li>调用toString()方法（后续面向对象再学习）；</li>
</ul>
</li>
</ul>
<h2 id="数字类型Number的转换"><a href="#数字类型Number的转换" class="headerlink" title="数字类型Number的转换"></a>数字类型Number的转换</h2><ul>
<li>其他类型也可能会转成数字类型。</li>
<li><strong>转换方式一：隐式转换</strong><ul>
<li>在算数运算中，通常会将其他类型转换成数字类型来进行运算；<ul>
<li>比如 “6” &#x2F; “2”；</li>
<li>但是如果是+运算，并且其中一边有字符串，那么还是按照字符串来连接的；</li>
</ul>
</li>
</ul>
</li>
<li><strong>转换方式二：显式转换</strong><ul>
<li>我们也可以使用Number()函数来进行显式的转换；</li>
</ul>
</li>
<li>其他类型转换数字的规则：</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683445053212-b902b949-179a-40fa-a6b0-7df81843a2fa.png#averageHue=%23f6dfc6&clientId=ub8aa0559-b6f7-4&from=paste&height=209&id=u54b390fe&originHeight=264&originWidth=1157&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=71080&status=done&style=none&taskId=uf4751c62-00cf-4381-ab07-fa2141d3943&title=&width=916.4356089512435" alt="image.png"></li>
</ul>
<h2 id="布尔类型Boolean的转换"><a href="#布尔类型Boolean的转换" class="headerlink" title="布尔类型Boolean的转换"></a>布尔类型Boolean的转换</h2><ul>
<li>布尔（boolean）类型转换是最简单的。</li>
<li>它发生在逻辑运算中，但是也可以通过调用** Boolean(value) **显式地进行转换。</li>
<li>转换规则如下：<ul>
<li>直观上为“空”的值（如 0、空字符串、null、undefined 和 NaN）将变为 false。</li>
<li>其他值变成 true。   <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683445968436-f799beef-779b-4784-9539-87691327f4c0.png#averageHue=%23f8dbb7&clientId=ub8aa0559-b6f7-4&from=paste&height=131&id=u0224af36&originHeight=165&originWidth=1182&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=15353&status=done&style=none&taskId=ub589781a-07ea-4082-bd23-c8b69ce0f8f&title=&width=936.2375884013568" alt="image.png"></li>
</ul>
</li>
<li><strong>注意：包含 0 的字符串 “0” 是 true</strong><ul>
<li>在 JavaScript 中，非空的字符串总是 true。</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JS基础</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基础-事件处理</title>
    <url>/2024/08/19/JS%E5%9F%BA%E7%A1%80-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h3 id="常见的事件列表"><a href="#常见的事件列表" class="headerlink" title="常见的事件列表"></a>常见的事件列表</h3><ul>
<li><strong>鼠标事件：</strong><ul>
<li>click —— 当鼠标点击一个元素时（触摸屏设备会在点击时生成）。</li>
<li>mouseover &#x2F; mouseout —— 当鼠标指针移入&#x2F;离开一个元素时。</li>
<li>mousedown &#x2F; mouseup —— 当在元素上按下&#x2F;释放鼠标按钮时。</li>
<li>mousemove —— 当鼠标移动时。</li>
</ul>
</li>
<li><strong>键盘事件：</strong><ul>
<li>keydown 和 keyup —— 当按下和松开一个按键时。</li>
</ul>
</li>
<li><strong>表单（form）元素事件：</strong><ul>
<li>submit —— 当访问者提交了一个 <form> 时。</li>
<li>focus —— 当访问者聚焦于一个元素时，例如聚焦于一个<input> 。</li>
</ul>
</li>
<li><strong>Document 事件：</strong><ul>
<li>DOMContentLoaded —— 当 HTML 的加载和处理均完成，DOM 被完全构建完成时。</li>
</ul>
</li>
<li><strong>CSS 事件：</strong><ul>
<li>transitionend —— 当一个 CSS 动画完成时。</li>
</ul>
</li>
</ul>
<h3 id="认识事件流"><a href="#认识事件流" class="headerlink" title="认识事件流"></a>认识事件流</h3><ul>
<li><strong>事实上对于事件有一个概念叫做事件流，为什么会产生事件流呢？</strong><ul>
<li>我们可以想到一个问题：当我们在浏览器上对着一个元素点击时，你点击的不仅仅是这个元素本身；</li>
<li>这是因为我们的HTML元素是存在父子元素叠加层级的；</li>
<li>比如一个span元素是放在div元素上的，div元素是放在body元素上的，body元素是放在html元素上的；</li>
</ul>
</li>
</ul>
<h3 id="事件冒泡和事件捕获"><a href="#事件冒泡和事件捕获" class="headerlink" title="事件冒泡和事件捕获"></a>事件冒泡和事件捕获</h3><ul>
<li>我们会发现默认情况下事件是从最内层的span向外依次传递的顺序，这个顺序我们称之为事件冒泡;</li>
<li>事实上，还有另外一种监听事件流的方式就是从外层到内层（body -&gt; span），这种称之为事件捕获；</li>
<li>为什么会产生两种不同的处理流呢？<ul>
<li>这是因为早期浏览器开发时，不管是IE还是Netscape公司都发现了这个问题;</li>
<li>但是他们采用了完全相反的事件流来对事件进行了传递；</li>
<li>IE采用了事件冒泡的方式，Netscape采用了事件捕获的方式；</li>
</ul>
</li>
<li>那么我们如何去监听事件捕获的过程呢？  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683617069569-c9a62800-8e23-49d2-84a6-79a75b9cf5b0.png#averageHue=%23a5c32c&clientId=u2513d675-637a-4&from=paste&height=286&id=u28b56333&originHeight=361&originWidth=620&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=28974&status=done&style=none&taskId=uc76450d0-eb43-4524-a247-4e3f250af9e&title=&width=491.0890903628098" alt="image.png"></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">justify-content</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">align-items</span>: center;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.获取元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> spanEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;span&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> divEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> bodyEl = <span class="variable language_">document</span>.<span class="property">body</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 默认情况下是事件冒泡</span></span></span><br><span class="line"><span class="language-javascript">    spanEl.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;span元素发生了点击~冒泡&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    divEl.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;div元素发生了点击~冒泡&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    bodyEl.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;body元素发生了点击~冒泡&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置希望监听事件捕获的过程</span></span></span><br><span class="line"><span class="language-javascript">    spanEl.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;span元素发生了点击~捕获&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">    divEl.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;div元素发生了点击~捕获&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">    bodyEl.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;body元素发生了点击~捕获&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683617137481-6349e5e9-7e5d-4041-8c42-4f533ea26873.png#averageHue=%23f3f3f3&clientId=u2513d675-637a-4&from=paste&height=144&id=u0e43eb2a&originHeight=182&originWidth=367&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=6764&status=done&style=none&taskId=u46bcc682-9101-4c34-a3ad-0599d8646e7&title=&width=290.6930583276632" alt="image.png"></p>
<h3 id="事件捕获和冒泡的过程"><a href="#事件捕获和冒泡的过程" class="headerlink" title="事件捕获和冒泡的过程"></a>事件捕获和冒泡的过程</h3><ul>
<li><strong>如果我们都监听，那么会按照如下顺序来执行：</strong></li>
<li>捕获阶段：<ul>
<li>事件（从 Window）向下走近元素。</li>
</ul>
</li>
<li>目标阶段：<ul>
<li>事件到达目标元素。</li>
</ul>
</li>
<li>冒泡阶段：<ul>
<li>事件从元素上开始冒泡。</li>
</ul>
</li>
<li>事实上，我们可以通过event对象来获取当前的阶段：<ul>
<li>eventPhase</li>
</ul>
</li>
<li>**开发中通常会使用事件冒泡，所以事件捕获了解即可。  **</li>
</ul>
<h3 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h3><ul>
<li>当一个事件发生时，就会有和这个事件相关的很多信息：<ul>
<li>比如事件的类型是什么，你点击的是哪一个元素，点击的位置是哪里等等相关的信息；</li>
<li>那么这些信息会被封装到一个Event对象中，这个对象由浏览器创建，称之为event对象；</li>
<li>该对象给我们提供了想要的一些属性，以及可以通过该对象进行某些操作</li>
</ul>
</li>
<li><strong>如何获取这个event对象呢？</strong><ul>
<li>event对象会在传入的事件处理（event handler）函数回调时，被系统传入；</li>
<li>我们可以在回调函数中拿到这个event对象；<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683618874190-87668dc9-07da-45b3-8423-fd52d4f5b746.png#averageHue=%234a6f54&clientId=u2513d675-637a-4&from=paste&height=177&id=u4680b0f3&originHeight=224&originWidth=1088&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=71072&status=done&style=none&taskId=ub4b314c9-e265-4c64-981c-7e215ed23e7&title=&width=861.7821456689308" alt="image.png"></li>
</ul>
</li>
<li>这个对象中都有哪些常见的属性和操作呢？</li>
</ul>
<h3 id="event常见的属性和方法"><a href="#event常见的属性和方法" class="headerlink" title="event常见的属性和方法"></a>event常见的属性和方法</h3><ul>
<li>常见的属性：<ul>
<li>type：事件的类型；</li>
<li>target：当前事件发生的元素；</li>
<li>currentTarget：当前处理事件的元素；</li>
<li>eventPhase：事件所处的阶段；</li>
<li>offsetX、offsetY：事件发生在元素内的位置；</li>
<li>clientX、clientY：事件发生在客户端内的位置；</li>
<li>pageX、pageY：事件发生在客户端相对于document的位置；</li>
<li>screenX、screenY：事件发生相对于屏幕的位置；</li>
</ul>
</li>
<li>常见的方法：<ul>
<li>preventDefault：取消事件的默认行为；</li>
<li>stopPropagation：阻止事件的进一步传递（冒泡或者捕获都可以阻止）；</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#f00</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> divEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btnEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.btn&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// btnEl.onclick = function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(&quot;按钮发生了点击~&quot;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    divEl.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1.偶尔会使用</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;事件类型:&quot;</span>, event.<span class="property">type</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;事件阶段:&quot;</span>, event.<span class="property">eventPhase</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2.比较少使用</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;事件元素中位置&quot;</span>, event.<span class="property">offsetX</span>, event.<span class="property">offsetY</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;事件客户端中位置&quot;</span>, event.<span class="property">clientX</span>, event.<span class="property">clientY</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;事件页面中位置&quot;</span>, event.<span class="property">pageX</span>, event.<span class="property">pageY</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;事件在屏幕中位置&quot;</span>, event.<span class="property">screenX</span>, event.<span class="property">screenY</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 3.target/currentTarget</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">currentTarget</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">currentTarget</span> === event.<span class="property">target</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683619232529-f1b81ca0-1a55-464e-a148-3e7fbdfbd7dc.png#averageHue=%23f9f9f9&clientId=u2513d675-637a-4&from=paste&height=196&id=u12e6391d&originHeight=247&originWidth=514&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=13798&status=done&style=none&taskId=u7e545d84-88ad-46df-91ca-37ff5539456&title=&width=407.1286974943294" alt="image.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> <span class="selector-tag">span</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#f00</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.baidu.com&quot;</span>&gt;</span>百度一下<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.阻止默认行为</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var aEl = document.querySelector(&quot;a&quot;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// aEl.onclick = function(event) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(&quot;a元素发生了点击~&quot;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   event.preventDefault()</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.阻止事件进一步传递</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btnEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;button&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> spanEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;span&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> divEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;div&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    divEl.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;div的事件捕获监听~&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// event.stopPropagation()</span></span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">    spanEl.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;span的事件捕获监听~&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// event.stopPropagation()</span></span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">    btnEl.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;button的事件捕获监听~&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// event.stopPropagation()</span></span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    divEl.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;div的事件冒泡监听~&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    spanEl.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;span的事件冒泡监听~&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      event.<span class="title function_">stopPropagation</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    btnEl.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;button的事件冒泡监听~&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683619411459-881aa5ed-c991-4261-bada-3154fbc7a6e1.png#averageHue=%23f7f7f7&clientId=u2513d675-637a-4&from=paste&height=105&id=ue7b4a339&originHeight=133&originWidth=639&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=5585&status=done&style=none&taskId=u4ceff04f-ffc5-4864-b74e-00d55fa8eb7&title=&width=506.1385947448959" alt="image.png"></p>
<h3 id="事件处理中的this"><a href="#事件处理中的this" class="headerlink" title="事件处理中的this"></a>事件处理中的this</h3><ul>
<li><strong>在函数中，我们也可以通过this来获取当前的发生元素：</strong><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683619473346-67d10ede-64b7-4ae6-bab4-3a00e66ee509.png#averageHue=%2354775b&clientId=u2513d675-637a-4&from=paste&height=119&id=ue2ce6671&originHeight=150&originWidth=984&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=43037&status=done&style=none&taskId=u5162abae-c646-4461-980a-8f2b0362e34&title=&width=779.4059111564594" alt="image.png"></li>
<li>**这是因为在浏览器内部，调用event handler是绑定到当前的target上的  **</li>
</ul>
<h3 id="EventTarget类"><a href="#EventTarget类" class="headerlink" title="EventTarget类"></a>EventTarget类</h3><ul>
<li>我们会发现，所有的节点、元素都继承自EventTarget<ul>
<li>事实上Window也继承自EventTarget；</li>
</ul>
</li>
<li>那么这个EventTarget是什么呢？<ul>
<li>EventTarget是一个DOM接口，主要用于添加、删除、派发Event事件；</li>
</ul>
</li>
<li>EventTarget常见的方法：<ul>
<li>addEventListener：注册某个事件类型以及事件处理函数；</li>
<li>removeEventListener：移除某个事件类型以及事件处理函数；</li>
<li>dispatchEvent：派发某个事件类型到EventTarget上；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683619609803-bdf4cc09-01bb-4290-85d2-c26b87bb2058.png#averageHue=%23466d5a&clientId=u2513d675-637a-4&from=paste&height=185&id=u2eddccbb&originHeight=234&originWidth=1493&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=123178&status=done&style=none&taskId=ud39294c1-038e-4bd1-bc23-ab423021ba6&title=&width=1182.5742127607662" alt="image.png"></li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btnEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;button&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.将监听函数移除的过程</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> foo = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;监听到按钮的点击&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    btnEl.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, foo)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 需求: 过5s钟后, 将这个事件监听移除掉</span></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      btnEl.<span class="title function_">removeEventListener</span>(<span class="string">&quot;click&quot;</span>, foo)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">5000</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.这种做法是无法移除的</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// btnEl.addEventListener(&quot;click&quot;, function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(&quot;btn监听的处理函数~&quot;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// setTimeout(function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   btnEl.removeEventListener(&quot;click&quot;, function() &#123;&#125;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;, 5000)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// eventtarget就可以实现类似于事件总线的效果</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&quot;shiyi&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;监听到shiyi的呼唤~&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="title function_">dispatchEvent</span>(<span class="keyword">new</span> <span class="title class_">Event</span>(<span class="string">&quot;shiyi&quot;</span>))</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">5000</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="事件委托（event-delegation）"><a href="#事件委托（event-delegation）" class="headerlink" title="事件委托（event delegation）"></a>事件委托（event delegation）</h3><ul>
<li><strong>事件冒泡在某种情况下可以帮助我们实现强大的事件处理模式 – 事件委托模式（也是一种设计模式）</strong></li>
<li>那么这个模式是怎么样的呢？<ul>
<li>因为当子元素被点击时，父元素可以通过冒泡可以监听到子元素的点击；</li>
<li>并且可以通过event.target获取到当前监听的元素；</li>
</ul>
</li>
<li><strong>案例：一个ul中存放多个li，点击某一个li会变成红色</strong><ul>
<li>方案一：监听每一个li的点击，并且做出相应；</li>
<li>方案二：在ul中监听点击，并且通过event.target拿到对应的li进行处理；<ul>
<li>因为这种方案并不需要遍历后给每一个li上添加事件监听，所以它更加高效；</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>9<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>10<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.每一个li都监听自己的点击, 并且有自己的处理函数(自己的函数)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var liEls = document.querySelectorAll(&quot;li&quot;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// for (var liEl of liEls) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   // 监听点击</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   liEl.onclick = function(event) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//     event.currentTarget.classList.add(&quot;active&quot;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.统一在ul中监听</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var ulEl = document.querySelector(&quot;ul&quot;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// ulEl.onclick = function(event) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(&quot;点击了某一个li&quot;, event.target)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   event.target.classList.add(&quot;active&quot;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.新需求: 点击li变成active, 其他的取消active</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> ulEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;ul&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> activeLiEl = <span class="literal">null</span></span></span><br><span class="line"><span class="language-javascript">    ulEl.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1.将之前的active移除掉</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// for (var i = 0; i &lt; ulEl.children.length; i++) &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   var liEl = ulEl.children[i]</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   if (liEl.classList.contains(&quot;active&quot;)) &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//     liEl.classList.remove(&quot;active&quot;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   &#125;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1.找到active的li, 移除掉active</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// var activeLiEl = ulEl.querySelector(&quot;.active&quot;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// if (activeLiEl) &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   activeLiEl.classList.remove(&quot;active&quot;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1.变量记录的方式</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// edge case</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (activeLiEl) &#123;</span></span><br><span class="line"><span class="language-javascript">        activeLiEl.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;active&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2.给点击的元素添加active</span></span></span><br><span class="line"><span class="language-javascript">      event.<span class="property">target</span>.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;active&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 3.记录最新的active对应的li</span></span></span><br><span class="line"><span class="language-javascript">      activeLiEl = event.<span class="property">target</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="事件委托的标记"><a href="#事件委托的标记" class="headerlink" title="事件委托的标记"></a>事件委托的标记</h3><ul>
<li>某些事件委托可能需要对具体的子组件进行区分，这个时候我们可以使用**data-***对其进行标记：</li>
<li>比如多个按钮的点击，区分点击了哪一个按钮：  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683622838002-5add1e24-98ad-4585-952d-2501c942dc8f.png#averageHue=%235e845b&clientId=u2513d675-637a-4&from=paste&height=461&id=u4cbe3209&originHeight=582&originWidth=1454&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=193953&status=done&style=none&taskId=ua24f5eec-d785-4a06-aca3-54d1de6efab&title=&width=1151.6831248185895" alt="image.png"></li>
</ul>
<h3 id="常见的鼠标事件"><a href="#常见的鼠标事件" class="headerlink" title="常见的鼠标事件"></a>常见的鼠标事件</h3><ul>
<li>接下来我们来看一下常见的鼠标事件（不仅仅是鼠标设备，也包括模拟鼠标的设备，比如手机、平板电脑）</li>
<li>常见的鼠标事件：  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683622881121-e138e089-3ef9-4365-9ffd-dad3d7e772e2.png#averageHue=%23f7ddc7&clientId=u2513d675-637a-4&from=paste&height=293&id=u3140f203&originHeight=550&originWidth=1142&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=167482&status=done&style=none&taskId=udc7d8f8a-8858-4fce-b805-e961bbd42c6&title=&width=608.3984985351562" alt="image.png"></li>
</ul>
<h3 id="mouseover和mouseenter的区别"><a href="#mouseover和mouseenter的区别" class="headerlink" title="mouseover和mouseenter的区别"></a>mouseover和mouseenter的区别</h3><ul>
<li>mouseenter和mouseleave<ul>
<li>不支持冒泡</li>
<li>进入子元素依然属于在该元素内，没有任何反应</li>
</ul>
</li>
<li>mouseover和mouseout<ul>
<li>支持冒泡</li>
<li>进入元素的子元素时<ul>
<li>先调用父元素的mouseout</li>
<li>再调用子元素的mouseover</li>
<li>因为支持冒泡，所以会将mouseover传递到父元素中；</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="常见的键盘事件"><a href="#常见的键盘事件" class="headerlink" title="常见的键盘事件"></a>常见的键盘事件</h3><ul>
<li>常见的键盘事件：<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683623410115-648443f9-7bb3-452d-859f-ff3849dbf7c2.png#averageHue=%23f6daba&clientId=u2513d675-637a-4&from=paste&height=165&id=u29c8ea25&originHeight=208&originWidth=1276&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=51722&status=done&style=none&taskId=ubd6ae92f-7497-4a4a-bcc2-7d9a13cef70&title=&width=1010.6930311337827" alt="image.png"></li>
<li>事件的执行顺序是 onkeydown、onkeypress、onkeyup<ul>
<li>down事件先发生；</li>
<li>press发生在文本被输入；</li>
<li>up发生在文本输入完成</li>
</ul>
</li>
<li>我们可以通过key和code来区分按下的键：<ul>
<li>code：“按键代码”（”KeyA”，”ArrowLeft” 等），特定于键盘上按键的物理位置。</li>
<li>key：字符（”A”，”a” 等），对于非字符的按键，通常具有与 code 相同的值。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span>&gt;</span>搜索<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> inputEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;input&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btnEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;button&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// inputEl.onkeydown = function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(&quot;onkeydown&quot;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// inputEl.onkeypress = function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(&quot;onkeypress&quot;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// inputEl.onkeyup = function(event) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(event.key, event.code)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.搜索功能</span></span></span><br><span class="line"><span class="language-javascript">    btnEl.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进行搜索功能&quot;</span>, inputEl.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    inputEl.<span class="property">onkeyup</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (event.<span class="property">code</span> === <span class="string">&quot;Enter&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;进行搜索功能&quot;</span>, inputEl.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.按下s的时候, 搜索自动获取焦点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="property">onkeyup</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (event.<span class="property">code</span> === <span class="string">&quot;KeyS&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        inputEl.<span class="title function_">focus</span>()</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="常见的表单事件"><a href="#常见的表单事件" class="headerlink" title="常见的表单事件"></a>常见的表单事件</h3><p>针对表单也有常见的事件：  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683623603925-fb6948dc-0d72-4acb-8b50-1c1b3f2cde19.png#averageHue=%23f6dcc3&clientId=u2513d675-637a-4&from=paste&height=223&id=ueda5e83f&originHeight=380&originWidth=1134&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=97168&status=done&style=none&taskId=u159e7637-7f85-4581-b13a-a50c59f0219&title=&width=664.4108276367188" alt="image.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/abc&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;30&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;10&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> inputEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;input&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.获取焦点和失去焦点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// inputEl.onfocus = function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(&quot;input获取到了焦点&quot;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// inputEl.onblur = function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(&quot;input失去到了焦点&quot;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.内容发生改变/输入内容</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 输入的过程: input</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 内容确定发生改变(离开): change</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// inputEl.oninput = function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(&quot;input事件正在输入内容&quot;, inputEl.value)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// inputEl.onchange = function() &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(&quot;change事件内容发生改变&quot;, inputEl.value)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.监听重置和提交</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> formEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;form&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    formEl.<span class="property">onreset</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;发生了重置事件&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      event.<span class="title function_">preventDefault</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    formEl.<span class="property">onsubmit</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;发生了提交事件&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// axios库提交</span></span></span><br><span class="line"><span class="language-javascript">      event.<span class="title function_">preventDefault</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="文档加载事件"><a href="#文档加载事件" class="headerlink" title="文档加载事件"></a>文档加载事件</h3><ul>
<li>DOMContentLoaded：浏览器已完全加载 HTML，并构建了 DOM 树，但像<img>  和样式表之类的外部资源可能尚未加载 完成。</li>
<li>load：浏览器不仅加载完成了 HTML，还加载完成了所有外部资源：图片，样式等。  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683623858558-68bfc2db-4705-4e0e-8fd7-921a14852f3d.png#averageHue=%23282d36&clientId=u2513d675-637a-4&from=paste&height=333&id=ud753ae48&originHeight=420&originWidth=1337&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=179477&status=done&style=none&taskId=u0e5351b7-4f9c-43c5-ac1d-dfd3b6b3b55&title=&width=1059.0098609920592" alt="image.png"></li>
</ul>
]]></content>
      <categories>
        <category>JS基础</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基础-常见内置类</title>
    <url>/2024/08/16/JS%E5%9F%BA%E7%A1%80-%E5%B8%B8%E8%A7%81%E5%86%85%E7%BD%AE%E7%B1%BB/</url>
    <content><![CDATA[<h3 id="Number类"><a href="#Number类" class="headerlink" title="Number类"></a>Number类</h3><ul>
<li>前面我们已经学习了Number类型，它有一个对应的数字包装类型Number，我们来对它的方法做一些补充。</li>
<li>Number属性补充：<ul>
<li>Number.MAX_SAFE_INTEGER：JavaScript 中最大的安全整数 (2^53 - 1)；</li>
<li>Number.MIN_SAFE_INTEGER：JavaScript 中最小的安全整数 -(2^53 - 1)</li>
</ul>
</li>
<li><strong>Number实例方法补充：</strong><ul>
<li>方法一：toString(base)，将数字转成字符串，并且按照base进制进行转化<ul>
<li>base 的范围可以从 2 到 36，默认情况下是 10；</li>
<li>注意：如果是直接对一个数字操作，需要使用..运算符；<ul>
<li>console.log(123..toString(2))  –》 输出123的二进制表示</li>
</ul>
</li>
</ul>
</li>
<li>方法二：toFixed(digits)，格式化一个数字，保留digits位的小数；<ul>
<li>digits的范围是0到20（包含）之间；</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> num = <span class="number">1000</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toString</span>(), <span class="keyword">typeof</span> num.<span class="title function_">toString</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toString</span>(<span class="number">2</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toString</span>(<span class="number">8</span>))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num.<span class="title function_">toString</span>(<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123.</span>.<span class="title function_">toString</span>(<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// toFixed的使用(重要)</span></span><br><span class="line"><span class="keyword">var</span> pi = <span class="number">3.1415926</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(pi.<span class="title function_">toFixed</span>(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Number类方法补充：</strong><ul>
<li>方法一：Number.parseInt(string[, radix])，将字符串解析成整数，也有对应的全局方法parseInt；</li>
<li>方法二：Number. parseFloat(string)，将字符串解析成浮点数，也有对应的全局方法parseFloat；</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> num1 = <span class="string">&quot;123.521&quot;</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>(num1).<span class="title function_">toFixed</span>(<span class="number">0</span>))</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">parseInt</span>(num1))</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Number</span>.<span class="built_in">parseFloat</span>(num1))</span><br><span class="line"></span><br><span class="line">   <span class="comment">// window对象上面</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(num1))</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseFloat</span>(num1))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span> === <span class="title class_">Number</span>.<span class="property">parseInt</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683524242765-4d19c252-00f4-43dc-9e8b-637fbbf84e3a.png#averageHue=%23fefefe&clientId=u51f04a48-5b78-4&from=paste&height=112&id=u985675ea&originHeight=142&originWidth=621&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=3225&status=done&style=none&taskId=u572d30b2-c434-4b4c-b4af-0c9afc963ba&title=&width=491.8811695408143" alt="image.png"></p>
<ul>
<li>更多Number的知识，可以查看MDN文档：<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number</a></li>
</ul>
</li>
</ul>
<h3 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h3><ul>
<li>在除了Number类可以对数字进行处理之外，JavaScript还提供了一个Math对象。<ul>
<li>Math是一个内置对象（不是一个构造函数），它拥有一些数学常数属性和数学函数方法；</li>
</ul>
</li>
<li>Math常见的属性：<ul>
<li>Math.PI：圆周率，约等于 3.14159；</li>
</ul>
</li>
<li>Math常见的方法：<ul>
<li>Math.floor：向下舍入取整</li>
<li>Math.ceil：向上舍入取整</li>
<li>Math.round：四舍五入取整</li>
<li>Math.random：生成0~1的随机数（包含0，不包含1）</li>
<li>Math.pow(x, y)：返回x的y次幂</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683524663928-4bfef831-2d5e-4df8-a315-2cc304a91d31.png#averageHue=%23f8d9b2&clientId=u51f04a48-5b78-4&from=paste&height=120&id=u380b1b9e&originHeight=152&originWidth=918&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=15083&status=done&style=none&taskId=u9ed6dafd-f156-4695-9166-3aadace876c&title=&width=727.1286854081603" alt="image.png"></li>
</ul>
</li>
<li>Math中还有很多其他数学相关的方法，可以查看MDN文档：<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math</a></li>
</ul>
</li>
</ul>
<h3 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h3><ul>
<li>String常见的属性：<ul>
<li>length：获取字符串的长度；</li>
</ul>
</li>
<li><strong>操作一：访问字符串的字符</strong><ul>
<li>使用方法一：通过字符串的索引 str[0]</li>
<li>使用方法二：通过str.charAt(pos)方法</li>
<li>它们的区别是索引的方式没有找到会返回undefined，而charAt没有找到会返回空字符串；</li>
</ul>
</li>
<li><strong>练习：字符串的遍历</strong><ul>
<li>方式一：普通for循环</li>
<li>方式二：for..of遍历</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// for普通遍历</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; message.<span class="property">length</span>; i++) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(message[i])</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// for..of的遍历 -&gt; 迭代器</span></span><br><span class="line"> <span class="comment">// 目前可迭代对象: 字符串/数组</span></span><br><span class="line"> <span class="comment">// 对象是不支持for..of</span></span><br><span class="line"> <span class="comment">// String对象内部是将字符串变成了一个可迭代对象</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> char <span class="keyword">of</span> message) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(char)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="String类的补充（二）-修改字符串"><a href="#String类的补充（二）-修改字符串" class="headerlink" title="String类的补充（二） - 修改字符串"></a>String类的补充（二） - 修改字符串</h3><ul>
<li>字符串的不可变性：<ul>
<li>字符串在定义后是不可以修改的，所以下面的操作是没有任何意义的<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683525157009-54eceb47-ce6f-4aff-8a4a-36d4d55575d3.png#averageHue=%2374965e&clientId=u51f04a48-5b78-4&from=paste&height=85&id=u54b7aa64&originHeight=136&originWidth=965&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=38368&status=done&style=none&taskId=u3f6c76ac-0b7c-4d2e-bee7-4437525544a&title=&width=605.4108276367188" alt="image.png"></li>
</ul>
</li>
<li><strong>所以，在我们改变很多字符串的操作中，都是生成了一个新的字符串；</strong><ul>
<li>比如改变字符串大小的两个方法</li>
<li>toLowerCase()：将所有的字符转成小写；</li>
<li>toUpperCase() ：将所有的字符转成大写；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683525186428-8919854c-4821-42dc-8eb5-a8b595eb301e.png#averageHue=%2356785c&clientId=u51f04a48-5b78-4&from=paste&height=93&id=uccbd2917&originHeight=118&originWidth=1208&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=65613&status=done&style=none&taskId=u1902f006-5328-4672-a087-c042afb01e3&title=&width=956.8316470294745" alt="image.png"></li>
</ul>
</li>
</ul>
<h3 id="String类的补充（三）-查找字符串"><a href="#String类的补充（三）-查找字符串" class="headerlink" title="String类的补充（三） - 查找字符串"></a>String类的补充（三） - 查找字符串</h3><ul>
<li>在开发中我们经常会在一个字符串中查找或者获取另外一个字符串，String提供了如下方法：</li>
<li><strong>方法一：查找字符串位置</strong><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683525294126-354ffa8f-7934-47e9-9b87-152299c3e413.png#averageHue=%23e8e7e7&clientId=u51f04a48-5b78-4&from=paste&height=42&id=u5a952af5&originHeight=53&originWidth=679&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=18076&status=done&style=none&taskId=u502a3b87-3643-4520-a1b3-cdb5235677a&title=&width=537.8217618650772" alt="image.png"><ul>
<li>从fromIndex开始，查找searchValue的索引；</li>
<li>如果没有找到，那么返回-1；</li>
<li>有一个相似的方法，叫lastIndexOf，从最后开始查找（用的较少）<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683525320638-8552e839-9451-478a-b37b-199ed92d5be3.png#averageHue=%236b8b5b&clientId=u51f04a48-5b78-4&from=paste&height=45&id=u6de11097&originHeight=57&originWidth=1035&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=24944&status=done&style=none&taskId=ua68ab6ed-c6c3-4818-a3f7-62a7b4f8718&title=&width=819.8019492346906" alt="image.png"></li>
</ul>
</li>
<li><strong>方法二：是否包含字符串</strong><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683525379917-6165583d-d131-4086-8f71-a45fc4e6cabb.png#averageHue=%23e6e6e6&clientId=u51f04a48-5b78-4&from=paste&height=31&id=u43e70e23&originHeight=45&originWidth=718&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=17677&status=done&style=none&taskId=u6960f0de-c79a-44bd-b52b-ae938d9fa09&title=&width=496.71282958984375" alt="image.png"><ul>
<li>从position位置开始查找searchString， 根据情况返回 true 或 false</li>
<li>这是ES6新增的方法；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683525394374-bf29809b-87d6-43ce-881f-0ff4f7d7c52c.png#averageHue=%23477999&clientId=u51f04a48-5b78-4&from=paste&height=37&id=u055eb272&originHeight=47&originWidth=783&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=25126&status=done&style=none&taskId=u55ae6b83-166f-4446-97da-99317e7feb4&title=&width=620.1979963775485" alt="image.png"></li>
</ul>
</li>
</ul>
<h3 id="String类的补充（四）-开头和结尾"><a href="#String类的补充（四）-开头和结尾" class="headerlink" title="String类的补充（四）- 开头和结尾"></a>String类的补充（四）- 开头和结尾</h3><ul>
<li><strong>方法三：以xxx开头</strong><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683525453810-feaa1b6a-e750-48d1-acf4-48e1d9092dcd.png#averageHue=%23e4e3e3&clientId=u51f04a48-5b78-4&from=paste&height=34&id=uc550d62b&originHeight=43&originWidth=672&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=18829&status=done&style=none&taskId=u4d0ddd1f-6ea2-4452-b0c1-b226e1995be&title=&width=532.2772076190455" alt="image.png"><ul>
<li>从position位置开始，判断字符串是否以searchString开头；</li>
<li>这是ES6新增的方法，下面的方法也一样；</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">message.<span class="title function_">startsWith</span>(<span class="string">&quot;my&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>方法四：以xxx结尾</strong><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683525513467-6214d02a-7a5e-4dbe-ac2a-305a7f4ec90f.png#averageHue=%23e4e3e3&clientId=u51f04a48-5b78-4&from=paste&height=35&id=ue8b688a6&originHeight=44&originWidth=605&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=17237&status=done&style=none&taskId=u44e08a1a-2363-48d5-abee-c7060e9bf40&title=&width=479.2079026927418" alt="image.png"><ul>
<li>在length长度内，判断字符串是否以searchString结尾；<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683525521314-ce4a4a94-978d-4a04-a720-b7527b13d632.png#averageHue=%235c835c&clientId=u51f04a48-5b78-4&from=paste&height=72&id=ue0b7b363&originHeight=91&originWidth=1020&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=45826&status=done&style=none&taskId=u8cb3938f-18c5-4753-90e0-8eabbd5f3b9&title=&width=807.9207615646226" alt="image.png"></li>
</ul>
</li>
<li><strong>方法五：替换字符串</strong><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683525529053-49bff687-399a-4f15-b25d-efb7d07e5ca4.png#averageHue=%23e1e0e0&clientId=u51f04a48-5b78-4&from=paste&height=30&id=udcfa2a8b&originHeight=38&originWidth=695&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=18774&status=done&style=none&taskId=udaf229c0-0ca1-4a95-8b64-26215b55d34&title=&width=550.4950287131497" alt="image.png"><ul>
<li>查找到对应的字符串，并且使用新的字符串进行替代；</li>
<li>这里也可以传入一个正则表达式来查找，也可以传入一个函数来替换；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683525547902-bb314cd1-f741-419e-bce2-ac1b17819c39.png#averageHue=%232b333f&clientId=u51f04a48-5b78-4&from=paste&height=30&id=ufa679d60&originHeight=38&originWidth=899&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=29514&status=done&style=none&taskId=u1e538637-e2e3-4034-ab7b-0fc0057d6cf&title=&width=712.0791810260743" alt="image.png"></li>
</ul>
</li>
</ul>
<h3 id="String类的补充（五）-获取子字符串"><a href="#String类的补充（五）-获取子字符串" class="headerlink" title="String类的补充（五） - 获取子字符串"></a>String类的补充（五） - 获取子字符串</h3><p>**方法八：获取子字符串  **<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683525574638-b2cbe9dc-00c7-44da-8b89-cf4db81405e9.png#averageHue=%23f4d1a9&clientId=u51f04a48-5b78-4&from=paste&height=339&id=ucd0a221f&originHeight=428&originWidth=1223&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=144570&status=done&style=none&taskId=uba728630-5f59-4903-9daa-6b01df655f8&title=&width=968.7128346995426" alt="image.png"></p>
<ul>
<li>开发中推荐使用slice方法。</li>
</ul>
<h3 id="String类的补充（六）-其他方法"><a href="#String类的补充（六）-其他方法" class="headerlink" title="String类的补充（六） - 其他方法"></a>String类的补充（六） - 其他方法</h3><ul>
<li><strong>方法六：拼接字符串</strong><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683525969059-138a1696-b6e4-4a49-b3c6-f9a3d8e8245c.png#averageHue=%23ebeaea&clientId=u51f04a48-5b78-4&from=paste&height=40&id=ubd89ce6d&originHeight=50&originWidth=426&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=9572&status=done&style=none&taskId=u21fdf744-71be-4a9d-9edb-8b50742a132&title=&width=337.4257298299306" alt="image.png"></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newString2 = str1.<span class="title function_">concat</span>(str2).<span class="title function_">concat</span>(str3)</span><br><span class="line"><span class="keyword">var</span> newString3 = str1.<span class="title function_">concat</span>(str2, str3, <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>方法七：删除首尾空格</strong><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683526051222-0ed3c7f3-9e7c-4183-8dbe-a2934749f345.png#averageHue=%23f1f1f1&clientId=u51f04a48-5b78-4&from=paste&height=30&id=ucbcd8e5c&originHeight=38&originWidth=291&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=4266&status=done&style=none&taskId=u054f85a8-f5a8-4b9e-ab3d-e0414ef0c24&title=&width=230.4950407993188" alt="image.png"></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;    why      abc   &quot;</span>.<span class="title function_">trim</span>())</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>方法九：字符串分割</strong><ul>
<li>separator：以什么字符串进行分割，也可以是一个正则表达式；</li>
<li>limit：限制返回片段的数量<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683526137915-3cc0f973-33c3-4875-b1d4-5573c7a88bdd.png#averageHue=%23476d79&clientId=u51f04a48-5b78-4&from=paste&height=81&id=u2812d511&originHeight=102&originWidth=1065&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=47547&status=done&style=none&taskId=u5902abd8-3c87-4147-a107-f1d8af31b6e&title=&width=843.5643245748265" alt="image.png"></li>
</ul>
</li>
<li>更多的字符串的补充内容，可以查看MDN的文档：<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String</a></li>
</ul>
</li>
</ul>
<h3 id="数组的创建方式"><a href="#数组的创建方式" class="headerlink" title="数组的创建方式"></a>数组的创建方式</h3><ul>
<li>创建一个数组有两种语法：</li>
<li><strong>1.创建数组的方式</strong></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&quot;why&quot;</span>, <span class="string">&quot;kobe&quot;</span>, <span class="string">&quot;james&quot;</span>, <span class="string">&quot;curry&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> product1 = &#123; <span class="attr">name</span>: <span class="string">&quot;苹果&quot;</span>, <span class="attr">price</span>: <span class="number">10</span> &#125;</span><br><span class="line"> <span class="keyword">var</span> products = [</span><br><span class="line">   &#123; <span class="attr">name</span>: <span class="string">&quot;鼠标&quot;</span>, <span class="attr">price</span>: <span class="number">98</span> &#125;,</span><br><span class="line">   &#123; <span class="attr">name</span>: <span class="string">&quot;键盘&quot;</span>, <span class="attr">price</span>: <span class="number">100</span> &#125;,</span><br><span class="line">   &#123; <span class="attr">name</span>: <span class="string">&quot;西瓜&quot;</span>, <span class="attr">price</span>: <span class="number">20</span> &#125;,</span><br><span class="line">   product1</span><br><span class="line"> ]</span><br></pre></td></tr></table></figure>

<ul>
<li>创建方式二: 类Array</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">var</span> arr1 = <span class="keyword">new</span> <span class="title class_">Array</span>()</span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>) <span class="comment">// [&quot;abc&quot;, &quot;cba&quot;, &quot;nba&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1, arr2)</span><br></pre></td></tr></table></figure>

<ul>
<li>传入了一个数字, 它默认会当成我们要创建一个对应长度的数组</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr3 = <span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">5</span>) <span class="comment">// [empty*5]</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(arr3, arr3[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<ul>
<li>通过索引访问元素</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names[<span class="number">0</span>]) <span class="comment">// 第一个元素</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names[names.<span class="property">length</span>-<span class="number">1</span>]) <span class="comment">// 最后一个元素</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683526405555-3988dcd9-8ffa-465d-b7fc-8674f534fd75.png#averageHue=%23fdfcfc&clientId=u51f04a48-5b78-4&from=paste&height=76&id=u458df38d&originHeight=96&originWidth=483&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=4603&status=done&style=none&taskId=u64fd6ac2-3cf9-4be3-aeb0-fa62bdda2fe&title=&width=382.57424297618894" alt="image.png"></p>
<h3 id="数组的基本操作"><a href="#数组的基本操作" class="headerlink" title="数组的基本操作"></a>数组的基本操作</h3><ul>
<li>访问数组中的元素：<ul>
<li>通过中括号[]访问</li>
<li>arr.at(i)：<ul>
<li>如果 i &gt;&#x3D; 0，则与 arr[i] 完全相同。</li>
<li>对于 i 为负数的情况，它则从数组的尾部向前数。</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>]</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 1.访问数组中的元素</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(names[<span class="number">0</span>])</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(names.<span class="title function_">at</span>(<span class="number">0</span>))</span><br><span class="line"> </span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(names[-<span class="number">1</span>])</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(names.<span class="title function_">at</span>(-<span class="number">1</span>))</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683529312682-41c8801b-d93d-4725-a612-446ad4833b87.png#averageHue=%23fdfdfc&clientId=u51f04a48-5b78-4&from=paste&height=83&id=u99ec48b0&originHeight=105&originWidth=360&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=2093&status=done&style=none&taskId=ua72eb81d-e205-47fc-919b-1a5bbfaeefc&title=&width=285.1485040816315" alt="image.png"></p>
<ul>
<li>修改数组中的元素</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">names[<span class="number">0</span>] = <span class="string">&quot;why&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>删除和添加元素虽然也可以通过索引来直接操作，但是开发中很少这样操作。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3.新增数组中的元素(了解)</span></span><br><span class="line">names[<span class="number">3</span>] = <span class="string">&quot;kobe&quot;</span></span><br><span class="line">names[<span class="number">10</span>] = <span class="string">&quot;james&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.删除数组中的元素(了解)</span></span><br><span class="line"><span class="keyword">delete</span> names[<span class="number">1</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683529392447-afdbdff8-21e8-499f-9142-b99a2103620b.png#averageHue=%23fcfcfb&clientId=u51f04a48-5b78-4&from=paste&height=66&id=uee53e5df&originHeight=83&originWidth=568&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=6854&status=done&style=none&taskId=u45c8d3c5-63f1-4fb8-89ba-d7bc4294691&title=&width=449.90097310657416" alt="image.png"></p>
<h3 id="数组的添加、删除方法"><a href="#数组的添加、删除方法" class="headerlink" title="数组的添加、删除方法"></a>数组的添加、删除方法</h3><ul>
<li><strong>在数组的尾端添加或删除元素：</strong><ul>
<li>push 在末端添加元素.</li>
<li>pop 从末端取出一个元素.</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">push</span>(<span class="string">&quot;why&quot;</span>, <span class="string">&quot;kobe&quot;</span>)</span><br><span class="line">arr.<span class="title function_">pop</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>在数组的首端添加或删除元素</strong><ul>
<li>shift 取出队列首端的一个元素，整个数组元素向前前移动；</li>
<li>unshift 在首端添加元素，整个其他数组元素向后移动；</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.<span class="title function_">unshift</span>(<span class="string">&quot;why&quot;</span>, <span class="string">&quot;kobe&quot;</span>)</span><br><span class="line">arr.<span class="title function_">shift</span>()</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>push&#x2F;pop 方法运行的比较快，而 shift&#x2F;unshift 比较慢。</strong></li>
</ul>
<h3 id="数组的添加、删除方法（二）"><a href="#数组的添加、删除方法（二）" class="headerlink" title="数组的添加、删除方法（二）"></a>数组的添加、删除方法（二）</h3><ul>
<li>如果我们希望在中间某个位置添加或者删除元素应该如何操作呢？</li>
<li><strong>arr.splice 方法可以说是处理数组的利器，它可以做所有事情：添加，删除和替换元素。</strong></li>
<li>arr.splice的语法结构如下：<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683529646868-5a5f59a8-453c-4fd3-b892-1f3de2e16810.png#averageHue=%23ebebeb&clientId=u51f04a48-5b78-4&from=paste&height=39&id=u9f7fd56e&originHeight=49&originWidth=1042&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=21729&status=done&style=none&taskId=u75c3eafb-727b-4350-9e06-3aa5b713c40&title=&width=825.3465034807223" alt="image.png"><ul>
<li>从start位置开始，处理数组中的元素；</li>
<li>deleteCount：要删除元素的个数，如果为0或者负数表示不删除；</li>
<li>item1, item2, …：在添加元素时，需要添加的元素；</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 3. 在任意位置添加/删除/替换元素</span></span><br><span class="line">    <span class="keyword">var</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>, <span class="string">&quot;mba&quot;</span>, <span class="string">&quot;abcd&quot;</span>]</span><br><span class="line">    <span class="comment">// 参数一: start, 从什么位置开始操作元素</span></span><br><span class="line">    <span class="comment">// 参数二: deleteCount, 删除元素的个数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.1.删除元素</span></span><br><span class="line">    names.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(names)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.2.新增元素</span></span><br><span class="line">    <span class="comment">// deleteCount: 0, 后面可以添加新的元素</span></span><br><span class="line">    names.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="string">&quot;why&quot;</span>, <span class="string">&quot;kobe&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(names)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.3.替换元素</span></span><br><span class="line">    names.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">2</span>, <span class="string">&quot;why&quot;</span>, <span class="string">&quot;kobe&quot;</span>, <span class="string">&quot;james&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(names)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683529768838-95c2808e-3cef-44a6-b9ea-4344f6294801.png#averageHue=%23fdfcfc&clientId=u51f04a48-5b78-4&from=paste&height=61&id=u73c0500f&originHeight=77&originWidth=604&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=7762&status=done&style=none&taskId=u92e42c6d-921c-42c3-8433-087a02075d1&title=&width=478.41582351473727" alt="image.png"></p>
<ul>
<li>**注意：这个方法会修改原数组  **</li>
</ul>
<h3 id="length属性"><a href="#length属性" class="headerlink" title="length属性"></a>length属性</h3><ul>
<li><strong>length属性用于获取数组的长度：</strong><ul>
<li>当我们修改数组的时候，length 属性会自动更新。</li>
</ul>
</li>
<li><strong>length 属性的另一个有意思的点是它是可写的</strong><ul>
<li>如果我们手动增加一个大于默认length的数值，那么会增加数组的长度。</li>
<li>但是如果我们减少它，数组就会被截断。<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683529914771-50abe070-8a4b-42b6-a2ee-ae9baf9f07e3.png#averageHue=%23c8ab83&clientId=u51f04a48-5b78-4&from=paste&height=170&id=u7f75ccb6&originHeight=214&originWidth=1174&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=54974&status=done&style=none&taskId=ue090d746-4029-4284-90ea-06cf4b14953&title=&width=929.9009549773205" alt="image.png"></li>
</ul>
</li>
<li>**所以，清空数组最简单的方法就是：arr.length &#x3D; 0;。  **</li>
</ul>
<h3 id="数组的遍历"><a href="#数组的遍历" class="headerlink" title="数组的遍历"></a>数组的遍历</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.数组的遍历</span></span><br><span class="line"> <span class="keyword">var</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>, <span class="string">&quot;mba&quot;</span>]</span><br><span class="line"> </span><br><span class="line"> <span class="comment">// 2.1. 普通的for循环</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; names.<span class="property">length</span>; i++) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(names[i])</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 2.2. for..in</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> index <span class="keyword">in</span> names) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(index, names[index])</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 2.3. for..of</span></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">var</span> item <span class="keyword">of</span> names) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683530084465-f4c71125-070c-4f7d-bb14-329671930229.png#averageHue=%23fdfcfc&clientId=u51f04a48-5b78-4&from=paste&height=231&id=ub9657397&originHeight=292&originWidth=291&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=3613&status=done&style=none&taskId=ue249f546-e941-4a4a-9f96-f3ad4116157&title=&width=230.4950407993188" alt="image.png"></p>
<h3 id="数组方法-–-slice、cancat、-join"><a href="#数组方法-–-slice、cancat、-join" class="headerlink" title="数组方法 – slice、cancat、 join"></a>数组方法 – slice、cancat、 join</h3><ul>
<li><strong>arr.slice 方法：用于对数组进行截取（类似于字符串的slice方法）。</strong><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683530158515-fb1a45b2-7784-4b71-96bb-8f42b598178a.png#averageHue=%23ebebeb&clientId=u51f04a48-5b78-4&from=paste&height=29&id=uffe798cb&originHeight=44&originWidth=601&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=11566&status=done&style=none&taskId=u144113ec-43c9-4859-a516-4e0419830a3&title=&width=396.037109375" alt="image.png"><ul>
<li>包含bigin元素，但是不包含end元素；</li>
<li><strong>slice方法: 不会修改原数组.与splice有区别: splice修改原有的数组</strong></li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>, <span class="string">&quot;mba&quot;</span>, <span class="string">&quot;why&quot;</span>, <span class="string">&quot;kobe&quot;</span>]</span><br><span class="line"><span class="keyword">var</span> newNames = names.<span class="title function_">slice</span>(<span class="number">2</span>, <span class="number">4</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newNames)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683530296113-9ec10156-c673-401a-a651-04bf426c774e.png#averageHue=%23fefefd&clientId=u51f04a48-5b78-4&from=paste&height=86&id=u11203c44&originHeight=109&originWidth=784&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=6188&status=done&style=none&taskId=ub8674bf7-9f28-4c00-97a2-f0b6d342f9f&title=&width=620.9900755555531" alt="image.png"></p>
<ul>
<li><strong>arr.concat方法：创建一个新数组，其中包含来自于其他数组和其他项的值。</strong><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683530317812-c097505a-7812-4d33-9b59-591c2531b8b4.png#averageHue=%23edecec&clientId=u51f04a48-5b78-4&from=paste&height=40&id=u8648082f&originHeight=50&originWidth=987&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=18682&status=done&style=none&taskId=u3bb1f051-c189-43b4-823a-fcf413181b6&title=&width=781.782148690473" alt="image.png"><ul>
<li>concat方法: 将多个数组拼接在一起</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names1 = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>]</span><br><span class="line"><span class="keyword">var</span> names2 = [<span class="string">&quot;nba&quot;</span>, <span class="string">&quot;mba&quot;</span>]</span><br><span class="line"><span class="keyword">var</span> names3 = [<span class="string">&quot;why&quot;</span>, <span class="string">&quot;kobe&quot;</span>]</span><br><span class="line"><span class="keyword">var</span> newNames2 = names1.<span class="title function_">concat</span>(names2, names3)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newNames2)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683530380967-1ed8ccc3-8086-4c60-8e01-4e86af8be722.png#averageHue=%23f6f5f5&clientId=u51f04a48-5b78-4&from=paste&height=47&id=u5404f83a&originHeight=59&originWidth=606&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=3505&status=done&style=none&taskId=u026a5cb1-ad57-4ff4-8ab5-be86a60406b&title=&width=479.99998187074635" alt="image.png"></p>
<ul>
<li>**arr.join方法： 将一个数组的所有元素连接成一个字符串并返回这个字符串。 **<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683530408172-6a2d48c6-17d6-4afe-af25-52a1502622f4.png#averageHue=%23f6f5f5&clientId=u51f04a48-5b78-4&from=paste&height=63&id=u4870aa04&originHeight=80&originWidth=656&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=11019&status=done&style=none&taskId=u5bd1d2ec-4efd-44ae-bc31-cd541a62635&title=&width=519.6039407709729" alt="image.png"></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>, <span class="string">&quot;mba&quot;</span>, <span class="string">&quot;why&quot;</span>, <span class="string">&quot;kobe&quot;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names.<span class="title function_">join</span>(<span class="string">&quot;-&quot;</span>))</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683530434738-7b08c775-7f9a-48a0-a876-4f3157b21dd1.png#averageHue=%23fcfcfb&clientId=u51f04a48-5b78-4&from=paste&height=39&id=u001a37ec&originHeight=49&originWidth=548&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=1951&status=done&style=none&taskId=ub687fb72-a841-4fe2-a936-6cdc5e25772&title=&width=434.0593895464835" alt="image.png"></p>
<h3 id="数组方法-–-查找元素"><a href="#数组方法-–-查找元素" class="headerlink" title="数组方法 – 查找元素"></a>数组方法 – 查找元素</h3><ul>
<li><strong>arr.indexOf方法： 查找某个元素的索引</strong><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683530525897-30e657cc-a21d-4d25-b80c-dea0a925cc44.png#averageHue=%23ebebeb&clientId=u51f04a48-5b78-4&from=paste&height=37&id=u8f5750da&originHeight=56&originWidth=796&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=19230&status=done&style=none&taskId=u1c7aaaf5-78b2-4515-b7ea-21b77df6889&title=&width=530.4949951171875" alt="image.png"><ul>
<li>从fromIndex开始查找，如果找到返回对应的索引，没有找到返回-1；</li>
<li>也有对应的从最后位置开始查找的 lastIndexOf 方法</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>, <span class="string">&quot;mba&quot;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(names.<span class="title function_">indexOf</span>(<span class="string">&quot;nbb&quot;</span>))<span class="comment">//-1</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>arr.includes方法：判断数组是否包含某个元素</strong><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683530553857-fb7b4177-295a-4de0-a27f-c8a6e1691b84.png#averageHue=%23eeeeee&clientId=u51f04a48-5b78-4&from=paste&height=30&id=uf940bb5f&originHeight=44&originWidth=929&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=16691&status=done&style=none&taskId=ud29116e5-f359-4b20-a152-fb787a08361&title=&width=628.3984375" alt="image.png"><ul>
<li>从索引 from 开始搜索 item，如果找到则返回 true（如果没找到，则返回 false）。</li>
</ul>
</li>
<li>**find 和 findIndex 直接查找元素或者元素的索引（ES6之后新增的语法）  **</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> students = [</span><br><span class="line">   &#123; <span class="attr">id</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">   &#123; <span class="attr">id</span>: <span class="number">101</span>, <span class="attr">name</span>: <span class="string">&quot;kobe&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">   &#123; <span class="attr">id</span>: <span class="number">102</span>, <span class="attr">name</span>: <span class="string">&quot;james&quot;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">   &#123; <span class="attr">id</span>: <span class="number">103</span>, <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;</span><br><span class="line"> ]</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> stu = students.<span class="title function_">find</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">   <span class="keyword">if</span> (item.<span class="property">id</span> === <span class="number">101</span>) <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(stu)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683530725414-1d39148b-cbd5-4fa7-925b-cdd9594b8b52.png#averageHue=%23fefefd&clientId=u51f04a48-5b78-4&from=paste&height=91&id=ua35ecf62&originHeight=115&originWidth=560&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=5690&status=done&style=none&taskId=u8796edad-82b1-496a-9000-e4e4cb502db&title=&width=443.5643396825379" alt="image.png"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>]</span><br><span class="line">  <span class="keyword">var</span> findIndex = names.<span class="title function_">findIndex</span>(<span class="keyword">function</span>(<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> item === <span class="string">&quot;nba&quot;</span></span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(findIndex)<span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<h3 id="数组的排序-–-sort-reverse"><a href="#数组的排序-–-sort-reverse" class="headerlink" title="数组的排序 – sort&#x2F;reverse"></a>数组的排序 – sort&#x2F;reverse</h3><ul>
<li><strong>sort方法也是一个高阶函数，用于对数组进行排序，并且生成一个排序后的新数组：</strong><ul>
<li>如果 compareFunction(a, b) 小于 0 ，那么 a 会被排列到 b 前面；</li>
<li>如果 compareFunction(a, b) 等于 0 ， a 和 b 的相对位置不变；</li>
<li>如果 compareFunction(a, b) 大于 0 ， b 会被排列到 a 前面；</li>
<li>也就是说，谁小谁排在前面；</li>
</ul>
</li>
<li>**reverse() 方法将数组中元素的位置颠倒，并返回该数组。 **</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">20</span>, <span class="number">4</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">100</span>, <span class="number">88</span>]</span><br><span class="line"> nums.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">item1, item2</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> item1 - item2</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(nums)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(nums.<span class="title function_">reverse</span>())</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683532483943-840bb206-09a3-42e5-b88a-b96b438d7875.png#averageHue=%23fdfcfc&clientId=u51f04a48-5b78-4&from=paste&height=51&id=u075ab7ec&originHeight=65&originWidth=597&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=5265&status=done&style=none&taskId=uecfa1436-d5c2-4194-bb18-9f086e435b2&title=&width=472.8712692687056" alt="image.png"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> students = [</span><br><span class="line">   &#123; <span class="attr">id</span>: <span class="number">100</span>, <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">   &#123; <span class="attr">id</span>: <span class="number">101</span>, <span class="attr">name</span>: <span class="string">&quot;kobe&quot;</span>, <span class="attr">age</span>: <span class="number">30</span> &#125;,</span><br><span class="line">   &#123; <span class="attr">id</span>: <span class="number">102</span>, <span class="attr">name</span>: <span class="string">&quot;james&quot;</span>, <span class="attr">age</span>: <span class="number">25</span> &#125;,</span><br><span class="line">   &#123; <span class="attr">id</span>: <span class="number">103</span>, <span class="attr">name</span>: <span class="string">&quot;curry&quot;</span>, <span class="attr">age</span>: <span class="number">22</span> &#125;</span><br><span class="line"> ]</span><br><span class="line"></span><br><span class="line"> students.<span class="title function_">sort</span>(<span class="keyword">function</span> (<span class="params">item1, item2</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> item1.<span class="property">age</span> - item2.<span class="property">age</span></span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(students)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683532535499-25687be2-16ac-4b00-b214-039e7537727b.png#averageHue=%23fefdfd&clientId=u51f04a48-5b78-4&from=paste&height=126&id=ucbfeabfd&originHeight=159&originWidth=692&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=15596&status=done&style=none&taskId=u0df3e3ef-f79c-46b2-aba4-568dbb68c4c&title=&width=548.1187911791361" alt="image.png"></p>
<h3 id="数组的其他高阶方法"><a href="#数组的其他高阶方法" class="headerlink" title="数组的其他高阶方法"></a>数组的其他高阶方法</h3><ul>
<li>arr.forEach<ul>
<li>遍历数组，并且让数组中每一个元素都执行一次对应的方法；</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>, <span class="string">&quot;mba&quot;</span>]</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 三种方式, 新增一种方式</span></span><br><span class="line">  names.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(item, <span class="variable language_">this</span>)</span><br><span class="line">  &#125;, &#123; <span class="attr">name</span>: <span class="string">&quot;why&quot;</span> &#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683533676180-7c8ffa14-92c7-45ba-a0b9-6ac0af87e670.png#averageHue=%23fdfdfc&clientId=u51f04a48-5b78-4&from=paste&height=217&id=u763fb3c8&originHeight=274&originWidth=526&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=16450&status=done&style=none&taskId=u396cc499-f842-4735-b4ea-8e83f3417d3&title=&width=416.6336476303838" alt="image.png"></p>
<ul>
<li>arr.map<ul>
<li>map() 方法创建一个新数组；</li>
<li>这个新数组由原数组中的每个元素都调用一次提供的函数后的返回值组成；</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">11</span>, <span class="number">20</span>, <span class="number">55</span>, <span class="number">100</span>, <span class="number">88</span>, <span class="number">32</span>]</span><br><span class="line"><span class="keyword">var</span> newNums = nums.<span class="title function_">map</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> item * item</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(newNums)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683533797148-02c72bb1-850a-4354-bd46-e9390fa35be3.png#averageHue=%23fefefe&clientId=u51f04a48-5b78-4&from=paste&height=60&id=u0a6d187e&originHeight=76&originWidth=609&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=3680&status=done&style=none&taskId=ucaa9ccc1-1abd-4c26-bd3f-6b2c0cf79f0&title=&width=482.3762194047599" alt="image.png"></p>
<ul>
<li>arr.filter<ul>
<li>filter() 方法创建一个新数组</li>
<li>新数组中只包含每个元素调用函数返回为true的元素；</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">11</span>, <span class="number">20</span>, <span class="number">55</span>, <span class="number">100</span>, <span class="number">88</span>, <span class="number">32</span>]</span><br><span class="line"> <span class="keyword">var</span> newNums = nums.<span class="title function_">filter</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> item % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(newNums)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683533733735-d9ea7841-5245-43e3-9f93-96a0d72a9b54.png#averageHue=%23fdfdfd&clientId=u51f04a48-5b78-4&from=paste&height=26&id=uc9adb840&originHeight=33&originWidth=503&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=2453&status=done&style=none&taskId=u72b95c2a-676d-464c-85cd-4e08af8afe1&title=&width=398.41582653627955" alt="image.png"></p>
<ul>
<li>arr.reduce<ul>
<li>用于计算数组中所有元素的总和；</li>
<li>对数组中的每个元素按序执行一个由您提供的 reducer 函数；</li>
<li>每一次运行 reducer 会将先前元素的计算结果作为参数传入，最后将其结果汇总为单个返回值；</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">11</span>, <span class="number">20</span>, <span class="number">55</span>, <span class="number">100</span>, <span class="number">88</span>, <span class="number">32</span>]</span><br><span class="line"><span class="keyword">var</span> result = nums.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">preValue, item</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`preValue:<span class="subst">$&#123;preValue&#125;</span> item:<span class="subst">$&#123;item&#125;</span>`</span>)</span><br><span class="line">  <span class="keyword">return</span> preValue + item</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683533929304-76d3968d-3cbc-4a67-a0db-93ce3212219d.png#averageHue=%23fbfaf9&clientId=u51f04a48-5b78-4&from=paste&height=150&id=u21781cc7&originHeight=189&originWidth=469&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=8946&status=done&style=none&taskId=u850f5df5-3aca-4707-a00e-5e92c41fd06&title=&width=371.48513448412547" alt="image.png"><br>**如果initialValue没有传,**preValue为第一个值，item为第二个值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums = [<span class="number">11</span>, <span class="number">20</span>, <span class="number">55</span>, <span class="number">100</span>, <span class="number">88</span>, <span class="number">32</span>]</span><br><span class="line">   <span class="keyword">var</span> result = nums.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">preValue, item</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`preValue:<span class="subst">$&#123;preValue&#125;</span> item:<span class="subst">$&#123;item&#125;</span>`</span>)</span><br><span class="line">     <span class="keyword">return</span> preValue + item</span><br><span class="line">   &#125;)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683533968283-14bfad66-1b82-4206-8f4f-7186b09f8c9d.png#averageHue=%23fbfafa&clientId=u51f04a48-5b78-4&from=paste&height=115&id=u862ad5bc&originHeight=145&originWidth=540&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=7752&status=done&style=none&taskId=u36a09fc6-5c5b-4243-aad2-73a56ed4556&title=&width=427.72275612244727" alt="image.png"></p>
<h3 id="创建Date对象"><a href="#创建Date对象" class="headerlink" title="创建Date对象"></a>创建Date对象</h3><ul>
<li>在JavaScript中我们使用Date来表示和处理时间<ul>
<li>Date的构造函数有如下用法：  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683536264125-d66d209c-893a-4ad1-b110-e54b758eafbb.png#averageHue=%23f1f0f0&clientId=u51f04a48-5b78-4&from=paste&height=205&id=ua14484f7&originHeight=259&originWidth=1266&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=62289&status=done&style=none&taskId=ubfc779dd-d574-40f2-a95e-ae12225d588&title=&width=1002.7722393537374" alt="image.png"></li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.没有传入任何的参数, 获取到当前时间</span></span><br><span class="line"> <span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(date1)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 2.传入参数: 时间字符串</span></span><br><span class="line"> <span class="keyword">var</span> date2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;2023-05-08&quot;</span>)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(date2)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 3.传入具体的年月日时分秒毫秒</span></span><br><span class="line"> <span class="keyword">var</span> date3 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2033</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">09</span>, <span class="number">08</span>, <span class="number">07</span>, <span class="number">333</span>)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(date3)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 4.传入一个Unix时间戳</span></span><br><span class="line"> <span class="comment">// 1s -&gt; 1000ms</span></span><br><span class="line"> <span class="keyword">var</span> date4 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">10004343433</span>)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(date4)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683536382667-1c5a942d-b116-4489-a581-05cbfb757ad2.png#averageHue=%23f6f4f3&clientId=u51f04a48-5b78-4&from=paste&height=97&id=u4502116d&originHeight=122&originWidth=609&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=11067&status=done&style=none&taskId=ub3b1bf8d-bdf8-4086-af97-0313ac2bdbf&title=&width=482.3762194047599" alt="image.png"></p>
<h3 id="dateString时间的表示方式"><a href="#dateString时间的表示方式" class="headerlink" title="dateString时间的表示方式"></a>dateString时间的表示方式</h3><ul>
<li>日期的表示方式有两种：RFC 2822 标准 或者 ISO 8601 标准。</li>
<li>默认打印的时间格式是RFC 2822标准的：<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683536431639-358c884e-68ef-4753-8aae-08463a79ef6a.png#averageHue=%23fcfbf9&clientId=u51f04a48-5b78-4&from=paste&height=62&id=uae16d7a7&originHeight=78&originWidth=622&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=20124&status=done&style=none&taskId=uec090317-38d0-4b66-a288-d9947be3bef&title=&width=492.67324871881885" alt="image.png"></li>
<li>我们也可以将其转化成ISO 8601标准的：  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683536436619-b960c23e-58e9-4f41-bb59-71037bb01cb8.png#averageHue=%23fdfbfa&clientId=u51f04a48-5b78-4&from=paste&height=72&id=u35c27540&originHeight=91&originWidth=806&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=21999&status=done&style=none&taskId=ueb1d9b26-c3af-4152-91aa-c4f9d6af3c6&title=&width=638.4158174716528" alt="image.png"></li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683536458446-5ae71d25-e5f3-4ffa-8c15-d773edceaf4e.png#averageHue=%23fbf8f7&clientId=u51f04a48-5b78-4&from=paste&height=260&id=ua0c6983e&originHeight=436&originWidth=524&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=53429&status=done&style=none&taskId=u568e4f48-256e-4044-b013-695011ae56f&title=&width=312.0494689941406" alt="image.png"></p>
<h3 id="Date获取信息的方法"><a href="#Date获取信息的方法" class="headerlink" title="Date获取信息的方法"></a>Date获取信息的方法</h3><ul>
<li>我们可以从Date对象中获取各种详细的信息：<ul>
<li>getFullYear()：获取年份（4 位数）；</li>
<li>getMonth()：获取月份，从 0 到 11</li>
<li>getDate()：获取当月的具体日期，从 1 到 31（方法名字有点迷）；</li>
<li>getHours()：获取小时；</li>
<li>getMinutes()：获取分钟；</li>
<li>getSeconds()：获取秒钟；</li>
<li>getMilliseconds()：获取毫秒；</li>
</ul>
</li>
<li>获取某周中的星期几：<ul>
<li>getDay()：获取一周中的第几天，从 0（星期日）到 6（星期六）；</li>
</ul>
</li>
</ul>
<h3 id="Date获取Unix时间戳"><a href="#Date获取Unix时间戳" class="headerlink" title="Date获取Unix时间戳"></a>Date获取Unix时间戳</h3><ul>
<li>Unix 时间戳：它是一个整数值，表示自1970年1月1日00:00:00 UTC以来的毫秒数</li>
<li>在JavaScript中，我们有多种方法可以获取这个时间戳：<ul>
<li>方式一：new Date().getTime()</li>
<li>方式二：new Date().valueOf()</li>
<li>方式三：+new Date()</li>
<li>方式四：Date.now()</li>
</ul>
</li>
<li>获取到Unix时间戳之后，我们可以利用它来测试代码的性能：  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683536863487-45f0a003-cffe-4da5-898a-439438ca5034.png#averageHue=%23596753&clientId=u51f04a48-5b78-4&from=paste&height=147&id=uf652b9a6&originHeight=256&originWidth=1060&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=63852&status=done&style=none&taskId=ub4bf278f-0980-46e8-bfcc-77b236a13fd&title=&width=608.4108276367188" alt="image.png"></li>
</ul>
<h3 id="Date-parse方法"><a href="#Date-parse方法" class="headerlink" title="Date.parse方法"></a>Date.parse方法</h3><ul>
<li><strong>Date.parse(str) 方法可以从一个字符串中读取日期，并且输出对应的Unix时间戳</strong></li>
<li><strong>Date.parse(str) ：</strong><ul>
<li>作用等同于 new Date(dateString).getTime() 操作；</li>
<li>需要符合 RFC2822 或 ISO 8601 日期格式的字符串；<ul>
<li>比如YYYY-MM-DDTHH:mm:ss.sssZ</li>
</ul>
</li>
<li>其他格式也许也支持，但结果不能保证一定正常</li>
<li>如果输入的格式不能被解析，那么会返回NaN；</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>JS基础</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS高级-ES13新特性1</title>
    <url>/2024/08/28/JS%E9%AB%98%E7%BA%A7-ES13%E6%96%B0%E7%89%B9%E6%80%A71/</url>
    <content><![CDATA[<h3 id="let-const基本使用"><a href="#let-const基本使用" class="headerlink" title="let&#x2F;const基本使用"></a><strong>let&#x2F;const基本使用</strong></h3><ul>
<li>let关键字：<ul>
<li>从直观的角度来说，let和var是没有太大的区别的，都是用于声明一个变量；</li>
</ul>
</li>
<li>const关键字：<ul>
<li>const关键字是constant的单词的缩写，表示常量、衡量的意思</li>
<li>它表示保存的数据一旦被赋值，就不能被修改；</li>
<li>但是<strong>如果赋值的是引用类型，那么可以通过引用找到对应的对象，修改对象</strong>的内容；</li>
</ul>
</li>
<li>注意：<ul>
<li>另外let、const不允许重复声明变量；</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6开始</span></span><br><span class="line">    <span class="comment">// 1.let</span></span><br><span class="line">    <span class="keyword">let</span> message2 = <span class="string">&quot;你好, 世界&quot;</span></span><br><span class="line">    message2 = <span class="string">&quot;你好, why&quot;</span></span><br><span class="line">    message2 = <span class="number">123</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(message2)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.const</span></span><br><span class="line">    <span class="comment">// const message3 = &quot;nihao, shijie&quot;</span></span><br><span class="line">    <span class="comment">// message3 = &quot;nihao, why&quot; //报错</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 赋值引用类型</span></span><br><span class="line">    <span class="keyword">const</span> info = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// info = &#123;&#125; // 报错</span></span><br><span class="line">    info.<span class="property">name</span> = <span class="string">&quot;kobe&quot;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(info)</span><br></pre></td></tr></table></figure>

<h3 id="let-const的块级作用域"><a href="#let-const的块级作用域" class="headerlink" title="let&#x2F;const的块级作用域"></a>let&#x2F;const的块级作用域</h3><ul>
<li>在ES6中新增了块级作用域，并且通过let、const、function、class声明的标识符是具备块级作用域的限制的：<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684918582395-6e143670-d049-4d27-92f2-b3ffd577bcde.png#averageHue=%23292d36&clientId=u048d03ca-1ce9-4&from=paste&height=239&id=udd4bccea&originHeight=392&originWidth=894&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=137017&status=done&style=none&taskId=u5bfbda5e-7fcf-4a0c-aea2-c7f1817be1e&title=&width=545.1187744140625" alt="image.png"></li>
<li>但是我们会发现函数拥有块级作用域，但是外面依然是可以访问的：<ul>
<li>这是因为引擎会对函数的声明进行特殊的处理，允许像var那样进行提升；</li>
</ul>
</li>
</ul>
<h3 id="块级作用域的应用"><a href="#块级作用域的应用" class="headerlink" title="块级作用域的应用"></a>块级作用域的应用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 监听按钮的点击</span></span><br><span class="line">    <span class="keyword">const</span> btnEls = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;button&quot;</span>)</span><br><span class="line">    <span class="comment">// [btn1, btn2, btn3, btn4]</span></span><br><span class="line">    <span class="comment">// for (var i = 0; i &lt; btnEls.length; i++) &#123;</span></span><br><span class="line">    <span class="comment">//   var btnEl = btnEls[i];</span></span><br><span class="line">    <span class="comment">//   // btnEl.index = i</span></span><br><span class="line">    <span class="comment">//   (function(m) &#123;</span></span><br><span class="line">    <span class="comment">//     btnEl.onclick = function() &#123;</span></span><br><span class="line">    <span class="comment">//       debugger</span></span><br><span class="line">    <span class="comment">//       console.log(`点击了$&#123;m&#125;按钮`)</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//   &#125;)(i)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; btnEls.<span class="property">length</span>; i++) &#123;</span><br><span class="line">      <span class="keyword">const</span> btnEl = btnEls[i];</span><br><span class="line">      btnEl.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`点击了<span class="subst">$&#123;i&#125;</span>按钮`</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>对于let、const：<ul>
<li>对于let和const来说，是目前开发中推荐使用的；</li>
<li>我们会优先推荐使用const，这样可以保证数据的安全性不会被随意的篡改；</li>
<li>只有当我们明确知道一个变量后续会需要被重新赋值时，这个时候再使用let；</li>
<li>这种在很多其他语言里面也都是一种约定俗成的规范，尽量我们也遵守这种规范；</li>
</ul>
</li>
</ul>
<h3 id="字符串模板基本使用"><a href="#字符串模板基本使用" class="headerlink" title="字符串模板基本使用"></a>字符串模板基本使用</h3><ul>
<li><p>在ES6之前，如果我们想要将字符串和一些动态的变量（标识符）拼接到一起，是非常麻烦和丑陋的</p>
</li>
<li><p>ES6允许我们使用字符串模板来嵌入JS的变量或者表达式来进行拼接：</p>
<ul>
<li>首先，我们会使用** &#96;&#96; <strong>符号来编写字符串，称之为</strong>模板字符串**；<ul>
<li>其次，在模板字符串中，我们可以通过 **${expression} **来嵌入动态的内容；</li>
</ul>
</li>
</ul>
</li>
<li><p>模板字符串还有另外一种用法：<strong>标签模板字符串</strong></p>
</li>
<li><p>如果我们使用标签模板字符串，并且在调用的时候插入其他的变量：</p>
<ul>
<li>模板字符串被拆分了</li>
<li>第一个元素是数组，是被模块字符串拆分的字符串组合；</li>
<li>后面的元素是一个个模块字符串传入的内容；</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;why&quot;</span></span><br><span class="line"> <span class="keyword">const</span> age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 1.基本用法</span></span><br><span class="line"> <span class="keyword">const</span> info = <span class="string">`my name is <span class="subst">$&#123;name&#125;</span>, age is <span class="subst">$&#123;age&#125;</span>`</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(info)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 2.标签模板字符串的用法</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;参数:&quot;</span>, args)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// foo(&quot;why&quot;, 18, 1.88)</span></span><br><span class="line"> foo<span class="string">`my name is <span class="subst">$&#123;name&#125;</span>, age is <span class="subst">$&#123;age&#125;</span>, height is <span class="subst">$&#123;<span class="number">1.88</span>&#125;</span>`</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684918931347-3d0e3d51-991d-4c01-a188-c0cee7df2f8b.png#averageHue=%23fdfdfc&clientId=u048d03ca-1ce9-4&from=paste&height=147&id=u6966a381&originHeight=186&originWidth=739&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=12985&status=done&style=none&taskId=u2fc9919e-3d4d-49b7-8d72-ac8934f0ace&title=&width=585.3465125453491" alt="image.png"></p>
<h3 id="函数默认参数用法"><a href="#函数默认参数用法" class="headerlink" title="函数默认参数用法"></a>函数默认参数用法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意: 默认参数是不会对null进行处理的</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">foo</span> (arg1 = <span class="string">&quot;我是默认值&quot;</span>, arg2 = <span class="string">&quot;我也是默认值&quot;</span>) &#123;</span><br><span class="line">   <span class="comment">// 1.两种写法不严谨</span></span><br><span class="line">   <span class="comment">// 默认值写法一:</span></span><br><span class="line">   <span class="comment">// arg1 = arg1 ? arg1: &quot;我是默认值&quot;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 默认值写法二:</span></span><br><span class="line">   <span class="comment">// arg1 = arg1 || &quot;我是默认值&quot;</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 2.严谨的写法</span></span><br><span class="line">   <span class="comment">// 三元运算符</span></span><br><span class="line">   <span class="comment">// arg1 = (arg1 === undefined || arg1 === null) ? &quot;我是默认值&quot;: arg1</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// ES6之后新增语法: ??</span></span><br><span class="line">   arg1 = arg1 ?? <span class="string">&quot;我是默认值&quot;</span> <span class="comment">// 如果没有这句代码，args传入null，还是会打印null，有之后打印“我是默认值”</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 3.简便的写法: 默认参数</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(arg1)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="title function_">foo</span>(<span class="number">123</span>, <span class="number">321</span>) <span class="comment">//123</span></span><br><span class="line"> <span class="title function_">foo</span>()<span class="comment">//我是默认值</span></span><br><span class="line"> <span class="title function_">foo</span>(<span class="number">0</span>)<span class="comment">//0</span></span><br><span class="line"> <span class="title function_">foo</span>(<span class="string">&quot;&quot;</span>)<span class="comment">//</span></span><br><span class="line"> <span class="title function_">foo</span>(<span class="literal">false</span>)<span class="comment">//false</span></span><br><span class="line"> <span class="title function_">foo</span>(<span class="literal">null</span>)<span class="comment">//我是默认值</span></span><br><span class="line"> <span class="title function_">foo</span>(<span class="literal">undefined</span>)<span class="comment">//我是默认值</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684919358315-5714c4d0-8c5c-4347-b629-a599fe6012da.png#averageHue=%23f7f7f7&clientId=u048d03ca-1ce9-4&from=paste&height=129&id=u5b784ced&originHeight=163&originWidth=170&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=2685&status=done&style=none&taskId=uea0ef827-bbe0-473d-844c-c1dd38e3078&title=&width=134.65346026077043" alt="image.png"></p>
<h3 id="函数默认参数注意"><a href="#函数默认参数注意" class="headerlink" title="函数默认参数注意"></a>函数默认参数注意</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.注意一: 有默认参数的形参尽量写到后面</span></span><br><span class="line"> <span class="comment">// 2.有默认参数的形参, 是不会计算在length之内(并且后面所有的参数都不会计算在length之内)</span></span><br><span class="line"> <span class="comment">// 3.剩余参数也是放到后面(默认参数放到剩余参数的前面)</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">age, name = <span class="string">&quot;why&quot;</span>, ...args</span>) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age, args)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="title function_">foo</span>(<span class="number">18</span>, <span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>)<span class="comment">//</span></span><br><span class="line"></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">length</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684919496969-4319c247-ea13-4f1c-aed9-b0935b2f5b7c.png#averageHue=%23fdfcfc&clientId=u048d03ca-1ce9-4&from=paste&height=45&id=u306f4055&originHeight=57&originWidth=245&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=1977&status=done&style=none&taskId=u71d5eecd-888b-4746-8ed5-2a6a256a127&title=&width=194.0593986111103" alt="image.png"></p>
<h3 id="函数默认参数解构"><a href="#函数默认参数解构" class="headerlink" title="函数默认参数解构"></a>函数默认参数解构</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.函数的默认值是一个对象</span></span><br><span class="line"> <span class="comment">// function foo(obj = &#123; name: &quot;why&quot;, age: 18 &#125;) &#123;</span></span><br><span class="line"> <span class="comment">//   console.log(obj.name, obj.age)</span></span><br><span class="line"> <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">foo</span> (&#123; name, age &#125; = &#123; <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">foo</span> (&#123; name = <span class="string">&quot;why&quot;</span>, age = <span class="number">18</span> &#125; = &#123;&#125;) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure>

<h3 id="函数的剩余参数"><a href="#函数的剩余参数" class="headerlink" title="函数的剩余参数"></a>函数的剩余参数</h3><ul>
<li>ES6中引用了rest parameter，可以将不定数量的参数放入到一个数组中：<ul>
<li>如果最后一个参数是 … 为前缀的，那么它会将剩余的参数放到该参数中，并且作为一个数组；</li>
</ul>
</li>
<li>那么剩余参数和arguments有什么区别呢？<ul>
<li>剩余参数只包含那些没有对应形参的实参，而 arguments 对象包含了传给函数的所有实参；</li>
<li>arguments对象不是一个真正的数组，而rest参数是一个真正的数组，可以进行数组的所有操作；</li>
<li>arguments是早期的ECMAScript中为了方便去获取所有的参数提供的一个数据结构，而rest参数是ES6中提供并且希望以此 来替代arguments的；</li>
</ul>
</li>
<li>注意：剩余参数必须放到最后一个位置，否则会报错。</li>
</ul>
<h3 id="函数箭头函数的补充"><a href="#函数箭头函数的补充" class="headerlink" title="函数箭头函数的补充"></a>函数箭头函数的补充</h3><ul>
<li>在前面我们已经学习了箭头函数的用法，这里进行一些补充：<ul>
<li>箭头函数是没有显式原型prototype的，所以不能作为构造函数，使用new来创建对象；</li>
<li>箭头函数也不绑定this、arguments、super参数；</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.function定义的函数是有两个原型的:</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">foo</span> () &#123; &#125;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// new foo() -&gt; f.__proto__ = foo.prototype</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">__proto__</span>) <span class="comment">// -&gt; Function.prototype</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 2.箭头函数是没有显式原型</span></span><br><span class="line">   <span class="comment">// 在ES6之后, 定义一个类要使用class定义</span></span><br><span class="line">   <span class="keyword">var</span> <span class="title function_">bar</span> = (<span class="params"></span>) =&gt; &#123; &#125;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(bar.<span class="property">__proto__</span> === <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// true</span></span><br><span class="line">   <span class="comment">// 没有显式原型 </span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(bar.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">//undefined</span></span><br><span class="line">   <span class="comment">// var b = new bar() // 没有显示原型，所以用new bar()会报错</span></span><br></pre></td></tr></table></figure>

<h3 id="展开语法"><a href="#展开语法" class="headerlink" title="展开语法"></a>展开语法</h3><ul>
<li>展开语法<ul>
<li>可以在函数调用&#x2F;数组构造时，将数组表达式或者string在语法层面展开；</li>
<li>还可以在构造字面量对象时, 将对象表达式按key-value的方式展开；</li>
</ul>
</li>
<li>展开语法的场景：<ul>
<li>在函数调用时使用；</li>
<li>在数组构造时使用；</li>
<li>在构建对象字面量时，也可以使用展开运算符，这个是在ES2018（ES9）中添加的新特性；</li>
</ul>
</li>
<li>注意：展开运算符其实是一种浅拷贝；</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.基本演练</span></span><br><span class="line">   <span class="comment">// ES6</span></span><br><span class="line">   <span class="keyword">const</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>, <span class="string">&quot;mba&quot;</span>]</span><br><span class="line">   <span class="keyword">const</span> str = <span class="string">&quot;Hello&quot;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">const</span> newNames = [...names, <span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>]</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(newNames)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">foo</span> (name1, name2, ...args) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(name1, name2, args)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="title function_">foo</span>(...names)</span><br><span class="line">   <span class="title function_">foo</span>(...str)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// ES9(ES2018)</span></span><br><span class="line">   <span class="keyword">const</span> obj = &#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">     <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">// 不可以这样来使用</span></span><br><span class="line">   <span class="comment">// foo(...obj) // 在函数的调用时, 用展开运算符, 将对应的展开数据, 进行迭代</span></span><br><span class="line">   <span class="comment">// 可迭代对象: 数组/string/arguments</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">const</span> info = &#123;</span><br><span class="line">     ...obj,</span><br><span class="line">     <span class="attr">height</span>: <span class="number">1.88</span>,</span><br><span class="line">     <span class="attr">address</span>: <span class="string">&quot;广州市&quot;</span></span><br><span class="line">   &#125;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(info)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684920111196-001a93ec-1014-4eb5-b6c1-ce967b6dc017.png#averageHue=%23fcfbfb&clientId=u048d03ca-1ce9-4&from=paste&height=96&id=ua80e0355&originHeight=121&originWidth=262&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=4352&status=done&style=none&taskId=u3a85616b-3fd9-46f7-b3aa-357b4fe81fb&title=&width=207.52474463718735" alt="image.png"></p>
<h3 id="引用赋值-浅-深拷贝"><a href="#引用赋值-浅-深拷贝" class="headerlink" title="引用赋值-浅&#x2F;深拷贝"></a>引用赋值-浅&#x2F;深拷贝</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="number">1.88</span>,</span><br><span class="line">      <span class="attr">friend</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;curry&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.引用赋值</span></span><br><span class="line">    <span class="comment">// const info1 = obj</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.浅拷贝</span></span><br><span class="line">    <span class="keyword">const</span> info2 = &#123;</span><br><span class="line">      ...obj</span><br><span class="line">    &#125;</span><br><span class="line">    info2.<span class="property">name</span> = <span class="string">&quot;kobe&quot;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>)<span class="comment">//why</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(info2.<span class="property">name</span>)<span class="comment">//kobe</span></span><br><span class="line">    info2.<span class="property">friend</span>.<span class="property">name</span> = <span class="string">&quot;james&quot;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">friend</span>.<span class="property">name</span>)<span class="comment">//james</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">      <span class="attr">height</span>: <span class="number">1.88</span>,</span><br><span class="line">      <span class="attr">friend</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;curry&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.深拷贝</span></span><br><span class="line">    <span class="comment">// 方式一: 第三方库</span></span><br><span class="line">    <span class="comment">// 方式二: 自己实现</span></span><br><span class="line">    <span class="comment">// function deepCopy(obj) &#123;&#125;</span></span><br><span class="line">    <span class="comment">// 方式三: 利用先有的js机制, 实现深拷贝JSON</span></span><br><span class="line">    <span class="keyword">const</span> info3 = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj))</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(info3.<span class="property">friend</span>.<span class="property">name</span>)<span class="comment">//curry</span></span><br><span class="line">    info3.<span class="property">friend</span>.<span class="property">name</span> = <span class="string">&quot;james&quot;</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;info3.friend.name:&quot;</span>, info3.<span class="property">friend</span>.<span class="property">name</span>)<span class="comment">//james</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">friend</span>.<span class="property">name</span>)<span class="comment">//curry</span></span><br></pre></td></tr></table></figure>

<h3 id="Symbol的基本使用"><a href="#Symbol的基本使用" class="headerlink" title="Symbol的基本使用"></a>Symbol的基本使用</h3><ul>
<li>Symbol是什么呢？Symbol是ES6中新增的一个基本数据类型，翻译为符号。</li>
<li>那么为什么需要Symbol呢？<ul>
<li>在ES6之前，对象的属性名都是字符串形式，那么很容易造成属性名的冲突；</li>
<li>比如原来有一个对象，我们希望在其中添加一个新的属性和值，但是我们在不确定它原来内部有什么内容的情况下，很容易 造成冲突，从而覆盖掉它内部的某个属性；</li>
<li>比如我们前面在讲apply、call、bind实现时，我们有给其中添加一个fn属性，那么如果它内部原来已经有了fn属性了呢？</li>
<li>比如开发中我们使用混入，那么混入中出现了同名的属性，必然有一个会被覆盖掉；</li>
</ul>
</li>
<li>Symbol就是为了解决上面的问题，用来<strong>生成一个独一无二的值。</strong><ul>
<li>Symbol值是通过Symbol函数来生成的，生成后可以作为属性名；</li>
<li>也就是在ES6中，对象的属性名可以使用字符串，也可以使用Symbol值；</li>
</ul>
</li>
<li><strong>Symbol即使多次创建值，它们也是不同的</strong>：Symbol函数执行后每次创建出来的值都是独一无二的；</li>
<li>我们也可以在创建Symbol值的时候传入一个描述description：这个是ES2019（ES10）新增的特性；</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="title class_">Symbol</span>()</span><br><span class="line"> <span class="comment">// const info = &#123; name: &quot;why&quot; &#125;</span></span><br><span class="line"> <span class="keyword">const</span> obj = &#123;</span><br><span class="line">   [s1]: <span class="string">&quot;aaa&quot;</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> s2 = <span class="title class_">Symbol</span>()</span><br><span class="line"> obj[s2] = <span class="string">&quot;bbb&quot;</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684920628734-336e7c81-2a81-4a0d-a770-df4d482bfd16.png#averageHue=%23fefdfd&clientId=u048d03ca-1ce9-4&from=paste&height=34&id=u4aeaa2fb&originHeight=43&originWidth=415&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=3457&status=done&style=none&taskId=u22c0253a-33b5-4a7b-8b2e-1e53df7ef2a&title=&width=328.71285887188077" alt="image.png"></p>
<ul>
<li>前面我们讲Symbol的目的是为了创建一个独一无二的值，那么如果我们现在就是想创建相同的Symbol应该怎么来做呢？<ul>
<li>我们可以使用Symbol.for方法来做到这一点；</li>
<li>并且我们可以通过Symbol.keyFor方法来获取对应的key；</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="title class_">Symbol</span>() <span class="comment">// aaa</span></span><br><span class="line"> <span class="keyword">const</span> s2 = <span class="title class_">Symbol</span>() <span class="comment">// bbb</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 1.加入对象中</span></span><br><span class="line"> <span class="keyword">const</span> obj = &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">   <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">   [s1]: <span class="string">&quot;aaa&quot;</span>,</span><br><span class="line">   [s2]: <span class="string">&quot;bbb&quot;</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 2.获取symbol对应的key</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj))</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj))</span><br><span class="line"> <span class="keyword">const</span> symbolKeys = <span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>(obj)</span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">of</span> symbolKeys) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(obj[key])</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 3.description</span></span><br><span class="line"> <span class="comment">// 3.1.Symbol函数直接生成的值, 都是独一无二</span></span><br><span class="line"> <span class="keyword">const</span> s3 = <span class="title class_">Symbol</span>(<span class="string">&quot;ccc&quot;</span>)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(s3.<span class="property">description</span>)</span><br><span class="line"> <span class="keyword">const</span> s4 = <span class="title class_">Symbol</span>(s3.<span class="property">description</span>)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(s3 === s4)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 3.2. 如果相同的key, 通过Symbol.for可以生成相同的Symbol值</span></span><br><span class="line"> <span class="keyword">const</span> s5 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;ddd&quot;</span>)</span><br><span class="line"> <span class="keyword">const</span> s6 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;ddd&quot;</span>)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(s5 === s6)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 获取传入的key</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Symbol</span>.<span class="title function_">keyFor</span>(s5))</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684920746297-3cea3081-b814-4bc2-94b6-6e468ea25a39.png#averageHue=%23fdfcfc&clientId=u048d03ca-1ce9-4&from=paste&height=291&id=ub457c924&originHeight=367&originWidth=317&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=14095&status=done&style=none&taskId=ub6d364f2-819d-4066-8b2d-4f711e9704c&title=&width=251.08909942743662" alt="image.png"></p>
]]></content>
      <categories>
        <category>JS高级</category>
      </categories>
      <tags>
        <tag>JS高级</tag>
      </tags>
  </entry>
  <entry>
    <title>JS基础DOM操作</title>
    <url>/2024/08/19/JS%E5%9F%BA%E7%A1%80DOM%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h3 id="document对象"><a href="#document对象" class="headerlink" title="document对象"></a>document对象</h3><ul>
<li>Document节点表示的整个载入的网页，它的实例是全局的document对象：<ul>
<li>对DOM的所有操作都是从 document 对象开始的；</li>
<li>它是DOM的 入口点，可以从document开始去访问任何节点元素；</li>
</ul>
</li>
<li>对于最顶层的html、head、body元素，我们可以直接在document对象中获取到：<ul>
<li><strong>html元素</strong>： <html>&#x3D; document.documentElement</li>
<li><strong>body元素</strong>： <body>&#x3D; document.body</li>
<li><strong>head元素</strong>： <head>&#x3D; document.head</li>
<li><strong>文档声明</strong>： <!DOCTYPE html>&#x3D; document.doctype</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683537814148-65447016-f4af-429b-8a74-95cc476ffaa4.png#averageHue=%23546754&clientId=u3d4b8846-75b1-4&from=paste&height=147&id=u07af31fb&originHeight=186&originWidth=1084&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=76420&status=done&style=none&taskId=u8901045b-e9a6-4863-a846-f89cf014797&title=&width=858.6138289569126" alt="image.png"></li>
</ul>
<h3 id="节点之间的导航"><a href="#节点之间的导航" class="headerlink" title="节点之间的导航"></a>节点之间的导航</h3><ul>
<li>**如果我们获取到一个节点后，可以根据这个节点去获取其他的节点，我们称之为节点之间的导航。 **</li>
<li><strong>节点之间存在如下的关系：</strong><ul>
<li>父节点：parentNode</li>
<li>前兄弟节点：previousSibling</li>
<li>后兄弟节点：nextSibling</li>
<li>子节点：childNodes</li>
<li>第一个子节点：firstChild</li>
<li>第二个子节点：lastChild</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683537897819-d3215fc6-afa4-4c7f-b6fd-7d5798c8053e.png#averageHue=%23fcf9f7&clientId=u3d4b8846-75b1-4&from=paste&height=176&id=u46deac11&originHeight=280&originWidth=848&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=42267&status=done&style=none&taskId=u1533d829-3d7b-4dbe-9993-df98402c983&title=&width=531.6583862304688" alt="image.png"></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 我是注释, 哈哈哈 --&gt;</span></span><br><span class="line">    我是文本, 呵呵呵</span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>哈哈哈哈哈<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> bodyEl = <span class="variable language_">document</span>.<span class="property">body</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 根据body元素去获取子元素(element)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> childElements = bodyEl.<span class="property">children</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(childElements)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 获取box元素</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> boxEl1 = bodyEl.<span class="property">firstElementChild</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> boxEl2 = bodyEl.<span class="property">children</span>[<span class="number">0</span>]</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(boxEl1, boxEl2, boxEl1 === boxEl2)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 获取ul元素</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> ulEl = boxEl1.<span class="property">nextElementSibling</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(ulEl)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 获取li元素</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> liEls = ulEl.<span class="property">children</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(liEls)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683538168048-9e35965c-5c7b-47b2-aabd-b63c8b9b1763.png#averageHue=%23fcfcfb&clientId=u3d4b8846-75b1-4&from=paste&height=95&id=ud5e48d2f&originHeight=120&originWidth=866&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=8444&status=done&style=none&taskId=uf4542911-aa53-458a-a6ef-5f523436e4f&title=&width=685.9405681519247" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683538178107-535cc47c-114c-4d7d-9209-44a9b0502027.png#averageHue=%23fdfdfc&clientId=u3d4b8846-75b1-4&from=paste&height=94&id=u3a0a840e&originHeight=119&originWidth=463&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=7149&status=done&style=none&taskId=ua2c8c7cb-32a1-44f2-9310-18f1d717ee5&title=&width=366.7326594160983" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683538198426-bb52219b-2b6d-44a9-8aae-d14d2f28c079.png#averageHue=%23fefdfd&clientId=u8a384e01-c32b-4&from=paste&height=124&id=u2aa1fc1d&originHeight=157&originWidth=434&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=7110&status=done&style=none&taskId=uee0efb96-cb7a-434c-b847-e41b49f5721&title=&width=343.76236325396684" alt="image.png"></p>
<h3 id="表格元素的导航"><a href="#表格元素的导航" class="headerlink" title="表格元素的导航"></a>表格元素的导航</h3><ul>
<li>**<table>元素支持 (除了上面给出的，之外) 以下这些属性： **<ul>
<li>table.rows — <tr>元素的集合；</li>
<li>table.caption&#x2F;tHead&#x2F;tFoot — 引用元素 <caption>，<thead>，<tfoot>；</li>
<li>table.tBodies — <tbody> 元素的集合；</li>
</ul>
</li>
<li><strong><thead>,<tfoot>,<tbody> 元素提供了 rows 属性：</strong><ul>
<li>tbody.rows — 表格内部 <tr>元素的集合；</li>
</ul>
</li>
<li><strong><tr>：</strong><ul>
<li>tr.cells — 在给定 <tr> 中的<td>和<th>  单元格的集合；</li>
<li>tr.sectionRowIndex — 给定的 <tr>在封闭的 <thead>&#x2F;<tbody>&#x2F;<tfoot> 中的位置（索引）；</li>
<li>tr.rowIndex — 在整个表格中 <tr> 的编号（包括表格的所有行）</li>
</ul>
</li>
<li><strong><td>和<th>:</strong><ul>
<li>td.cellIndex — 在封闭的 <tr>中单元格的编号。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 高级元素: table/form --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">th</span>&gt;</span>身高<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>why<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>18<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>1.88<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>kobe<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>30<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">td</span>&gt;</span>1.98<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> tableEl = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">firstElementChild</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 通过table元素获取内部的后代元素</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(tableEl.<span class="property">tHead</span>, tableEl.<span class="property">tBodies</span>, tableEl.<span class="property">tFoot</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(tableEl.<span class="property">rows</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 拿到一行元素 </span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> rowEl = tableEl.<span class="property">rows</span>[<span class="number">2</span>]</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(rowEl.<span class="property">cells</span>[<span class="number">0</span>])</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(rowEl.<span class="property">sectionRowIndex</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(rowEl.<span class="property">rowIndex</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683538873634-bef6ed39-3355-4514-9302-f6de7863f2c6.png#averageHue=%23fdfdfd&clientId=u8a384e01-c32b-4&from=paste&height=127&id=u309dcaab&originHeight=160&originWidth=666&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=6908&status=done&style=none&taskId=u52f7ea9f-08bf-4736-be56-8f8c01961f3&title=&width=527.5247325510182" alt="image.png"></p>
<h3 id="获取元素的方法"><a href="#获取元素的方法" class="headerlink" title="获取元素的方法"></a>获取元素的方法</h3><ul>
<li>当元素彼此靠近或者相邻时，DOM 导航属性非常有用。<ul>
<li>但是，在实际开发中，我们希望可以<strong>任意的获取到某一个元素</strong>应该<strong>如何操作</strong>呢？</li>
</ul>
</li>
<li>DOM为我们提供了获取元素的方法：</li>
<li>开发中如何选择呢？<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683539672541-ca6a58ef-42f3-41fc-8250-79195943b251.png#averageHue=%23f8dfc6&clientId=u8a384e01-c32b-4&from=paste&height=274&id=ua370d445&originHeight=346&originWidth=1303&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=63111&status=done&style=none&taskId=u43b4c607-78a6-4c2a-8758-6ace208fa16&title=&width=1032.079168939905" alt="image.png"></li>
<li>目前最常用的是querySelector和querySelectAll；</li>
<li>getElementById偶尔也会使用或者在适配一些低版本浏览器时；</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        我是段落, <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;keyword&quot;</span>&gt;</span>coderwhy<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 哈哈哈哈</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        我也是段落, <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;keyword&quot;</span>&gt;</span>kobe<span class="tag">&lt;/<span class="name">span</span>&gt;</span> 呵呵呵呵额</span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;article&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h3</span> <span class="attr">id</span>=<span class="string">&quot;title&quot;</span>&gt;</span>我是小标题<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">          我是文章的内容, 嘿嘿嘿嘿嘿</span><br><span class="line">        <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> keywordEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.keyword&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// keywordEls是对象, 可迭代的</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 可迭代对象: String/数组/节点的列表</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> keywordEls = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&quot;.keyword&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> el <span class="keyword">of</span> keywordEls) &#123;</span></span><br><span class="line"><span class="language-javascript">      el.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;red&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(keywordEls)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> titleEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;#title&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    titleEl.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&quot;orange&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683539761887-e93e2e67-6319-44be-8cab-bd4ed8df40d0.png#averageHue=%23f9f8f6&clientId=u8a384e01-c32b-4&from=paste&height=315&id=u9dc6654f&originHeight=646&originWidth=507&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=32017&status=done&style=none&taskId=ue4d8d745-a754-41d7-bbad-4f5c4de8235&title=&width=247.58413696289062" alt="image.png"></p>
<h3 id="节点的属性-nodeType"><a href="#节点的属性-nodeType" class="headerlink" title="节点的属性 - nodeType"></a>节点的属性 - nodeType</h3><ul>
<li>nodeType属性：<ul>
<li>nodeType 属性提供了一种获取<strong>节点类型</strong>的方法；</li>
<li>它有一个<strong>数值型值</strong>；</li>
</ul>
</li>
<li>常见的节点类型有如下：</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683592495739-da8785f8-7720-41f3-8332-f1006b6cbb11.png#averageHue=%23f4dbc0&clientId=uf862735a-f5e1-4&from=paste&height=224&id=u995957b7&originHeight=283&originWidth=1277&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=85990&status=done&style=none&taskId=u14cf669d-8821-4018-8819-950e50651dd&title=&width=1011.4851103117873" alt="image.png"></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 我是注释 --&gt;</span></span><br><span class="line">    我是文本</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容, 哈哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1.获取三个节点</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> bodyChildNodes = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">childNodes</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> commentNode = bodyChildNodes[<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> textNode = bodyChildNodes[<span class="number">2</span>]</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> divNode = bodyChildNodes[<span class="number">3</span>]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2.节点属性</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2.1.nodeType 节点的类型</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">for</span> (<span class="keyword">var</span> node <span class="keyword">of</span> bodyChildNodes) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">8</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">3</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (node.<span class="property">nodeType</span> === <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(commentNode, commentNode.<span class="property">nodeType</span>, <span class="string">&quot;-------&quot;</span>, textNode, textNode.<span class="property">nodeType</span>, <span class="string">&quot;-------&quot;</span>, divNode.<span class="property">nodeType</span>) <span class="comment">// 8 3 1</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Node</span>.<span class="property">COMMENT_NODE</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683592538028-6927843b-bb5c-4d23-8ea9-ef59af5148d8.png#averageHue=%23fdfcfc&clientId=uf862735a-f5e1-4&from=paste&height=43&id=ud7dba278&originHeight=54&originWidth=922&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=2423&status=done&style=none&taskId=u470d6ff9-4093-44a2-8bc2-bb9daa5284c&title=&width=730.2970021201785" alt="image.png"></p>
<h3 id="节点的属性-–-nodeName、tagName"><a href="#节点的属性-–-nodeName、tagName" class="headerlink" title="节点的属性 – nodeName、tagName"></a>节点的属性 – nodeName、tagName</h3><ul>
<li>nodeName：获取node节点的名字；</li>
<li>tagName：获取元素的标签名词；<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683592614813-cfee4e09-aa50-4a64-9b64-912559be5ce0.png#averageHue=%23496152&clientId=uf862735a-f5e1-4&from=paste&height=96&id=ua32fa51f&originHeight=168&originWidth=1055&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=69191&status=done&style=none&taskId=u40fa6927-5a69-4038-a1a9-8959b1ce04e&title=&width=602.4108276367188" alt="image.png"></li>
<li>tagName 和 nodeName 之间有什么不同呢？<ul>
<li>tagName 属性仅适用于 Element 节点；</li>
<li>nodeName 是为任意 Node 定义的：<ul>
<li>对于元素，它的意义与 tagName 相同，所以使用哪一个都是可以的；</li>
<li>对于其他节点类型（text，comment 等），它拥有一个对应节点类型的字符串；</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 我是注释 --&gt;</span></span><br><span class="line">  我是文本</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容, 哈哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.获取三个节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> bodyChildNodes = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">childNodes</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> commentNode = bodyChildNodes[<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> textNode = bodyChildNodes[<span class="number">2</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> divNode = bodyChildNodes[<span class="number">3</span>]    </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.2.nodeName 节点的名称</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// tagName: 针对元素(element)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(commentNode.<span class="property">nodeName</span>, textNode.<span class="property">nodeName</span>, divNode.<span class="property">nodeName</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(commentNode.<span class="property">tagName</span>, divNode.<span class="property">tagName</span>)   </span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683592654344-ec528db6-7e74-47cc-aeed-b247484de9b1.png#averageHue=%23fdfcfc&clientId=uf862735a-f5e1-4&from=paste&height=51&id=u1579d8b1&originHeight=65&originWidth=712&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=2729&status=done&style=none&taskId=ub443565d-5d26-4b50-9c0f-5c0c6ee57ab&title=&width=563.9603747392267" alt="image.png"></p>
<h3 id="节点的属性-innerHTML、textContent"><a href="#节点的属性-innerHTML、textContent" class="headerlink" title="节点的属性 - innerHTML、textContent"></a>节点的属性 - innerHTML、textContent</h3><ul>
<li>innerHTML 属性<ul>
<li>将元素中的 HTML 获取为字符串形式；</li>
<li>设置元素中的内容；</li>
</ul>
</li>
<li>outerHTML 属性<ul>
<li>包含了元素的完整 HTML</li>
<li>innerHTML 加上元素本身一样；</li>
</ul>
</li>
<li>textContent 属性<ul>
<li>仅仅获取元素中的文本内容；</li>
</ul>
</li>
<li>innerHTML和textContent的区别：<ul>
<li>使用 innerHTML，我们将其“作为 HTML”插入，带有所有 HTML 标签。</li>
<li>使用 textContent，我们将其“作为文本”插入，所有符号均按字面意义处理。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 我是注释 --&gt;</span></span><br><span class="line">  我是文本</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是内容, 哈哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.获取三个节点</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> bodyChildNodes = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">childNodes</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> commentNode = bodyChildNodes[<span class="number">1</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> textNode = bodyChildNodes[<span class="number">2</span>]</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> divNode = bodyChildNodes[<span class="number">3</span>]</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.3. data(nodeValue)/innerHTML/textContent</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// data针对非元素的节点获取数据</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// innerHTML: 对应的html元素也会获取</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// textContent: 只会获取文本内容</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(commentNode.<span class="property">data</span>, textNode.<span class="property">data</span>, divNode.<span class="property">data</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(divNode.<span class="property">innerHTML</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(divNode.<span class="property">textContent</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置文本, 作用是一样</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 设置文本中包含元素内容, 那么innerHTML浏览器会解析, textContent会当成文本的一部分</span></span></span><br><span class="line"><span class="language-javascript">    divNode.<span class="property">innerHTML</span> = <span class="string">&quot;&lt;h2&gt;呵呵呵呵&lt;/h2&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// divNode.textContent = &quot;&lt;h2&gt;嘿嘿嘿嘿&lt;/h2&gt;&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.4.outerHTML</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(divNode.<span class="property">outerHTML</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683593049642-4b65f850-62cc-4342-9f61-f8e1a353193d.png#averageHue=%23fbfafa&clientId=uf862735a-f5e1-4&from=paste&height=182&id=u729bbffe&originHeight=256&originWidth=624&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=7797&status=done&style=none&taskId=u358e197a-d761-431b-8ac6-db90e386827&title=&width=443.24005126953125" alt="image.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683592995564-05330241-0bf9-4c64-9fb5-e4c3b224e779.png#averageHue=%23faf9f9&clientId=uf862735a-f5e1-4&from=paste&height=124&id=u1c3c9b7c&originHeight=188&originWidth=434&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=3498&status=done&style=none&taskId=u12387ed0-c6fd-438d-94dd-c4d0d178bb3&title=&width=285.75245666503906" alt="image.png"></p>
<h3 id="节点的属性-nodeValue"><a href="#节点的属性-nodeValue" class="headerlink" title="节点的属性 - nodeValue"></a>节点的属性 - nodeValue</h3><ul>
<li>nodeValue&#x2F;dat<ul>
<li>用于获取非元素节点的文本内容</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683593196326-516022f7-9e2d-41d5-8366-b04b73fa30f9.png#averageHue=%237b8064&clientId=uf862735a-f5e1-4&from=paste&height=176&id=u3094de46&originHeight=341&originWidth=1167&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=65834&status=done&style=none&taskId=u6b58df17-2791-40db-ac41-835d0d9ac25&title=&width=601.4108276367188" alt="image.png"></li>
</ul>
</li>
</ul>
<h3 id="节点的其他属性"><a href="#节点的其他属性" class="headerlink" title="节点的其他属性"></a>节点的其他属性</h3><ul>
<li>hidden属性：也是一个全局属性，可以用于设置元素隐藏。<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683593546639-70e9099d-d3ce-408a-b242-38a23ca23ad0.png#averageHue=%236a8f61&clientId=uf862735a-f5e1-4&from=paste&height=126&id=uac70af11&originHeight=232&originWidth=1093&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=48369&status=done&style=none&taskId=u0316262e-e1cd-4046-8ce1-4e80ce2b079&title=&width=592.4108276367188" alt="image.png"></li>
<li>DOM 元素还有其他属性：<ul>
<li>value<ul>
<li><input>，<select> 和<textarea> 的 value。</li>
</ul>
</li>
<li>href<ul>
<li><a href="...">的 href。</li>
</ul>
</li>
<li>id<ul>
<li>所有元素的 “id” 特性的值。</li>
</ul>
</li>
</ul>
</li>
<li>class和style我们会在后续专门讲解的。</li>
</ul>
<h3 id="attribute的分类"><a href="#attribute的分类" class="headerlink" title="attribute的分类"></a>attribute的分类</h3><ul>
<li>属性attribute的分类：<ul>
<li>标准的attribute：某些attribute属性是标准的，比如id、class、href、type、value等；</li>
<li>非标准的attribute：某些attribute属性是自定义的，比如abc、age、height等；</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683593741984-302e6d48-22cb-4182-af0c-69f6178cf5fb.png#averageHue=%234c745b&clientId=uf862735a-f5e1-4&from=paste&height=149&id=u2b0bccf7&originHeight=188&originWidth=1034&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=45711&status=done&style=none&taskId=u83a55167-ceb0-49ee-a664-d8b99b5fdda&title=&width=819.009870056686" alt="image.png"></li>
</ul>
</li>
</ul>
<h3 id="attribute的操作"><a href="#attribute的操作" class="headerlink" title="attribute的操作"></a>attribute的操作</h3><ul>
<li>对于所有的attribute访问都支持如下的方法：<ul>
<li>elem.hasAttribute(name) — 检查特性是否存在。</li>
<li>elem.getAttribute(name) — 获取这个特性值。</li>
<li>elem.setAttribute(name, value) — 设置这个特性值。</li>
<li>elem.removeAttribute(name) — 移除这个特性。</li>
<li>attributes：attr对象的集合，具有name、value属性；</li>
</ul>
</li>
<li>attribute具备以下特征：<ul>
<li>它们的名字是大小写不敏感的（id 与 ID 相同）。</li>
<li>它们的值总是字符串类型的。</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;abc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">title</span>=<span class="string">&quot;box&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">height</span>=<span class="string">&quot;1.88&quot;</span>&gt;</span></span><br><span class="line">    我是box</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>=<span class="string">&quot;checked&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> boxEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.box&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.所有的attribute都支持的操作</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(boxEl.<span class="title function_">hasAttribute</span>(<span class="string">&quot;AGE&quot;</span>), boxEl.<span class="title function_">hasAttribute</span>(<span class="string">&quot;abc&quot;</span>), boxEl.<span class="title function_">hasAttribute</span>(<span class="string">&quot;id&quot;</span>))</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(boxEl.<span class="title function_">getAttribute</span>(<span class="string">&quot;AGE&quot;</span>), boxEl.<span class="title function_">getAttribute</span>(<span class="string">&quot;abc&quot;</span>), boxEl.<span class="title function_">getAttribute</span>(<span class="string">&quot;id&quot;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    boxEl.<span class="title function_">setAttribute</span>(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;cba&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    boxEl.<span class="title function_">removeAttribute</span>(<span class="string">&quot;id&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> boxAttributes = boxEl.<span class="property">attributes</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">for</span> (<span class="keyword">var</span> attr <span class="keyword">of</span> boxAttributes) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(attr.<span class="property">name</span>, attr.<span class="property">value</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.通过getAttribute()一定是字符串类型</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> inputEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;input&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(inputEl.<span class="title function_">getAttribute</span>(<span class="string">&quot;checked&quot;</span>))</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683593990543-f1b3c2c4-77a0-4c1e-bb80-caa285936015.png#averageHue=%23fdfdfc&clientId=uf862735a-f5e1-4&from=paste&height=137&id=uaa6cc1ba&originHeight=173&originWidth=608&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=5705&status=done&style=none&taskId=u5c18c9be-fdd3-47f6-b8b0-a3ebf2ea306&title=&width=481.58414022675544" alt="image.png"></p>
<h3 id="元素的属性（property）"><a href="#元素的属性（property）" class="headerlink" title="元素的属性（property）"></a>元素的属性（property）</h3><ul>
<li><strong>对于标准的attribute，会在DOM对象上创建与其对应的property属性：</strong></li>
<li><strong>在大多数情况下，它们是相互作用的</strong><ul>
<li>改变property，通过attribute获取的值，会随着改变；</li>
<li>通过attribute操作修改，property的值会随着改变；<ul>
<li>但是input的value修改只能通过attribute的方法；</li>
</ul>
</li>
</ul>
</li>
<li><strong>除非特别情况，大多数情况下，设置、获取attribute，推荐使用property的方式：</strong><ul>
<li>这是因为它默认情况下是有类型的；</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">&lt;!-- 元素中的属性称之为attribute --&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 标准的attribute在对应的对象模型中都有对应的property --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;abc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">title</span>=<span class="string">&quot;标题&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">height</span>=<span class="string">&quot;1.88&quot;</span>&gt;</span></span><br><span class="line">    我是box</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">checked</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  账号: <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&quot;account&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>设置input的值<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 对象中的属性称之为property</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var obj = &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   // property</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   name: &quot;why&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.通过property获取attribute的值</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取box元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> boxEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.box&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(boxEl.<span class="property">id</span>, boxEl.<span class="property">title</span>, boxEl.<span class="property">age</span>, boxEl.<span class="property">height</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// input元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> inputEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;input&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// if (inputEl.getAttribute(&quot;checked&quot;)) &#123;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   console.log(&quot;checkbox处于选中状态&quot;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">if</span> (inputEl.<span class="property">checked</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;checkbox处于选中状态&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> inputEl.<span class="property">checked</span>)</span></span><br><span class="line"><span class="language-javascript">    </span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.attribute和property是相互影响的</span></span></span><br><span class="line"><span class="language-javascript">    boxEl.<span class="property">id</span> = <span class="string">&quot;aaaaa&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(boxEl.<span class="title function_">getAttribute</span>(<span class="string">&quot;id&quot;</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    boxEl.<span class="title function_">setAttribute</span>(<span class="string">&quot;title&quot;</span>, <span class="string">&quot;哈哈哈&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(boxEl.<span class="property">title</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.比较特殊的情况, input设置值(了解)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> accountInputEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.account&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btnEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.btn&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    btnEl.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      accountInputEl.<span class="title function_">setAttribute</span>(<span class="string">&quot;value&quot;</span>, <span class="string">&quot;kobe&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 优先级更高</span></span></span><br><span class="line"><span class="language-javascript">      accountInputEl.<span class="property">value</span> = <span class="string">&quot;coderwhy&quot;</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683594760685-59b1ecb5-d3a7-448e-9371-66f6e5533b81.png#averageHue=%23fbfafa&clientId=uf862735a-f5e1-4&from=paste&height=108&id=u447887d4&originHeight=136&originWidth=593&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=4750&status=done&style=none&taskId=u9cdbaeed-f81a-4739-bc58-0fb1ded8642&title=&width=469.7029525566874" alt="image.png"></p>
<h3 id="HTML5的data-自定义属性"><a href="#HTML5的data-自定义属性" class="headerlink" title="HTML5的data-*自定义属性"></a>HTML5的data-*自定义属性</h3><p>前面我们有学习HTML5的data-*自定义属性，那么它们也是可以在dataset属性中获取到的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;abc&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> </span></span><br><span class="line"><span class="tag">       <span class="attr">data-age</span>=<span class="string">&quot;18&quot;</span> <span class="attr">data-height</span>=<span class="string">&quot;1.88&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> boxEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.box&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 小程序开发中使用</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(boxEl.<span class="property">dataset</span>.<span class="property">age</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(boxEl.<span class="property">dataset</span>.<span class="property">height</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683599080297-8b47fe3c-c69d-437c-a83c-992c34ff972a.png#averageHue=%23fdfdfd&clientId=uf862735a-f5e1-4&from=paste&height=58&id=ud3938a87&originHeight=73&originWidth=454&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=1350&status=done&style=none&taskId=u19dc4e00-c6f8-4c4c-8382-bd7b52369eb&title=&width=359.6039468140575" alt="image.png"></p>
<h3 id="JavaScript动态修改样式"><a href="#JavaScript动态修改样式" class="headerlink" title="JavaScript动态修改样式"></a>JavaScript动态修改样式</h3><ul>
<li>有时候我们会通过JavaScript来动态修改样式，这个时候我们有两个选择：<ul>
<li>选择一：在CSS中编写好对应的样式，动态的添加class；</li>
<li>选择二：动态的修改style属性；</li>
</ul>
</li>
<li>开发中如何选择呢？<ul>
<li>在大多数情况下，如果可以动态修改class完成某个功能，更推荐使用动态class；</li>
<li>如果对于某些情况，无法通过动态修改class（比如精准修改某个css属性的值），那么就可以修改style属性；</li>
</ul>
</li>
<li>接下来，我们对于两种方式分别来进行学习。</li>
</ul>
<h3 id="元素的className和classList"><a href="#元素的className和classList" class="headerlink" title="元素的className和classList"></a>元素的className和classList</h3><ul>
<li>元素的class attribute，对应的property并非叫class，而是className：<ul>
<li>这是因为JavaScript早期是不允许使用class这种关键字来作为对象的属性，所以DOM规范使用了className；</li>
<li>虽然现在JavaScript已经没有这样的限制，但是并不推荐，并且依然在使用className这个名称；</li>
</ul>
</li>
<li><strong>我们可以对className进行赋值，它会替换整个类中的字符串</strong></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">24px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: green;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    我是box</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.获取boxEl</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> boxEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.box&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.监听点击</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> counter = <span class="number">1</span></span></span><br><span class="line"><span class="language-javascript">    boxEl.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 1.直接修改style</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// boxEl.style.color = &quot;red&quot;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// boxEl.style.fontSize = &quot;24px&quot;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// boxEl.style.backgroundColor = &quot;green&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2.动态的添加某一个class</span></span></span><br><span class="line"><span class="language-javascript">      boxEl.<span class="property">className</span> = <span class="string">&quot;active&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 3.动态的修改boxEl的宽度</span></span></span><br><span class="line"><span class="language-javascript">      boxEl.<span class="property">style</span>.<span class="property">width</span> = <span class="number">100</span> * counter + <span class="string">&quot;px&quot;</span></span></span><br><span class="line"><span class="language-javascript">      counter++</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>如果我们需要添加或者移除单个的class，那么可以使用classList属性。</strong></li>
<li><strong>elem.classList 是一个特殊的对象：</strong><ul>
<li>elem.classList.add (class) ：添加一个类</li>
<li>elem.classList.remove(class)：添加&#x2F;移除类。</li>
<li>elem.classList.toggle(class) ：如果类不存在就添加类，存在就移除它。</li>
<li>elem.classList.contains(class)：检查给定类，返回 true&#x2F;false。</li>
</ul>
</li>
<li>**classList是可迭代对象，可以通过for of进行遍历。  **</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#f80</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">25px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    我是box</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>切换<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> boxEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.box&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.方法一: className</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// boxEl.className = &quot;abc&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var obj = &#123;&#125;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// obj.name = &quot;abc&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// obj.class = &quot;hahahaha&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// obj.var = 123</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(obj)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.方法二: classList操作class</span></span></span><br><span class="line"><span class="language-javascript">    boxEl.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;abc&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    boxEl.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;active&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    boxEl.<span class="property">classList</span>.<span class="title function_">remove</span>(<span class="string">&quot;abc&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 需求: box在active之间切换</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> btnEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.btn&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    btnEl.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// if (boxEl.classList.contains(&quot;active&quot;)) &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   boxEl.classList.remove(&quot;active&quot;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125; else &#123;</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//   boxEl.classList.add(&quot;active&quot;)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// &#125;</span></span></span><br><span class="line"><span class="language-javascript">      boxEl.<span class="property">classList</span>.<span class="title function_">toggle</span>(<span class="string">&quot;active&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="元素的style属性"><a href="#元素的style属性" class="headerlink" title="元素的style属性"></a>元素的style属性</h3><ul>
<li>如果需要单独修改某一个CSS属性，那么可以通过style来操作：<ul>
<li>对于多词（multi-word）属性，使用驼峰式 camelCase<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683595298343-cb2f4b8c-9840-4271-bc1e-133f36bed559.png#averageHue=%234c7a62&clientId=uf862735a-f5e1-4&from=paste&height=86&id=u5affc14b&originHeight=109&originWidth=838&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=38709&status=done&style=none&taskId=u4944ea34-ccee-4333-8b36-f0eb391e147&title=&width=663.7623511677978" alt="image.png"></li>
</ul>
</li>
<li>如果我们将值设置为空字符串，那么会使用CSS的默认样式：<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683595305189-c2fb1d67-9e90-4fc1-918e-a2d5ded52d9e.png#averageHue=%2370855b&clientId=uf862735a-f5e1-4&from=paste&height=48&id=u4abc947d&originHeight=60&originWidth=800&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=11174&status=done&style=none&taskId=u6c614de4-0089-4bee-ae7a-6f39674ffd1&title=&width=633.6633424036255" alt="image.png"></li>
<li>多个样式的写法，我们需要使用cssText属性：<ul>
<li>不推荐这种用法，因为它会替换整个字符串；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683595313467-791ab091-50b4-4fbd-90f8-42fa8338fdc8.png#averageHue=%23364d48&clientId=uf862735a-f5e1-4&from=paste&height=118&id=u1ec662e9&originHeight=167&originWidth=780&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=42337&status=done&style=none&taskId=ucab1e028-696e-45e6-b5c4-973c3bc01d3&title=&width=548.8217163085938" alt="image.png"></li>
</ul>
</li>
</ul>
<h3 id="元素style的读取-getComputedStyle"><a href="#元素style的读取-getComputedStyle" class="headerlink" title="元素style的读取 - getComputedStyle"></a>元素style的读取 - getComputedStyle</h3><ul>
<li>如果我们需要读取样式：<ul>
<li>对于内联样式，是可以通过style.*的方式读取到的;</li>
<li>对于style、css文件中的样式，是读取不到的；</li>
</ul>
</li>
<li>这个时候，我们可以通过getComputedStyle的全局函数来实现：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: red;&quot;</span>&gt;</span></span><br><span class="line">    我是box</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> boxEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.box&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(boxEl.<span class="property">style</span>.<span class="property">backgroundColor</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(boxEl.<span class="property">style</span>.<span class="property">fontSize</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">getComputedStyle</span>(boxEl).<span class="property">fontSize</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683598960181-02f26e46-8eb3-4c7c-8bf3-8ea75661c9b7.png#averageHue=%23fdfcfc&clientId=uf862735a-f5e1-4&from=paste&height=79&id=u902fedc2&originHeight=100&originWidth=361&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=1628&status=done&style=none&taskId=u6055a293-4e6f-435e-83ce-3a0f50f79ba&title=&width=285.940583259636" alt="image.png"></p>
<h3 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h3><ul>
<li>前面我们使用过 document.write 方法写入一个元素：<ul>
<li>这种方式写起来非常便捷，但是对于复杂的内容、元素关系拼接并不方便；</li>
<li>它是在早期没有DOM的时候使用的方案，目前依然被保留了下来；</li>
</ul>
</li>
<li>那么目前我们想要插入一个元素，通常会按照如下步骤：<ul>
<li>步骤一：创建一个元素；</li>
<li>步骤二：插入元素到DOM的某一个位置；</li>
</ul>
</li>
<li>创建元素： document.createElement(tag)  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683599020285-7a7dd0f5-c3e9-4242-b091-692d30eb4e1c.png#averageHue=%23487991&clientId=uf862735a-f5e1-4&from=paste&height=133&id=ud856b6c9&originHeight=219&originWidth=918&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=74469&status=done&style=none&taskId=u0d998ec1-0765-4ca8-860c-205f6e0894d&title=&width=558.4108276367188" alt="image.png"></li>
</ul>
<h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><ul>
<li>插入元素的方式如下：<ul>
<li>node.append(…nodes or strings) —— 在 node 末尾 插入节点或字符串，</li>
<li>node.prepend(…nodes or strings) —— 在 node 开头 插入节点或字符串，</li>
<li>node.before(…nodes or strings) —— 在 node 前面 插入节点或字符串</li>
<li>node.after(…nodes or strings) —— 在 node 后面 插入节点或字符串，</li>
<li>node.replaceWith(…nodes or strings) —— 将 node 替换为给定的节点或字符串。  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683599457425-8ac01ad4-1082-41c2-9e39-c92045e42d37.png#averageHue=%23fcf9f7&clientId=uf862735a-f5e1-4&from=paste&height=254&id=uca1e879c&originHeight=321&originWidth=798&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=55197&status=done&style=none&taskId=ua86a5987-364c-4ab6-b391-8106f770dcc&title=&width=632.0791840476165" alt="image.png"></li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>111111<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;box-first&quot;</span>&gt;</span>呵呵呵呵<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>哈哈哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> boxEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.box&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.通过innerHTML(不推荐)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// boxEl.innerHTML = `</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">//   &lt;h2 class=&quot;title&quot;&gt;我是标题&lt;/h2&gt;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// `</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.真实创建一个DOM对象</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> h2El = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;h2&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    h2El.<span class="property">className</span> = <span class="string">&quot;title&quot;</span></span></span><br><span class="line"><span class="language-javascript">    h2El.<span class="property">classList</span>.<span class="title function_">add</span>(<span class="string">&quot;active&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    h2El.<span class="property">textContent</span> = <span class="string">&quot;我是标题&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 将元素插入boxEl</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// boxEl.append(h2El)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// boxEl.prepend(h2El)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// boxEl.after(h2El)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// boxEl.before(h2El)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// boxEl.replaceWith(h2El, &quot;abc&quot;)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 插入到span和p元素之间</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var spanEl = document.querySelector(&quot;span&quot;)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var spanEl = boxEl.children[0]</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> spanEl = boxEl.<span class="title function_">querySelector</span>(<span class="string">&quot;span&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    spanEl.<span class="title function_">after</span>(h2El)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683599517175-20e21d3b-9b61-42b0-8740-4a1bdbf73f5b.png#averageHue=%23fbfafa&clientId=uf862735a-f5e1-4&from=paste&height=236&id=u3638d42f&originHeight=298&originWidth=484&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=6903&status=done&style=none&taskId=u26ee2213-223a-4f55-8495-b63b28f1007&title=&width=383.3663221541935" alt="image.png"></p>
<h3 id="移除和克隆元素"><a href="#移除和克隆元素" class="headerlink" title="移除和克隆元素"></a>移除和克隆元素</h3><ul>
<li>移除元素我们可以调用元素本身的remove方法：<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683599556311-a1514df7-0971-4da3-89fb-69966bc4e331.png#averageHue=%239f7d57&clientId=uf862735a-f5e1-4&from=paste&height=117&id=ucac162fe&originHeight=148&originWidth=1001&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=23337&status=done&style=none&taskId=u69619fb0-d8a4-48b9-a736-0f3b3195d99&title=&width=792.8712571825365" alt="image.png"></li>
<li>如果我们想要复制一个现有的元素，可以通过cloneNode方法：<ul>
<li>可以传入一个Boolean类型的值，来决定是否是深度克隆；</li>
<li>深度克隆会克隆对应元素的子元素，否则不会；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683599568602-bb156762-29f5-40e7-a6d1-3dc4819d678b.png#averageHue=%2343584e&clientId=uf862735a-f5e1-4&from=paste&height=76&id=ua8f617c3&originHeight=96&originWidth=916&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=34069&status=done&style=none&taskId=u568e3e4d-1e9a-40de-90ed-2f593df6d97&title=&width=725.5445270521512" alt="image.png"></li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;remove-btn&quot;</span>&gt;</span>移除box<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;clone-btn&quot;</span>&gt;</span>复制box<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>我是文本, 哈哈哈哈哈<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.获取元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> boxEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.box&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> removeBtnEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.remove-btn&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> cloneBtnEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.clone-btn&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.监听removeBtn的点击</span></span></span><br><span class="line"><span class="language-javascript">    removeBtnEl.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      boxEl.<span class="title function_">remove</span>()</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 3.复制box</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> counter = <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">    cloneBtnEl.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> newNode = boxEl.<span class="title function_">cloneNode</span>(<span class="literal">true</span>)</span></span><br><span class="line"><span class="language-javascript">      newNode.<span class="property">children</span>[<span class="number">0</span>].<span class="property">textContent</span> = <span class="string">&quot;我是标题&quot;</span> + counter</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// boxEl.after(newNode)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">append</span>(newNode)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      counter++</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="小案例练习"><a href="#小案例练习" class="headerlink" title="小案例练习"></a>小案例练习</h3><p>练习一：通过prompt接收用户的输入，根据输入创建一个列表<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683600056708-363bf6d4-c355-4c48-adfd-ad34973adabf.png#averageHue=%23f0efee&clientId=uf862735a-f5e1-4&from=paste&height=186&id=u2af1185d&originHeight=235&originWidth=342&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=9348&status=done&style=none&taskId=ue7014c56-bacb-4ebf-b29c-e7caf5334f7&title=&width=270.89107887754994" alt="image.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>动态创建列表<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> ulEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.list&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> isFlag = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">while</span> (isFlag) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> message = <span class="title function_">prompt</span>(<span class="string">&quot;请输入信息:&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (!message) &#123; <span class="comment">// 没有输入内容</span></span></span><br><span class="line"><span class="language-javascript">        isFlag = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> liEl = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;li&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        liEl.<span class="property">textContent</span> = message</span></span><br><span class="line"><span class="language-javascript">        ulEl.<span class="title function_">append</span>(liEl)</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>练习二：动态显示时间<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683600408516-e216898f-b527-42b5-98fd-ddb9c3080ba0.png#averageHue=%23f3f3f2&clientId=uf862735a-f5e1-4&from=paste&height=123&id=u1694ebe6&originHeight=155&originWidth=689&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=8652&status=done&style=none&taskId=u90614ab3-ce8c-43c9-8bb3-5937b9acaee&title=&width=545.7425536451225" alt="image.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;time&quot;</span>&gt;</span>2023-05-08 11:14:30<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 封装了工具函数</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">padLeft</span> (content, count, padStr) &#123;</span></span><br><span class="line"><span class="language-javascript">      count = count || <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">      padStr = padStr || <span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      content = <span class="title class_">String</span>(content)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> content.<span class="title function_">padStart</span>(count, padStr)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">//string.padStart(count,val)补充count位，不足count位用val来补齐</span></span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.获取时间的元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> timeEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.time&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2.获取具体的时间并且进行格式化</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> date = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> year = date.<span class="title function_">getFullYear</span>()</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> month = <span class="title function_">padLeft</span>(date.<span class="title function_">getMonth</span>() + <span class="number">1</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> day = <span class="title function_">padLeft</span>(date.<span class="title function_">getDate</span>())</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> hour = <span class="title function_">padLeft</span>(date.<span class="title function_">getHours</span>())</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> minute = <span class="title function_">padLeft</span>(date.<span class="title function_">getMinutes</span>())</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> second = <span class="title function_">padLeft</span>(date.<span class="title function_">getSeconds</span>())</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 3.将时间放到timeEl中</span></span></span><br><span class="line"><span class="language-javascript">      timeEl.<span class="property">textContent</span> = <span class="string">`<span class="subst">$&#123;year&#125;</span>-<span class="subst">$&#123;month&#125;</span>-<span class="subst">$&#123;day&#125;</span> <span class="subst">$&#123;hour&#125;</span>:<span class="subst">$&#123;minute&#125;</span>:<span class="subst">$&#123;second&#125;</span>`</span></span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 补充String方法</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var str = &quot;124&quot;</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(str.padStart(4, &quot;0&quot;))</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>练习二：倒计时显示<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683601148147-b794cf87-745a-400f-b107-a4b11c7b35c4.png#averageHue=%23ffd0cf&clientId=ufc2ada4e-9e47-4&from=paste&height=81&id=ufa6fb54d&originHeight=102&originWidth=285&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=2522&status=done&style=none&taskId=ufaa271ac-92ef-48f1-bd12-f489dd75002&title=&width=225.7425657312916" alt="image.png"></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.countdown</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#f00</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">font-size</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.countdown</span> <span class="selector-class">.time</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: <span class="number">#f00</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>: inline-block;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;countdown&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;time hour&quot;</span>&gt;</span>03<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;split&quot;</span>&gt;</span>:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;time minute&quot;</span>&gt;</span>25<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;split&quot;</span>&gt;</span>:<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;time second&quot;</span>&gt;</span>43<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">function</span> <span class="title function_">formatPadLeft</span> (content, count, padStr) &#123;</span></span><br><span class="line"><span class="language-javascript">      count = count || <span class="number">2</span></span></span><br><span class="line"><span class="language-javascript">      padStr = padStr || <span class="string">&quot;0&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      content = <span class="title class_">String</span>(content)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">return</span> content.<span class="title function_">padStart</span>(count, padStr)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.获取元素</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> hourEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.hour&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> minuteEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.minute&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> secondEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.second&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> endDate = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span><br><span class="line"><span class="language-javascript">    endDate.<span class="title function_">setHours</span>(<span class="number">24</span>)</span></span><br><span class="line"><span class="language-javascript">    endDate.<span class="title function_">setMinutes</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">    endDate.<span class="title function_">setSeconds</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">    endDate.<span class="title function_">setMilliseconds</span>(<span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 获取倒计时的小时-分钟-秒钟</span></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 11:53:22 =&gt; 24:00:00</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> nowDate = <span class="keyword">new</span> <span class="title class_">Date</span>()</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> intervalTime = <span class="title class_">Math</span>.<span class="title function_">floor</span>((endDate.<span class="title function_">getTime</span>() - nowDate.<span class="title function_">getTime</span>()) / <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// console.log(intervalTime)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 43324: x小时x分钟x秒钟</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> hour = <span class="title class_">Math</span>.<span class="title function_">floor</span>(intervalTime / <span class="number">3600</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> minute = <span class="title class_">Math</span>.<span class="title function_">floor</span>(intervalTime / <span class="number">60</span>) % <span class="number">60</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> second = intervalTime % <span class="number">60</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// 2.设置内容</span></span></span><br><span class="line"><span class="language-javascript">      hourEl.<span class="property">textContent</span> = <span class="title function_">formatPadLeft</span>(hour)</span></span><br><span class="line"><span class="language-javascript">      minuteEl.<span class="property">textContent</span> = <span class="title function_">formatPadLeft</span>(minute)</span></span><br><span class="line"><span class="language-javascript">      secondEl.<span class="property">textContent</span> = <span class="title function_">formatPadLeft</span>(second)</span></span><br><span class="line"><span class="language-javascript">    &#125;, <span class="number">1000</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 125: x百x十x个</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// var num = 125</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(Math.floor(num / 10 * 10))</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(Math.floor(num / 10) % 10)</span></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// console.log(num % 10)</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h3 id="元素的大小、滚动"><a href="#元素的大小、滚动" class="headerlink" title="元素的大小、滚动"></a>元素的大小、滚动</h3><ul>
<li>clientWidth：contentWith+padding（不包含滚动条）</li>
<li>clientHeight：contentHeight+padding</li>
<li>clientTop：border-top的宽度</li>
<li>clientLeft：border-left的宽度</li>
<li>offsetWidth：元素完整的宽度</li>
<li>offsetHeight：元素完整的高度</li>
<li>offsetLeft：距离父元素的x</li>
<li>offsetHeight：距离父元素的y</li>
<li>scrollHeight：整个可滚动的区域高度</li>
<li>scrollTop：滚动部分的高度</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683615514299-f83eb909-46bd-49ba-9eb1-e3056a6e463c.png#averageHue=%23f5eee8&clientId=u740258e3-8d7d-4&from=paste&height=467&id=uef29d5e1&originHeight=717&originWidth=812&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=154979&status=done&style=none&taskId=u01809e2c-7df4-4fac-9b2d-9447fbb89f0&title=&width=529.1682739257812" alt="image.png"></p>
<h3 id="window的大小、滚动"><a href="#window的大小、滚动" class="headerlink" title="window的大小、滚动"></a>window的大小、滚动</h3><ul>
<li>window的width和height<ul>
<li>innerWidth、innerHeight：获取window窗口的宽度和高度（包含滚动条）</li>
<li>outerWidth、outerHeight：获取window窗口的整个宽度和高度（包括调试工具、工具栏）</li>
<li>documentElement.clientHeight、documentElement.clientWidth：获取html的宽度和高度（不包含滚动条）</li>
</ul>
</li>
<li><strong>window的滚动位置：</strong><ul>
<li>scrollX：X轴滚动的位置（别名pageXOffset）</li>
<li>scrollY：Y轴滚动的位置（别名pageYOffset）</li>
</ul>
</li>
<li>也有提供对应的滚动方法：<ul>
<li>方法 scrollBy(x,y) ：将页面滚动至 相对于当前位置的 (x, y) 位置；</li>
<li>方法 scrollTo(pageX,pageY) 将页面滚动至 绝对坐标；</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* width: 2000px; */</span></span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.scroll-btn</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">position</span>: fixed;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">right</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="comment">/* display: none; */</span></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;scroll-btn&quot;</span>&gt;</span>回到顶部<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// window大小</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">outerWidth</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">outerHeight</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">innerHeight</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">offsetWidth</span>)</span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">offsetHeight</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 获取window的滚动区域</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">scrollX</span>)</span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">scrollY</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> scrollBtnEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;.scroll-btn&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">    scrollBtnEl.<span class="property">hidden</span> = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">window</span>.<span class="property">onscroll</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">var</span> scrollY = <span class="variable language_">window</span>.<span class="property">scrollY</span></span></span><br><span class="line"><span class="language-javascript">      <span class="keyword">if</span> (scrollY &gt; <span class="number">600</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// scrollBtnEl.style.display = &quot;block&quot;</span></span></span><br><span class="line"><span class="language-javascript">        scrollBtnEl.<span class="property">hidden</span> = <span class="literal">false</span></span></span><br><span class="line"><span class="language-javascript">      &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// scrollBtnEl.style.display = &quot;none&quot;</span></span></span><br><span class="line"><span class="language-javascript">        scrollBtnEl.<span class="property">hidden</span> = <span class="literal">true</span></span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 点击按钮后滚动到某个位置</span></span></span><br><span class="line"><span class="language-javascript">    scrollBtnEl.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// window.scrollBy(0, 100)</span></span></span><br><span class="line"><span class="language-javascript">      <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="number">0</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>JS基础</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>JS高级-ES5中实现继承</title>
    <url>/2024/08/27/JS%E9%AB%98%E7%BA%A7-ES5%E4%B8%AD%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h3 id="认识对象的原型"><a href="#认识对象的原型" class="headerlink" title="认识对象的原型"></a>认识对象的原型</h3><ul>
<li>**JavaScript当中每个对象都有一个特殊的内置属性 [[prototype]]，这个特殊的对象可以指向另外一个对象。 **</li>
<li><strong>那么这个对象有什么用呢？</strong><ul>
<li>当我们通过引用对象的属性key来获取一个value时，它会触发 [[Get]]的操作；</li>
<li>这个操作会首先检查该对象是否有对应的属性，如果有的话就使用它；</li>
<li>如果对象中没有改属性，那么会访问对象[[prototype]]内置属性指向的对象上的属性；</li>
</ul>
</li>
<li>那么如果通过字面量直接创建一个对象，这个对象也会有这样的属性吗？如果有，应该如何获取这个属性呢？<ul>
<li>答案是有的，只要是对象都会有这样的一个内置属性；</li>
</ul>
</li>
<li>获取的方式有两种：<ul>
<li>方式一：通过对象的 <strong><strong>proto</strong></strong> 属性可以获取到（但是这个是早期浏览器自己添加的，存在一定的兼容性问题）；</li>
<li>方式二：通过 <strong>Object.getPrototypeOf</strong> 方法可以获取到；</li>
</ul>
</li>
</ul>
<p><strong>普通对象的原型</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> info = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取对象的原型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>, obj.<span class="property">age</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">__proto__</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(obj))</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(obj)) <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 疑问: 这个原型有什么用呢?</span></span><br><span class="line"><span class="comment">// 当我们通过[[get]]方式获取一个属性对应的value时</span></span><br><span class="line"><span class="comment">// 1&gt; 它会优先在自己的对象中查找, 如果找到直接返回</span></span><br><span class="line"><span class="comment">// 2&gt; 如果没有找到, 那么会在原型对象中查找</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>)</span><br><span class="line"></span><br><span class="line">obj.<span class="property">__proto__</span>.<span class="property">message</span> = <span class="string">&quot;Hello World&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">message</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684757493648-442a4caa-de1f-4492-8055-caeafd9f888d.png#averageHue=%23fdfcfc&clientId=u97944e45-a945-4&from=paste&height=189&id=uc19de7a8&originHeight=239&originWidth=252&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=7940&status=done&style=none&taskId=u17dd62c1-ac28-4d4f-943a-184041ebb5f&title=&width=199.60395285714205" alt="image.png"></p>
<hr>
<h3 id="函数的原型-prototype"><a href="#函数的原型-prototype" class="headerlink" title="函数的原型 prototype"></a>函数的原型 prototype</h3><p><strong>函数对象的原型</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">foo</span> () &#123; &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 1.将函数看成是一个普通的对象时, 它是具备__proto__(隐式原型)</span></span><br><span class="line"> <span class="comment">// 作用: 查找key对应的value时, 会找到原型身上</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">__proto__</span>)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property">__proto__</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 2.将函数看成是一个函数时, 它是具备prototype(显式原型)</span></span><br><span class="line"> <span class="comment">// 作用: 用来构建对象时, 给对象设置隐式原型的</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(foo.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"> <span class="comment">// console.log(obj.prototype) 对象是没有prototype</span></span><br></pre></td></tr></table></figure>

<h3 id="new操作符"><a href="#new操作符" class="headerlink" title="new操作符"></a>new操作符</h3><ul>
<li>我们前面讲过new关键字的步骤如下：<ul>
<li>1.在内存中创建一个新的对象（空对象）；</li>
<li>2.这个对象内部的[[prototype]]属性会被赋值为该构造函数的prototype属性；</li>
</ul>
</li>
<li>那么也就意味着我们通过Person构造函数创建出来的所有对象的[[prototype]]属性都指向Person.prototype：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="comment">// 1.创建空的对象</span></span><br><span class="line">     <span class="comment">// 2.将Foo的prototype原型(显式隐式)赋值给空的对象的__proto__(隐式原型)</span></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> f1 = <span class="keyword">new</span> <span class="title class_">Foo</span>()</span><br><span class="line">   <span class="keyword">var</span> f2 = <span class="keyword">new</span> <span class="title class_">Foo</span>()</span><br><span class="line">   <span class="keyword">var</span> f3 = <span class="keyword">new</span> <span class="title class_">Foo</span>()</span><br><span class="line">   <span class="keyword">var</span> f4 = <span class="keyword">new</span> <span class="title class_">Foo</span>()</span><br><span class="line">   <span class="keyword">var</span> f5 = <span class="keyword">new</span> <span class="title class_">Foo</span>()</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="property">__proto__</span>)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="property">__proto__</span> === <span class="title class_">Foo</span>.<span class="property"><span class="keyword">prototype</span></span>) <span class="comment">// true</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(f3.<span class="property">__proto__</span> === f5.<span class="property">__proto__</span>) <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="创建对象的内存表现"><a href="#创建对象的内存表现" class="headerlink" title="创建对象的内存表现"></a>创建对象的内存表现</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684757844276-034680f5-492d-413e-a79d-d197b51f6908.png#averageHue=%23f7f3f1&clientId=u97944e45-a945-4&from=paste&height=363&id=u7d1d7395&originHeight=668&originWidth=1231&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=85787&status=done&style=none&taskId=ue590c08f-64b0-4766-a91c-f8b1250202c&title=&width=668.4108276367188" alt="image.png"></p>
<h3 id="prototype添加属性"><a href="#prototype添加属性" class="headerlink" title="prototype添加属性"></a>prototype添加属性</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684757874984-7e6e3eea-b1f0-4116-9629-d9429d3872a6.png#averageHue=%23f5f1ef&clientId=u97944e45-a945-4&from=paste&height=343&id=u38a397e9&originHeight=673&originWidth=1219&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=98843&status=done&style=none&taskId=udc2efaec-9d48-425e-ab43-acbec05cd5b&title=&width=620.3984375" alt="image.png"></p>
<h3 id="constructor属性"><a href="#constructor属性" class="headerlink" title="constructor属性"></a>constructor属性</h3><ul>
<li>事实上原型对象上面是有一个属性的：constructor</li>
<li>默认情况下原型上都会添加一个属性叫做constructor，这个constructor指向当前的函数对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 非常重要的属性: constructor, 指向Person函数对象</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 1.对constructor在prototype上的验证</span></span><br><span class="line">   <span class="keyword">var</span> <span class="title class_">PersonPrototype</span> = <span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">PersonPrototype</span>)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">PersonPrototype</span>.<span class="property">constructor</span>)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">PersonPrototype</span>.<span class="property">constructor</span> === <span class="title class_">Person</span>)</span><br><span class="line"></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">name</span>)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">PersonPrototype</span>.<span class="property">constructor</span>.<span class="property">name</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 2.实例对象p</span></span><br><span class="line">   <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span>.<span class="property">constructor</span>)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(p.<span class="property">__proto__</span>.<span class="property">constructor</span>.<span class="property">name</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684758038932-dbee5975-759c-4e7a-8573-997eca923312.png#averageHue=%23fdfcfb&clientId=u97944e45-a945-4&from=paste&height=233&id=u26dc34ef&originHeight=294&originWidth=290&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=9348&status=done&style=none&taskId=u6b8128cd-e093-492c-82f5-71d9e2f215e&title=&width=229.70296162131427" alt="image.png"></p>
<h3 id="重写原型对象"><a href="#重写原型对象" class="headerlink" title="重写原型对象"></a>重写原型对象</h3><ul>
<li>如果我们需要在原型上添加过多的属性，通常我们会重写整个原型对象：<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684910772042-d991774c-61c4-4ab0-bca8-109477810890.png#averageHue=%23282d35&clientId=u6c69e973-9036-4&from=paste&height=231&id=ucbecd07e&originHeight=424&originWidth=685&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=55015&status=done&style=none&taskId=u64c8ab30-4c5c-46f3-8365-c4d4bfa36c6&title=&width=372.57421875" alt="image.png"></li>
<li>前面我们说过, 每创建一个函数, 就会同时创建它的prototype对象, 这个对象也会自动获取constructor属性；<ul>
<li>而我们这里相当于给prototype重新赋值了一个对象, 那么这个新对象的constructor属性, 会指向Object构造函数, 而不是 Person构造函数了</li>
</ul>
</li>
</ul>
<h3 id="原型对象的constructor"><a href="#原型对象的constructor" class="headerlink" title="原型对象的constructor"></a>原型对象的constructor</h3><ul>
<li>如果希望constructor指向Person，那么可以手动添加：</li>
<li>上面的方式虽然可以, 但是也会造成constructor的[[Enumerable]]特性被设置了true.<ul>
<li>默认情况下, 原生的constructor属性是不可枚举的.</li>
<li>如果希望解决这个问题, 就可以使用我们前面介绍的Object.defineProperty()函数了.  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684910886520-8573a7ab-ac51-46a5-9d0d-44eb901dd5f0.png#averageHue=%2353684d&clientId=u6c69e973-9036-4&from=paste&height=263&id=u0c50abed&originHeight=332&originWidth=1525&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=88322&status=done&style=none&taskId=ud6cc919f-4f16-4f08-bdc6-2fb1310a4da&title=&width=1207.9207464569113" alt="image.png"></li>
</ul>
</li>
</ul>
<h3 id="JavaScript原型链"><a href="#JavaScript原型链" class="headerlink" title="JavaScript原型链"></a>JavaScript原型链</h3><ul>
<li>在真正实现继承之前，我们先来理解一个非常重要的概念：原型链。<ul>
<li>我们知道，从一个对象上获取属性，如果在当前对象中没有获取到就会去它的原型上面获取：  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684910997217-26c1badc-b2d1-471a-bc95-66279adce29e.png#averageHue=%23d7e3cd&clientId=u6c69e973-9036-4&from=paste&height=306&id=ude640b32&originHeight=542&originWidth=1129&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=131079&status=done&style=none&taskId=ue466ae6d-4193-45d2-b033-91dc25be3bb&title=&width=637.4108276367188" alt="image.png"></li>
</ul>
</li>
</ul>
<h3 id="Object的原型"><a href="#Object的原型" class="headerlink" title="Object的原型"></a>Object的原型</h3><ul>
<li>那么什么地方是原型链的尽头呢？比如第三个对象是否也是有原型__proto__属性呢？<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684911059211-2ec6a743-1444-4088-849a-8f1b39aaf8e4.png#averageHue=%232c3039&clientId=u6c69e973-9036-4&from=paste&height=38&id=uad7a18b0&originHeight=48&originWidth=1345&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=28676&status=done&style=none&taskId=ue06fbd66-882e-49ab-b9a9-c1e9f20292a&title=&width=1065.3464944160955" alt="image.png"></li>
<li>我们会发现它打印的是 [Object: null prototype] {}<ul>
<li>事实上这个原型就是我们最顶层的原型了</li>
<li>从Object直接创建出来的对象的原型都是 [Object: null prototype] {}。</li>
</ul>
</li>
<li>那么我们可能会问题： [Object: null prototype] {} 原型有什么特殊吗？<ul>
<li>特殊一：该对象有原型属性，但是它的原型属性已经指向的是null，也就是已经是顶层原型了；</li>
<li>特殊二：该对象上有很多默认的属性和方法；</li>
</ul>
</li>
</ul>
<p><strong>对象的原型链：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.&#123;&#125;的本质</span></span><br><span class="line"><span class="keyword">var</span> info = &#123;&#125;</span><br><span class="line"><span class="comment">// 相当于</span></span><br><span class="line"><span class="keyword">var</span> info = <span class="keyword">new</span> <span class="title class_">Object</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(info.<span class="property">__proto__</span> === <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>JS高级</category>
      </categories>
      <tags>
        <tag>JS高级</tag>
      </tags>
  </entry>
  <entry>
    <title>JS高级-ES6实现继承</title>
    <url>/2024/08/28/JS%E9%AB%98%E7%BA%A7-ES6%E5%AE%9E%E7%8E%B0%E7%BB%A7%E6%89%BF/</url>
    <content><![CDATA[<h3 id="对象的方法补充"><a href="#对象的方法补充" class="headerlink" title="对象的方法补充"></a>对象的方法补充</h3><ul>
<li>hasOwnProperty<ul>
<li>对象是否有某一个属于自己的属性（不是在原型上的属性）</li>
</ul>
</li>
<li>in&#x2F;for in 操作符<ul>
<li>判断某个属性是否在某个对象或者对象的原型上</li>
</ul>
</li>
<li>instanceof<ul>
<li>用于检测构造函数（Person、Student类）的pototype，是否出现在某个实例对象的原型链上</li>
</ul>
</li>
<li>isPrototypeOf<ul>
<li>用于检测某个对象，是否出现在某个实例对象的原型链上<h3 id=""><a href="#" class="headerlink" title=""></a></h3></li>
</ul>
</li>
</ul>
<h3 id="class定义类"><a href="#class定义类" class="headerlink" title="class定义类"></a>class定义类</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 创建实例对象</span></span><br><span class="line"> <span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"> <span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(p1, p2)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 另外一种定义方法: 表达式写法(了解, 少用)</span></span><br><span class="line"> <span class="keyword">var</span> <span class="title class_">Student</span> = <span class="keyword">class</span> &#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> foo = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> stu1 = <span class="keyword">new</span> <span class="title class_">Student</span>()</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(stu1)</span><br></pre></td></tr></table></figure>

<h3 id="类和构造函数的异同"><a href="#类和构造函数的异同" class="headerlink" title="类和构造函数的异同"></a>类和构造函数的异同</h3><ul>
<li>我们来研究一下类的一些特性：<ul>
<li>你会发现它和我们的构造函数的特性其实是一致的；</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684911357877-b48a4eb8-1199-44dd-8c89-81d682f3b6dc.png#averageHue=%232a2f37&clientId=u6c69e973-9036-4&from=paste&height=194&id=u4d257ff0&originHeight=346&originWidth=949&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=96816&status=done&style=none&taskId=u77637fd9-2b53-4619-8835-0c4f672963d&title=&width=531.3836059570312" alt="image.png"></li>
</ul>
</li>
</ul>
<h3 id="类的构造函数"><a href="#类的构造函数" class="headerlink" title="类的构造函数"></a>类的构造函数</h3><ul>
<li>如果我们希望在创建对象的时候给类传递一些参数，这个时候应该如何做呢？<ul>
<li>每个类都可以有一个自己的构造函数（方法），这个方法的名称是固定的constructor；</li>
<li>当我们通过new操作符，操作一个类的时候会调用这个类的构造函数constructor；</li>
<li>每个类只能有一个构造函数，如果包含多个构造函数，那么会抛出异常；</li>
</ul>
</li>
<li>当我们通过new关键字操作类的时候，会调用这个constructor函数，并且执行如下操作：<ul>
<li>1.在内存中创建一个新的对象（空对象）；</li>
<li>2.这个对象内部的[[prototype]]属性会被赋值为该类的prototype属性；</li>
<li>3.构造函数内部的this，会指向创建出来的新对象；</li>
<li>4.执行构造函数的内部代码（函数体代码）；</li>
<li>5.如果构造函数没有返回非空对象，则返回创建出来的新对象；</li>
</ul>
</li>
</ul>
<h3 id="类的实例方法"><a href="#类的实例方法" class="headerlink" title="类的实例方法"></a>类的实例方法</h3><ul>
<li>在上面我们定义的属性都是直接放到了this上，也就意味着它是放到了创建出来的新对象中：<ul>
<li>在前面我们说过对于实例的方法，我们是希望放到原型上的，这样可以被多个实例来共享；</li>
<li>这个时候我们可以直接在类中定义；</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">   <span class="comment">// 1.类中的构造函数</span></span><br><span class="line">   <span class="comment">// 当我们通过new关键字调用一个Person类时, 默认调用class中的constructor方法</span></span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 2.实例方法</span></span><br><span class="line">   <span class="comment">// 本质上是放在Person.prototype</span></span><br><span class="line">   running () &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot; running~&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   eating () &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot; eating~&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 创建实例对象</span></span><br><span class="line"> <span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;why&quot;</span>, <span class="number">18</span>)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 使用实例对象中属性和方法</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">name</span>, p1.<span class="property">age</span>)<span class="comment">// why 18</span></span><br><span class="line"> p1.<span class="title function_">running</span>() <span class="comment">//why running~</span></span><br><span class="line"> p1.<span class="title function_">eating</span>() <span class="comment">//why eating~</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 研究内容</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> === p1.<span class="property">__proto__</span>)<span class="comment">//true</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property">running</span>) <span class="comment">//undefined</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">running</span>)</span><br><span class="line">                                       <span class="comment">// ƒ running() &#123;</span></span><br><span class="line">                                       <span class="comment">//     console.log(this.name + &quot; running~&quot;)</span></span><br><span class="line">                                       <span class="comment">//   &#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="类的访问器方法"><a href="#类的访问器方法" class="headerlink" title="类的访问器方法"></a>类的访问器方法</h3><p>我们之前讲对象的属性描述符时有讲过对象可以添加setter和getter函数的，那么类也是可以的<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684913555152-809c9b43-bc1d-4baf-9225-fb13f0c4e1d3.png#averageHue=%23292d36&clientId=u6c69e973-9036-4&from=paste&height=355&id=u168e2cbb&originHeight=634&originWidth=839&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=102294&status=done&style=none&taskId=u256b315a-87a0-4edf-8744-0dcfb7f5201&title=&width=469.55438232421875" alt="image.png"></p>
<h3 id="类的静态方法"><a href="#类的静态方法" class="headerlink" title="类的静态方法"></a>类的静态方法</h3><p>静态方法通常用于定义直接使用类来执行的方法，不需要有类的实例，使用static关键字来定义：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>, <span class="string">&quot;mba&quot;</span>]</span><br><span class="line"> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 实例方法</span></span><br><span class="line">   running () &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span> + <span class="string">&quot; running~&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   eating () &#123; &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 类方法(静态方法)</span></span><br><span class="line">   <span class="keyword">static</span> randomPerson () &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">     <span class="keyword">var</span> randomName = names[<span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * names.<span class="property">length</span>)]</span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">this</span>(randomName, <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">100</span>))</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>()</span><br><span class="line"> p1.<span class="title function_">running</span>()</span><br><span class="line"> p1.<span class="title function_">eating</span>()</span><br><span class="line"> <span class="keyword">var</span> randomPerson = <span class="title class_">Person</span>.<span class="title function_">randomPerson</span>()</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(randomPerson)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684913786457-5b1e0340-2896-4f73-8f46-8aaa8f5cbbed.png#averageHue=%23fcfbfa&clientId=u6c69e973-9036-4&from=paste&height=224&id=u4765a904&originHeight=283&originWidth=386&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=12560&status=done&style=none&taskId=u39f1eb4e-6945-4917-8fbc-e16e7996927&title=&width=305.74256270974934" alt="image.png"></p>
<h3 id="ES6类的继承-extends"><a href="#ES6类的继承-extends" class="headerlink" title="ES6类的继承 - extends"></a>ES6类的继承 - extends</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义父类</span></span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">     <span class="title function_">constructor</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     running () &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>, <span class="string">&quot; ex-running~&quot;</span>)</span><br><span class="line">     &#125;</span><br><span class="line">     eating () &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>, <span class="string">&quot; ex-eating~&quot;</span>)</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">     <span class="title function_">constructor</span>(<span class="params">name, age, sno, score</span>) &#123;</span><br><span class="line">       <span class="variable language_">super</span>(name, age)</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">sno</span> = sno</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">score</span> = score</span><br><span class="line">     &#125;</span><br><span class="line">     studying () &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>, <span class="string">&quot; my-studying~&quot;</span>)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> stu1 = <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;why&quot;</span>, <span class="number">18</span>, <span class="number">111</span>, <span class="number">100</span>)</span><br><span class="line">   stu1.<span class="title function_">running</span>()</span><br><span class="line">   stu1.<span class="title function_">eating</span>()</span><br><span class="line">   stu1.<span class="title function_">studying</span>()</span><br></pre></td></tr></table></figure>

<h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3><ul>
<li>我们会发现在上面的代码中我使用了一个super关键字，这个super关键字有不同的使用方式：</li>
<li>注意：在子（派生）类的构造函数中使用this或者返回默认对象之前，必须先通过super调用父类的构造函数！</li>
<li>super的使用位置有三个：子类的构造函数、实例方法、静态方法；</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">  running () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ex-running&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  eating () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ex-eating&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> sleep () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;static animal sleep&quot;</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">  <span class="comment">// 子类如果对于父类的方法实现不满足(继承过来的方法)</span></span><br><span class="line">  <span class="comment">// 重新实现称之为重写(父类方法的重写)</span></span><br><span class="line">  running () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;dog四条腿&quot;</span>)</span><br><span class="line">    <span class="comment">// 调用父类的方法</span></span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">running</span>()</span><br><span class="line">    <span class="comment">// console.log(&quot;running~&quot;)</span></span><br><span class="line">    <span class="comment">// console.log(&quot;dog四条腿running~&quot;)</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> sleep () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;趴着&quot;</span>)</span><br><span class="line">    <span class="variable language_">super</span>.<span class="title function_">sleep</span>()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>()</span><br><span class="line">dog.<span class="title function_">running</span>()</span><br><span class="line">dog.<span class="title function_">eating</span>()</span><br><span class="line"></span><br><span class="line"><span class="title class_">Dog</span>.<span class="title function_">sleep</span>()</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684914075265-ee0f6e6e-1591-4e6d-93c2-9d35a3a67b55.png#averageHue=%23f7f6f5&clientId=u6c69e973-9036-4&from=paste&height=97&id=u05008e45&originHeight=123&originWidth=216&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=3197&status=done&style=none&taskId=u27cabba8-73e0-40ac-b476-bad9d8dc38d&title=&width=171.0891024489789" alt="image.png"></p>
<h3 id="继承内置类"><a href="#继承内置类" class="headerlink" title="继承内置类"></a>继承内置类</h3><p>我们也可以让我们的类继承自内置类，比如Array：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684914172796-491f276f-dd44-4a4c-9eec-fba73618a315.png#averageHue=%23292e37&clientId=u6c69e973-9036-4&from=paste&height=178&id=uef2d4ef7&originHeight=305&originWidth=613&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=53729&status=done&style=none&taskId=uc6d3ca40-b97d-48f1-8bfd-14c15499a11&title=&width=357.5445251464844" alt="image.png"></p>
<h3 id="类的混入mixin"><a href="#类的混入mixin" class="headerlink" title="类的混入mixin"></a>类的混入mixin</h3><ul>
<li>JavaScript的类只支持单继承：也就是只能有一个父类<ul>
<li>那么在开发中我们我们需要在一个类中添加更多相似的功能时，应该如何来做呢？</li>
<li>这个时候我们可以使用混入（mixin）；</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684914280336-4180cfd9-ef18-4e4e-85f3-585a6f769c73.png#averageHue=%23292d36&clientId=u6c69e973-9036-4&from=paste&height=417&id=ud099f728&originHeight=527&originWidth=1465&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=131946&status=done&style=none&taskId=u61641352-7300-4acd-97aa-039fbe553ad&title=&width=1160.3959957766392" alt="image.png"></li>
</ul>
<h3 id="JavaScript中的多态"><a href="#JavaScript中的多态" class="headerlink" title="JavaScript中的多态"></a><strong>JavaScript中的多态</strong></h3><ul>
<li>面向对象的三大特性：封装、继承、多态。<ul>
<li>前面两个我们都已经详细解析过了，接下来我们讨论一下JavaScript的多态。</li>
</ul>
</li>
<li>JavaScript有多态吗？<ul>
<li>个人的总结：不同的数据类型进行同一个操作，表现出不同的行为，就是多态的体现。</li>
<li>那么从上面的定义来看，JavaScript是一定存在多态的。</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684914846372-7f293e2a-6c38-4cfc-a6ef-b06e81465a0b.png#averageHue=%232a2f37&clientId=uc4977282-adbb-4&from=paste&height=137&id=ud720dfd3&originHeight=190&originWidth=383&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=23868&status=done&style=none&taskId=ue67c5aa9-5448-40ee-af72-e0a4c31b8c8&title=&width=276.341552734375" alt="image.png"></li>
</ul>
</li>
</ul>
<h3 id="字面量的增强"><a href="#字面量的增强" class="headerlink" title="字面量的增强"></a><strong>字面量的增强</strong></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">   1.属性的增强</span></span><br><span class="line"><span class="comment">   2.方法的增强</span></span><br><span class="line"><span class="comment">   3.计算属性名的写法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> name = <span class="string">&quot;why&quot;</span></span><br><span class="line"> <span class="keyword">var</span> age = <span class="number">18</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> key = <span class="string">&quot;address&quot;</span> + <span class="string">&quot; city&quot;</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> obj = &#123;</span><br><span class="line">   <span class="comment">// 1.属性的增强</span></span><br><span class="line">   name,</span><br><span class="line">   age,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 2.方法的增强</span></span><br><span class="line">   <span class="attr">running</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="title function_">swimming</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">eating</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>)</span><br><span class="line">   &#125;,</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 3.计算属性名</span></span><br><span class="line">   [key]: <span class="string">&quot;广州&quot;</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> obj.<span class="title function_">running</span>()</span><br><span class="line"> obj.<span class="title function_">swimming</span>()</span><br><span class="line"> obj.<span class="title function_">eating</span>()</span><br><span class="line"></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">var</span> message = <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">   <span class="keyword">var</span> info = <span class="string">&quot;my name is why&quot;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> &#123; message, info &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> result = <span class="title function_">foo</span>()</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(result.<span class="property">message</span>, result.<span class="property">info</span>)</span><br></pre></td></tr></table></figure>

<h3 id="解构"><a href="#解构" class="headerlink" title="解构"></a><strong>解构</strong></h3><ul>
<li>ES6中新增了一个从数组或对象中方便获取数据的方法，称之为解构Destructuring。<ul>
<li>解构赋值 是一种特殊的语法，它使我们可以将数组或对象“拆包”至一系列变量中。</li>
</ul>
</li>
<li>我们可以划分为：数组的解构和对象的解构。</li>
<li><strong>数组的解构：</strong><ul>
<li>基本解构过程</li>
<li>顺序解构</li>
<li>解构出数组：…语法</li>
<li>默认值</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="literal">undefined</span>, <span class="string">&quot;nba&quot;</span>, <span class="string">&quot;mba&quot;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.数组的解构</span></span><br><span class="line"><span class="comment">// var name1 = names[0]</span></span><br><span class="line"><span class="comment">// var name2 = names[1]</span></span><br><span class="line"><span class="comment">// var name3 = names[2]</span></span><br><span class="line"><span class="comment">// 1.1. 基本使用</span></span><br><span class="line"><span class="keyword">var</span> [name1, name2, name3] = names</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name1, name2, name3)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.2. 顺序问题: 严格的顺序</span></span><br><span class="line"><span class="keyword">var</span> [name1, , name3] = names</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name1, name3)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.3. 解构出数组</span></span><br><span class="line"><span class="keyword">var</span> [name1, name2, ...newNames] = names</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name1, name2, newNames)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.4. 解构的默认值</span></span><br><span class="line"><span class="keyword">var</span> [name1, name2, name3 = <span class="string">&quot;default&quot;</span>] = names</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name1, name2, name3)</span><br></pre></td></tr></table></figure>

<ul>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684918004437-935e1196-031e-4e08-91aa-dd2ab1868121.png#averageHue=%23f8f6f5&clientId=uc4977282-adbb-4&from=paste&height=77&id=u968938ff&originHeight=97&originWidth=203&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=3674&status=done&style=none&taskId=u249bbf7a-5f28-4914-b483-fc1726e687b&title=&width=160.79207313491997" alt="image.png"></li>
<li><strong>对象的解构：</strong><ul>
<li>基本解构过程</li>
<li>任意顺序</li>
<li>重命名</li>
<li>默认值</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.对象的解构</span></span><br><span class="line"> <span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">height</span>: <span class="number">1.88</span> &#125;</span><br><span class="line"> <span class="comment">// var name = obj.name</span></span><br><span class="line"> <span class="comment">// var age = obj.age</span></span><br><span class="line"> <span class="comment">// var height = obj.height</span></span><br><span class="line"> <span class="comment">// 2.1. 基本使用</span></span><br><span class="line"> <span class="keyword">var</span> &#123; name, age, height &#125; = obj</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age, height)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 2.2. 顺序问题: 对象的解构是没有顺序, 根据key解构</span></span><br><span class="line"> <span class="keyword">var</span> &#123; height, name, age &#125; = obj</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age, height)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 2.3. 对变量进行重命名</span></span><br><span class="line"> <span class="keyword">var</span> &#123; <span class="attr">height</span>: wHeight, <span class="attr">name</span>: wName, <span class="attr">age</span>: wAge &#125; = obj</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(wName, wAge, wHeight)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 2.4. 默认值</span></span><br><span class="line"> <span class="keyword">var</span> &#123;</span><br><span class="line">   <span class="attr">height</span>: wHeight,</span><br><span class="line">   <span class="attr">name</span>: wName,</span><br><span class="line">   <span class="attr">age</span>: wAge,</span><br><span class="line">   <span class="attr">address</span>: wAddress = <span class="string">&quot;中国&quot;</span></span><br><span class="line"> &#125; = obj</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(wName, wAge, wHeight, wAddress)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 2.5. 对象的剩余内容</span></span><br><span class="line"> <span class="keyword">var</span> &#123;</span><br><span class="line">   name,</span><br><span class="line">   age,</span><br><span class="line">   ...newObj</span><br><span class="line"> &#125; = obj</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(newObj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 应用: 在函数中(其他类似的地方)</span></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">getPosition</span> (&#123; x, y &#125;) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(x, y)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="title function_">getPosition</span>(&#123; <span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">20</span> &#125;)</span><br><span class="line"> <span class="title function_">getPosition</span>(&#123; <span class="attr">x</span>: <span class="number">25</span>, <span class="attr">y</span>: <span class="number">35</span> &#125;)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">function</span> <span class="title function_">foo</span> (num) &#123; &#125;</span><br><span class="line"></span><br><span class="line"> <span class="title function_">foo</span>(<span class="number">123</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684918067155-a35ca17e-7c4a-449f-bb1e-2a2b343b6617.png#averageHue=%23fdfcfc&clientId=uc4977282-adbb-4&from=paste&height=135&id=u2c19aac5&originHeight=170&originWidth=211&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=4362&status=done&style=none&taskId=u87204bc4-82ce-4c30-97a1-5259b33d27c&title=&width=167.12870655895622" alt="image.png"></p>
]]></content>
      <categories>
        <category>JS高级</category>
      </categories>
      <tags>
        <tag>JS高级</tag>
      </tags>
  </entry>
  <entry>
    <title>JS高级-Iterator_Generator详解</title>
    <url>/2024/09/15/JS%E9%AB%98%E7%BA%A7-Iterator-Generator%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="什么是迭代器？"><a href="#什么是迭代器？" class="headerlink" title="什么是迭代器？"></a>什么是迭代器？</h3><ul>
<li>迭代器（iterator），使用户在容器对象（container，例如链表或数组）上遍访的对象，使用该接口无需关心对象的内部实现细节。</li>
<li>从迭代器的定义我们可以看出来，迭代器是帮助我们对某个数据结构进行遍历的对象。</li>
<li>在JavaScript中，迭代器也是一个具体的对象，这个对象需要符合迭代器协议（iterator protocol）：<ul>
<li>迭代器协议定义了产生一系列值（无论是有限还是无限个）的标准方式；</li>
<li>在JavaScript中这个标准就是一个特定的next方法；</li>
</ul>
</li>
<li><strong>next方法有如下的要求：</strong><ul>
<li>一个无参数或者一个参数的函数，返回一个应当拥有以下两个属性的对象：</li>
<li>done（boolean）<ul>
<li>如果迭代器可以产生序列中的下一个值，则为 false。（这等价于没有指定 done 这个属性。）</li>
<li>如果迭代器已将序列迭代完毕，则为 true。这种情况下，value 是可选的，如果它依然存在，即为迭代结束之后的默认返回值。</li>
</ul>
</li>
<li>value<ul>
<li>迭代器返回的任何 JavaScript 值。done 为 true 时可省略。</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给数组names创建一个迭代器(迭代器: names的跌大气)</span></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line"><span class="keyword">const</span> namesIterator = &#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// done: Boolean</span></span><br><span class="line">    <span class="comment">// value: 具体值/undefined</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; names.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: names[index++] &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(namesIterator.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(namesIterator.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(namesIterator.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(namesIterator.<span class="title function_">next</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数组nums</span></span><br><span class="line"><span class="keyword">const</span> nums = [<span class="number">100</span>, <span class="number">24</span>, <span class="number">55</span>, <span class="number">66</span>, <span class="number">86</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> indexNum = <span class="number">0</span></span><br><span class="line"><span class="keyword">const</span> numsIterator = &#123;</span><br><span class="line">  <span class="attr">next</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// done: Boolean</span></span><br><span class="line">    <span class="comment">// value: 具体值/undefined</span></span><br><span class="line">    <span class="keyword">if</span> (indexNum &lt; nums.<span class="property">length</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: nums[indexNum++] &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numsIterator.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numsIterator.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numsIterator.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numsIterator.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numsIterator.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numsIterator.<span class="title function_">next</span>())</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688459709865-2389130d-a3b9-4f63-9231-b9a556cae04b.png"></p>
<h3 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h3><ul>
<li>但是上面的代码整体来说看起来是有点奇怪的：<ul>
<li>我们获取一个数组的时候，需要自己创建一个index变量，再创建一个所谓的迭代器对象；</li>
<li>事实上我们可以对上面的代码进行进一步的封装，让其变成一个可迭代对象；</li>
</ul>
</li>
<li>什么又是可迭代对象呢？<ul>
<li>它和迭代器是不同的概念；</li>
<li>当一个对象<font style="color:#DF2A3F;">实现了iterable protocol协议时</font>，它就<font style="color:#DF2A3F;">是一个可迭代对象</font>；</li>
<li>这个对象的要求是<font style="color:#DF2A3F;">必须实现 @@iterator 方法</font>，在代码中我们<font style="color:#DF2A3F;">使用 Symbol.iterator 访问该属性</font>；</li>
</ul>
</li>
<li>当然我们要问一个问题，我们转成这样的一个东西有什么好处呢？<ul>
<li>当<font style="color:#DF2A3F;">一个对象变成一个可迭代对象</font>的时候，就可以<font style="color:#DF2A3F;">进行某些迭代操作</font>；</li>
<li>比如 <font style="color:#DF2A3F;">for…of 操作</font>时，其实就会调用它的 @@iterator 方法；  \</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将infos变成一个可迭代对象</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  1.必须实现一个特定的函数: [Symbol.iterator]</span></span><br><span class="line"><span class="comment">  2.这个函数需要返回一个迭代器(这个迭代器用于迭代当前的对象)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">const</span> infos = &#123;</span><br><span class="line">  <span class="attr">friends</span>: [<span class="string">&quot;kobe&quot;</span>, <span class="string">&quot;james&quot;</span>, <span class="string">&quot;curry&quot;</span>],</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> infosIterator = &#123;</span><br><span class="line">      <span class="attr">next</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// done: Boolean</span></span><br><span class="line">        <span class="comment">// value: 具体值/undefined</span></span><br><span class="line">        <span class="keyword">if</span> (index &lt; infos.<span class="property">friends</span>.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: infos.<span class="property">friends</span>[index++] &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> infosIterator</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可迭代对象必然具备下面的特点</span></span><br><span class="line"><span class="keyword">const</span> iterator = infos[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(iterator.<span class="title function_">next</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可迭对象可以进行for of操作</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> infos) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可迭代对象必然有一个[Symbol.iterator]函数</span></span><br><span class="line"><span class="comment">// 数组是一个可迭代对象</span></span><br><span class="line"><span class="keyword">const</span> students = [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(students[<span class="title class_">Symbol</span>.<span class="property">iterator</span>])</span><br><span class="line"><span class="keyword">const</span> studentIterator = students[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(studentIterator.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(studentIterator.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(studentIterator.<span class="title function_">next</span>())</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(studentIterator.<span class="title function_">next</span>())</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688460794503-67182735-3d5b-428e-899a-d4c3757a58a0.png"></p>
<h3 id="原生迭代器对象"><a href="#原生迭代器对象" class="headerlink" title="原生迭代器对象"></a>原生迭代器对象</h3><ul>
<li>事实上我们平时创建的很多原生对象已经实现了可迭代协议，会生成一个迭代器对象的：<ul>
<li>String、Array、Map、Set、arguments对象、NodeList集合；</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688460922732-ede5435b-c191-49e7-82bd-349e235029de.png"></li>
</ul>
<h3 id="可迭代对象的应用"><a href="#可迭代对象的应用" class="headerlink" title="可迭代对象的应用"></a>可迭代对象的应用</h3><ul>
<li>那么这些东西可以被用在哪里呢？<ul>
<li>JavaScript中语法：<font style="color:#DF2A3F;">for …of、展开语法、yield*（后面讲）、解构赋值；</font></li>
<li>创建一些对象时：<font style="color:#DF2A3F;">new Map([Iterable])、new WeakMap([iterable])、new Set([iterable])、new WeakSet([iterable]); </font></li>
<li>一些方法的调用：<font style="color:#DF2A3F;">Promise.all(iterable)、Promise.race(iterable)、Array.from(iterable);  </font></li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688461065939-9bd637c9-b3dc-4d1e-9006-16dbe03e7a38.png"></li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.用在特定的语法上</span></span><br><span class="line"><span class="keyword">const</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>]</span><br><span class="line"><span class="keyword">const</span> info = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">1.88</span>,</span><br><span class="line">  [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> values = <span class="title class_">Object</span>.<span class="title function_">values</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">const</span> iterator = &#123;</span><br><span class="line">      <span class="attr">next</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (index &lt; values.<span class="property">length</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: values[index++] &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> iterator</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span> (arg1, arg2, arg3) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arg1, arg2, arg3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(...info)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.一些类的构造方法中, 也是传入的可迭代对象</span></span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>, <span class="string">&quot;ccc&quot;</span>])</span><br><span class="line"><span class="keyword">const</span> set2 = <span class="keyword">new</span> <span class="title class_">Set</span>(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set2)</span><br><span class="line"><span class="keyword">const</span> set3 = <span class="keyword">new</span> <span class="title class_">Set</span>(info)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(set3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.一些常用的方法</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> p2 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> p3 = <span class="title class_">Promise</span>.<span class="title function_">resolve</span>(<span class="string">&quot;aaaa&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> pSet = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line">pSet.<span class="title function_">add</span>(p1)</span><br><span class="line">pSet.<span class="title function_">add</span>(p2)</span><br><span class="line">pSet.<span class="title function_">add</span>(p3)</span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">all</span>(pSet).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res:&quot;</span>, res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span> () &#123;</span><br><span class="line">  <span class="comment">// console.log(arguments)</span></span><br><span class="line">  <span class="comment">// 将arguments转成Array类型</span></span><br><span class="line">  <span class="keyword">const</span> arr = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">bar</span>(<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688461208745-33166ed1-d9c8-4bfa-b7a5-82d870e6be11.png"></p>
<h3 id="自定义类的迭代"><a href="#自定义类的迭代" class="headerlink" title="自定义类的迭代"></a>自定义类的迭代</h3><ul>
<li>在前面我们看到Array、Set、String、Map等类创建出来的对象都是可迭代对象：<ul>
<li>在面向对象开发中，我们可以通过<font style="color:#DF2A3F;">class定义一个自己的类，这个类可以创建很多的对象：</font></li>
<li>如果我们也希望<font style="color:#DF2A3F;">自己的类创建出来的对象默认是可迭代</font>的，那么<font style="color:#DF2A3F;">在设计类的时候我们就可以添加上 @@iterator 方法；  </font></li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">   <span class="title function_">constructor</span>(<span class="params">name, age, height, friends</span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">height</span> = height</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">friends</span> = friends</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 实例方法</span></span><br><span class="line">   <span class="title function_">running</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">   [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">     <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">     <span class="keyword">const</span> iterator = &#123;</span><br><span class="line">       <span class="attr">next</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">         <span class="keyword">if</span> (index &lt; <span class="variable language_">this</span>.<span class="property">friends</span>.<span class="property">length</span>) &#123;</span><br><span class="line">           <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">friends</span>[index++] &#125;</span><br><span class="line">         &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">         &#125;</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> iterator</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;why&quot;</span>, <span class="number">18</span>, <span class="number">1.88</span>, [<span class="string">&quot;curry&quot;</span>, <span class="string">&quot;kobe&quot;</span>, <span class="string">&quot;james&quot;</span>, <span class="string">&quot;tatumu&quot;</span>])</span><br><span class="line"> <span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;kobe&quot;</span>, <span class="number">30</span>, <span class="number">1.98</span>, [<span class="string">&quot;curry&quot;</span>, <span class="string">&quot;james&quot;</span>, <span class="string">&quot;aonier&quot;</span>, <span class="string">&quot;weide&quot;</span>])</span><br><span class="line"></span><br><span class="line"> <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> p2) &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688462490323-3f0cddf7-7377-4319-9a63-3efaec306020.png"></p>
<h3 id="迭代器的中断"><a href="#迭代器的中断" class="headerlink" title="迭代器的中断"></a>迭代器的中断</h3><ul>
<li>迭代器在某些情况下会在没有完全迭代的情况下中断：<ul>
<li>比如遍历的过程中通过break、return、throw中断了循环操作；</li>
<li>比如在解构的时候，没有解构所有的值；</li>
</ul>
</li>
<li>那么这个时候我们想要监听中断的话，可以添加return方法：</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">      <span class="title function_">constructor</span>(<span class="params">name, age, height, friends</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">height</span> = height</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">friends</span> = friends</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 实例方法</span></span><br><span class="line">      <span class="title function_">running</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">      [<span class="title class_">Symbol</span>.<span class="property">iterator</span>]() &#123;</span><br><span class="line">        <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">        <span class="keyword">const</span> iterator = &#123;</span><br><span class="line">          <span class="attr">next</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; <span class="variable language_">this</span>.<span class="property">friends</span>.<span class="property">length</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">false</span>, <span class="attr">value</span>: <span class="variable language_">this</span>.<span class="property">friends</span>[index++] &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;,</span><br><span class="line">          <span class="attr">return</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;监听到迭代器中断了&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> &#123; <span class="attr">done</span>: <span class="literal">true</span> &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> iterator</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;why&quot;</span>, <span class="number">18</span>, <span class="number">1.88</span>, [<span class="string">&quot;curry&quot;</span>, <span class="string">&quot;kobe&quot;</span>, <span class="string">&quot;james&quot;</span>, <span class="string">&quot;tatumu&quot;</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> p1) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">      <span class="keyword">if</span> (item === <span class="string">&quot;kobe&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688462577084-6c80e968-dfe1-4c79-9d36-68fad001d5d1.png"></p>
<h3 id="什么是生成器？"><a href="#什么是生成器？" class="headerlink" title="什么是生成器？"></a>什么是生成器？</h3><ul>
<li>生成器是ES6中新增的一种函数控制、使用的方案，它可以让我们更加灵活的控制函数什么时候继续执行、暂停执行等。<ul>
<li>平时我们会编写很多的函数，这些函数终止的条件通常是返回值或者发生了异常。</li>
</ul>
</li>
<li>生成器函数也是一个函数，但是和普通的函数有一些区别<ul>
<li>首先，<font style="color:#DF2A3F;">生成器函数需要在function的后面加一个符号：* </font></li>
<li>其次，<font style="color:#DF2A3F;">生成器函数可以通过yield关键字来控制函数的执行流程：</font></li>
<li>最后，<font style="color:#DF2A3F;">生成器函数的返回值是一个Generator（生成器）：</font><ul>
<li>生成器事实上是一种特殊的迭代器；</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">      生成器函数: </span></span><br><span class="line"><span class="comment">        1.function后面会跟上符号: *</span></span><br><span class="line"><span class="comment">        2.代码的执行可以被yield控制</span></span><br><span class="line"><span class="comment">        3.生成器函数默认在执行时, 返回一个生成器对象</span></span><br><span class="line"><span class="comment">          * 要想执行函数内部的代码, 需要生成器对象, 调用它的next操作</span></span><br><span class="line"><span class="comment">          * 当遇到yield时, 就会中断执行</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1.定义了一个生成器函数</span></span><br><span class="line">    <span class="keyword">function</span>* foo () &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;1111&quot;</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;2222&quot;</span>)</span><br><span class="line">      <span class="keyword">yield</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;3333&quot;</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;4444&quot;</span>)</span><br><span class="line">      <span class="keyword">yield</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;5555&quot;</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;6666&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.调用生成器函数, 返回一个 生成器对象</span></span><br><span class="line">    <span class="keyword">const</span> generator = <span class="title function_">foo</span>()</span><br><span class="line">    <span class="comment">// 调用next方法</span></span><br><span class="line">    generator.<span class="title function_">next</span>()</span><br><span class="line">    generator.<span class="title function_">next</span>()</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688462880947-63b2fe1a-d123-4775-bb17-70fd31ae10b2.png"></p>
<h3 id="生成器函数执行"><a href="#生成器函数执行" class="headerlink" title="生成器函数执行"></a>生成器函数执行</h3><ul>
<li>我们发现下面的生成器函数foo的执行体压根没有执行，它只是返回了一个生成器对象。<ul>
<li>那么我们如何可以让它执行函数中的东西呢？调用next即可；</li>
<li>我们之前学习迭代器时，知道<font style="color:#DF2A3F;">迭代器的next是会有返回值</font>的；</li>
<li>但是我们很多时候<font style="color:#DF2A3F;">不希望next返回的是一个undefined，这个时候我们可以通过yield来返回结果；</font></li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* foo (initial) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;函数开始执行~&quot;</span>)</span><br><span class="line">      <span class="keyword">const</span> value1 = <span class="number">100</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(value1)</span><br><span class="line">      <span class="keyword">yield</span> value1</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> value2 = <span class="number">200</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(value2)</span><br><span class="line">      <span class="keyword">yield</span> value2</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> value3 = <span class="number">300</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(value3)</span><br><span class="line">      <span class="keyword">yield</span> value3</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;函数结束执行~&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> generator = <span class="title function_">foo</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(generator.<span class="title function_">next</span>())</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(generator.<span class="title function_">next</span>());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(generator.<span class="title function_">next</span>());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(generator.<span class="title function_">next</span>());</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688464590444-49bee7d7-9d85-4698-b04f-01feff17b737.png"></p>
<h3 id="生成器传递参数-–-next函数"><a href="#生成器传递参数-–-next函数" class="headerlink" title="生成器传递参数 – next函数"></a>生成器传递参数 – next函数</h3><ul>
<li>函数既然可以暂停来分段执行，那么函数应该是可以传递参数的，我们是否可以给每个分段来传递参数呢？<ul>
<li>答案是可以的；</li>
<li>我们在<font style="color:#DF2A3F;">调用next函数的时候，可以给它传递参数，那么这个参数会作为上一个yield语句的返回值；</font></li>
<li>注意：<font style="color:#DF2A3F;">也就是说我们是为本次的函数代码块执行提供了一个值；  </font></li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* foo (initial) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;函数开始执行~&quot;</span>)</span><br><span class="line">      <span class="keyword">const</span> value1 = <span class="keyword">yield</span> initial + <span class="string">&quot;aaa&quot;</span></span><br><span class="line">      <span class="keyword">const</span> value2 = <span class="keyword">yield</span> value1 + <span class="string">&quot;bbb&quot;</span></span><br><span class="line">      <span class="keyword">const</span> value3 = <span class="keyword">yield</span> value2 + <span class="string">&quot;ccc&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> generator = <span class="title function_">foo</span>(<span class="string">&quot;why&quot;</span>)</span><br><span class="line">    <span class="keyword">const</span> result1 = generator.<span class="title function_">next</span>()</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result:&quot;</span>, result1)</span><br><span class="line">    <span class="keyword">const</span> result2 = generator.<span class="title function_">next</span>(result1.<span class="property">value</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result2:&quot;</span>, result2)</span><br><span class="line">    <span class="keyword">const</span> result3 = generator.<span class="title function_">next</span>(result2.<span class="property">value</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;result3:&quot;</span>, result3)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688464301049-9aa620ca-c426-49dd-bcbb-68efcf3bccba.png"></p>
<h3 id="生成器提前结束-–-return函数"><a href="#生成器提前结束-–-return函数" class="headerlink" title=" 生成器提前结束 – return函数  "></a><font style="color:#000000;"> 生成器提前结束 – return函数  </font></h3><ul>
<li>还有一个可以给生成器函数传递参数的方法是通过return函数：<ul>
<li>return传值后这个生成器函数就会结束，之后调用next不会继续生成值了；</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* foo (initial) &#123;</span><br><span class="line">   <span class="keyword">const</span> value1 = <span class="keyword">yield</span> <span class="string">&quot;why&quot;</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;value1:&quot;</span>, value1)</span><br><span class="line">   <span class="keyword">const</span> value2 = <span class="keyword">yield</span> value1</span><br><span class="line">   <span class="keyword">const</span> value3 = <span class="keyword">yield</span> value2</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> generator = <span class="title function_">foo</span>()</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(generator.<span class="title function_">next</span>())</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(generator.<span class="keyword">return</span>(<span class="number">123</span>));</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(generator.<span class="title function_">next</span>());</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688465334715-6845aec5-af0e-4a7f-92b9-62bef0a3179e.png"></p>
<h3 id="生成器抛出异常-–-throw函数"><a href="#生成器抛出异常-–-throw函数" class="headerlink" title="生成器抛出异常 – throw函数"></a>生成器抛出异常 – throw函数</h3><ul>
<li>除了给生成器函数内部传递参数之外，也可以给生成器函数内部抛出异常：<ul>
<li><font style="color:#DF2A3F;">抛出异常后我们可以在生成器函数中捕获异常；</font></li>
<li>但是在<font style="color:#DF2A3F;">catch语句中不能继续yield新的值了，但是可以在catch语句外使用yield继续中断函数的执行；  </font></li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span>* foo (name1) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;函数开始执行~&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="string">&quot;why&quot;</span></span><br><span class="line">  &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;内部捕获异常：&quot;</span>, err)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">yield</span> <span class="number">222</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;函数执行结束~&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> generator = <span class="title function_">foo</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(generator.<span class="title function_">next</span>())</span><br><span class="line">generator.<span class="keyword">throw</span>(<span class="string">&quot;err message&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(generator.<span class="title function_">next</span>())</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688466059344-5a5ff806-e272-47bd-9cf4-8289b2d94b23.png"></p>
<h3 id="生成器替代迭代器"><a href="#生成器替代迭代器" class="headerlink" title="生成器替代迭代器"></a>生成器替代迭代器</h3><ul>
<li>我们发现生成器是一种特殊的迭代器，那么在某些情况下我们可以使用生成器来替代迭代器：</li>
<li>事实上我们还可以使用<font style="color:#DF2A3F;">yield*</font>来生产一个可迭代对象：<ul>
<li>这个时候相当于是一种yield的语法糖，只不过会<font style="color:#DF2A3F;">依次迭代这个可迭代对象，每次迭代其中的一个值；  </font></li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688466257859-c93f4f01-ba6c-4172-829b-51614c40c2ab.png"></li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.yield*替换之前的方案</span></span><br><span class="line">   <span class="keyword">const</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>]</span><br><span class="line">   <span class="keyword">const</span> nums = [<span class="number">100</span>, <span class="number">22</span>, <span class="number">66</span>, <span class="number">88</span>, <span class="number">55</span>]</span><br><span class="line"></span><br><span class="line">   <span class="keyword">function</span>* createArrayIterator (arr) &#123;</span><br><span class="line">     <span class="keyword">yield</span>* arr</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">const</span> namesIterator = <span class="title function_">createArrayIterator</span>(names)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(namesIterator.<span class="title function_">next</span>())</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(namesIterator.<span class="title function_">next</span>())</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(namesIterator.<span class="title function_">next</span>())</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(namesIterator.<span class="title function_">next</span>())</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 2.yield替换类中的实现</span></span><br><span class="line">   <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">     <span class="title function_">constructor</span>(<span class="params">name, age, height, friends</span>) &#123;</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">height</span> = height</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">friends</span> = friends</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 实例方法</span></span><br><span class="line">     *[<span class="title class_">Symbol</span>.<span class="property">iterator</span>] () &#123;</span><br><span class="line">       <span class="keyword">yield</span>* <span class="variable language_">this</span>.<span class="property">friends</span></span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;why&quot;</span>, <span class="number">18</span>, <span class="number">1.88</span>, [<span class="string">&quot;kobe&quot;</span>, <span class="string">&quot;james&quot;</span>, <span class="string">&quot;curry&quot;</span>])</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> p) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">const</span> pIterator = p[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(pIterator.<span class="title function_">next</span>())</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(pIterator.<span class="title function_">next</span>())</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(pIterator.<span class="title function_">next</span>())</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(pIterator.<span class="title function_">next</span>())</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688466348767-90a86c3f-ada0-48a8-b175-f945eb904cf1.png"></p>
<h3 id="异步处理方案"><a href="#异步处理方案" class="headerlink" title="异步处理方案"></a>异步处理方案</h3><ul>
<li>学完了我们前面的Promise、生成器等，我们目前来看一下异步代码的最终处理方案。</li>
<li>案例需求</li>
<li>我们需要向服务器发送网络请求获取数据，一共需要发送三次请求；<ul>
<li>第二次的请求url依赖于第一次的结果；</li>
<li>第三次的请求url依赖于第二次的结果；</li>
<li>依次类推；</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 封装请求的方法: url -&gt; promise(result)</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">requestData</span> (url) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(url)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式四: async/await的解决方案</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span> () &#123;</span><br><span class="line">  <span class="keyword">const</span> res1 = <span class="keyword">await</span> <span class="title function_">requestData</span>(<span class="string">&quot;why&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res1:&quot;</span>, res1)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res2 = <span class="keyword">await</span> <span class="title function_">requestData</span>(res1 + <span class="string">&quot;kobe&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res2:&quot;</span>, res2)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res3 = <span class="keyword">await</span> <span class="title function_">requestData</span>(res2 + <span class="string">&quot;james&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res3:&quot;</span>, res3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> generator = <span class="title function_">getData</span>()</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688466564992-737c4143-d982-4518-b63b-fb3692ea3b74.png"></p>
]]></content>
      <categories>
        <category>JS高级</category>
      </categories>
      <tags>
        <tag>JS高级</tag>
      </tags>
  </entry>
  <entry>
    <title>JS高级-Proxy_Reflect使用详解</title>
    <url>/2024/08/30/JS%E9%AB%98%E7%BA%A7-Proxy-Reflect%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="监听对象的操作"><a href="#监听对象的操作" class="headerlink" title="监听对象的操作"></a>监听对象的操作</h3><ul>
<li>我们先来看一个需求：有一个对象，我们希望监听这个对象中的属性被设置或获取的过程<ul>
<li>通过我们前面所学的知识，能不能做到这一点呢？</li>
<li>其实是可以的，我们可以通过之前的属性描述符中的存储属性描述符来做到； 监听对象的操作</li>
</ul>
</li>
<li>下边这段代码就利用了前面讲过的 Object.defineProperty 的存储属性描述符来 对属性的操作进行监听。</li>
<li>但是这样做有什么缺点呢？<ul>
<li>首先，Object.defineProperty设计的初衷，不是为了去监听截止一个对象中 所有的属性的。<ul>
<li>我们在定义某些属性的时候，初衷其实是定义普通的属性，但是后面我们强 行将它变成了数据属性描述符。</li>
</ul>
</li>
<li>其次，如果我们想监听更加丰富的操作，比如新增属性、删除属性，那么 Object.defineProperty是无能为力的。</li>
</ul>
</li>
<li>所以我们要知道，存储数据描述符设计的初衷并不是为了去监听一个完整的对象。</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688442482588-1c81fe3a-fed0-4673-9fe7-dfe35bc52ad2.png#averageHue=%232b3038&clientId=uf00add9f-4253-4&from=paste&height=267&id=u53f364e1&originHeight=466&originWidth=603&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=91753&status=done&style=none&taskId=u9d8c6f5e-2293-41d0-95d8-58dc36602e6&title=&width=345.62371826171875" alt="image.png"></p>
<h3 id="Proxy基本使用"><a href="#Proxy基本使用" class="headerlink" title="Proxy基本使用"></a>Proxy基本使用</h3><ul>
<li>在ES6中，新增了一个Proxy类，这个类从名字就可以看出来，是用于帮助我们创建一个代理的：<ul>
<li>也就是说，如果我们希望监听一个对象的相关操作，那么我们可以先创建一个代理对象（Proxy对象）<ul>
<li>之后对该对象的所有操作，都通过代理对象来完成，代理对象可以监听我们想要对原对象进行哪些操作；</li>
</ul>
</li>
</ul>
</li>
<li>我们可以将上面的案例用Proxy来实现一次：<ul>
<li>首先，我们需要new Proxy对象，并且传入需要侦听的对象以及一个处理对象，可以称之为handler；<ul>
<li>const p &#x3D; new Proxy(target, handler)</li>
</ul>
</li>
<li>其次，我们之后的操作都是直接对Proxy的操作，而不是原有的对象，因为我们需要在handler里面进行侦听；</li>
</ul>
</li>
</ul>
<h3 id="Proxy的set和get捕获器"><a href="#Proxy的set和get捕获器" class="headerlink" title="Proxy的set和get捕获器"></a>Proxy的set和get捕获器</h3><ul>
<li>如果我们想要侦听某些具体的操作，那么就可以在handler中添加对应的捕捉器（Trap）</li>
<li>set和get分别对应的是函数类型；<ul>
<li>set函数有四个参数：<ul>
<li>target：目标对象（侦听的对象）；</li>
<li>property：将被设置的属性key；</li>
<li>value：新属性值；</li>
<li>receiver：调用的代理对象；</li>
</ul>
</li>
<li>get函数有三个参数：<ul>
<li>target：目标对象（侦听的对象）；</li>
<li>property：被获取的属性key；</li>
<li>receiver：调用的代理对象；</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">1.88</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.创建一个Proxy对象</span></span><br><span class="line"><span class="keyword">const</span> objProxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span> (<span class="params">target, key, newValue</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`监听: 监听<span class="subst">$&#123;key&#125;</span>的设置值: `</span>, newValue)</span><br><span class="line">    target[key] = newValue</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`监听: 监听<span class="subst">$&#123;key&#125;</span>的获取`</span>)</span><br><span class="line">    <span class="keyword">return</span> target[key]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.对obj的所有操作, 应该去操作objProxy</span></span><br><span class="line"><span class="comment">// console.log(objProxy.name)</span></span><br><span class="line"><span class="comment">// objProxy.name = &quot;kobe&quot;</span></span><br><span class="line"><span class="comment">// console.log(objProxy.name)</span></span><br><span class="line"><span class="comment">// objProxy.name = &quot;james&quot;</span></span><br><span class="line"></span><br><span class="line">objProxy.<span class="property">address</span> = <span class="string">&quot;广州市&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objProxy.<span class="property">address</span>)<span class="comment">//广州市</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688443074063-745a1204-fee3-47ac-a093-829868c7fd8f.png#averageHue=%23f6f6f6&clientId=uf00add9f-4253-4&from=paste&height=90&id=u965ca8d5&originHeight=113&originWidth=375&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=3213&status=done&style=none&taskId=ua4f0ca39-3eb9-475f-aadb-f609d913898&title=&width=297.0296917516995" alt="image.png"></p>
<h3 id="Proxy所有捕获器"><a href="#Proxy所有捕获器" class="headerlink" title="Proxy所有捕获器"></a>Proxy所有捕获器</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688443107470-21a94358-f5f0-447b-8a65-993de0497cc5.png#averageHue=%23f8f6f5&clientId=uf00add9f-4253-4&from=paste&height=568&id=uaff384e5&originHeight=717&originWidth=1391&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=272921&status=done&style=none&taskId=u39d9c973-4a60-4247-bf50-153276b49ab&title=&width=1101.782136604304" alt="image.png"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">1.88</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.创建一个Proxy对象</span></span><br><span class="line"><span class="keyword">const</span> objProxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">target, key, newValue</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`监听: 监听<span class="subst">$&#123;key&#125;</span>的设置值: `</span>, newValue)</span><br><span class="line">    target[key] = newValue</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`监听: 监听<span class="subst">$&#123;key&#125;</span>的获取`</span>)</span><br><span class="line">    <span class="keyword">return</span> target[key]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">deleteProperty</span>: <span class="keyword">function</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`监听: 监听删除<span class="subst">$&#123;key&#125;</span>属性`</span>)</span><br><span class="line">    <span class="keyword">delete</span> obj.<span class="property">name</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">has</span>: <span class="keyword">function</span>(<span class="params">target, key</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`监听: 监听in判断 <span class="subst">$&#123;key&#125;</span>属性`</span>)</span><br><span class="line">    <span class="keyword">return</span> key <span class="keyword">in</span> target</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> objProxy.<span class="property">name</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;age&quot;</span> <span class="keyword">in</span> objProxy)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688443257854-22b15c6c-c2dd-4451-93b1-976ff90c7d45.png#averageHue=%23f4f4f3&clientId=uf00add9f-4253-4&from=paste&height=66&id=u3a7a9097&originHeight=83&originWidth=316&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=2526&status=done&style=none&taskId=uc8688915-d60c-4710-8121-33b245f5f15&title=&width=250.29702024943208" alt="image.png"></p>
<h3 id="Proxy的construct和apply"><a href="#Proxy的construct和apply" class="headerlink" title="Proxy的construct和apply"></a>Proxy的construct和apply</h3><p>我们还会看到捕捉器中还有construct和apply，它们是应用于函数对象的：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span> (num1, num2) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, num1, num2)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> fooProxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(foo, &#123;</span><br><span class="line">      <span class="attr">apply</span>: <span class="keyword">function</span> (<span class="params">target, thisArg, otherArgs</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;监听执行了apply操作&quot;</span>)</span><br><span class="line">        target.<span class="title function_">apply</span>(thisArg, otherArgs)</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">construct</span>: <span class="keyword">function</span> (<span class="params">target, otherArray</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;监听执行了new操作&quot;</span>)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(target, otherArray)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">target</span>(...otherArray)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    fooProxy.<span class="title function_">apply</span>(<span class="string">&quot;abc&quot;</span>, [<span class="number">111</span>, <span class="number">222</span>])</span><br><span class="line">    <span class="keyword">new</span> <span class="title function_">fooProxy</span>(<span class="string">&quot;aaa&quot;</span>, <span class="string">&quot;bbb&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688443470405-10daaf42-afc3-416a-8966-37ddc02fd73a.png#averageHue=%23f9f8f8&clientId=uf00add9f-4253-4&from=paste&height=142&id=u7f0cb3ee&originHeight=179&originWidth=369&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=10522&status=done&style=none&taskId=u336d1aba-bd5f-41e4-b129-5f913bfdb91&title=&width=292.2772166836723" alt="image.png"></p>
<h3 id="Reflect的作用"><a href="#Reflect的作用" class="headerlink" title="Reflect的作用"></a>Reflect的作用</h3><ul>
<li>Reflect也是ES6新增的一个API，它是一个对象，字面的意思是反射。</li>
<li>那么这个Reflect有什么用呢？<ul>
<li>它主要提供了很多操作JavaScript对象的方法，有点像Object中操作对象的方法；</li>
<li>比如Reflect.getPrototypeOf(target)类似于 Object.getPrototypeOf()；</li>
<li>比如Reflect.defineProperty(target, propertyKey, attributes)类似于Object.defineProperty() ；</li>
</ul>
</li>
<li>如果我们有Object可以做这些操作，那么为什么还需要有Reflect这样的新增对象呢？<ul>
<li>这是因为在早期的ECMA规范中没有考虑到这种对 对象本身 的操作如何设计会更加规范，所以将这些API放到了Object上面；</li>
<li>但是Object作为一个构造函数，这些操作实际上放到它身上并不合适；</li>
<li>另外还包含一些类似于 in、delete操作符，让JS看起来是会有一些奇怪的；</li>
<li>所以在ES6中新增了Reflect，让我们这些操作都集中到了Reflect对象上；</li>
<li>另外在使用Proxy时，可以做到不操作原对象；</li>
</ul>
</li>
</ul>
<h3 id="Reflect的常见方法"><a href="#Reflect的常见方法" class="headerlink" title="Reflect的常见方法"></a>Reflect的常见方法</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688453198753-99e17b41-51d9-4f72-9718-2d1850222786.png#averageHue=%23f7f4f2&clientId=ubbcff628-1985-4&from=paste&height=570&id=u04b55b9e&originHeight=720&originWidth=1574&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=418196&status=done&style=none&taskId=u402e1d7a-dc8e-4e11-a592-50e6f162be3&title=&width=1246.7326261791334" alt="image.png"></p>
<p>那么我们可以将之前Proxy案例中对原对象的操作，都修改为Reflect来操作：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688453404581-fd66b60b-1d23-42f3-a8e1-03c93307f1f9.png#averageHue=%232b3038&clientId=ubbcff628-1985-4&from=paste&height=326&id=ucde3e90f&originHeight=600&originWidth=849&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=154676&status=done&style=none&taskId=u3baf497f-a04b-4cd9-8047-97b458d91a5&title=&width=461.4752197265625" alt="image.png"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">   <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> objProxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">   <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">target, key, newValue, receiver</span>) &#123;</span><br><span class="line">     <span class="comment">// target[key] = newValue</span></span><br><span class="line">     <span class="comment">// 1.好处一: 代理对象的目的: 不再直接操作原对象</span></span><br><span class="line">     <span class="comment">// 2.好处二: Reflect.set方法有返回Boolean值, 可以判断本次操作是否成功</span></span><br><span class="line">     <span class="keyword">const</span> isSuccess = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, newValue)</span><br><span class="line"></span><br><span class="line">     <span class="keyword">if</span> (!isSuccess) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`set <span class="subst">$&#123;key&#125;</span> failure`</span>)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 操作代理对象</span></span><br><span class="line"> objProxy.<span class="property">name</span> = <span class="string">&quot;kobe&quot;</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure>

<h3 id="Receiver的作用"><a href="#Receiver的作用" class="headerlink" title="Receiver的作用"></a>Receiver的作用</h3><ul>
<li>我们发现在使用getter、setter的时候有一个receiver的参数，它的作用是什么呢？<ul>
<li>如果我们的源对象（obj）有setter、getter的访问器属性，那么可以通过receiver来改变里面的this；</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">_name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">  <span class="keyword">set</span> <span class="title function_">name</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this:&quot;</span>, <span class="variable language_">this</span>) <span class="comment">// 默认是obj</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">_name</span> = newValue</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">get</span> <span class="title function_">name</span>() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_name</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> objProxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">  <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">target, key, newValue, receiver</span>) &#123;</span><br><span class="line">    <span class="comment">// target[key] = newValue</span></span><br><span class="line">    <span class="comment">// 1.好处一: 代理对象的目的: 不再直接操作原对象</span></span><br><span class="line">    <span class="comment">// 2.好处二: Reflect.set方法有返回Boolean值, 可以判断本次操作是否成功</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">       3.好处三:</span></span><br><span class="line"><span class="comment">         &gt; receiver就是外层Proxy对象</span></span><br><span class="line"><span class="comment">         &gt; Reflect.set/get最后一个参数, 可以决定对象访问器setter/getter的this指向</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;proxy中设置方法被调用&quot;</span>)</span><br><span class="line">    <span class="keyword">const</span> isSuccess = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, newValue, receiver)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!isSuccess) &#123;</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`set <span class="subst">$&#123;key&#125;</span> failure`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params">target, key, receiver</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;proxy中获取方法被调用&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key, receiver)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 操作代理对象</span></span><br><span class="line">objProxy.<span class="property">name</span> = <span class="string">&quot;kobe&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(objProxy.<span class="property">name</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688453677151-f334d582-0097-4766-8e5f-9eed7248e3da.png#averageHue=%23f2f1f0&clientId=ubbcff628-1985-4&from=paste&height=103&id=u08a633ae&originHeight=130&originWidth=252&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=5844&status=done&style=none&taskId=u600c0a90-c734-4650-aec4-d91a3d92c76&title=&width=199.60395285714205" alt="image.png"></p>
<h3 id="Reflect的construct"><a href="#Reflect的construct" class="headerlink" title="Reflect的construct"></a>Reflect的construct</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688453753464-c1f614bf-1e96-4936-8e6f-0838d1726745.png#averageHue=%23292e37&clientId=ubbcff628-1985-4&from=paste&height=282&id=u2a88aa9b&originHeight=452&originWidth=992&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=83086&status=done&style=none&taskId=u858388f5-0769-4883-8f45-6645cca6c80&title=&width=618.4108276367188" alt="image.png"></p>
]]></content>
      <categories>
        <category>JS高级</category>
      </categories>
      <tags>
        <tag>JS高级</tag>
      </tags>
  </entry>
  <entry>
    <title>JS高级-Promise使用详解</title>
    <url>/2024/09/15/JS%E9%AB%98%E7%BA%A7-Promise%E4%BD%BF%E7%94%A8%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="Promise的代码结构"><a href="#Promise的代码结构" class="headerlink" title="Promise的代码结构"></a>Promise的代码结构</h3><ul>
<li>我们来看一下Promise代码结构：</li>
<li>上面Promise使用过程，我们可以将它划分成三个状态：<ul>
<li><font style="color:#DF2A3F;">待定</font>（pending）: 初始状态，既没有被兑现，也没有被拒绝；<ul>
<li>当执行executor中的代码时，处于该状态；</li>
</ul>
</li>
<li><font style="color:#DF2A3F;">已兑现</font>（fulfilled）: 意味着操作成功完成；<ul>
<li>执行了resolve时，处于该状态，Promise已经被兑现；</li>
</ul>
</li>
<li><font style="color:#DF2A3F;">已拒绝</font>（rejected）: 意味着操作失败；<ul>
<li>执行了reject时，处于该状态，Promise已经被拒绝；</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.创建一个Promise对象</span></span><br><span class="line"> <span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="comment">// 注意: Promise的状态一旦被确定下来, 就不会再更改, 也不能再执行某一个回调函数来改变状态</span></span><br><span class="line">   <span class="comment">// 1.待定状态 pending</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;111111&quot;</span>)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;222222&quot;</span>)</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;333333&quot;</span>)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 2.兑现状态 fulfilled</span></span><br><span class="line">   <span class="title function_">resolve</span>()</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 3.拒绝状态 rejected</span></span><br><span class="line">   <span class="title function_">reject</span>()</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> promise.<span class="title function_">then</span>(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;成功的回调&quot;</span>)</span><br><span class="line"> &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;失败的回调&quot;</span>)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>



<h3 id="Executor"><a href="#Executor" class="headerlink" title="Executor"></a>Executor</h3><ul>
<li>Executor是在创建Promise时需要传入的一个回调函数，<font style="color:#DF2A3F;">这个回调函数会被立即执行，并且传入两个参数</font>：</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688455051920-ae837dbc-894a-4412-91c1-7f7aa3a47c87.png"></li>
<li>通常我们会在Executor中确定我们的Promise状态：<ul>
<li>通过<font style="color:#DF2A3F;">resolve</font>，可以兑现（fulfilled）Promise的状态，我们也可以称之为已决议（resolved）；</li>
<li>通过<font style="color:#DF2A3F;">reject</font>，可以拒绝（reject）Promise的状态；</li>
</ul>
</li>
<li>这里需要注意：一旦状态被确定下来，Promise的状态会被 锁死，该Promise的状态是不可更改的<ul>
<li>在我们调用resolve的时候，如果resolve传入的值本身不是一个Promise，那么会将该Promise的状态变成 兑现（fulfilled）；</li>
<li>在之后我们去调用reject时，已经不会有任何的响应了（并不是这行代码不会执行，而是无法改变Promise状态）；</li>
</ul>
</li>
</ul>
<h3 id="resolve不同值的区别"><a href="#resolve不同值的区别" class="headerlink" title="resolve不同值的区别"></a>resolve不同值的区别</h3><ul>
<li><strong>情况一：如果resolve传入</strong><strong><font style="color:#DF2A3F;">一个普通的值或者对象</font><strong><strong>，那么</strong></strong><font style="color:#DF2A3F;">这个值会作为then回调的参数</font></strong></li>
<li><strong>情况二：如果resolve中传入的是</strong>**<font style="color:#DF2A3F;">另外一个Promise</font><strong><strong>，那么</strong></strong><font style="color:#DF2A3F;">这个新Promise会决定原Promise的状态</font>**<strong>：</strong></li>
<li><strong>情况三：如果resolve中传入的是</strong>**<font style="color:#DF2A3F;">一个对象</font><strong><strong>，并且这个对象</strong></strong><font style="color:#DF2A3F;">有实现then方法</font><strong><strong>，那么</strong></strong><font style="color:#DF2A3F;">会执行该then方法</font><strong><strong>，并且根据</strong></strong><font style="color:#DF2A3F;">then方法的结 果来决定Promise的状态</font>****：  **</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 1.普通值</span></span><br><span class="line">    <span class="title function_">resolve</span>([</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;macbook&quot;</span>, <span class="attr">price</span>: <span class="number">9998</span>, <span class="attr">intro</span>: <span class="string">&quot;有点贵&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">name</span>: <span class="string">&quot;iPhone&quot;</span>, <span class="attr">price</span>: <span class="number">9.9</span>, <span class="attr">intro</span>: <span class="string">&quot;有点便宜&quot;</span> &#125;,</span><br><span class="line">    ])</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;then中拿到结果:&quot;</span>, res)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688455407347-0f2a87bf-2fe4-462c-a74d-01d8944181c3.png"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// setTimeout(resolve, 2000)</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&quot;p的resolve&quot;</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 2.resolve(promise)</span></span><br><span class="line">    <span class="comment">// 如果resolve的值本身Promise对象, 那么当前的Promise的状态会有传入的Promise来决定</span></span><br><span class="line">    <span class="title function_">resolve</span>(p)</span><br><span class="line"></span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;then中拿到结果:&quot;</span>, res)</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688455432925-27449bfa-c8bf-487e-8b6d-4bff502a5c65.png"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  </span><br><span class="line">   <span class="comment">// 3.resolve(thenable对象)</span></span><br><span class="line">   <span class="title function_">resolve</span>(&#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&quot;kobe&quot;</span>,</span><br><span class="line">     <span class="attr">then</span>: <span class="keyword">function</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">       <span class="title function_">resolve</span>(<span class="number">11111</span>)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;)</span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;then中拿到结果:&quot;</span>, res)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688455477641-6f98c8d1-dfeb-402f-964b-8a534a1dd2f4.png"></p>
<h3 id="then方法-–-接受两个参数"><a href="#then方法-–-接受两个参数" class="headerlink" title="then方法 – 接受两个参数"></a>then方法 – 接受两个参数</h3><ul>
<li>then方法是Promise对象上的一个方法（实例方法）<ul>
<li>它其实是放在Promise的原型上的 Promise.prototype.then</li>
</ul>
</li>
<li>then方法接受两个参数：<ul>
<li>fulfilled的回调函数：当状态变成fulfilled时会回调的函数；</li>
<li>reject的回调函数：当状态变成reject时会回调的函数；</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688455554172-17401cdd-22e4-4f6c-9889-f3b76265aa68.png"></li>
</ul>
</li>
</ul>
<h3 id="then方法-–-返回值"><a href="#then方法-–-返回值" class="headerlink" title="then方法 – 返回值"></a>then方法 – 返回值</h3><ul>
<li>then方法本身是有返回值的，它的返回值是一个Promise，所以我们可以进行如下的链式调用：<ul>
<li>但是then方法返回的Promise到底处于什么样的状态呢？</li>
</ul>
</li>
<li>Promise有三种状态，那么这个Promise处于什么状态呢？<ul>
<li>当then方法中的回调函数本身在执行的时候，那么它处于pending状态；</li>
<li>当then方法中的回调函数返回一个结果时，那么它处于fulfilled状态，并且会将结果作为resolve的参数；<ul>
<li>情况一：返回一个普通的值；</li>
<li>情况二：返回一个Promise；</li>
<li>情况三：返回一个thenable值；</li>
</ul>
</li>
<li>当then方法抛出一个异常时，那么它处于reject状态；</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title function_">resolve</span>(<span class="string">&quot;aaaaaaa&quot;</span>)</span><br><span class="line">  <span class="comment">// reject()</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.then方法是返回一个新的Promise, 这个新Promise的决议是等到then方法传入的回调函数有返回值时, 进行决议</span></span><br><span class="line"><span class="comment">// Promise本身就是支持链式调用</span></span><br><span class="line"><span class="comment">// then方法是返回一个新的Promise, 链式中的then是在等待这个新的Promise有决议之后执行的</span></span><br><span class="line">promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第一个then方法:&quot;</span>, res)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;bbbbbbbb&quot;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第二个then方法:&quot;</span>, res)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;cccccccc&quot;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第三个then方法:&quot;</span>, res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688456090760-d5692d4e-efb4-4570-ad66-8bc53b99650d.png"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="title function_">resolve</span>(<span class="string">&quot;aaaaaaa&quot;</span>)</span><br><span class="line">     <span class="comment">// reject()</span></span><br><span class="line">   &#125;)</span><br><span class="line">   promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第一个Promise的then方法:&quot;</span>, res)</span><br><span class="line">     <span class="comment">// 1.普通值</span></span><br><span class="line">     <span class="keyword">return</span> <span class="string">&quot;bbbbbbb&quot;</span></span><br><span class="line">     </span><br><span class="line">   &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第二个Promise的then方法:&quot;</span>, res) <span class="comment">// </span></span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">	<span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;aaaaaaa&quot;</span>)</span><br><span class="line">    <span class="comment">// reject()</span></span><br><span class="line">  &#125;)</span><br><span class="line"><span class="keyword">const</span> newPromise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&quot;why&quot;</span>)</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第一个Promise的then方法:&quot;</span>, res)</span><br><span class="line">   </span><br><span class="line">    <span class="comment">// 2.新的Promise</span></span><br><span class="line">    <span class="keyword">return</span> newPromise</span><br><span class="line">    </span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第二个Promise的then方法:&quot;</span>, res) <span class="comment">// </span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688456224081-933eed93-b9c1-4b46-8b11-276d7c9101b4.png"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="title function_">resolve</span>(<span class="string">&quot;aaaaaaa&quot;</span>)</span><br><span class="line">     <span class="comment">// reject()</span></span><br><span class="line">   &#125;)</span><br><span class="line">   promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第一个Promise的then方法:&quot;</span>, res)</span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">       <span class="attr">then</span>: <span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">         <span class="title function_">resolve</span>(<span class="string">&quot;thenable&quot;</span>)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line">   &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;第二个Promise的then方法:&quot;</span>, res) <span class="comment">// </span></span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688456282778-10cb12f2-63c0-4f4c-be87-4c1983fc6369.png"></p>
<h3 id="catch方法-–-返回值"><a href="#catch方法-–-返回值" class="headerlink" title="catch方法 – 返回值"></a>catch方法 – 返回值</h3><p>上catch方法也是会返回一个Promise对象的，所以catch方法后面我们可以继续调用then方法或者catch方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">  	<span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// reject(&quot;error: aaaaa&quot;)</span></span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&quot;aaaaaa&quot;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"><span class="comment">// 2.catch方法的执行时机</span></span><br><span class="line">    promise.<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;then第一次回调:&quot;</span>, res)</span><br><span class="line">      <span class="comment">// throw new Error(&quot;第二个Promise的异常error&quot;) </span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">&quot;bbbbbb&quot;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;then第二次回调:&quot;</span>, res)</span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;第三个Promise的异常error&quot;</span>)</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;then第三次回调:&quot;</span>, res)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;catch回调被执行:&quot;</span>, err)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688456455083-3cfd4dc4-b5e2-42ed-a1b0-0f8d8d11de77.png"></p>
<h3 id="finally方法"><a href="#finally方法" class="headerlink" title="finally方法"></a>finally方法</h3><ul>
<li>finally是在ES9（ES2018）中新增的一个特性：表示无论Promise对象无论变成fulfilled还是rejected状态，最终都会被执行 的代码</li>
<li>finally方法是不接收参数的，因为无论前面是fulfilled状态，还是rejected状态，它都会执行。</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688456562252-c0a4b858-893f-4469-887f-fce261cf5c69.png"></li>
</ul>
<h3 id="resolve方法"><a href="#resolve方法" class="headerlink" title="resolve方法"></a>resolve方法</h3><ul>
<li>前面我们学习的then、catch、finally方法都属于<font style="color:#DF2A3F;">Promise的实例方法</font>，都是<font style="color:#DF2A3F;">存放在Promise的prototype</font>上的。<ul>
<li>下面我们再来学习一下<font style="color:#DF2A3F;">Promise的类方法</font>。</li>
</ul>
</li>
<li>有时候我们已经有一个<font style="color:#DF2A3F;">现成的内容</font>了，希望<font style="color:#DF2A3F;">将其转成Promise来使用</font>，这个时候我们可以<font style="color:#DF2A3F;">使用 Promise.resolve 方法</font>来完成。<ul>
<li><font style="color:#DF2A3F;">Promise.resolve的用法相当于new Promise，并且执行resolve操作：</font><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688456952988-b6eb49be-dafe-445c-b41d-375070bba6f5.png"></li>
</ul>
</li>
<li>resolve参数的形态：<ul>
<li>情况一：参数是一个普通的值或者对象</li>
<li>情况二：参数本身是Promise</li>
<li>情况三：参数是一个thenable</li>
</ul>
</li>
</ul>
<h3 id="reject方法"><a href="#reject方法" class="headerlink" title="reject方法"></a>reject方法</h3><ul>
<li>reject方法类似于resolve方法，只是会将Promise对象的状态设置为reject状态。</li>
<li>Promise.reject的用法相当于new Promise，只是会调用reject：<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688457047452-4a0bbd87-7267-403c-bd14-1e11425b7146.png"></li>
<li>Promise.reject传入的参数无论是什么形态，都会直接作为reject状态的参数传递到catch的。</li>
</ul>
<h3 id="all方法"><a href="#all方法" class="headerlink" title="all方法"></a>all方法</h3><ul>
<li>另外一个类方法是Promise.all：</li>
<li>它的作用是将多个Promise包裹在一起形成一个新的Promise</li>
<li>新的Promise状态由包裹的所有Promise共同决定：<ul>
<li>当所有的Promise状态变成fulfilled状态时，新的Promise状态为fulfilled，并且会将所有Promise的返回值组成一个数组；</li>
<li>当有一个Promise状态为reject时，新的Promise状态为reject，并且会将第一个reject的返回值作为参数；</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建三个Promise</span></span><br><span class="line">   <span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="title function_">resolve</span>(<span class="string">&quot;p1 resolve&quot;</span>)</span><br><span class="line">       <span class="comment">// reject(&quot;p1 reject error&quot;)</span></span><br><span class="line">     &#125;, <span class="number">3000</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="title function_">resolve</span>(<span class="string">&quot;p2 resolve&quot;</span>)</span><br><span class="line">     &#125;, <span class="number">2000</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="title function_">resolve</span>(<span class="string">&quot;p3 resolve&quot;</span>)</span><br><span class="line">     &#125;, <span class="number">5000</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// all:全部/所有</span></span><br><span class="line">   <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2, p3]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;all promise res:&quot;</span>, res)</span><br><span class="line">   &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;all promise err:&quot;</span>, err)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688457762192-afa7ee05-e9df-4bd0-a826-9d29a7a3e187.png"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建三个Promise</span></span><br><span class="line">   <span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="comment">// resolve(&quot;p1 resolve&quot;)</span></span><br><span class="line">       <span class="title function_">reject</span>(<span class="string">&quot;p1 reject error&quot;</span>)</span><br><span class="line">     &#125;, <span class="number">3000</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="title function_">resolve</span>(<span class="string">&quot;p2 resolve&quot;</span>)</span><br><span class="line">     &#125;, <span class="number">2000</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       <span class="title function_">resolve</span>(<span class="string">&quot;p3 resolve&quot;</span>)</span><br><span class="line">     &#125;, <span class="number">5000</span>)</span><br><span class="line">   &#125;)</span><br><span class="line"></span><br><span class="line">   <span class="comment">// all:全部/所有</span></span><br><span class="line">   <span class="title class_">Promise</span>.<span class="title function_">all</span>([p1, p2, p3]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;all promise res:&quot;</span>, res)</span><br><span class="line">   &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;all promise err:&quot;</span>, err)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688457824947-6eec1eb4-4890-4a47-9c40-e9d4a318efc7.png"></p>
<h3 id="allSettled方法"><a href="#allSettled方法" class="headerlink" title="allSettled方法"></a>allSettled方法</h3><ul>
<li>all方法有一个缺陷：当有其中一个Promise变成reject状态时，新Promise就会立即变成对应的reject状态。<ul>
<li>那么对于resolved的，以及依然处于pending状态的Promise，我们是获取不到对应的结果的；</li>
</ul>
</li>
<li>在ES11（ES2020）中，添加了新的API Promise.allSettled：<ul>
<li>该方法会在所有的Promise都有结果（settled），无论是fulfilled，还是rejected时，才会有最终的状态；</li>
<li>并且这个Promise的结果一定是fulfilled的；</li>
</ul>
</li>
<li>我们来看一下打印的结果：<ul>
<li>allSettled的结果是一个数组，数组中存放着每一个Promise的结果，并且是对应一个对象的；</li>
<li>这个对象中包含status状态，以及对应的value值；</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建三个Promise</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// resolve(&quot;p1 resolve&quot;)</span></span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&quot;p1 reject error&quot;</span>)</span><br><span class="line">  &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;p2 resolve&quot;</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;p3 resolve&quot;</span>)</span><br><span class="line">  &#125;, <span class="number">5000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 类方法: allSettled</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">allSettled</span>([p1, p2, p3]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;all settled:&quot;</span>, res)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688457930619-1d21b465-77a8-40a4-b313-dfec3671c0af.png"></p>
<h3 id="race方法"><a href="#race方法" class="headerlink" title="race方法"></a>race方法</h3><ul>
<li>如果有一个Promise有了结果，我们就希望决定最终新Promise的状态，那么可以使用race方法<ul>
<li>race是竞技、竞赛的意思，表示多个Promise相互竞争，谁先有结果，那么就使用谁的结果；</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建三个Promise</span></span><br><span class="line"><span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;p1 resolve&quot;</span>)</span><br><span class="line">    <span class="comment">// reject(&quot;p1 reject error&quot;)</span></span><br><span class="line">  &#125;, <span class="number">3000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// resolve(&quot;p2 resolve&quot;)</span></span><br><span class="line">    <span class="title function_">reject</span>(<span class="string">&quot;p2 reject error&quot;</span>)</span><br><span class="line">  &#125;, <span class="number">2000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;p3 resolve&quot;</span>)</span><br><span class="line">  &#125;, <span class="number">5000</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类方法: race方法</span></span><br><span class="line"><span class="comment">// 特点: 会等到一个Promise有结果(无论这个结果是fulfilled还是rejected)</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">race</span>([p1, p2, p3]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;race promise:&quot;</span>, res)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;race promise err:&quot;</span>, err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688457987489-6ab8d093-5dcf-4d7d-b9db-ff869ff02efc.png"></p>
<h3 id="any方法"><a href="#any方法" class="headerlink" title="any方法"></a>any方法</h3><ul>
<li>any方法是ES12中新增的方法，和race方法是类似的：<ul>
<li>any方法会等到一个fulfilled状态，才会决定新Promise的状态；</li>
<li>如果所有的Promise都是reject的，那么也会等到所有的Promise都变成rejected状态；</li>
</ul>
</li>
<li>如果所有的Promise都是reject的，那么会报一个AggregateError的错误。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建三个Promise</span></span><br><span class="line">    <span class="keyword">const</span> p1 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// resolve(&quot;p1 resolve&quot;)</span></span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&quot;p1 reject error&quot;</span>)</span><br><span class="line">      &#125;, <span class="number">3000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> p2 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// resolve(&quot;p2 resolve&quot;)</span></span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&quot;p2 reject error&quot;</span>)</span><br><span class="line">      &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> p3 = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// resolve(&quot;p3 resolve&quot;)</span></span><br><span class="line">        <span class="title function_">reject</span>(<span class="string">&quot;p3 reject error&quot;</span>)</span><br><span class="line">      &#125;, <span class="number">5000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 类方法: any方法</span></span><br><span class="line">    <span class="title class_">Promise</span>.<span class="title function_">any</span>([p1, p2, p3]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;any promise res:&quot;</span>, res)</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;any promise err:&quot;</span>, err)</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688458064749-19beab3a-5630-472c-9e76-496a02195b69.png"></p>
]]></content>
      <categories>
        <category>JS高级</category>
      </categories>
      <tags>
        <tag>JS高级</tag>
      </tags>
  </entry>
  <entry>
    <title>JS高级-await</title>
    <url>/2024/09/15/JS%E9%AB%98%E7%BA%A7-await_async_%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/</url>
    <content><![CDATA[<h3 id="异步函数-asyncfunction"><a href="#异步函数-asyncfunction" class="headerlink" title="异步函数 asyncfunction"></a><strong><font style="color:#404040;">异步函数 asyncfunction</font></strong></h3><ul>
<li><font style="color:#404040;">async关键字用于声明一个异步函数：</font><ul>
<li><font style="color:#404040;">async是asynchronous单词的缩写，异步、非同步；</font></li>
<li>a<font style="color:#404040;">sync是synchronous单词的缩写，同步、同时；</font></li>
</ul>
</li>
<li><font style="color:#404040;">async异步函数可以有很多中写法：</font></li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688466858938-e0db8ba0-d96b-4674-ab86-3ee1a2555a90.png"></li>
</ul>
<h3 id="异步函数的执行流程"><a href="#异步函数的执行流程" class="headerlink" title="异步函数的执行流程"></a><strong><font style="color:#404040;">异步函数的执行流程</font></strong></h3><ul>
<li><font style="color:#404040;">异步函数的内部代码执行过程和普通的函数是一致的，默认情况下也是会被同步执行。</font></li>
<li><font style="color:#404040;">异步函数有返回值时，和普通函数会有区别：</font><ul>
<li><font style="color:red;">情况一：</font><font style="color:#404040;">异步函数也可以有返回值，但是异步函数的返回值相当于被包裹到Promise.resolve中；</font></li>
<li><font style="color:red;">情况二：</font><font style="color:#404040;">如果我们的异步函数的返回值是Promise，状态由会由Promise决定；</font></li>
<li><font style="color:red;">情况三：</font><font style="color:#404040;">如果我们的异步函数的返回值是一个对象并且实现了thenable，那么会由对象的then方法来决定；</font></li>
</ul>
</li>
<li><font style="color:#404040;">如果我们在async中抛出了异常，那么程序它并不会像普通函数一样报错，而是会作为Promise的reject来传递；</font></li>
</ul>
<p><font style="color:#404040;"></font></p>
<p><font style="color:#404040;">异步函数返回值：</font></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo2</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="comment">// 1.返回一个普通的值</span></span><br><span class="line">   <span class="comment">// -&gt; Promise.resolve(321)</span></span><br><span class="line">   <span class="keyword">return</span> [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>]</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="title function_">foo2</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res:&quot;</span>, res)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688467825975-5a652728-a006-4186-a792-7eb469c2151b.png"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo2</span>(<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 2.返回一个Promise</span></span><br><span class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">       <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">         <span class="title function_">resolve</span>(<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line">       &#125;, <span class="number">3000</span>)</span><br><span class="line">     &#125;)</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="title function_">foo2</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res:&quot;</span>, res)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688467869788-cb61a771-cbb9-4ca0-a191-096eb6f4c7ae.png"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo2</span>(<span class="params"></span>) &#123;</span><br><span class="line">     </span><br><span class="line">     <span class="comment">// 3.返回一个thenable对象</span></span><br><span class="line">     <span class="keyword">return</span> &#123;</span><br><span class="line">       <span class="attr">then</span>: <span class="keyword">function</span>(<span class="params">resolve, reject</span>) &#123;</span><br><span class="line">         <span class="title function_">resolve</span>(<span class="string">&quot;bbb&quot;</span>)</span><br><span class="line">       &#125;</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="title function_">foo2</span>().<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res:&quot;</span>, res)</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688467901898-bd6ab558-6c46-4c9e-9e79-2c54f8c6338f.png"></p>
<h3 id="await关键字"><a href="#await关键字" class="headerlink" title="await关键字"></a><strong><font style="color:#404040;">await关键字</font></strong></h3><ul>
<li><font style="color:red;">async函数另外一个特殊之处</font><font style="color:#404040;">就是可以在它内部</font><font style="color:red;">使用await关键字</font><font style="color:#404040;">，而</font><font style="color:red;">普通函数中是不可以</font><font style="color:#404040;">的。</font></li>
<li><font style="color:#404040;">await关键字有什么特点呢？</font><ul>
<li><font style="color:#404040;">通常使用await是后面会</font><font style="color:red;">跟上一个表达式</font><font style="color:#404040;">，这个</font><font style="color:red;">表达式会返回一个Promise</font><font style="color:#404040;">；</font></li>
<li><font style="color:#404040;">那么await会</font><font style="color:red;">等到Promise的状态变成fulfilled状态</font><font style="color:#404040;">，之后</font><font style="color:red;">继续执行异步函数</font><font style="color:#404040;">；</font></li>
</ul>
</li>
<li><font style="color:#404040;">如果await后面是一个</font><font style="color:red;">普通的值</font><font style="color:#404040;">，那么会</font><font style="color:red;">直接返回这个值</font><font style="color:#404040;">；</font></li>
<li><font style="color:#404040;">如果await后面是一个</font><font style="color:red;">thenable的对象</font><font style="color:#404040;">，那么会根据对象的</font><font style="color:red;">then方法调用来决定后续的值</font><font style="color:#404040;">；</font></li>
<li><font style="color:#404040;">如果await后面的表达式，返回的Promise是</font><font style="color:red;">reject的状态</font><font style="color:#404040;">，那么会将这个</font><font style="color:red;">reject结果直接作为函数的Promise的reject值</font><font style="color:#404040;">；</font></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">requestData</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;request data&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(url)</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;test function&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&quot;test&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bar function&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&quot;bar&quot;</span>)</span><br><span class="line">    &#125;, <span class="number">2000</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">demo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;demo function&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">then</span>: <span class="keyword">function</span>(<span class="params">resolve</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>(<span class="string">&quot;demo&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.调用的入口async函数</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo function&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res1 = <span class="keyword">await</span> <span class="title function_">requestData</span>(<span class="string">&quot;why&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res1:&quot;</span>, res1)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res2 = <span class="keyword">await</span> <span class="title function_">test</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res2:&quot;</span>, res2)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res3 = <span class="keyword">await</span> <span class="title function_">bar</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res3:&quot;</span>, res3)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> res4 = <span class="keyword">await</span> <span class="title function_">demo</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res4:&quot;</span>, res4)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688468251698-51217d68-63e4-4518-91dd-5d6a937cf541.png"></p>
<h3 id="宏任务和微任务"><a href="#宏任务和微任务" class="headerlink" title="宏任务和微任务"></a><strong><font style="color:#404040;">宏任务和微任务</font></strong></h3><ul>
<li><font style="color:#404040;">但是事件循环中并非只维护着一个队列，事实上是有两个队列：</font><ul>
<li><font style="color:red;">宏任务队列（macrotask queue）</font><font style="color:#404040;">：ajax、setTimeout、setInterval、DOM监听、UI Rendering等</font></li>
<li><font style="color:red;">微任务队列（microtask queue）</font><font style="color:#404040;">：Promise的then回调、 Mutation Observer API、queueMicrotask()等</font></li>
</ul>
</li>
<li><font style="color:#404040;">那么事件循环对于两个队列的优先级是怎么样的呢？</font><ul>
<li><font style="color:#404040;">1.</font><font style="color:red;">main script中的代码优先执行</font><font style="color:#404040;">（编写的顶层script代码）；</font></li>
<li><font style="color:#404040;">2.在</font><font style="color:red;">执行任何一个宏任务之前（不是队列，是一个宏任务）</font><font style="color:#404040;">，都会</font><font style="color:red;">先查看微任务队列中是否有任务需要执行</font><ul>
<li><font style="color:#404040;">也就是宏任务执行之前，必须保证微任务队列是空的；</font></li>
<li><font style="color:#404040;">如果不为空，那么就优先执行微任务队列中的任务（回调）；</font></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script start&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout1&quot;</span>);</span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">      &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">          <span class="title function_">resolve</span>();</span><br><span class="line">        &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;then4&quot;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;then2&quot;</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;promise1&quot;</span>);</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;then1&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout2&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">queueMicrotask</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;queueMicrotask1&quot;</span>)</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;then3&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script end&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688469417465-64861520-1c6d-4740-8585-6139d91aa92c.png"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script start&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">requestData</span> (url) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;requestData&quot;</span>)</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout&quot;</span>)</span><br><span class="line">          <span class="title function_">resolve</span>(url)</span><br><span class="line">        &#125;, <span class="number">2000</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.await/async</span></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">getData</span> () &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;getData start&quot;</span>)</span><br><span class="line">      <span class="keyword">const</span> res = <span class="keyword">await</span> <span class="title function_">requestData</span>(<span class="string">&quot;why&quot;</span>)<span class="comment">//  console.log(&quot;getData start&quot;) 和 “=”后面的代码同时执行，但不执行“=”前面的代码 </span></span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;then1-res:&quot;</span>, res)<span class="comment">// 这些代码和上边“const res”属于一部分，在微队列中</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;getData end&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">getData</span>()</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;script end&quot;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688469531134-b2560c34-bb47-4311-a7f6-908431c530a2.png"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async1</span> () &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 start&#x27;</span>)</span><br><span class="line">      <span class="keyword">await</span> <span class="title function_">async2</span>(); <span class="comment">// await的上边代码和自己右边的代码属于一部分，会同时执行。</span></span><br><span class="line">      <span class="comment">//                  左边的代码会和下面的代码一起执行</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async1 end&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">async2</span> () &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;async2&#x27;</span>)</span><br><span class="line">      <span class="comment">// 这里默认return undefined=&gt;async1函数中的“await async2()”函数</span></span><br><span class="line">      <span class="comment">// 会Promise.resolve(undefined)，将console.log(&#x27;async1 end&#x27;)加入微队列中</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script start&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;setTimeout&#x27;</span>)</span><br><span class="line">    &#125;, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">async1</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise1&#x27;</span>)</span><br><span class="line">      <span class="title function_">resolve</span>();</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;promise2&#x27;</span>)</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;script end&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688469830930-f535d575-5c21-4fac-b8ce-009a084c3ccb.png"></p>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>JS高级</category>
      </categories>
      <tags>
        <tag>JS高级</tag>
      </tags>
  </entry>
  <entry>
    <title>JS高级-内存管理和闭包</title>
    <url>/2024/08/27/JS%E9%AB%98%E7%BA%A7-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E5%92%8C%E9%97%AD%E5%8C%85/</url>
    <content><![CDATA[<h3 id="JavaScript的内存管理"><a href="#JavaScript的内存管理" class="headerlink" title="JavaScript的内存管理"></a>JavaScript的内存管理</h3><ul>
<li>JavaScript会在定义数据时为我们分配内存。</li>
<li>但是内存分配方式是一样的吗？<ul>
<li>JS对于原始数据类型内存的分配会在执行时， 直接在栈空间进行分配；</li>
<li>JS对于复杂数据类型内存的分配会在堆内存中 开辟一块空间，并且将这块空间的指针返回值 变量引用；</li>
</ul>
</li>
</ul>
<h3 id="常见的GC算法-–-引用计数-（不重要）"><a href="#常见的GC算法-–-引用计数-（不重要）" class="headerlink" title="常见的GC算法 – 引用计数   （不重要）"></a>常见的GC算法 – 引用计数   （不重要）</h3><ul>
<li>引用计数：<ul>
<li>当<strong>一个对象有一个引用指向它</strong>时，那么这个<strong>对象的引用就+1；</strong></li>
<li>当一个<strong>对象的引用为0</strong>时，这个对象<strong>就可以被销毁掉</strong>；</li>
</ul>
</li>
<li>这个算法有一个很大的弊端就是会产生循环引用；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684462751783-6e5c5473-27dd-4239-8afa-534f8313dcf2.png#averageHue=%23f5f5f5&clientId=u56663c20-dd75-4&from=paste&height=189&id=u001d0c06&originHeight=238&originWidth=704&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=59846&status=done&style=none&taskId=uaf0cc87a-0656-4d8e-b0d7-f8a87a48ecb&title=&width=557.6237413151905" alt="image.png"></li>
</ul>
<h3 id="常见的GC算法-–-标记清除-（不重要）"><a href="#常见的GC算法-–-标记清除-（不重要）" class="headerlink" title="常见的GC算法 – 标记清除 （不重要）"></a>常见的GC算法 – 标记清除 （不重要）</h3><ul>
<li>标记清除：<ul>
<li>标记清除的核心思路是可达性</li>
<li>这个算法是设置一个根对象（root object），垃圾回收器会定期从这个根开始，找所有从根开始有引用到的对象，对于哪些 没有引用到的对象，就认为是不可用的对象；</li>
<li>这个算法可以很好的解决循环引用的问题；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684462825211-6185a789-6766-4ad3-b435-573772bd2cd7.png#averageHue=%23fbf9f1&clientId=u56663c20-dd75-4&from=paste&height=277&id=ud9bed351&originHeight=350&originWidth=886&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=219762&status=done&style=none&taskId=ub827aeb7-b5f0-4301-8bce-05f25744043&title=&width=701.7821517120153" alt="image.png"></li>
</ul>
</li>
</ul>
<h3 id="闭包的定义"><a href="#闭包的定义" class="headerlink" title="闭包的定义"></a>闭包的定义</h3><ul>
<li>一个普通的函数function，如果它可以访问外层作用域的自由变量，那么这个函数和周围环境就是一个闭包；<ul>
<li>从广义的角度来说：JavaScript中的函数都是闭包；</li>
<li>从狭义的角度来说：JavaScript中一个函数，如果访问了外层作用域的变量，那么它是一个闭包；</li>
</ul>
</li>
</ul>
<h3 id="闭包的访问过程"><a href="#闭包的访问过程" class="headerlink" title="闭包的访问过程"></a>闭包的访问过程</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createAdder</span>(<span class="params">count</span>) &#123;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">adder</span>(<span class="params">num</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> count + num</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> adder</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> adder5 = <span class="title function_">createAdder</span>(<span class="number">5</span>)</span><br><span class="line">  <span class="title function_">adder5</span>(<span class="number">100</span>)</span><br><span class="line">  <span class="title function_">adder5</span>(<span class="number">55</span>)</span><br><span class="line">  <span class="title function_">adder5</span>(<span class="number">12</span>)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> adder8 = <span class="title function_">createAdder</span>(<span class="number">8</span>)</span><br><span class="line">  <span class="title function_">adder8</span>(<span class="number">22</span>)</span><br><span class="line">  <span class="title function_">adder8</span>(<span class="number">35</span>)</span><br><span class="line">  <span class="title function_">adder8</span>(<span class="number">7</span>)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">adder5</span>(<span class="number">24</span>))</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">adder8</span>(<span class="number">30</span>))</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 永远不会再使用adder8</span></span><br><span class="line">  <span class="comment">// 内存泄漏: 对于那些我们永远不会再使用的对象, 但是对于GC来说, 它不知道要进行释放的对应内存会依然保留着</span></span><br><span class="line">  adder8 = <span class="literal">null</span></span><br></pre></td></tr></table></figure>

<p><strong>1.第一次调用createAddr</strong><br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684463242110-cce6fb2e-632c-4d85-bcf5-ba12c8bcb01e.png#averageHue=%23f2eeeb&clientId=u56663c20-dd75-4&from=paste&height=394&id=u233965eb&originHeight=498&originWidth=793&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=53744&status=done&style=none&taskId=u612e6827-9996-4012-8f47-27cac6ace1b&title=&width=628.1187881575938" alt="image.png"><br><strong>2.调用createAddr完成</strong><br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684463438788-54de6744-a515-4070-b93d-a0f0193426fb.png#averageHue=%23f3f0ed&clientId=u56663c20-dd75-4&from=paste&height=521&id=uf02c608f&originHeight=658&originWidth=812&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=62430&status=done&style=none&taskId=u303dac0e-e842-489d-b25d-56ae2ee1ea4&title=&width=643.1682925396799" alt="image.png"><br><strong>3.内部addr执行完成</strong><br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684463497614-d6b29dbe-535f-4152-9af2-7407c56e6ab2.png#averageHue=%23f3f1ef&clientId=u56663c20-dd75-4&from=paste&height=525&id=u451d08df&originHeight=663&originWidth=809&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=57353&status=done&style=none&taskId=ue24e94fe-55dd-46cc-9b88-5336ba50440&title=&width=640.7920550056664" alt="image.png"><br><strong>4.第二次执行createAddr</strong><br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684463529116-696de133-20d1-4cd8-bdb3-ce549a4dadb3.png#averageHue=%23f2efeb&clientId=u56663c20-dd75-4&from=paste&height=518&id=ue93f6374&originHeight=654&originWidth=780&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=69880&status=done&style=none&taskId=uf3736614-1515-40af-8013-9289e631e6b&title=&width=617.8217588435349" alt="image.png"></p>
]]></content>
      <categories>
        <category>JS高级</category>
      </categories>
      <tags>
        <tag>JS高级</tag>
      </tags>
  </entry>
  <entry>
    <title>JS高级-函数this指向</title>
    <url>/2024/08/25/JS%E9%AB%98%E7%BA%A7-%E5%87%BD%E6%95%B0this%E6%8C%87%E5%90%91/</url>
    <content><![CDATA[<h3 id="this到底指向什么呢？"><a href="#this到底指向什么呢？" class="headerlink" title="this到底指向什么呢？"></a>this到底指向什么呢？</h3><ul>
<li>我们先来看一个让人困惑的问题：<ul>
<li>定义一个函数，我们采用三种不同的方式对它进行调用，它产生了三种不同的结果</li>
</ul>
</li>
<li>这个的案例可以给我们什么样的启示呢？<ul>
<li>1.函数在调用时，JavaScript会默认给this绑定一个值；</li>
<li>2.this的绑定和定义的位置（编写的位置）没有关系；</li>
<li>3.this的绑定和调用方式以及调用的位置有关系；</li>
<li>4.this是在运行时被绑定的；</li>
</ul>
</li>
<li>那么this到底是怎么样的绑定规则呢？一起来学习一下吧<ul>
<li>绑定一：<strong>默认</strong>绑定；</li>
<li>绑定二：<strong>隐式</strong>绑定；</li>
<li>绑定三：<strong>显示</strong>绑定；</li>
<li>绑定四：<strong>new</strong>绑定；</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683869312557-57d78b60-eca6-4444-9448-2a6a642c75f5.png#averageHue=%232a2e38&clientId=u7f6ef5f2-bb8d-4&from=paste&height=301&id=u428cf197&originHeight=525&originWidth=573&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=140738&status=done&style=none&taskId=ubfd5e951-ba58-46b3-b9ab-e63d411604f&title=&width=328.83660888671875" alt="image.png"></li>
</ul>
<h3 id="规则一：默认绑定"><a href="#规则一：默认绑定" class="headerlink" title="规则一：默认绑定"></a>规则一：默认绑定</h3><ul>
<li>什么情况下使用默认绑定呢？独立函数调用。<ul>
<li>独立的函数调用我们可以理解成函数没有被绑定到某个对象上进行调用；</li>
</ul>
</li>
<li>我们通过几个案例来看一下，常见的默认绑定</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义函数</span></span><br><span class="line">   <span class="comment">// 1.普通的函数被独立的调用</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">foo</span> () &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo:&quot;</span>, <span class="variable language_">this</span>)</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="title function_">foo</span>()<span class="comment">//window</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 2.函数定义在对象中, 但是独立调用</span></span><br><span class="line">   <span class="keyword">var</span> obj = &#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">     <span class="attr">bar</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;bar:&quot;</span>, <span class="variable language_">this</span>)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> baz = obj.<span class="property">bar</span></span><br><span class="line">   <span class="title function_">baz</span>()<span class="comment">//window</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 3.高阶函数</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">test</span> (fn) &#123;</span><br><span class="line">     <span class="title function_">fn</span>()</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="title function_">test</span>(obj.<span class="property">bar</span>)<span class="comment">//window</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 4.严格模式下, 独立调用的函数中的this指向的是undefined</span></span><br></pre></td></tr></table></figure>

<h3 id="规则二：隐式绑定"><a href="#规则二：隐式绑定" class="headerlink" title="规则二：隐式绑定"></a>规则二：隐式绑定</h3><ul>
<li><strong>另外一种比较常见的调用方式是通过某个对象进行调用的：</strong><ul>
<li>也就是它的调用位置中，是通过某个对象发起的函数调用。</li>
</ul>
</li>
<li>我们通过几个案例来看一下，常见的默认绑定</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 隐式绑定</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">foo</span> () &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo函数:&quot;</span>, <span class="variable language_">this</span>)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> obj = &#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&quot;obj&quot;</span>,</span><br><span class="line">     <span class="attr">bar</span>: foo</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&quot;obj2&quot;</span>,</span><br><span class="line">     <span class="attr">obj</span>: obj</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   obj.<span class="title function_">bar</span>()<span class="comment">//obj</span></span><br><span class="line">   obj2.<span class="property">obj</span>.<span class="title function_">bar</span>()<span class="comment">//obj</span></span><br></pre></td></tr></table></figure>

<h3 id="规则三：显式绑定"><a href="#规则三：显式绑定" class="headerlink" title="规则三：显式绑定"></a>规则三：显式绑定</h3><ul>
<li><strong>隐式绑定有一个前提条件：</strong><ul>
<li>必须在调用的对象内部有一个对函数的引用（比如一个属性）；</li>
<li>如果没有这样的引用，在进行调用时，会报找不到该函数的错误；</li>
<li>正是通过这个引用，间接的将this绑定到了这个对象上；</li>
</ul>
</li>
<li><strong>如果我们不希望在 对象内部 包含这个函数的引用，同时又希望在这个对象上进行强制调用，该怎么做呢？</strong></li>
<li>JavaScript所有的函数都可以使用call和apply方法。<ul>
<li>第一个参数是相同的，要求传入一个对象；<ul>
<li>这个对象的作用是什么呢？就是给this准备的。</li>
<li>在调用这个函数时，会将this绑定到这个传入的对象上。</li>
</ul>
</li>
<li>后面的参数，apply为数组，call为参数列表；<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683869987352-8159a093-7426-4563-a7ac-74685f98e80c.png#averageHue=%23efeeee&clientId=u7f6ef5f2-bb8d-4&from=paste&height=86&id=u68414f13&originHeight=126&originWidth=714&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=32203&status=done&style=none&taskId=u9d4ed6c3-5628-4017-8824-f4f1bdb55b8&title=&width=487.54449462890625" alt="image.png"></li>
</ul>
</li>
<li>因为上面的过程，我们明确的绑定了this指向的对象，所以称之为 <strong>显式绑定</strong>。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 需求：让foo中的this指向obj</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 显式绑定</span></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;why&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span> () &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo函数:&quot;</span>, <span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1：执行函数, 并且函数中的this指向obj对象</span></span><br><span class="line">    <span class="comment">// obj.foo = foo</span></span><br><span class="line">    <span class="comment">// obj.foo()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2：执行函数, 并且强制this就是obj对象(不会和法一一样，在obj中多一个函数)</span></span><br><span class="line">    foo.<span class="title function_">call</span>(obj)<span class="comment">//obj</span></span><br><span class="line">    foo.<span class="title function_">call</span>(<span class="number">123</span>)<span class="comment">//包装类对象Number</span></span><br><span class="line">    foo.<span class="title function_">call</span>(<span class="string">&quot;abc&quot;</span>)<span class="comment">//包装类对象String</span></span><br></pre></td></tr></table></figure>

<h3 id="new绑定"><a href="#new绑定" class="headerlink" title="new绑定"></a>new绑定</h3><ul>
<li><strong>JavaScript中的函数可以当做一个类的构造函数来使用，也就是使用new关键字。</strong></li>
<li><strong>使用new关键字来调用函数是，会执行如下的操作：</strong><ul>
<li>1.创建一个全新的对象；</li>
<li>2.这个新对象会被执行prototype连接；</li>
<li>3.这个新对象会绑定到函数调用的this上（this的绑定在这个步骤完成）；</li>
<li>4.如果函数没有返回其他对象，表达式会返回这个新对象；</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  1.创建新的空对象</span></span><br><span class="line"><span class="comment">  2.将this指向这个空对象</span></span><br><span class="line"><span class="comment">  3.执行函数体中的代码</span></span><br><span class="line"><span class="comment">  4.没有显示返回非空对象时, 默认返回这个对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span> () &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;why&quot;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo函数:&quot;</span>, <span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title function_">foo</span>()<span class="comment">//foo</span></span><br></pre></td></tr></table></figure>

<h3 id="call、apply、bind"><a href="#call、apply、bind" class="headerlink" title="call、apply、bind"></a>call、apply、bind</h3><ul>
<li><strong>通过call或者apply绑定this对象</strong><ul>
<li>显示绑定后，this就会明确的指向绑定的对象</li>
</ul>
</li>
<li><strong>如果我们希望一个函数总是显示的绑定到一个对象上，可以怎么做呢？</strong><ul>
<li>使用bind方法，bind() 方法创建一个新的绑定函数；</li>
<li>绑定函数是一个 exotic function object（怪异函数对象，ECMAScript 2015 中的术语）</li>
<li>在 bind() 被调用时，这个新函数的 this 被指定为 bind() 的第一个参数，而其余参数将作为新函数的参数，供调用时使用。  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683870279870-913f113c-0a80-4128-821a-2b22f496d49f.png#averageHue=%23e9e9e9&clientId=u7f6ef5f2-bb8d-4&from=paste&height=40&id=uf2b6dd33&originHeight=58&originWidth=788&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=18537&status=done&style=none&taskId=u85d355f7-357a-4b96-a521-0ffb0a6d583&title=&width=539.1534423828125" alt="image.png"></li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// call/apply</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span> (name, age, height) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo函数被调用:&quot;</span>, <span class="variable language_">this</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;打印参数:&quot;</span>, name, age, height)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ()调用</span></span><br><span class="line">    <span class="title function_">foo</span>(<span class="string">&quot;why&quot;</span>, <span class="number">18</span>, <span class="number">1.88</span>)<span class="comment">//window why 10 1.88</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// apply</span></span><br><span class="line">    <span class="comment">// 第一个参数: 绑定this</span></span><br><span class="line">    <span class="comment">// 第二个参数: 传入额外的实参, 以数组的形式</span></span><br><span class="line">    foo.<span class="title function_">apply</span>(<span class="string">&quot;apply&quot;</span>, [<span class="string">&quot;kobe&quot;</span>, <span class="number">30</span>, <span class="number">1.98</span>])<span class="comment">//String(apply) kobe 30 1.98</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// call</span></span><br><span class="line">    <span class="comment">// 第一个参数: 绑定this</span></span><br><span class="line">    <span class="comment">// 参数列表: 后续的参数以多参数的形式传递, 会作为实参</span></span><br><span class="line">    foo.<span class="title function_">call</span>(<span class="string">&quot;call&quot;</span>, <span class="string">&quot;james&quot;</span>, <span class="number">25</span>, <span class="number">2.05</span>)<span class="comment">//String(call) james 25 2.05</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span> (name, age, height, address) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo:&quot;</span>, <span class="variable language_">this</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;参数:&quot;</span>, name, age, height, address)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">&quot;why&quot;</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 需求: 调用foo时, 总是绑定到obj对象身上(不希望obj对象身上有函数)</span></span><br><span class="line"><span class="comment">// 1.bind函数的基本使用</span></span><br><span class="line"><span class="comment">// var bar = foo.bind(obj)</span></span><br><span class="line"><span class="comment">// bar() // this -&gt; obj</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.bind函数的其他参数(了解)</span></span><br><span class="line"><span class="keyword">var</span> bar = foo.<span class="title function_">bind</span>(obj, <span class="string">&quot;kobe&quot;</span>, <span class="number">18</span>, <span class="number">1.88</span>)</span><br><span class="line"><span class="title function_">bar</span>(<span class="string">&quot;james&quot;</span>)<span class="comment">//this-&gt;obj kobe 18 1.88 james</span></span><br></pre></td></tr></table></figure>

<h3 id="内置函数的绑定思考"><a href="#内置函数的绑定思考" class="headerlink" title="内置函数的绑定思考"></a>内置函数的绑定思考</h3><ul>
<li>有些时候，我们会调用一些JavaScript的内置函数，或者一些第三方库中的内置函数。<ul>
<li>这些内置函数会要求我们传入另外一个函数；</li>
<li>我们自己并不会显示的调用这些函数，而且JavaScript内部或者第三方库内部会帮助我们执行；</li>
<li>这些函数中的this又是如何绑定的呢？</li>
</ul>
</li>
<li>setTimeout、数组的forEach、div的点</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 内置函数(第三方库): 根据一些经验</span></span><br><span class="line">    <span class="comment">// 1.定时器</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;定时器函数:&quot;</span>, <span class="variable language_">this</span>)<span class="comment">//window</span></span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.按钮的点击监听</span></span><br><span class="line">    <span class="keyword">var</span> btnEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;button&quot;</span>)</span><br><span class="line">    btnEl.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;btn的点击:&quot;</span>, <span class="variable language_">this</span>)<span class="comment">//btn</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    btnEl.<span class="title function_">addEventListener</span>(<span class="string">&quot;click&quot;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;btn的点击:&quot;</span>, <span class="variable language_">this</span>)<span class="comment">//btn</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// // 3.forEach</span></span><br><span class="line">    <span class="keyword">var</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>]</span><br><span class="line">    names.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;forEach:&quot;</span>, <span class="variable language_">this</span>)<span class="comment">//window</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    names.<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;forEach:&quot;</span>, <span class="variable language_">this</span>)<span class="comment">//String(aaa)</span></span><br><span class="line">    &#125;, <span class="string">&quot;aaaa&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="规则优先级"><a href="#规则优先级" class="headerlink" title="规则优先级"></a>规则优先级</h3><ul>
<li>学习了四条规则，接下来开发中我们只需要去查找函数的调用应用了哪条规则即可，但是如果一个函数调用位置应用了多 条规则，优先级谁更高呢？</li>
<li>1.默认规则的优先级最低<ul>
<li>毫无疑问，默认规则的优先级是最低的，因为存在其他规则时，就会通过其他规则的方式来绑定this</li>
</ul>
</li>
<li>2.显示绑定优先级高于隐式绑定<ul>
<li>代码测试</li>
</ul>
</li>
<li>3.new绑定优先级高于隐式绑定<ul>
<li>代码测试</li>
</ul>
</li>
<li>4.new绑定优先级高于bind<ul>
<li>new绑定和call、apply是不允许同时使用的，所以不存在谁的优先级更高</li>
<li>new绑定可以和bind一起使用，new绑定优先级更高</li>
<li>代码测试</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span> () &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo:&quot;</span>, <span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 比较优先级:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.显式绑定绑定的优先级高于隐式绑定</span></span><br><span class="line"><span class="comment">// 1.1.测试一:apply高于默认绑定</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">foo</span>: foo &#125;</span><br><span class="line">obj.<span class="property">foo</span>.<span class="title function_">apply</span>(<span class="string">&quot;abc&quot;</span>)<span class="comment">//String(abc)</span></span><br><span class="line">obj.<span class="property">foo</span>.<span class="title function_">call</span>(<span class="string">&quot;abc&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.2.测试二:bind高于默认绑定</span></span><br><span class="line"><span class="keyword">var</span> bar = foo.<span class="title function_">bind</span>(<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">  <span class="attr">baz</span>: bar</span><br><span class="line">&#125;</span><br><span class="line">obj2.<span class="title function_">baz</span>()<span class="comment">// String(aaa)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.new绑定优先级高于隐式绑定</span></span><br><span class="line"><span class="keyword">var</span> obj3 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span><br><span class="line">  <span class="attr">foo</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo:&quot;</span>, <span class="variable language_">this</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo:&quot;</span>, <span class="variable language_">this</span> === obj)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> obj3.<span class="title function_">foo</span>()<span class="comment">//空对象foo false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.new/显式</span></span><br><span class="line"><span class="comment">// 3.1. new不可以和apply/call一起使用</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.2. new优先级高于bind</span></span><br><span class="line"><span class="comment">// function foo() &#123;</span></span><br><span class="line"><span class="comment">//   console.log(&quot;foo:&quot;, this)</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="keyword">var</span> bindFn = foo.<span class="title function_">bind</span>(<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line"><span class="keyword">new</span> <span class="title function_">bindFn</span>() <span class="comment">//空对象</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.bind/apply优先级</span></span><br><span class="line"><span class="comment">// bind优先级高于apply/call</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span> () &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo:&quot;</span>, <span class="variable language_">this</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> bindFn = foo.<span class="title function_">bind</span>(<span class="string">&quot;aaa&quot;</span>)</span><br><span class="line">bindFn.<span class="title function_">call</span>(<span class="string">&quot;bbb&quot;</span>)<span class="comment">//String(aaa)</span></span><br></pre></td></tr></table></figure>

<h3 id="this规则之外-–-忽略显示绑定"><a href="#this规则之外-–-忽略显示绑定" class="headerlink" title="this规则之外 – 忽略显示绑定"></a>this规则之外 – 忽略显示绑定</h3><ul>
<li><strong>我们讲到的规则已经足以应付平时的开发，但是总有一些语法，超出了我们的规则之外。</strong></li>
<li>**情况一：如果在显示绑定中，我们传入一个null或者undefined，那么这个显示绑定会被忽略，使用默认规则：  **</li>
<li><strong>情况二：创建一个函数的 间接引用，这种情况使用默认绑定规则。</strong><ul>
<li>赋值(obj2.foo &#x3D; obj1.foo)的结果是foo函数；</li>
<li>foo函数被直接调用，那么是默认绑定；</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.情况一: 显式绑定null/undefined, 那么使用的规则是默认绑定</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span> () &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo:&quot;</span>, <span class="variable language_">this</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    foo.<span class="title function_">apply</span>(<span class="string">&quot;abc&quot;</span>)<span class="comment">//String(abc)</span></span><br><span class="line">    foo.<span class="title function_">apply</span>(<span class="literal">null</span>) <span class="comment">//window</span></span><br><span class="line">    foo.<span class="title function_">apply</span>(<span class="literal">undefined</span>) <span class="comment">//window</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.情况二: 间接函数引用</span></span><br><span class="line">    <span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;obj1&quot;</span>,</span><br><span class="line">      <span class="attr">foo</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo:&quot;</span>, <span class="variable language_">this</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> obj2 = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;obj2&quot;</span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#123;&#125;[]()</span></span><br><span class="line"></span><br><span class="line">    obj2.<span class="property">foo</span> = obj1.<span class="property">foo</span></span><br><span class="line">    obj2.<span class="title function_">foo</span>(); <span class="comment">// obj2</span></span><br><span class="line">    (obj2.<span class="property">foo</span> = obj1.<span class="property">foo</span>)() <span class="comment">// window</span></span><br></pre></td></tr></table></figure>

<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><ul>
<li>箭头函数是ES6之后增加的一种编写函数的方法，并且它比函数表达式要更加简洁：<ul>
<li>箭头函数不会绑定this、arguments属性；</li>
<li>箭头函数不能作为构造函数来使用（不能和new一起来使用，会抛出错误）；</li>
</ul>
</li>
<li>箭头函数如何编写呢？</li>
<li>(): 函数的参数<ul>
<li>{}: 函数的执行体</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.之前的方式</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo1</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    <span class="keyword">var</span> foo2 = <span class="keyword">function</span>(<span class="params">name, age</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;函数体代码&quot;</span>, <span class="variable language_">this</span>, <span class="variable language_">arguments</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.箭头函数完整写法</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">foo3</span> = (<span class="params">name, age</span>) =&gt; &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;箭头函数的函数体&quot;</span>)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(name, age)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.箭头函数的练习</span></span><br><span class="line">    <span class="comment">// 3.1. forEach</span></span><br><span class="line">    <span class="keyword">var</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>]</span><br><span class="line">    names.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(item, index, arr)</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="comment">// 3.2. setTimeout</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;setTimeout&quot;</span>)</span><br><span class="line">    &#125;, <span class="number">3000</span>)</span><br></pre></td></tr></table></figure>

<h3 id="箭头函数的编写优化"><a href="#箭头函数的编写优化" class="headerlink" title="箭头函数的编写优化"></a>箭头函数的编写优化</h3><ul>
<li><strong>优化一: 如果只有一个参数()可以省略</strong></li>
<li><strong>优化二: 如果函数执行体中只有一行代码, 那么可以省略大括号</strong><ul>
<li>并且这行代码的返回值会作为整个函数的返回值</li>
</ul>
</li>
<li>**优化三: 如果函数执行体只有返回一个对象, 那么需要给这个对象加上()  **</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>]</span><br><span class="line"> <span class="keyword">var</span> nums = [<span class="number">20</span>, <span class="number">30</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">111</span>]</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 1.优化一: 如果箭头函数只有一个参数, 那么()可以省略</span></span><br><span class="line"> names.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line"> &#125;)</span><br><span class="line"> <span class="keyword">var</span> newNums = nums.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">return</span> item % <span class="number">2</span> === <span class="number">0</span></span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 2.优化二: 如果函数体中只有一行执行代码, 那么&#123;&#125;可以省略</span></span><br><span class="line"> names.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(item))</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 一行代码中不能带return关键字, 如果省略, 需要带return一起省略(下一条规则)</span></span><br><span class="line"> <span class="comment">// var newNums = nums.filter(item =&gt; &#123;</span></span><br><span class="line"> <span class="comment">//   return item % 2 === 0</span></span><br><span class="line"> <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 3.优化三: 只有一行代码时, 这行代码的表达式结果会作为函数的返回值默认返回的</span></span><br><span class="line"> <span class="comment">// var newNums = nums.filter(item =&gt; item % 2 === 0)</span></span><br><span class="line"> <span class="keyword">var</span> newNums = nums.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item % <span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 4.优化四: 如果默认返回值是一个对象, 那么这个对象必须加()</span></span><br><span class="line"> <span class="comment">// 注意: 在react中我会经常使用 redux</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// var arrFn = () =&gt; [&quot;abc&quot;, &quot;cba&quot;] // 返回值就是数组</span></span><br><span class="line"> <span class="comment">// var arrFn = () =&gt; &#123;&#125; // 注意: 这里是&#123;&#125;执行体 ,返回值不会认为是对象</span></span><br><span class="line"> <span class="keyword">var</span> <span class="title function_">arrFn</span> = (<span class="params"></span>) =&gt; (&#123; <span class="attr">name</span>: <span class="string">&quot;why&quot;</span> &#125;) <span class="comment">// 表示对象</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">arrFn</span>())</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 箭头函数实现nums的所有偶数平方的和</span></span><br><span class="line"> <span class="keyword">var</span> nums = [<span class="number">20</span>, <span class="number">30</span>, <span class="number">11</span>, <span class="number">15</span>, <span class="number">111</span>]</span><br><span class="line"> <span class="keyword">var</span> result = nums.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item % <span class="number">2</span> === <span class="number">0</span>)</span><br><span class="line">   .<span class="title function_">map</span>(<span class="function"><span class="params">item</span> =&gt;</span> item * item)</span><br><span class="line">   .<span class="title function_">reduce</span>(<span class="function">(<span class="params">prevValue, item</span>) =&gt;</span> prevValue + item)</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure>

<h3 id="箭头函数的应用"><a href="#箭头函数的应用" class="headerlink" title="箭头函数的应用"></a>箭头函数的应用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 网络请求的工具函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">request</span> (url, callbackFn) &#123;</span><br><span class="line">  <span class="keyword">var</span> results = [<span class="string">&quot;abc&quot;</span>, <span class="string">&quot;cba&quot;</span>, <span class="string">&quot;nba&quot;</span>]</span><br><span class="line">  <span class="title function_">callbackFn</span>(results)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实际操作的位置(业务)</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">names</span>: [],</span><br><span class="line">  <span class="attr">network</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 1.早期的时候</span></span><br><span class="line">    <span class="comment">// var _this = this</span></span><br><span class="line">    <span class="comment">// request(&quot;/names&quot;, function(res) &#123;</span></span><br><span class="line">    <span class="comment">//   _this.names = [].concat(res)</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.箭头函数写法</span></span><br><span class="line">    <span class="title function_">request</span>(<span class="string">&quot;/names&quot;</span>, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">names</span> = [].<span class="title function_">concat</span>(res)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">obj.<span class="title function_">network</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br></pre></td></tr></table></figure>

<h3 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;window&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;person&quot;</span>,</span><br><span class="line">  <span class="attr">sayName</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayName</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> sss = person.<span class="property">sayName</span>;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">sss</span>(); <span class="comment">// 绑定: 默认绑定, window -&gt; window</span></span><br><span class="line"></span><br><span class="line">  person.<span class="title function_">sayName</span>(); <span class="comment">// 绑定: 隐式绑定, person -&gt; person</span></span><br><span class="line"></span><br><span class="line">  (person.<span class="property">sayName</span>)(); <span class="comment">// 绑定: 隐式绑定, person -&gt; person</span></span><br><span class="line"></span><br><span class="line">  (b = person.<span class="property">sayName</span>)(); <span class="comment">// 术语: 间接函数引用, window -&gt; window</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">sayName</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683872114083-827b5e58-2cab-44bb-b83f-e93df07b07bf.png#averageHue=%23fbfaf9&clientId=u7f6ef5f2-bb8d-4&from=paste&height=68&id=ubeb12b42&originHeight=86&originWidth=155&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=1879&status=done&style=none&taskId=u0efbc56b-0b50-46a5-8410-6def3949474&title=&width=122.77227259070246" alt="image.png"></p>
<hr>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;&#125; -&gt; 对象</span></span><br><span class="line"><span class="comment">// &#123;&#125; -&gt; 代码块</span></span><br><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;person1&#x27;</span>,</span><br><span class="line">  <span class="attr">foo1</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">foo2</span>: <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>),</span><br><span class="line">  <span class="attr">foo3</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">foo4</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(this) // 第一个表达式this -&gt; person1</span></span><br><span class="line">    <span class="comment">// console.log(this) // 第二个表达式this -&gt; person2</span></span><br><span class="line">    <span class="comment">// console.log(this) // 第三个表达式this -&gt; person1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = &#123; <span class="attr">name</span>: <span class="string">&#x27;person2&#x27;</span> &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始题目:</span></span><br><span class="line">person1.<span class="title function_">foo1</span>(); <span class="comment">// 隐式绑定: person1</span></span><br><span class="line">person1.<span class="property">foo1</span>.<span class="title function_">call</span>(person2); <span class="comment">// 显式绑定: person2</span></span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">foo2</span>(); <span class="comment">// 上层作用域: window</span></span><br><span class="line">person1.<span class="property">foo2</span>.<span class="title function_">call</span>(person2); <span class="comment">// 上层作用域: window</span></span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">foo3</span>()(); <span class="comment">// 默认绑定: window</span></span><br><span class="line">person1.<span class="property">foo3</span>.<span class="title function_">call</span>(person2)(); <span class="comment">// 默认绑定: window</span></span><br><span class="line">person1.<span class="title function_">foo3</span>().<span class="title function_">call</span>(person2); <span class="comment">// 显式绑定: person2</span></span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">foo4</span>()(); <span class="comment">// person1</span></span><br><span class="line">person1.<span class="property">foo4</span>.<span class="title function_">call</span>(person2)(); <span class="comment">// person2</span></span><br><span class="line">person1.<span class="title function_">foo4</span>().<span class="title function_">call</span>(person2); <span class="comment">// person1</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1683872144824-de8957bd-401f-42cb-b75c-290787591c4b.png#averageHue=%23fdfcfc&clientId=u7f6ef5f2-bb8d-4&from=paste&height=211&id=u25255f05&originHeight=266&originWidth=408&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=6818&status=done&style=none&taskId=udc627f0f-6f5b-4452-88de-c0d807a5905&title=&width=323.16830462584903" alt="image.png"></p>
<hr>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  1.创建一个空的对象</span></span><br><span class="line"><span class="comment">  2.将这个空的对象赋值给this</span></span><br><span class="line"><span class="comment">  3.执行函数体中代码</span></span><br><span class="line"><span class="comment">  4.将这个新的对象默认返回</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">foo1</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">foo2</span> = <span class="function">() =&gt;</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>),</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">foo3</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">foo4</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// person1/person都是对象(实例instance)</span></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;person1&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;person2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 面试题目:</span></span><br><span class="line">person1.<span class="title function_">foo1</span>() <span class="comment">// 隐式绑定: person1</span></span><br><span class="line">person1.<span class="property">foo1</span>.<span class="title function_">call</span>(person2) <span class="comment">// 显式绑定: person2</span></span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">foo2</span>() <span class="comment">// 上层作用域查找: person1</span></span><br><span class="line">person1.<span class="property">foo2</span>.<span class="title function_">call</span>(person2) <span class="comment">// 上层作用域查找: person1</span></span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">foo3</span>()() <span class="comment">// 默认绑定: window</span></span><br><span class="line">person1.<span class="property">foo3</span>.<span class="title function_">call</span>(person2)() <span class="comment">// 默认绑定: window</span></span><br><span class="line">person1.<span class="title function_">foo3</span>().<span class="title function_">call</span>(person2) <span class="comment">// 显式绑定: person2</span></span><br><span class="line"></span><br><span class="line">person1.<span class="title function_">foo4</span>()() <span class="comment">// 上层作用域查找: person1(隐式绑定)</span></span><br><span class="line">person1.<span class="property">foo4</span>.<span class="title function_">call</span>(person2)() <span class="comment">//  上层作用域查找: person2(显式绑定)</span></span><br><span class="line">person1.<span class="title function_">foo4</span>().<span class="title function_">call</span>(person2) <span class="comment">// 上层作用域查找: person1(隐式绑定)</span></span><br></pre></td></tr></table></figure>

<hr>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;window&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  1.创建一个空的对象</span></span><br><span class="line"><span class="comment">  2.将这个空的对象赋值给this</span></span><br><span class="line"><span class="comment">  3.执行函数体中代码</span></span><br><span class="line"><span class="comment">  4.将这个新的对象默认返回</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name</span>) &#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">obj</span> = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;obj&#x27;</span>,</span><br><span class="line">    <span class="attr">foo1</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">foo2</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;person1&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;person2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">person1.<span class="property">obj</span>.<span class="title function_">foo1</span>()() <span class="comment">// 默认绑定: window</span></span><br><span class="line">person1.<span class="property">obj</span>.<span class="property">foo1</span>.<span class="title function_">call</span>(person2)() <span class="comment">// 默认绑定: window</span></span><br><span class="line">person1.<span class="property">obj</span>.<span class="title function_">foo1</span>().<span class="title function_">call</span>(person2) <span class="comment">// 显式绑定: person2</span></span><br><span class="line"></span><br><span class="line">person1.<span class="property">obj</span>.<span class="title function_">foo2</span>()() <span class="comment">// 上层作用域查找: obj(隐式绑定)</span></span><br><span class="line">person1.<span class="property">obj</span>.<span class="property">foo2</span>.<span class="title function_">call</span>(person2)() <span class="comment">// 上层作用域查找: person2(显式绑定)</span></span><br><span class="line">person1.<span class="property">obj</span>.<span class="title function_">foo2</span>().<span class="title function_">call</span>(person2) <span class="comment">// 上层作用域查找: obj(隐式绑定)</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>JS高级</category>
      </categories>
      <tags>
        <tag>JS高级</tag>
      </tags>
  </entry>
  <entry>
    <title>JS高级-函数的增强知识</title>
    <url>/2024/08/27/JS%E9%AB%98%E7%BA%A7-%E5%87%BD%E6%95%B0%E7%9A%84%E5%A2%9E%E5%BC%BA%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h3 id="函数对象的属性"><a href="#函数对象的属性" class="headerlink" title="函数对象的属性"></a>函数对象的属性</h3><ul>
<li>我们知道JavaScript中函数也是一个对象，那么对象中就可以有属性和方法。</li>
<li>属性name：一个函数的名词我们可以通过name来访问；<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684636034042-847c6c8b-0142-4d29-8b2f-9f27d2983360.png#averageHue=%23557e96&clientId=u6ea05d89-64a8-4&from=paste&height=152&id=u3ceafed3&originHeight=245&originWidth=677&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=40902&status=done&style=none&taskId=ua8615934-042c-48f9-91c3-5a64d3be253&title=&width=419.23760986328125" alt="image.png"></li>
<li>属性length：属性length用于返回函数参数的个数；<ul>
<li>注意：rest参数是不参与参数的个数的；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684636043296-3757901a-6d5e-4919-9818-0ee435cbc4d5.png#averageHue=%235f899d&clientId=u6ea05d89-64a8-4&from=paste&height=91&id=u63be49db&originHeight=126&originWidth=664&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=26103&status=done&style=none&taskId=u42bd4b82-8954-421a-9eb5-8574173b9e0&title=&width=476.9405517578125" alt="image.png"></li>
</ul>
</li>
</ul>
<h3 id="认识arguments"><a href="#认识arguments" class="headerlink" title="认识arguments"></a>认识arguments</h3><ul>
<li>arguments 是一个 对应于 传递给函数的参数 的 类数组(array-like)对象。</li>
<li>array-like意味着它不是一个数组类型，而是一个对象类型：<ul>
<li>但是它却拥有数组的一些特性，比如说length，比如可以通过index索引来访问；</li>
<li>但是它却没有数组的一些方法，比如filter、map等；</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">m, n</span>) &#123;</span><br><span class="line">  <span class="comment">// arguments 类似数组对象</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)      </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">10</span>, <span class="number">25</span>, <span class="number">32</span>, <span class="number">41</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684636215862-981a8ffa-10c2-4b99-98bf-b471992acaa6.png#averageHue=%23fefefd&clientId=u6ea05d89-64a8-4&from=paste&height=77&id=u292261d0&originHeight=97&originWidth=703&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=7921&status=done&style=none&taskId=u15921229-9953-4452-8030-5b6383e680b&title=&width=556.831662137186" alt="image.png"></p>
<h3 id="arguments-遍历和转换成数组"><a href="#arguments-遍历和转换成数组" class="headerlink" title="arguments  遍历和转换成数组"></a>arguments  遍历和转换成数组</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">m, n</span>) &#123;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">// 1.默认用法:</span></span><br><span class="line">     <span class="comment">// 通过索引获取内容</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">0</span>])</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line">     <span class="comment">// // 遍历</span></span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>[i])</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">for</span> (<span class="keyword">var</span> arg <span class="keyword">of</span> <span class="variable language_">arguments</span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(arg)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="title function_">foo</span>(<span class="number">10</span>, <span class="number">25</span>, <span class="number">32</span>, <span class="number">41</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684636314384-06c35327-e44a-4a40-9e2e-526318d9d5e9.png#averageHue=%23fefefe&clientId=u6ea05d89-64a8-4&from=paste&height=196&id=u6d1dc8b1&originHeight=248&originWidth=286&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=3200&status=done&style=none&taskId=u0d833aaa-fc76-49d4-96e8-955eb4ff483&title=&width=226.53464490929613" alt="image.png"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span> (m, n) &#123;</span><br><span class="line">  <span class="comment">// 2.需求获取所有参数中的偶数</span></span><br><span class="line">  <span class="comment">// 数组 filter</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> arg <span class="keyword">of</span> <span class="variable language_">arguments</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arg % <span class="number">2</span> === <span class="number">0</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(arg)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// var evenNums = arguments.filter(item =&gt; item % 2 === 0) // 无filter方法，会报错</span></span><br><span class="line">  <span class="comment">// console.log(eventNums)</span></span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----------&quot;</span>)</span><br><span class="line">  <span class="comment">// 2.1.将arguments转成数组方式一:</span></span><br><span class="line">  <span class="keyword">var</span> newArguments = []</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> arg <span class="keyword">of</span> <span class="variable language_">arguments</span>) &#123;</span><br><span class="line">    newArguments.<span class="title function_">push</span>(arg)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newArguments)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----------&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.2.将arguments转成数组方式三: ES6中方式</span></span><br><span class="line">  <span class="keyword">var</span> newArgs1 = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newArgs1)</span><br><span class="line">  <span class="keyword">var</span> newArgs2 = [...<span class="variable language_">arguments</span>]</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newArgs2)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;----------&quot;</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.3.将arguments转成数组方式二: 调用slice方法 slice方法: 不会修改原数组</span></span><br><span class="line">  <span class="keyword">var</span> newArgs = [].<span class="property">slice</span>.<span class="title function_">apply</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">  <span class="comment">// var newArgs = Array.prototype.slice.apply(arguments)</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(newArgs)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>(<span class="number">10</span>, <span class="number">25</span>, <span class="number">32</span>, <span class="number">41</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684636602344-1aff9566-390d-487a-a396-c2f2edf6ad1e.png#averageHue=%23fefdfd&clientId=ue6b96385-f072-4&from=paste&height=189&id=uff7c1682&originHeight=239&originWidth=509&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=9429&status=done&style=none&taskId=ub39e760e-7902-4fea-8206-b9b387c394c&title=&width=403.16830160430675" alt="image.png"></p>
<h3 id="箭头函数不绑定arguments"><a href="#箭头函数不绑定arguments" class="headerlink" title="箭头函数不绑定arguments"></a>箭头函数不绑定arguments</h3><p>箭头函数是不绑定arguments的，所以我们在箭头函数中使用arguments会去上层作用域查找：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.箭头函数不绑定arguments</span></span><br><span class="line">    <span class="comment">// var bar = () =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//   console.log(arguments)</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// bar(11, 22, 33) // 报错</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.函数的嵌套箭头函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span> () &#123;</span><br><span class="line">      <span class="keyword">var</span> <span class="title function_">bar</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="title function_">bar</span>()</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">foo</span>(<span class="number">111</span>, <span class="number">222</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684636811807-f9d84386-0920-46a3-879b-33166597c1f9.png#averageHue=%23fdfcfb&clientId=ue6b96385-f072-4&from=paste&height=110&id=uc2bfcb55&originHeight=139&originWidth=637&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=14634&status=done&style=none&taskId=u4c845a2b-4e6a-4e2c-8694-c8de05d76a1&title=&width=504.55443638888687" alt="image.png"></p>
<h3 id="函数的剩余（rest）参数"><a href="#函数的剩余（rest）参数" class="headerlink" title="函数的剩余（rest）参数"></a>函数的剩余（rest）参数</h3><ul>
<li><strong>ES6中引用了rest parameter，可以将不定数量的参数放入到一个数组中：</strong><ul>
<li>如果最后一个参数是 … 为前缀的，那么它会将剩余的参数放到该参数中，并且作为一个数组；</li>
</ul>
</li>
<li><strong>那么剩余参数和arguments有什么区别呢？</strong><ul>
<li>剩余参数只包含那些没有对应形参的实参，而 arguments 对象包含了传给函数的所有实参；</li>
<li>arguments对象不是一个真正的数组，而rest参数是一个真正的数组，可以进行数组的所有操作；</li>
<li>arguments是早期的ECMAScript中为了方便去获取所有的参数提供的一个数据结构，而rest参数是ES6中提供并且希望以此 来替代arguments的；</li>
</ul>
</li>
<li><strong>剩余参数必须放到最后一个位置，否则会报错</strong>。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 剩余参数: rest parameters</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">num1, num2, ...otherNums</span>) &#123;</span><br><span class="line">     <span class="comment">// otherNums数组</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(otherNums)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="title function_">foo</span>(<span class="number">20</span>, <span class="number">30</span>, <span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 默认一个函数只有剩余参数</span></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(args)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="title function_">bar</span>(<span class="string">&quot;abc&quot;</span>, <span class="number">123</span>, <span class="string">&quot;cba&quot;</span>, <span class="number">321</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684636954796-7d44e8f3-9481-4919-94e0-80f28ae5de84.png#averageHue=%23fefdfd&clientId=ue6b96385-f072-4&from=paste&height=213&id=u5c2f1f6f&originHeight=269&originWidth=562&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=13688&status=done&style=none&taskId=u45fd54ad-129f-4c95-99eb-a7405f18c44&title=&width=445.14849803854696" alt="image.png"></p>
<h3 id="理解JavaScript纯函数"><a href="#理解JavaScript纯函数" class="headerlink" title="理解JavaScript纯函数"></a>理解JavaScript纯函数</h3><ul>
<li>函数式编程中有一个非常重要的概念叫纯函数，JavaScript符合函数式编程的范式，所以也有纯函数的概念；<ul>
<li>在react开发中纯函数是被多次提及的；</li>
<li>比如react中组件就被要求像是一个纯函数（为什么是像，因为还有class组件），redux中有一个reducer的概念，也是要求 必须是一个纯函数；</li>
<li>所以掌握纯函数对于理解很多框架的设计是非常有帮助的；</li>
</ul>
</li>
<li>纯函数的简单总结：<ul>
<li>确定的输入，一定会产生确定的输出；</li>
<li>函数在执行过程中，不能产生副作用；</li>
</ul>
</li>
</ul>
<h3 id="纯函数的案例-slice"><a href="#纯函数的案例-slice" class="headerlink" title="纯函数的案例  slice"></a>纯函数的案例  slice</h3><ul>
<li>我们来看一个对数组操作的两个函数：<ul>
<li>slice：slice截取数组时不会对原数组进行任何操作,而是生成一个新的数组；</li>
<li>splice：splice截取数组, 会返回一个新的数组, 也会对原数组进行修改；</li>
</ul>
</li>
<li>slice就是一个纯函数，不会修改数组本身，而splice函数不是一个纯函数；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684637169513-43c751cb-bf46-4ce7-931b-908b2edc0e2c.png#averageHue=%232d313a&clientId=ue6b96385-f072-4&from=paste&height=219&id=u11dda6de&originHeight=399&originWidth=901&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=128683&status=done&style=none&taskId=ue806f4db-cb6d-4444-bad7-21583eab734&title=&width=493.6534423828125" alt="image.png"></li>
</ul>
<h3 id="柯里化"><a href="#柯里化" class="headerlink" title="柯里化"></a>柯里化</h3><p>只传递给函数一部分参数来调用它，让它返回一个函数去处理剩余的参数；这个过程就称之为柯里化；</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通的函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo1</span>(<span class="params">x, y, z</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y + z)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// foo1(10, 20, 30)</span></span><br><span class="line">    <span class="comment">// foo1(20, 33, 55)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 柯里化函数</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo2</span>(<span class="params">x</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">y</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">z</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y + z)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">foo2</span>(<span class="number">10</span>)(<span class="number">20</span>)(<span class="number">30</span>)</span><br><span class="line">    <span class="title function_">foo2</span>(<span class="number">20</span>)(<span class="number">33</span>)(<span class="number">55</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 另外一种写法: 箭头函数的写法</span></span><br><span class="line">    <span class="comment">// function foo3(x) &#123;</span></span><br><span class="line">    <span class="comment">//   return y =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     return z =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//       console.log(x + y + z)</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">    <span class="comment">//   &#125;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> <span class="title function_">foo3</span> = x =&gt; <span class="function"><span class="params">y</span> =&gt;</span> <span class="function"><span class="params">z</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(x + y + z)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">foo3</span>(<span class="number">10</span>)(<span class="number">20</span>)(<span class="number">30</span>)</span><br></pre></td></tr></table></figure>

<h3 id="组合函数"><a href="#组合函数" class="headerlink" title="组合函数"></a>组合函数</h3><ul>
<li>组合（Compose）函数是在JavaScript开发过程中一种对函数的使用技巧、模式：<ul>
<li>比如我们现在需要对某一个数据进行函数的调用，执行两个函数fn1和fn2，这两个函数是依次执行的；</li>
<li>那么如果每次我们都需要进行两个函数的调用，操作上就会显得重复；</li>
<li>那么是否可以将这两个函数组合起来，自动依次调用呢？</li>
<li>这个过程就是对函数的组合，我们称之为 组合函数；</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一步对数字*2</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">double</span>(<span class="params">num</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> num * <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二步对数字**2</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">pow</span>(<span class="params">num</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> num ** <span class="number">2</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 封装的函数: 你传入多个函数, 我自动的将多个函数组合在一起挨个调用</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">composeFn</span>(<span class="params">...fns</span>) &#123;</span><br><span class="line">      <span class="comment">// 1.边界判断(edge case)</span></span><br><span class="line">      <span class="keyword">var</span> length = fns.<span class="property">length</span></span><br><span class="line">      <span class="keyword">if</span> (length &lt;= <span class="number">0</span>) <span class="keyword">return</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> fn = fns[i]</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> fn !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">`index position <span class="subst">$&#123;i&#125;</span> must be function`</span>)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2.返回的新函数</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> result = fns[<span class="number">0</span>].<span class="title function_">apply</span>(<span class="variable language_">this</span>, args)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; length; i++) &#123;</span><br><span class="line">          <span class="keyword">var</span> fn = fns[i]</span><br><span class="line">          result = fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, [result])</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> newFn = <span class="title function_">composeFn</span>(double, pow, <span class="variable language_">console</span>.<span class="property">log</span>)</span><br><span class="line">    <span class="title function_">newFn</span>(<span class="number">100</span>)</span><br><span class="line">    <span class="title function_">newFn</span>(<span class="number">55</span>)</span><br><span class="line">    <span class="title function_">newFn</span>(<span class="number">22</span>)</span><br></pre></td></tr></table></figure>

<h3 id="eval函数"><a href="#eval函数" class="headerlink" title="eval函数"></a>eval函数</h3>]]></content>
      <categories>
        <category>JS高级</category>
      </categories>
      <tags>
        <tag>JS高级</tag>
      </tags>
  </entry>
  <entry>
    <title>JS高级-对象的增强知识</title>
    <url>/2024/08/27/JS%E9%AB%98%E7%BA%A7-%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%A2%9E%E5%BC%BA%E7%9F%A5%E8%AF%86/</url>
    <content><![CDATA[<h3 id="对属性操作的控制"><a href="#对属性操作的控制" class="headerlink" title="对属性操作的控制"></a>对属性操作的控制</h3><ul>
<li>在前面我们的属性都是直接定义在对象内部，或者直接添加到对象内部的：<ul>
<li>但是这样来做的时候我们就不能对这个属性进行一些限制：比如这个属性是否是可以通过delete删除的？这个属性是否在for-in遍历的时候被遍历出来呢？</li>
</ul>
</li>
<li>如果我们想要对一个属性进行比较精准的操作控制，那么我们就可以使用属性描述符。<ul>
<li>通过属性描述符可以精准的添加或修改对象的属性；</li>
<li>属性描述符需要使用 Object.defineProperty 来对属性进行添加或者修改；</li>
</ul>
</li>
</ul>
<h3 id="Object-defineProperty"><a href="#Object-defineProperty" class="headerlink" title="Object.defineProperty"></a>Object.defineProperty</h3><ul>
<li>Object.defineProperty() 方法会直接在一个对象上定义一个新属性，或者修改一个对象的现有属性，并返回此对象。</li>
<li>可接收三个参数：<ul>
<li><strong>obj要定义属性的对象；</strong></li>
<li><strong>prop要定义或修改的属性的名称或 Symbol；</strong></li>
<li><strong>descriptor要定义或修改的属性描述符；</strong></li>
</ul>
</li>
<li>返回值：<ul>
<li>被传递给函数的对象。</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">   <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>, <span class="comment">// configurable: true</span></span><br><span class="line">   <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;name&quot;</span>, &#123;</span><br><span class="line">   <span class="attr">configurable</span>: <span class="literal">false</span>, <span class="comment">// 告诉js引擎, obj对象的name属性不可以被删除</span></span><br><span class="line">   <span class="attr">enumerable</span>: <span class="literal">false</span>, <span class="comment">// 告诉js引擎, obj对象的name属性不可枚举(for in/Object.keys)</span></span><br><span class="line">   <span class="attr">writable</span>: <span class="literal">false</span>, <span class="comment">// 告诉js引擎, obj对象的name属性不写入(只读属性 readonly)</span></span><br><span class="line">   <span class="attr">value</span>: <span class="string">&quot;coderwhy&quot;</span> <span class="comment">// 告诉js引擎, 返回这个value</span></span><br><span class="line"> &#125;)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">delete</span> obj.<span class="property">name</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line"></span><br><span class="line"> <span class="comment">// 通过Object.defineProperty添加一个新的属性</span></span><br><span class="line"> <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, <span class="string">&quot;address&quot;</span>, &#123;&#125;)</span><br><span class="line"> <span class="keyword">delete</span> obj.<span class="property">address</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(obj)</span><br><span class="line"></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">keys</span>(obj))</span><br><span class="line"></span><br><span class="line"> obj.<span class="property">name</span> = <span class="string">&quot;kobe&quot;</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">name</span>)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684756474707-5833edfb-f06d-450a-bb81-cc6bcb6062e4.png#averageHue=%23fcfbfa&clientId=ufcbecc3c-024d-4&from=paste&height=256&id=u24edc504&originHeight=323&originWidth=289&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=18471&status=done&style=none&taskId=u76e87e72-e741-4eeb-bc1b-e91e6a7e654&title=&width=228.91088244330973" alt="image.png"></p>
<h3 id="属性描述符分类"><a href="#属性描述符分类" class="headerlink" title="属性描述符分类"></a>属性描述符分类</h3><ul>
<li><p>属性描述符的类型有两种</p>
<ul>
<li>数据属性描述符</li>
<li>存取属性描述符</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684756603133-a75a8e76-96e2-4613-93c6-29cd15b7014b.png#averageHue=%23eeeeee&clientId=ufcbecc3c-024d-4&from=paste&height=208&id=u4104ce1b&originHeight=262&originWidth=1053&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=45609&status=done&style=none&taskId=u61e28251-a718-4c00-9178-6e7fd7abf62&title=&width=834.0593744387721" alt="image.png"></li>
</ul>
</li>
<li><p>**数据数据描述符有如下四个特性： **</p>
</li>
<li><p>[[Configurable]]：表示属性是否可以通过delete删除属性，是否可以修改它的特性，或者是否可以将它修改为存取属性描述符；</p>
<ul>
<li>当我们直接在一个对象上定义某个属性时，这个属性的[[Configurable]]为true；</li>
<li>当我们通过属性描述符定义一个属性时，这个属性的[[Configurable]]默认为false；</li>
</ul>
</li>
<li><p>[[Enumerable]]：表示属性是否可以通过for-in或者Object.keys()返回该属性；</p>
<ul>
<li>当我们直接在一个对象上定义某个属性时，这个属性的[[Enumerable]]为true；</li>
<li>当我们通过属性描述符定义一个属性时，这个属性的[[Enumerable]]默认为false；</li>
</ul>
</li>
<li><p>[[Writable]]：表示是否可以修改属性的值；</p>
</li>
<li><p>当我们直接在一个对象上定义某个属性时，这个属性的[[Writable]]为true；</p>
<ul>
<li>当我们通过属性描述符定义一个属性时，这个属性的[[Writable]]默认为false；</li>
</ul>
</li>
<li><p>[[value]]：属性的value值，读取属性时会返回该值，修改属性时，会对其进行修改；</p>
<ul>
<li>默认情况下这个值是undefined；</li>
</ul>
</li>
<li><p>**  存取属性描述符  有如下四个特性：**</p>
</li>
<li><p>[[Configurable]]：表示属性是否可以通过delete删除属性，是否可以修改它的特性，或者是否可以将它修改为存取属性描述符；</p>
<ul>
<li>和数据属性描述符是一致的；</li>
<li>当我们直接在一个对象上定义某个属性时，这个属性的[[Configurable]]为true；</li>
<li>当我们通过属性描述符定义一个属性时，这个属性的[[Configurable]]默认为false；</li>
</ul>
</li>
<li><p>[[Enumerable]]：表示属性是否可以通过for-in或者Object.keys()返回该属性；</p>
<ul>
<li>和数据属性描述符是一致的；</li>
<li>当我们直接在一个对象上定义某个属性时，这个属性的[[Enumerable]]为true；</li>
<li>当我们通过属性描述符定义一个属性时，这个属性的[[Enumerable]]默认为false</li>
</ul>
</li>
<li><p>[[get]]：获取属性时会执行的函数。默认为undefined</p>
</li>
<li><p>[[set]]：设置属性时会执行的函数。默认为undefined</p>
</li>
<li><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684756867572-179a21da-6482-4450-8578-9032b921d9ca.png#averageHue=%23292e36&clientId=ufcbecc3c-024d-4&from=paste&height=402&id=u59736e88&originHeight=725&originWidth=568&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=90140&status=done&style=none&taskId=ua2244cc6-7356-4672-b34d-99a24749dad&title=&width=314.9009704589844" alt="image.png"></p>
</li>
</ul>
<h3 id="同时定义多个属性"><a href="#同时定义多个属性" class="headerlink" title="同时定义多个属性"></a>同时定义多个属性</h3><p>Object.defineProperties() 方法直接在一个对象上定义 多个 新的属性或修改现有属性，并且返回该对象。  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684756915047-4722f3ba-d1bb-41b6-ac2e-5834d3563dc1.png#averageHue=%23282d35&clientId=ufcbecc3c-024d-4&from=paste&height=287&id=ucff08deb&originHeight=571&originWidth=516&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=58006&status=done&style=none&taskId=u954376b3-4fac-49ac-ac75-630cf1ec84b&title=&width=259.71282958984375" alt="image.png"></p>
]]></content>
      <categories>
        <category>JS高级</category>
      </categories>
      <tags>
        <tag>JS高级</tag>
      </tags>
  </entry>
  <entry>
    <title>JS高级-异常_Storage_正则</title>
    <url>/2024/09/16/JS%E9%AB%98%E7%BA%A7-%E5%BC%82%E5%B8%B8-Storage-%E6%AD%A3%E5%88%99/</url>
    <content><![CDATA[<h3 id="throw关键字"><a href="#throw关键字" class="headerlink" title="throw关键字"></a><strong><font style="color:#404040;">throw关键字</font></strong></h3><ul>
<li><font style="color:#404040;">throw表达式就是在throw后面可以跟上一个表达式来表示具体的异常信息：</font></li>
<li><font style="color:#404040;">throw关键字可以跟上哪些类型呢？</font><ul>
<li><font style="color:red;">基本数据类型</font><font style="color:#404040;">：比如number、string、Boolean</font></li>
<li><font style="color:red;">对象类型</font><font style="color:#404040;">：对象类型可以包含更多的信息</font></li>
</ul>
</li>
<li><font style="color:#404040;">但是每次写这么长的对象又有点麻烦，所以我们可以创建一个类：</font></li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688470299650-db8b24c0-8fd4-4b6e-8111-bb20a8092111.png"></li>
</ul>
<h3 id="Error类型"><a href="#Error类型" class="headerlink" title="Error类型"></a><strong><font style="color:#404040;">Error类型</font></strong></h3><ul>
<li><p><font style="color:#404040;">事实上，JavaScript已经给我们提供了一个Error类，我们可以直接创建这个类的对象：</font></p>
</li>
<li><p><font style="color:#404040;">Error包含三个属性：</font></p>
<ul>
<li><font style="color:red;">messsage</font><font style="color:#404040;">：创建Error对象时传入的message；</font></li>
<li><font style="color:red;">name</font><font style="color:#404040;">：Error的名称，通常和类的名称一致；</font></li>
<li><font style="color:red;">stack</font><font style="color:#404040;">：整个Error的错误信息，包括函数的调用栈，当我们直接打印Error对象时，打印的就是stack；</font></li>
</ul>
</li>
<li><p><font style="color:#404040;">Error有一些自己的子类：</font></p>
<ul>
<li><font style="color:#404040;">RangeError：下标值越界时使用的错误类型；</font></li>
<li><font style="color:#404040;">SyntaxError：解析语法错误时使用的错误类型；</font></li>
<li><font style="color:#404040;">TypeError：出现类型错误时，使用的错误类型；</font></li>
</ul>
</li>
</ul>
<h3 id="异常的处理"><a href="#异常的处理" class="headerlink" title="异常的处理"></a><strong><font style="color:#404040;">异常的处理</font></strong></h3><ul>
<li><font style="color:#404040;">我们会发现在之前的代码中，一个函数抛出了异常，调用它的时候程序会被强制终止：</font><ul>
<li><font style="color:#404040;">这是因为如果我们在调用一个函数时，这个函数</font><font style="color:red;">抛出了异常</font><font style="color:#404040;">，但是我们</font><font style="color:red;">并没有对这个异常进行处理</font><font style="color:#404040;">，那么这个</font><font style="color:red;">异常会继续传递到上一个函数调用</font><font style="color:#404040;">中；</font></li>
<li><font style="color:#404040;">而如果</font><font style="color:red;">到了最顶层（全局）的代码中依然没有对这个异常的处理代码</font><font style="color:#404040;">，这个时候就会报错并且终止程序的运行；</font></li>
</ul>
</li>
<li><font style="color:#404040;">我们先来看一下这段代码的异常传递过程：</font><ul>
<li><font style="color:#404040;">foo函数在被执行时会抛出异常，也就是我们的bar函数会拿到这个异常；</font></li>
<li><font style="color:#404040;">但是bar函数并没有对这个异常进行处理，那么这个异常就会被继续传递到调用bar函数的函数，也就是test函数；</font></li>
<li><font style="color:#404040;">但是test函数依然没有处理，就会继续传递到我们的全局代码逻辑中；</font></li>
<li><font style="color:#404040;">依然没有被处理，这个时候程序会终止执行，后续代码都不会再执行了；</font></li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688470548671-235e9ad5-9782-44c9-8cfe-c0df7c5778ad.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688470552499-f1142f2c-fdd2-4030-bee1-5bf47b7b643d.png"></p>
<h3 id="认识Storage"><a href="#认识Storage" class="headerlink" title="认识Storage"></a><strong><font style="color:#404040;">认识Storage</font></strong></h3><ul>
<li><font style="color:#404040;">WebStorage主要提供了一种机制，可以让浏览器提供一种比cookie更直观的key、value存储方式：</font><ul>
<li><font style="color:red;">localStorage</font><font style="color:#404040;">：本地存储，提供的是一种</font><font style="color:red;">永久性的存储方法</font><font style="color:#404040;">，在关闭掉网页重新打开时，存储的内容依然保留；</font></li>
<li><font style="color:red;">sessionStorage</font><font style="color:#404040;">：会话存储，提供的是</font><font style="color:red;">本次会话的存储</font><font style="color:#404040;">，在关闭掉会话时，存储的内容会被清除；</font></li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// storage基本使用</span></span><br><span class="line">    <span class="comment">// 1.token的操作</span></span><br><span class="line">    <span class="keyword">let</span> token = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;token&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> (!token) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;从服务器获取token&quot;</span>)</span><br><span class="line">      token = <span class="string">&quot;coderwhytokeninfo&quot;</span></span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;token&quot;</span>, token)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.username/password的操作</span></span><br><span class="line">    <span class="keyword">let</span> username = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;username&quot;</span>)</span><br><span class="line">    <span class="keyword">let</span> password = <span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;password&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> (!username || !password) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;让用户输入账号和密码&quot;</span>)</span><br><span class="line">      username = <span class="string">&quot;coderwhy&quot;</span></span><br><span class="line">      password = <span class="string">&quot;123456&quot;</span></span><br><span class="line">      <span class="comment">// 将token/username/password保存到storage</span></span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;username&quot;</span>, username)</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;password&quot;</span>, password)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3.后续的操作</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(token)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(token.<span class="property">length</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(token + <span class="string">&quot; 哈哈哈&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="localStorage和sessionStorage的区别"><a href="#localStorage和sessionStorage的区别" class="headerlink" title="localStorage和sessionStorage的区别"></a><strong><font style="color:#404040;">localStorage和sessionStorage的区别</font></strong></h3><ul>
<li><font style="color:#404040;">我们会发现localStorage和sessionStorage看起来非常的相似。</font></li>
<li><font style="color:#404040;">那么它们有什么区别呢？</font><ul>
<li><font style="color:#404040;">验证一：关闭网页后重新打开，localStorage会保留，而sessionStorage会被删除；</font></li>
<li><font style="color:#404040;">验证二：在页面内实现跳转，localStorage会保留，sessionStorage也会保留；</font></li>
<li><font style="color:#404040;">验证三：在页面外实现跳转（打开新的网页），localStorage会保留，sessionStorage不会被保留；</font></li>
</ul>
</li>
</ul>
<h3 id="Storage常见的方法和属性"><a href="#Storage常见的方法和属性" class="headerlink" title="Storage常见的方法和属性"></a><strong><font style="color:#404040;">Storage常见的方法和属性</font></strong></h3><ul>
<li><font style="color:#404040;">Storage有如下的属性和方法：</font></li>
<li><font style="color:#404040;">属性：</font><ul>
<li><font style="color:red;">Storage.length</font><font style="color:#404040;">：只读属性</font><ul>
<li><font style="color:#404040;">返回一个整数，表示存储在Storage对象中的数据项数量；</font></li>
</ul>
</li>
</ul>
</li>
<li><font style="color:#404040;">方法：</font><ul>
<li><font style="color:red;">Storage.key(index)</font><font style="color:#404040;">：该方法接受一个数值n作为参数，返回存储中的第n个key名称；</font></li>
<li><font style="color:red;">Storage.getItem()</font><font style="color:#404040;">：该方法接受一个key作为参数，并且返回key对应的value；</font></li>
<li><font style="color:red;">Storage.setItem()</font><font style="color:#404040;">：该方法接受一个key和value，并且将会把key和value添加到存储中。</font><ul>
<li><font style="color:#404040;">如果key存储，则更新其对应的值；</font></li>
</ul>
</li>
<li><font style="color:red;">Storage.removeItem()</font><font style="color:#404040;">：该方法接受一个key作为参数，并把该key从存储中删除；</font></li>
<li><font style="color:red;">Storage.clear()</font><font style="color:#404040;">：该方法的作用是清空存储中的所有key；</font></li>
</ul>
</li>
</ul>
<h3 id="什么是正则表达式？"><a href="#什么是正则表达式？" class="headerlink" title="什么是正则表达式？"></a>什么是正则表达式？</h3><ul>
<li>在JavaScript中，正则表达式使用RegExp类来创建，也有对应的字面量的方式：<ul>
<li>正则表达式主要由两部分组成：模式（patterns）和修饰符（flags）  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688471242817-c2ce122f-1e15-47d5-870a-22ef43f6688e.png"></li>
</ul>
</li>
</ul>
<h3 id="正则表达式的使用方法"><a href="#正则表达式的使用方法" class="headerlink" title="正则表达式的使用方法"></a>正则表达式的使用方法</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688471294263-424c2a0a-9929-4f72-8d75-48f808461efb.png"></p>
<h3 id="修饰符flag的使用"><a href="#修饰符flag的使用" class="headerlink" title="修饰符flag的使用"></a>修饰符flag的使用</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688472174963-9a34a067-3297-4cf3-8fa5-77bb06e7f026.png"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建正则</span></span><br><span class="line"><span class="keyword">const</span> re1 = <span class="regexp">/abc/ig</span></span><br><span class="line"><span class="keyword">const</span> message = <span class="string">&quot;fdabc123 faBC323 dfABC222 A2324aaBc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.使用正则对象上的实例方法</span></span><br><span class="line"><span class="comment">// webpack -&gt; loader -&gt; test: 匹配文件名</span></span><br><span class="line"><span class="comment">// 正则 -&gt; 拿到文件 -&gt; loader操作</span></span><br><span class="line"><span class="comment">// 1.1.test方法: 检测某一个字符串是否符合正则的规则</span></span><br><span class="line"><span class="keyword">if</span> (re1.<span class="title function_">test</span>(message)) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;message符合规则&quot;</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;message不符合规则&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.2.exec方法: 使用正则执行一个字符串</span></span><br><span class="line"><span class="keyword">const</span> res1 = re1.<span class="title function_">exec</span>(message)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;exec&quot;</span>, res1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.使用字符串的方法, 传入一个正则表达式</span></span><br><span class="line"><span class="comment">// 2.1. match方法:</span></span><br><span class="line"><span class="keyword">const</span> result2 = message.<span class="title function_">match</span>(re1) <span class="comment">// 如果re1不加g，则只匹配第一个</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result2)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.2. matchAll方法</span></span><br><span class="line"><span class="comment">// 注意: matchAll传入的正则修饰符必须加g</span></span><br><span class="line"><span class="keyword">const</span> result3 = message.<span class="title function_">matchAll</span>(re1)</span><br><span class="line"><span class="comment">// console.log(result3.next())</span></span><br><span class="line"><span class="comment">// console.log(result3.next())</span></span><br><span class="line"><span class="comment">// console.log(result3.next())</span></span><br><span class="line"><span class="comment">// console.log(result3.next())</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> item <span class="keyword">of</span> result3) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.3. replace/replaceAll方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.4. split方法</span></span><br><span class="line"><span class="keyword">const</span> result4 = message.<span class="title function_">split</span>(re1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result4)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.5. search方法</span></span><br><span class="line"><span class="keyword">const</span> result5 = message.<span class="title function_">search</span>(re1)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result5)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688471691093-44d99014-74c5-49cf-bda7-519820240012.png"></p>
]]></content>
      <categories>
        <category>JS高级</category>
      </categories>
      <tags>
        <tag>JS高级</tag>
      </tags>
  </entry>
  <entry>
    <title>JS高级-运行原理</title>
    <url>/2024/08/25/JS%E9%AB%98%E7%BA%A7-%E8%BF%90%E8%A1%8C%E5%8E%9F%E7%90%86/</url>
    <content><![CDATA[<h3 id="初始化全局对象"><a href="#初始化全局对象" class="headerlink" title="初始化全局对象"></a>初始化全局对象</h3><ul>
<li>js引擎会在执行代码之前，会在堆内存中创建一个全局对象：Global Object（GO）<ul>
<li>该对象 所有的作用域（scope）都可以访问；</li>
<li>里面会包含Date、Array、String、Number、setTimeout、setInterval等等；</li>
<li>其中还有一个window属性指向自己；</li>
</ul>
</li>
</ul>
<h3 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h3><ul>
<li>js引擎内部有一个执行上下文栈（简称ECS），它是用于执行代码的调用栈。</li>
<li>那么现在它要执行谁呢？执行的是全局的代码块：<ul>
<li>全局的代码块为了执行会构建一个 Global Execution Context（GEC）；</li>
<li>GEC会 被放入到ECS中 执行；</li>
</ul>
</li>
<li>GEC被放入到ECS中里面包含两部分内容：<ul>
<li>第一部分：在代码执行前，在parser转成AST的过程中，会将全局定义的变量、函数等加入到GlobalObject中，但是并不会 赋值；<ul>
<li>这个过程也称之为变量的作用域提升</li>
</ul>
</li>
<li>第二部分：在代码执行中，对变量赋值，或者执行其他的函数；</li>
</ul>
</li>
</ul>
<h3 id="认识VO对象"><a href="#认识VO对象" class="headerlink" title="认识VO对象"></a>认识VO对象</h3><ul>
<li>每一个执行上下文会关联一个<strong>VO</strong>（Variable Object，变量对象），变量和函数声明会被添加到这个VO对象中。</li>
<li>当全局代码被执行的时候，VO就是GO对象了</li>
</ul>
<h3 id="全局代码执行过程（执行前）"><a href="#全局代码执行过程（执行前）" class="headerlink" title="全局代码执行过程（执行前）"></a>全局代码执行过程（执行前）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">&quot;Global Message&quot;</span></span><br><span class="line"></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="keyword">var</span> message = <span class="string">&quot;Foo Message&quot;</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo function&quot;</span>)</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">var</span> num1 = <span class="number">10</span></span><br><span class="line">   <span class="keyword">var</span> num2 = <span class="number">20</span></span><br><span class="line">   <span class="keyword">var</span> result = num1 + num2</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684460429388-0fccb020-f4a5-4b0a-8382-5cef9d81d022.png#averageHue=%23f4f3f2&clientId=u293b4f83-3a22-4&from=paste&height=384&id=u9315477c&originHeight=485&originWidth=801&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=29386&status=done&style=none&taskId=u52839b03-004d-4966-9b82-12a35017666&title=&width=634.45542158163" alt="image.png"></p>
<h3 id="全局代码执行过程（执行后）"><a href="#全局代码执行过程（执行后）" class="headerlink" title="全局代码执行过程（执行后）"></a>全局代码执行过程（执行后）</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684460459288-350bf4dc-7d2e-4b26-84fc-879c8053478f.png#averageHue=%23f4f3f2&clientId=u293b4f83-3a22-4&from=paste&height=390&id=u5fd77109&originHeight=493&originWidth=774&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=28120&status=done&style=none&taskId=uee0fefb9-5da6-4e37-9104-3d5eb4ecca0&title=&width=613.0692837755078" alt="image.png"></p>
<h3 id="函数如何被执行呢？"><a href="#函数如何被执行呢？" class="headerlink" title="函数如何被执行呢？"></a>函数如何被执行呢？</h3><ul>
<li>在执行的过程中执行到一个函数时，就会根据函数体创建一个函数执行上下文（简称FEC）， 并且压入到EC Stack中。</li>
<li><strong>因为每个执行上下文都会关联一个VO，那么函数执行上下文关联的VO是什么呢？</strong><ul>
<li>当进入一个函数执行上下文时，会创建一个AO对象（Activation Object）；</li>
<li>这个AO对象会使用arguments作为初始化，并且初始值是传入的参数；</li>
<li>这个AO对象会作为执行上下文的VO来存放变量的初始化；</li>
</ul>
</li>
</ul>
<h3 id="函数的执行过程（执行前）"><a href="#函数的执行过程（执行前）" class="headerlink" title="函数的执行过程（执行前）"></a>函数的执行过程（执行前）</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">&quot;Global Message&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">num</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> message = <span class="string">&quot;Foo Message&quot;</span></span><br><span class="line">      <span class="keyword">var</span> age = <span class="number">18</span></span><br><span class="line">      <span class="keyword">var</span> height = <span class="number">1.88</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo function&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">foo</span>(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> num1 = <span class="number">10</span></span><br><span class="line">    <span class="keyword">var</span> num2 = <span class="number">20</span></span><br><span class="line">    <span class="keyword">var</span> result = num1 + num2</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684460597881-ce26b585-21c2-4703-bf9f-faa8cbfc55b0.png#averageHue=%23f3f1f0&clientId=u293b4f83-3a22-4&from=paste&height=393&id=uf7039846&originHeight=496&originWidth=768&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=37075&status=done&style=none&taskId=u6293229b-9bd9-46c9-bd8c-360e2caf020&title=&width=608.3168087074805" alt="image.png"></p>
<h3 id="函数的执行过程（执行后）"><a href="#函数的执行过程（执行后）" class="headerlink" title="函数的执行过程（执行后）"></a>函数的执行过程（执行后）</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684460617827-fa3cacca-2b1c-452f-9df7-f59f4e89c7a2.png#averageHue=%23f3f2f0&clientId=u293b4f83-3a22-4&from=paste&height=401&id=uee145b79&originHeight=506&originWidth=782&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=40539&status=done&style=none&taskId=u39936526-83b2-491e-a164-d5933ced07d&title=&width=619.405917199544" alt="image.png"></p>
<h3 id="函数代码查找变量"><a href="#函数代码查找变量" class="headerlink" title="函数代码查找变量"></a>函数代码查找变量</h3><p>1**.函数中有自己的变量定义**</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.函数中有自己的message</span></span><br><span class="line"><span class="keyword">var</span> message = <span class="string">&quot;Global Message&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span> () &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(message)</span><br><span class="line">  <span class="keyword">var</span> message = <span class="string">&quot;foo message&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">foo</span>()</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684461452629-21cf7590-140b-4c82-a9d0-a9aafeffd15d.png#averageHue=%23f3f1f0&clientId=u293b4f83-3a22-4&from=paste&height=402&id=u74db6942&originHeight=508&originWidth=698&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=33177&status=done&style=none&taskId=u82295cb5-08af-4277-88bb-94783e8cea0&title=&width=552.8712662471632" alt="image.png"><br><strong>2.函数中没有变量定义</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2.函数中没有自己的message</span></span><br><span class="line">    <span class="keyword">var</span> message = <span class="string">&quot;Global Message&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span> () &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(message)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">foo</span>()<span class="comment">//Global Message</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> obj = &#123;</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;obj&quot;</span>,</span><br><span class="line">      <span class="attr">bar</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> message = <span class="string">&quot;bar message&quot;</span></span><br><span class="line">        <span class="title function_">foo</span>()<span class="comment">// 简单来说：只需要看foo在何处定义</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    obj.<span class="title function_">bar</span>()<span class="comment">//Global Message</span></span><br></pre></td></tr></table></figure>

<h3 id="函数的多次执行-第一次123"><a href="#函数的多次执行-第一次123" class="headerlink" title="函数的多次执行(第一次123)"></a>函数的多次执行(第一次123)</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> message = <span class="string">&quot;Global Message&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">num</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> message = <span class="string">&quot;Foo Message&quot;</span></span><br><span class="line">      <span class="keyword">var</span> age = <span class="number">18</span></span><br><span class="line">      <span class="keyword">var</span> height = <span class="number">1.88</span></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo function&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">foo</span>(<span class="number">123</span>)</span><br><span class="line">    <span class="title function_">foo</span>(<span class="number">321</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> num1 = <span class="number">10</span></span><br><span class="line">    <span class="keyword">var</span> num2 = <span class="number">20</span></span><br><span class="line">    <span class="keyword">var</span> result = num1 + num2</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(result)</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684460764733-6698fa83-9baf-4467-bc97-218f7a0a9ee1.png#averageHue=%23f3f1f0&clientId=u293b4f83-3a22-4&from=paste&height=396&id=u4de18783&originHeight=500&originWidth=783&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=38771&status=done&style=none&taskId=ud0fc0e6b-808f-4d1d-b158-2d81e6bdbaa&title=&width=620.1979963775485" alt="image.png"></p>
<h3 id="函数的多次执行-第二次321"><a href="#函数的多次执行-第二次321" class="headerlink" title="函数的多次执行(第二次321)"></a>函数的多次执行(第二次321)</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1684460785070-65217afa-6929-4909-8775-658e73d7494c.png#averageHue=%23f2f0ee&clientId=u293b4f83-3a22-4&from=paste&height=393&id=uba1a05c0&originHeight=496&originWidth=779&originalType=binary&ratio=1.2625000476837158&rotation=0&showTitle=false&size=42601&status=done&style=none&taskId=ub9b282b6-d85d-4ad0-bf83-59a899baa38&title=&width=617.0296796655304" alt="image.png"></p>
<h3 id="作用域提升面试题"><a href="#作用域提升面试题" class="headerlink" title="作用域提升面试题"></a>作用域提升面试题</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">	<span class="comment">// 1.面试题一:</span></span><br><span class="line"><span class="keyword">var</span> n = <span class="number">100</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">foo</span> () &#123;</span><br><span class="line">    n = <span class="number">200</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">foo</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(n)<span class="comment">//200</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 2.面试题二:</span></span><br><span class="line">  <span class="keyword">var</span> n = <span class="number">100</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">foo</span> () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">200</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">foo</span>()<span class="comment">// undefined 200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.面试题三:</span></span><br><span class="line">  <span class="keyword">var</span> n = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">foo1</span> () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">foo2</span> () &#123;</span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">200</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span><br><span class="line">    <span class="title function_">foo1</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">foo2</span>()<span class="comment">// 200 100</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4.面试题四:</span></span><br><span class="line">  <span class="keyword">var</span> n = <span class="number">100</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">foo</span> () &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">var</span> n = <span class="number">200</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">foo</span>()<span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5.在开发中可能会出现这样错误的写法</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">foo</span> () &#123;</span><br><span class="line">    message = <span class="string">&quot;Hello World&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">foo</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(message)<span class="comment">//Hello World</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 6.面试题五:</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">foo</span> () &#123;</span><br><span class="line">    <span class="keyword">var</span> a = b = <span class="number">100</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">foo</span>()</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(a)<span class="comment">//a is not defined</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(b)<span class="comment">//100</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>JS高级</category>
      </categories>
      <tags>
        <tag>JS高级</tag>
      </tags>
  </entry>
  <entry>
    <title>JS高级-防抖_节流_深拷贝_事件总线</title>
    <url>/2024/09/16/JS%E9%AB%98%E7%BA%A7-%E9%98%B2%E6%8A%96-%E8%8A%82%E6%B5%81-%E6%B7%B1%E6%8B%B7%E8%B4%9D-%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF/</url>
    <content><![CDATA[<h3 id="认识防抖debounce函数"><a href="#认识防抖debounce函数" class="headerlink" title="认识防抖debounce函数"></a>认识防抖debounce函数</h3><ul>
<li><h2 id="我们用一副图来理解一下它的过程：-当事件触发时，相应的函数并不会立即触发，而是会等待一定的时间；-当事件密集触发时，函数的触发会被频繁的推迟；-只有等待了一段时间也没有事件触发，才会真正的执行响应函数；"><a href="#我们用一副图来理解一下它的过程：-当事件触发时，相应的函数并不会立即触发，而是会等待一定的时间；-当事件密集触发时，函数的触发会被频繁的推迟；-只有等待了一段时间也没有事件触发，才会真正的执行响应函数；" class="headerlink" title="我们用一副图来理解一下它的过程：  - 当事件触发时，相应的函数并不会立即触发，而是会等待一定的时间；  - 当事件密集触发时，函数的触发会被频繁的推迟；  - 只有等待了一段时间也没有事件触发，才会真正的执行响应函数；  - "></a>我们用一副图来理解一下它的过程：<br>  - 当事件触发时，相应的函数并不会立即触发，而是会等待一定的时间；<br>  - 当事件密集触发时，函数的触发会被频繁的推迟；<br>  - 只有等待了一段时间也没有事件触发，才会真正的执行响应函数；<br>  - <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688472275705-1b46fc3b-5480-4e1a-b418-8fca0723ff04.png"></h2></li>
<li>防抖的应用场景很多：<ul>
<li>输入框中频繁的输入内容，搜索或 者提交信息；</li>
<li>频繁的点击按钮，触发某个事件；</li>
<li>监听浏览器滚动事件，完成某些特 定操作；</li>
<li>用户缩放浏览器的resize事件；</li>
</ul>
</li>
</ul>
<h3 id="防抖函数的案例"><a href="#防抖函数的案例" class="headerlink" title="防抖函数的案例"></a>防抖函数的案例</h3><ul>
<li>我们都遇到过这样的场景，在某个搜索框中输入自己想要搜索的内容：</li>
<li>比如想要搜索一个MacBook：<ul>
<li>当我输入m时，为了更好的用户体验，通常会出现对应的联想内容，这些联想内容通常是保存在服务器的，所以需要一次网 络请求；</li>
<li>当继续输入ma时，再次发送网络请求；</li>
<li>那么macbook一共需要发送7次网络请求；</li>
<li>这大大损耗我们整个系统的性能，无论是前端的事件处理，还是对于服务器的压力;</li>
</ul>
</li>
<li>但是我们需要这么多次的网络请求吗？<ul>
<li>不需要，正确的做法应该是在合适的情况下再发送网络请求；</li>
<li>比如如果用户快速的输入一个macbook，那么只是发送一次网络请求；</li>
<li>比如如果用户是输入一个m想了一会儿，这个时候m确实应该发送一次网络请求；</li>
<li>也就是我们应该监听用户在某个时间，比如500ms内，没有再次触发时间时，再发送网络请求</li>
</ul>
</li>
<li>这就是防抖的操作：只有在某个时间内，没有再次触发某个函数时，才真正的调用这个函数；</li>
</ul>
<h4 id="基本实现防抖（面试）"><a href="#基本实现防抖（面试）" class="headerlink" title="基本实现防抖（面试）"></a>基本实现防抖（面试）</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;!<span class="variable constant_">DOCTYPE</span> html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">  &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;</span><br><span class="line">  &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br><span class="line">  &lt;title&gt;Document&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">  &lt;button&gt;按钮&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">  &lt;input type=&quot;text&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    function hydebounce (fn, delay) &#123;</span><br><span class="line">      // 1.用于记录上一次事件触发的timer</span><br><span class="line">      let timer = null</span><br><span class="line"></span><br><span class="line">      // 2.触发事件时执行的函数</span><br><span class="line">      const _debounce = () =&gt; &#123;</span><br><span class="line">        // 2.1.如果有再次触发(更多次触发)事件, 那么取消上一次的事件</span><br><span class="line">        if (timer) clearTimeout(timer)</span><br><span class="line"></span><br><span class="line">        // 2.2.延迟去执行对应的fn函数(传入的回调函数)</span><br><span class="line">        timer = setTimeout(() =&gt; &#123;</span><br><span class="line">          fn()</span><br><span class="line">          timer = null // 执行过函数之后, 将timer重新置null</span><br><span class="line">        &#125;, delay);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 返回一个新的函数</span><br><span class="line">      return _debounce</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    // 1.获取input元素</span><br><span class="line">    const inputEl = document.querySelector(&quot;input&quot;)</span><br><span class="line"></span><br><span class="line">    // 3.自己实现的防抖</span><br><span class="line">    let counter = 1</span><br><span class="line">    inputEl.oninput = hydebounce(function () &#123;</span><br><span class="line">      console.log(`发送网络请求$&#123;counter++&#125;`)</span><br><span class="line">    &#125;, 1000)</span><br><span class="line"></span><br><span class="line">  &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>



<h3 id="认识节流throttle函数"><a href="#认识节流throttle函数" class="headerlink" title="认识节流throttle函数"></a>认识节流throttle函数</h3><ul>
<li>我们用一副图来理解一下节流的过程<ul>
<li>当事件触发时，会执行这个事件的响应函数；</li>
<li>如果这个事件会被频繁触发，那么节流函数会按照一定的频率来执行函数；</li>
<li>不管在这个中间有多少次触发这个事件，执行函数的频繁总是固定的；</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688473542332-26902e91-d098-4c21-93cc-8e16c5b21cdb.png"></li>
<li>认识节流throttle函数 节流的应用场景：<ul>
<li>监听页面的滚动事件；</li>
<li>鼠标移动事件；</li>
<li>用户频繁点击按钮操作；</li>
<li>游戏中的一些设计；</li>
</ul>
</li>
</ul>
<h3 id="节流函数的应用场景"><a href="#节流函数的应用场景" class="headerlink" title="节流函数的应用场景"></a>节流函数的应用场景</h3><ul>
<li>很多人都玩过类似于飞机大战的游戏</li>
<li>在飞机大战的游戏中，我们按下空格会发射一个子弹：<ul>
<li>很多飞机大战的游戏中会有这样的设定，即使按下的频率非常快，子弹也会保持一定的频率来发射；</li>
<li>比如1秒钟只能发射一次，即使用户在这1秒钟按下了10次，子弹会保持发射一颗的频率来发射；</li>
<li>但是事件是触发了10次的，响应的函数只触发了一次；</li>
</ul>
</li>
</ul>
<h4 id="基本实现节流（面试）"><a href="#基本实现节流（面试）" class="headerlink" title="基本实现节流（面试）"></a>基本实现节流（面试）</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">hythrottle</span>(<span class="params">fn, interval</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> startTime = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> _throttle = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> nowTime = <span class="keyword">new</span> <span class="title class_">Date</span>().<span class="title function_">getTime</span>()</span><br><span class="line">        <span class="keyword">const</span> waitTime = interval - (nowTime - startTime)</span><br><span class="line">        <span class="keyword">if</span> (waitTime &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="title function_">fn</span>()</span><br><span class="line">          startTime = nowTime</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> _throttle</span><br><span class="line">    &#125;</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line"></span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 1.获取input元素</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">const</span> inputEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;input&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 3.自己实现的节流函数</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">let</span> counter = <span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    inputEl.<span class="property">oninput</span> = <span class="title function_">hythrottle</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`发送网络请求<span class="subst">$&#123;counter++&#125;</span>:`</span>, <span class="variable language_">this</span>.<span class="property">value</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;, <span class="number">1000</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>JS高级</category>
      </categories>
      <tags>
        <tag>JS高级</tag>
      </tags>
  </entry>
  <entry>
    <title>Options_API</title>
    <url>/2024/09/24/Options-API/</url>
    <content><![CDATA[<h3 id="认识计算属性computed"><a href="#认识计算属性computed" class="headerlink" title="认识计算属性computed"></a><strong><font style="color:#404040;">认识计算属性computed</font></strong></h3><ul>
<li><p><font style="color:#404040;">思路一的实现：模板语法</font></p>
<ul>
<li><p><font style="color:#404040;">缺点一：模板中存在大量的复杂逻辑，不便于维护（模板中表达式的初衷是用于简单的计算）；</font></p>
</li>
<li><p><font style="color:#404040;">缺点二：当有多次一样的逻辑时，存在重复的代码；</font></p>
</li>
<li><p><font style="color:#404040;">缺点三：多次使用的时候，很多运算也需要多次执行，没有缓存；</font></p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689300132169-13f2d7b8-3a7e-4d0a-95bb-da254106525e.png"></p>
</li>
</ul>
</li>
<li><p><font style="color:#404040;">思路二的实现：method实现</font></p>
<ul>
<li><font style="color:#404040;">缺点一：我们事实上先显示的是一个结果，但是都变成了一种方法的调用；</font></li>
<li><font style="color:#404040;">缺点二：多次使用方法的时候，没有缓存，也需要多次计算；</font></li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689300143600-8976b266-c71d-46f5-bfad-70b9f81a97e8.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689300147352-00b80e66-cd73-4e0f-ae46-12e78b154400.png"></p>
</li>
<li><p><strong><font style="color:#DF2A3F;">思路三的实现：computed实现</font></strong></p>
<ul>
<li><font style="color:#404040;">注意：计算属性看起来像是一个函数，但是我们在使用的时候不需要加()，这个后面讲setter和getter时会讲到；</font></li>
<li><font style="color:#404040;">我们会发现无论是直观上，还是效果上计算属性都是更好的选择；</font></li>
<li><font style="color:#404040;">并且</font><strong><font style="color:#404040;">计算属性是有缓存</font></strong><font style="color:#404040;">的；</font></li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689300156180-20efa191-475c-4114-9696-2c44c2fa236c.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689300159567-9089254a-2fab-4c07-a1e9-d64255c455b9.png"></p>
<h4 id="计算属性的缓存"><a href="#计算属性的缓存" class="headerlink" title="计算属性的缓存"></a><strong><font style="color:#404040;">计算属性的缓存</font></strong></h4><ul>
<li><font style="color:#404040;">这是什么原因呢？</font><ul>
<li><font style="color:#404040;">这是因为计算属性会基于它们的</font><font style="color:red;">依赖关系进行缓存</font><font style="color:#404040;">；</font></li>
<li><font style="color:#404040;">在</font><font style="color:red;">数据不发生变化</font><font style="color:#404040;">时，计算属性是</font><font style="color:red;">不需要重新计算</font><font style="color:#404040;">的；</font></li>
<li><font style="color:#404040;">但是如果</font><font style="color:red;">依赖的数据发生变化</font><font style="color:#404040;">，在使用时，计算属性依然</font><font style="color:red;">会重新进行计算</font><font style="color:#404040;">；</font></li>
</ul>
</li>
</ul>
<h4 id="计算属性的setter和getter"><a href="#计算属性的setter和getter" class="headerlink" title="计算属性的setter和getter"></a><strong><font style="color:#404040;">计算属性的setter和getter</font></strong></h4><ul>
<li><font style="color:#404040;">计算属性在大多数情况下，只需要一个</font><font style="color:red;">getter方法</font><font style="color:#404040;">即可，所以我们会将计算属性直接</font><font style="color:red;">写成一个函数</font><font style="color:#404040;">。</font></li>
<li><font style="color:#404040;">但是，如果我们确实想</font><font style="color:red;">设置计算属性的值</font><font style="color:#404040;">呢？</font><ul>
<li><font style="color:#404040;">这个时候我们也可以给计算属性设置一个</font><font style="color:red;">setter的方法</font><font style="color:#404040;">；</font></li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">   <span class="comment">// 语法糖的写法</span></span><br><span class="line">   <span class="comment">// fullname() &#123;</span></span><br><span class="line">   <span class="comment">//   return this.firstname + &quot; &quot; + this.lastname</span></span><br><span class="line">   <span class="comment">// &#125;,</span></span><br><span class="line">   </span><br><span class="line">   <span class="comment">// 完整的写法:</span></span><br><span class="line">   <span class="attr">fullname</span>: &#123;</span><br><span class="line">     <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">firstname</span> + <span class="string">&quot; &quot;</span> + <span class="variable language_">this</span>.<span class="property">lastname</span></span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">value</span>) &#123;</span><br><span class="line">       <span class="keyword">const</span> names = value.<span class="title function_">split</span>(<span class="string">&quot; &quot;</span>)</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">firstname</span> = names[<span class="number">0</span>]</span><br><span class="line">       <span class="variable language_">this</span>.<span class="property">lastname</span> = names[<span class="number">1</span>]</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br></pre></td></tr></table></figure>



<h3 id="认识侦听器watch"><a href="#认识侦听器watch" class="headerlink" title="认识侦听器watch"></a><font style="color:#404040;">认识侦听器watch</font></h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">   <span class="keyword">return</span> &#123;</span><br><span class="line">     <span class="attr">message</span>: <span class="string">&quot;Hello Vue&quot;</span>,</span><br><span class="line">     <span class="attr">info</span>: &#123; <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">methods</span>: &#123;</span><br><span class="line">   <span class="title function_">changeMessage</span>(<span class="params"></span>) &#123;</span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">message</span> = <span class="string">&quot;你好啊, 李银河!&quot;</span></span><br><span class="line">     <span class="variable language_">this</span>.<span class="property">info</span> = &#123; <span class="attr">name</span>: <span class="string">&quot;kobe&quot;</span> &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;,</span><br><span class="line"> <span class="attr">watch</span>: &#123;</span><br><span class="line">   <span class="comment">// 1.默认有两个参数: newValue/oldValue</span></span><br><span class="line">   <span class="title function_">message</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;message数据发生了变化:&quot;</span>, newValue, oldValue)</span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="title function_">info</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">     <span class="comment">// 2.如果是对象类型, 那么拿到的是代理对象</span></span><br><span class="line">     <span class="comment">// console.log(&quot;info数据发生了变化:&quot;, newValue, oldValue)</span></span><br><span class="line">     <span class="comment">// console.log(newValue.name, oldValue.name)</span></span><br><span class="line"></span><br><span class="line">     <span class="comment">// 3.获取原生对象</span></span><br><span class="line">     <span class="comment">// console.log(&#123; ...newValue &#125;)</span></span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Vue</span>.<span class="title function_">toRaw</span>(newValue))</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="侦听器watch的配置选项"><a href="#侦听器watch的配置选项" class="headerlink" title="侦听器watch的配置选项"></a><strong><font style="color:#404040;">侦听器watch的配置选项</font></strong></h3><ul>
<li><font style="color:#404040;">我们先来看一个例子：</font><ul>
<li><font style="color:#404040;">当我们点击按钮的时候会</font><font style="color:red;">修改info.name</font><font style="color:#404040;">的值；</font></li>
<li><font style="color:#404040;">这个时候我们使用</font><font style="color:red;">watch来侦听info，可以侦听到吗</font><font style="color:#404040;">？答案是</font><font style="color:red;">不可以</font><font style="color:#404040;">。</font></li>
</ul>
</li>
<li><font style="color:#404040;">这是因为默认情况下，watch只是在侦听info的引用变化，对于内部属性的变化是不会做出响应的：</font><ul>
<li><font style="color:#404040;">这个时候我们可以使用一个</font><font style="color:red;">选项deep</font><font style="color:#404040;">进行更深层的侦听；</font></li>
<li><font style="color:#404040;">注意前面我们说过watch里面侦听的属性对应的也可以是一个Object；</font></li>
</ul>
</li>
<li><font style="color:#404040;">还有另外一个属性，是希望一开始的就会立即执行一次：</font><ul>
<li><font style="color:#404040;">这个时候我们使用</font><font style="color:red;">immediate选项</font><font style="color:#404040;">；</font></li>
<li><font style="color:#404040;">这个时候无论后面数据是否有变化，侦听的函数都会有限执行一次；</font></li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">info</span>: &#123; <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">  <span class="title function_">changeInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 1.创建一个新对象, 赋值给info</span></span><br><span class="line">    <span class="comment">// this.info = &#123; name: &quot;kobe&quot; &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2.直接修改原对象某一个属性</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">info</span>.<span class="property">name</span> = <span class="string">&quot;kobe&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">  <span class="comment">// 默认watch监听不会进行深度监听</span></span><br><span class="line">  <span class="comment">// info(newValue, oldValue) &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(&quot;侦听到info改变:&quot;, newValue, oldValue)</span></span><br><span class="line">  <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 进行深度监听</span></span><br><span class="line">  <span class="attr">info</span>: &#123;</span><br><span class="line">    <span class="title function_">handler</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;侦听到info改变:&quot;</span>, newValue, oldValue)</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(newValue === oldValue)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 监听器选项:</span></span><br><span class="line">    <span class="comment">// info进行深度监听</span></span><br><span class="line">    <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 第一次渲染直接执行一次监听器</span></span><br><span class="line">    <span class="attr">immediate</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;info.name&quot;</span>: <span class="keyword">function</span>(<span class="params">newValue, oldValue</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;name发生改变:&quot;</span>, newValue, oldValue)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><font style="color:#404040;">还有另外一种方式就是使用 $watch 的API：</font></li>
<li><font style="color:#404040;">我们可以在created的生命周期（后续会讲到）中，使用 this.$watchs来侦听；</font><ul>
<li><font style="color:red;">第一个参数</font><font style="color:#404040;">是要侦听的源；</font></li>
<li><font style="color:red;">第二个参数</font><font style="color:#404040;">是侦听的回调函数callback；</font></li>
<li><font style="color:red;">第三个参数</font><font style="color:#404040;">是额外的其他选项，比如deep、immediate；</font><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689301259873-d36b7917-298b-49c8-9f10-99355bf3abf0.png"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis基础</title>
    <url>/2024/05/06/Redis%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h2 id="初识Redis"><a href="#初识Redis" class="headerlink" title="初识Redis"></a>初识Redis</h2><p>Redis是一种键值型的NoSQL数据库，这里有两个关键字</p>
<ul>
<li>键值型</li>
<li>NoSQL</li>
</ul>
<p>其中键值型是指Redis中存储的数据都是以Key-Value键值对的形式存储，而Value的形式多种多样，可以使字符串、数值甚至Json<br>而NoSQL则是相对于传统关系型数据库而言，有很大差异的一种数据库</p>
<h3 id="认识NoSQL"><a href="#认识NoSQL" class="headerlink" title="认识NoSQL"></a>认识NoSQL</h3><p>NoSql可以翻译做Not Only Sql（不仅仅是SQL），或者是No Sql（非Sql的）数据库。是相对于传统关系型数据库而言，有很大差异的一种特殊的数据库，因此也称之为非关系型数据库。</p>
<h4 id="结构化与非结构化"><a href="#结构化与非结构化" class="headerlink" title="结构化与非结构化"></a>结构化与非结构化</h4><p>传统关系型数据库是结构化数据，每张表在创建的时候都有严格的约束信息，如字段名、字段数据类型、字段约束等，插入的数据必须遵循这些约束<br>而NoSQL则对数据库格式没有约束，可以是键值型，也可以是文档型，甚至是图格式</p>
<h4 id="关联与非关联"><a href="#关联与非关联" class="headerlink" title="关联与非关联"></a>关联与非关联</h4><p>传统数据库的表与表之间往往存在关联，例如外键约束<br>而非关系型数据库不存在关联关系，要维护关系要么靠代码中的业务逻辑，要么靠数据之间的耦合</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  id<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  name<span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">  orders<span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">       id<span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">       item<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">	 id<span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span> title<span class="punctuation">:</span> <span class="string">&quot;荣耀6&quot;</span><span class="punctuation">,</span> price<span class="punctuation">:</span> <span class="number">4999</span></span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">       id<span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">       item<span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">	 id<span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span> title<span class="punctuation">:</span> <span class="string">&quot;小米11&quot;</span><span class="punctuation">,</span> price<span class="punctuation">:</span> <span class="number">3999</span></span><br><span class="line">       <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">  </span><br></pre></td></tr></table></figure>

<p>例如此处要维护张三与两个手机订单的关系，不得不冗余的将这两个商品保存在张三的订单文档中，不够优雅，所以建议使用业务逻辑来维护关联关系</p>
<h4 id="查询方式"><a href="#查询方式" class="headerlink" title="查询方式"></a>查询方式</h4><p>传统关系型数据库会基于Sql语句做查询，语法有统一的标准</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> id, age <span class="keyword">FROM</span> tb_user <span class="keyword">WHERE</span> id <span class="operator">=</span> <span class="number">1</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>而不同的非关系型数据库查询语法差异极大</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Redis:  get user:1</span><br><span class="line">MongoDB: db.user.find(&#123;_id: 1&#125;)</span><br><span class="line">elasticsearch:  GET http://localhost:9200/users/1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h4><p>传统关系型数据库能满足事务的ACID原则(原子性、一致性、独立性及持久性)<br>而非关系型数据库汪汪不支持事务，或者不能要个保证ACID的特性，只能实现计本的一致性</p>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><table>
<thead>
<tr>
<th></th>
<th>SQL</th>
<th>NoSQL</th>
</tr>
</thead>
<tbody><tr>
<td>数据结构</td>
<td>结构化(Structured)</td>
<td>非结构化</td>
</tr>
<tr>
<td>数据关联</td>
<td>关联的(Relational)</td>
<td>无关联的</td>
</tr>
<tr>
<td>查询方式</td>
<td>SQL查询</td>
<td>非SQL</td>
</tr>
<tr>
<td>事务特性</td>
<td>ACID</td>
<td>BASE</td>
</tr>
<tr>
<td>存储方式</td>
<td>磁盘</td>
<td>内存</td>
</tr>
<tr>
<td>扩展性</td>
<td>垂直</td>
<td>水平</td>
</tr>
</tbody></table>
<p>| 使用场景 | 1）数据结构固定<br>)对一致性、安全性要求不高 | 1)数据结构不固定<br>)相关业务对数据安全性、一致性要求较高<br>3）对性能要求 |</p>
<ul>
<li>存储方式<ul>
<li>关系型数据库基于磁盘进行存储，会有大量的磁盘IO，对性能有一定影响</li>
<li>非关系型数据库，他们的操作更多的是依赖于内存来操作，内存的读写速度会非常快，性能自然会好一些</li>
</ul>
</li>
<li>扩展性<ul>
<li>关系型数据库集群模式一般是主从，主从数据一致，起到数据备份的作用，称为垂直扩展。</li>
<li>非关系型数据库可以将数据拆分，存储在不同机器上，可以保存海量数据，解决内存大小有限的问题。称为水平扩展。</li>
<li>关系型数据库因为表之间存在关联关系，如果做水平扩展会给数据查询带来很多麻烦</li>
</ul>
</li>
</ul>
<h3 id="认识Redis"><a href="#认识Redis" class="headerlink" title="认识Redis"></a>认识Redis</h3><p>Redis诞生于2009年，全称是Remote Dictionary Server远程词典服务器，是一个基于内存的键值型NoSQL数据库。<br>特征：</p>
<ul>
<li>键值(Key-Value)型，Value支持多种不同的数据结构，功能丰富</li>
<li>单线程，每个命令具有原子性</li>
<li>低延迟，速度快(基于内存、IO多路复用、良好的编码)</li>
<li>支持数据持久化</li>
<li>支持主从集群、分片集群</li>
<li>支持多语言客户端</li>
</ul>
<p>作者：Antirez<br>Redis官网：<a href="https://redis.io/">https://redis.io/</a></p>
<h3 id="安装Redis"><a href="#安装Redis" class="headerlink" title="安装Redis"></a>安装Redis</h3><p>关于Redis的安装，我在之前的这篇文章做过详细的说明，这里就不赘述了<br><a href="https://cyborg2077.github.io/2022/10/17/ReggieRedis/">Redis入门https://cyborg2077.github.io/2022/10/17/ReggieRedis/</a></p>
<h3 id="Redis桌面客户端"><a href="#Redis桌面客户端" class="headerlink" title="Redis桌面客户端"></a>Redis桌面客户端</h3><p>安装完成Redis，我们就可以操作Redis，实现数据的CRUD了。这需要用到Redis客户端，包括：</p>
<ul>
<li>命令行客户端</li>
<li>图形化桌面客户端</li>
<li>编程客户端</li>
</ul>
<h4 id="Redis命令行客户端"><a href="#Redis命令行客户端" class="headerlink" title="Redis命令行客户端"></a>Redis命令行客户端</h4><p>Redis安装完成后就自带了命令行客户端：redis-cli，使用方式如下：<br><strong>BASH</strong></p>
<p>| &#96;&#96;&#96;<br>1</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> | ```</span><br><span class="line">redis-cli [options] [commonds]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>|<br>| — | — |</p>
<p>其中常见的options有：</p>
<ul>
<li>-h 127.0.0.1：指定要连接的redis节点的IP地址，默认是127.0.0.1</li>
<li>-p 6379：指定要连接的redis节点的端口，默认是6379</li>
<li>-a 123321：指定redis的访问密码</li>
</ul>
<p>其中的commonds就是Redis的操作命令，例如：</p>
<ul>
<li>ping：与redis服务端做心跳测试，服务端正常会返回&#96;pong</li>
</ul>
<h4 id="图形化桌面客户端"><a href="#图形化桌面客户端" class="headerlink" title="图形化桌面客户端"></a>图形化桌面客户端</h4><p>安装包：<a href="https://github.com/lework/RedisDesktopManager-Windows/releases">https://github.com/lework/RedisDesktopManager-Windows/releases</a><br>Redis默认有16个仓库，编号从0至15. 通过配置文件可以设置仓库数量，但是不超过16，并且不能自定义仓库名称。<br>如果是基于redis-cli连接Redis服务，可以通过select命令来选择数据库：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 选择0号数据库</span></span><br><span class="line"><span class="keyword">select</span> 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Redis常用命令"><a href="#Redis常用命令" class="headerlink" title="Redis常用命令"></a>Redis常用命令</h2><p>Redis是典型的key-value数据库，key一般是字符串，而value包含很多不同的数据类型<br><a href="https://pic1.imgdb.cn/item/63527eb616f2c2beb12beb85.jpg"><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/35551100/1714998783142-642b9376-8baf-4d11-953b-5d8cc93b6e50.jpeg#averageHue=%23e1e4df&clientId=u786e39a9-1c81-4&from=paste&height=288&id=hp6Ga&originHeight=579&originWidth=1142&originalType=url&ratio=1.5&rotation=0&showTitle=false&status=done&style=none&taskId=u825ed33c-21ca-4169-8421-770f4fae16a&title=&width=568.6666870117188"></a></p>
<h3 id="Redis通用命令"><a href="#Redis通用命令" class="headerlink" title="Redis通用命令"></a>Redis通用命令</h3><p>常用的通用命令有以下几个</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>KEYs pattern</td>
<td>查找所有符合给定模式(pattern)的key</td>
</tr>
<tr>
<td>EXISTs key</td>
<td>检查给定key是否存在</td>
</tr>
<tr>
<td>TYPE key</td>
<td>返回key所储存的值的类型</td>
</tr>
<tr>
<td>TTL key</td>
<td>返回给定key的剩余生存时间(TTL, time to live)，以秒为单位</td>
</tr>
<tr>
<td>DEL key</td>
<td>该命令用于在key存在是删除key</td>
</tr>
</tbody></table>
<ul>
<li>KEYS：查看符合模板的所有key<ul>
<li>不建议在生产环境设备上使用，因为Redis是单线程的，执行查询的时候会阻塞其他命令，当数据量很大的时候，使用KEYS进行模糊查询，效率很差</li>
</ul>
</li>
<li>DEL：删除一个指定的key<ul>
<li>也可以删除多个key，DEL name age，会将name和age都删掉</li>
</ul>
</li>
<li>EXISTS：判断key是否存在<ul>
<li>EXISTS name，如果存在返回1，不存在返回0</li>
</ul>
</li>
<li>EXPIRE：给一个key设置有效期，有效期到期时该key会被自动删除<ul>
<li>EXPIRE name 20，给name设置20秒有效期，到期自动删除</li>
</ul>
</li>
<li>TTL：查看一个key的剩余有效期(Time-To-Live)<ul>
<li>TTL name，查看name的剩余有效期，如果未设置有效期，则返回-1</li>
</ul>
</li>
</ul>
<h3 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h3><p>String类型，也就是字符串类型，是Redis中最简单的存储类型<br>其value是字符串，不过根据字符串的格式不同，又可以分为3类</p>
<ul>
<li>string：普通字符串</li>
<li>int：整数类型，可以做自增、自减操作</li>
<li>float：浮点类型，可以做自增、自减操作<br>不管是哪种格式，底层都是字节数组形式存储，只不过是编码方式不同，字符串类型的最大空间不能超过512M</li>
</ul>
<h4 id="String的常用命令"><a href="#String的常用命令" class="headerlink" title="String的常用命令"></a>String的常用命令</h4><p>String的常用命令有</p>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>SET</td>
<td>添加或者修改一个已经存在的String类型的键值对</td>
</tr>
<tr>
<td>GET</td>
<td>根据key获取String类型的value</td>
</tr>
<tr>
<td>MEST</td>
<td>批量添加多个String类型的键值对</td>
</tr>
<tr>
<td>MGET</td>
<td>根据多个key获取多个String类型的value</td>
</tr>
<tr>
<td>INCR</td>
<td>让一个整形的key自增1</td>
</tr>
<tr>
<td>INCRBY</td>
<td>让一个整形的key自增并指定步长值，例如：incrby num 2，让num值自增2</td>
</tr>
<tr>
<td>INCRBYFLOAT</td>
<td>让一个浮点类型的数字自增并指定步长值</td>
</tr>
<tr>
<td>SETNX</td>
<td>添加一个String类型的键值对，前提是这个key不存在，否则不执行，可以理解为真正的新增</td>
</tr>
<tr>
<td>SETEX</td>
<td>添加一个String类型的键值对，并指定有效期</td>
</tr>
</tbody></table>
<h4 id="Key结构"><a href="#Key结构" class="headerlink" title="Key结构"></a>Key结构</h4><ul>
<li>Redis没有类似MySQL中Table的概念，那么我们该如何区分不同类型的Key呢？</li>
<li>例如：需要存储用户、商品信息到Redis，有一个用户的id是1，有一个商品的id恰好也是1，如果此时使用id作为key，那么就回冲突，该怎么办？</li>
<li>我们可以通过给key添加前缀加以区分，不过这个前缀不是随便加的，有一定的规范<ul>
<li>Redis的key允许有多个单词形成层级结构，多个单词之间用:隔开，格式如下<br>| &#96;&#96;&#96;<br>项目名:业务名:类型:id</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"> |</span><br><span class="line">| --- |</span><br><span class="line"></span><br><span class="line">   - 这个格式也并非是固定的，可以根据自己的需求来删除/添加词条，这样我们就可以把不同数据类型的数据区分开了，从而避免了key的冲突问题</span><br><span class="line">   - 例如我们的项目名叫reggie，有user和dish两种不同类型的数据，我们可以这样定义key</span><br><span class="line">      - user相关的key：reggie:user:1</span><br><span class="line">      - dish相关的key：reggie:dish:1</span><br><span class="line">- 如果value是一个Java对象，例如一个User对象，则可以将对象序列化为JSON字符串后存储</span><br><span class="line">| KEY | VALUE |</span><br><span class="line">| --- | --- |</span><br><span class="line">| reggie:user:1 | &#123;“id”:1, “name”: “Jack”, “age”: 21&#125; |</span><br><span class="line">| reggie:dish:1 | &#123;“id”:1, “name”: “鲟鱼火锅”, “price”: 4999&#125; |</span><br><span class="line"></span><br><span class="line">- 并且在Redis的桌面客户端中，也会以相同前缀作为层次结构，让数据看起来层次分明，关系清晰</span><br><span class="line">### Hash类型</span><br><span class="line"></span><br><span class="line">- Hash类型，也叫散列，其中value是一个无序字典，类似于Java中的HashMap结构</span><br><span class="line">- String结构是将对象序列化为JSON字符串后存储，当我们要修改对象的某个属性值的时候很不方便</span><br><span class="line">| KEY | VALUE |</span><br><span class="line">| --- | --- |</span><br><span class="line">| reggie:user:1 | &#123;“id”:1, “name”: “Jack”, “age”: 21&#125; |</span><br><span class="line">| reggie:dish:1 | &#123;“id”:1, “name”: “鲟鱼火锅”, “price”: 4999&#125; |</span><br><span class="line"></span><br><span class="line">- Hash结构可以将对象中的每个字段独立存储，可以针对单个字段做CRUD</span><br><span class="line">| KEY | VALUE |  |</span><br><span class="line">| --- | --- | --- |</span><br><span class="line">|  | field | value |</span><br><span class="line">| reggie:user:1 | name | Jack |</span><br><span class="line">|  | age  | 21 |</span><br><span class="line">| </span><br><span class="line">reggie:user:2 | name  | Rose |</span><br><span class="line">|  | age  | 18 |</span><br><span class="line"></span><br><span class="line">- Hash的常用命令有</span><br><span class="line">| 命令 | 描述 |</span><br><span class="line">| --- | --- |</span><br><span class="line">| HSET key field value | 添加或者修改hash类型key的field的值 |</span><br><span class="line">| HGET key field | 获取一个hash类型key的field的值 |</span><br><span class="line">| HMSET | 批量添加多个hash类型key的field的值 |</span><br><span class="line">| HMGET | 批量获取多个hash类型key的field的值 |</span><br><span class="line">| HGETALL | 获取一个hash类型的key中的所有的field和value |</span><br><span class="line">| HKEYS | 获取一个hash类型的key中的所有的field |</span><br><span class="line">| HINCRBY | 让一个hash类型key的字段值自增并指定步长 |</span><br><span class="line">| HSETNX | 添加一个hash类型的key的field值，前提是这个field不存在，否则不执行 |</span><br><span class="line"></span><br><span class="line">### List类型</span><br><span class="line"></span><br><span class="line">- Redis中的List类型与Java中的LinkedList类似，可以看做是一个双向链表结构。既可以支持正向检索和也可以支持反向检索。</span><br><span class="line">- 特征也与LinkedList类似：</span><br><span class="line">   - 有序</span><br><span class="line">   - 元素可以重复</span><br><span class="line">   - 插入和删除快</span><br><span class="line">   - 查询速度一般</span><br><span class="line">- 常用来存储一个有序数据，例如：朋友圈点赞列表，评论列表等。</span><br><span class="line">- List的常见命令有：</span><br><span class="line">| 命令 | 描述 |</span><br><span class="line">| --- | --- |</span><br><span class="line">| LPUSH key element … | 向列表左侧插入一个或多个元素 |</span><br><span class="line">| LPOP key | 移除并返回列表左侧的第一个元素，没有则返回nil |</span><br><span class="line">| RPUSH key element … | 向列表右侧插入一个或多个元素 |</span><br><span class="line">| RPOP key | 移除并返回列表右侧的第一个元素 |</span><br><span class="line">| LRANGE key star end | 返回一段角标范围内的所有元素 |</span><br><span class="line">| BLPOP和BRPOP | 与LPOP和RPOP类似，只不过在没有元素时等待指定时间，而不是直接返回nil |</span><br><span class="line"></span><br><span class="line">### Set类型</span><br><span class="line"></span><br><span class="line">- Redis的Set结构与Java中的HashSet类似，可以看做是一个value为null的HashMap。因为也是一个hash表，因此具备与HashSet类似的特征：</span><br><span class="line">   - 无序</span><br><span class="line">   - 元素不可重复</span><br><span class="line">   - 查找快</span><br><span class="line">   - 支持交集、并集、差集等功能</span><br><span class="line">- Set的常见命令有：</span><br><span class="line">| 命令 | 描述 |</span><br><span class="line">| --- | --- |</span><br><span class="line">| SADD key member … | 向set中添加一个或多个元素 |</span><br><span class="line">| SREM key member … | 移除set中的指定元素 |</span><br><span class="line">| SCARD key | 返回set中元素的个数 |</span><br><span class="line">| SISMEMBER key member | 判断一个元素是否存在于set中 |</span><br><span class="line">| SMEMBERS | 获取set中的所有元素 |</span><br><span class="line">| SINTER key1 key2 … | 求key1与key2的交集 |</span><br><span class="line">| SUNION key1 key2 … | 求key1与key2的并集 |</span><br><span class="line">| SDIFF key1 key2 … | 求key1与key2的差集 |</span><br><span class="line"></span><br><span class="line">练习题：</span><br><span class="line"></span><br><span class="line">1. 将下列数据用Redis的Set集合来存储：</span><br><span class="line">- 张三的好友有：李四、王五、赵六</span><br><span class="line">​```bash</span><br><span class="line">127.0.0.1:6379&gt; sadd zhangsan lisi wangwu zhaoliu</span><br><span class="line">(integer) 3</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>李四的好友有：王五、麻子、二狗</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sadd lisi wangwu mazi ergou</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol>
<li>利用Set的命令实现下列功能：</li>
</ol>
<ul>
<li>计算张三的好友有几人</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; scard zhangsan</span><br><span class="line">(<span class="built_in">integer</span>) 3</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>计算张三和李四有哪些共同好友</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sinter zhangsan lisi</span><br><span class="line">1) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>查询哪些人是张三的好友却不是李四的好友</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sdiff zhangsan lisi</span><br><span class="line">1) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line">) <span class="string">&quot;lisi&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>查询张三和李四的好友总共有哪些人</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sunion zhangsan lisi</span><br><span class="line">1) <span class="string">&quot;wangwu&quot;</span></span><br><span class="line">) <span class="string">&quot;zhaoliu&quot;</span></span><br><span class="line">3) <span class="string">&quot;ergou&quot;</span></span><br><span class="line">4) <span class="string">&quot;lisi&quot;</span></span><br><span class="line">5) <span class="string">&quot;mazi&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>判断李四是否是张三的好友</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sismember zhangsan lisi</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>判断张三是否是李四的好友</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; sismember lisi zhangsan</span><br><span class="line">(<span class="built_in">integer</span>) 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>将李四从张三的好友列表中移除</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; srem zhangsan lisi</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="SortedSet类型"><a href="#SortedSet类型" class="headerlink" title="SortedSet类型"></a>SortedSet类型</h3><ul>
<li>Redis的SortedSet是一个可排序的set集合，与Java中的TreeSet有些类似，但底层数据结构却差别很大。SortedSet中的每一个元素都带有一个score属性，可以基于score属性对元素排序，底层的实现是一个跳表（SkipList）加 hash表。</li>
<li>SortedSet具备下列特性：<ul>
<li>可排序</li>
<li>元素不重复</li>
<li>查询速度快</li>
</ul>
</li>
<li>因为SortedSet的可排序特性，经常被用来实现排行榜这样的功能。</li>
<li>SortedSet的常见命令有：</li>
</ul>
<table>
<thead>
<tr>
<th>命令</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>ZADD key score member</td>
<td>添加一个或多个元素到sorted set ，如果已经存在则更新其score值</td>
</tr>
<tr>
<td>ZREM key member</td>
<td>删除sorted set中的一个指定元素</td>
</tr>
<tr>
<td>ZSCORE key member</td>
<td>获取sorted set中的指定元素的score值</td>
</tr>
<tr>
<td>ZRANK key member</td>
<td>获取sorted set 中的指定元素的排名</td>
</tr>
<tr>
<td>ZCARD key</td>
<td>获取sorted set中的元素个数</td>
</tr>
<tr>
<td>ZCOUNT key min max</td>
<td>统计score值在给定范围内的所有元素的个数</td>
</tr>
<tr>
<td>ZINCRBY key increment member</td>
<td>让sorted set中的指定元素自增，步长为指定的increment值</td>
</tr>
<tr>
<td>ZRANGE key min max</td>
<td>按照score排序后，获取指定排名范围内的元素</td>
</tr>
<tr>
<td>ZRANGEBYSCORE key min max</td>
<td>按照score排序后，获取指定score范围内的元素</td>
</tr>
<tr>
<td>ZDIFF、ZINTER、ZUNION</td>
<td>求差集、交集、并集</td>
</tr>
</tbody></table>
<p>注意：所有的排名默认都是升序，如果要降序则在命令的Z后面添加REV即可，例如：</p>
<ul>
<li>升序获取sorted set 中的指定元素的排名：ZRANK key member</li>
<li>降序获取sorted set 中的指定元素的排名：ZREVRANK key memeber</li>
<li>练习题：<ul>
<li>将班级的下列学生得分存入Redis的SortedSet中：</li>
<li>Jack 85, Lucy 89, Rose 82, Tom 95, Jerry 78, Amy 92, Miles 76</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zadd stu 85 Jack 89 Lucy 82 Rose 95 Tom 78 Jerry 92 Amy 76 Miles</span><br><span class="line">(<span class="built_in">integer</span>) 7</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>并实现下列功能：<ul>
<li>删除Tom同学</li>
</ul>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrem stu Tom</span><br><span class="line">(<span class="built_in">integer</span>) 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>  - 获取Amy同学的分数
</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zscore stu Amy</span><br><span class="line"><span class="string">&quot;92&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>  - 获取Rose同学的排名
</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrank stu Rose</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>  - 查询80分以下有几个学生
</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zcount stu 0 80</span><br><span class="line">(<span class="built_in">integer</span>) 2</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>  - 给Amy同学加2分
</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zincrby stu 2 Amy</span><br><span class="line"><span class="string">&quot;94&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>  - 查出成绩前3名的同学
</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrange stu 0 2</span><br><span class="line">1) <span class="string">&quot;Miles&quot;</span></span><br><span class="line">) <span class="string">&quot;Jerry&quot;</span></span><br><span class="line">3) <span class="string">&quot;Rose&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>  - 查出成绩80分以下的所有同学
</code></pre>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">127.0.0.1:6379&gt; zrangebyscore stu 0 80</span><br><span class="line">1) <span class="string">&quot;Miles&quot;</span></span><br><span class="line">) <span class="string">&quot;Jerry&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Redis的Java客户端"><a href="#Redis的Java客户端" class="headerlink" title="Redis的Java客户端"></a>Redis的Java客户端</h2><ul>
<li>目前主流的Redis的Java客户端有三种<ul>
<li>Jedis和Lettuce：这两个主要是提供了Redis命令对应的API，方便我们操作Redis，而SpringDataRedis又对这两种做了抽象和封装，因此我们后期会直接以SpringDataRedis来学习。</li>
<li>Redisson：是在Redis基础上实现了分布式的可伸缩的java数据结构，例如Map、Queue等，而且支持跨进程的同步机制：Lock、Semaphore等待，比较适合用来实现特殊的功能需求。</li>
</ul>
</li>
</ul>
<h3 id="Jedis客户端"><a href="#Jedis客户端" class="headerlink" title="Jedis客户端"></a>Jedis客户端</h3><h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h4><ul>
<li>使用Jedis的步骤<ol>
<li>导入Jedis的maven坐标</li>
</ol>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--jedis--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--单元测试--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.jupiter<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-jupiter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>  2. 建立连接
     新建一个单元测试类
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Jedis jedis;</span><br><span class="line"></span><br><span class="line"><span class="meta">@BeforeEach</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//1. 建立连接</span></span><br><span class="line">    jedis = <span class="keyword">new</span> <span class="title class_">Jedis</span>(<span class="string">&quot;101.42.225.160&quot;</span>, <span class="number">6379</span>);</span><br><span class="line">    <span class="comment">//2. 设置密码</span></span><br><span class="line">    jedis.auth(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    <span class="comment">//3. 选择库</span></span><br><span class="line">    jedis.select(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>  3. 测试
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span>&#123;</span><br><span class="line">    jedis.set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Kyle&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testHash</span><span class="params">()</span>&#123;</span><br><span class="line">    jedis.hset(<span class="string">&quot;reggie:user:1&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">    jedis.hset(<span class="string">&quot;reggie:user:2&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Rose&quot;</span>);</span><br><span class="line">    jedis.hset(<span class="string">&quot;reggie:user:1&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;21&quot;</span>);</span><br><span class="line">    jedis.hset(<span class="string">&quot;reggie:user:2&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;18&quot;</span>);</span><br><span class="line">    Map&lt;String, String&gt; map = jedis.hgetAll(<span class="string">&quot;reggie:user:1&quot;</span>);</span><br><span class="line">    System.out.println(map);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>  4. 释放资源
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterEach</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (jedis != <span class="literal">null</span>)&#123;</span><br><span class="line">        jedis.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="连接池"><a href="#连接池" class="headerlink" title="连接池"></a>连接池</h4><ul>
<li>Jedis本身是线程不安全的，并且频繁的创建和销毁连接会有性能损耗，因此我们推荐大家使用Jedis连接池代替Jedis的直连方式。</li>
<li>新建一个com.blog.util，用于存放我们编写的工具类</li>
<li>但后面我们使用SpringDataRedis的时候，可以直接在yml配置文件里配置这些内容</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JedisConnectionFactory</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> JedisPool jedisPool;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">// 配置连接池</span></span><br><span class="line">        <span class="type">JedisPoolConfig</span> <span class="variable">poolConfig</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JedisPoolConfig</span>();</span><br><span class="line">        poolConfig.setMaxTotal(<span class="number">8</span>);</span><br><span class="line">        poolConfig.setMaxIdle(<span class="number">8</span>);</span><br><span class="line">        poolConfig.setMinIdle(<span class="number">0</span>);</span><br><span class="line">        poolConfig.setMaxWaitMillis(<span class="number">1000</span>);</span><br><span class="line">        <span class="comment">// 创建连接池对象，参数：连接池配置、服务端ip、服务端端口、超时时间、密码</span></span><br><span class="line">        jedisPool = <span class="keyword">new</span> <span class="title class_">JedisPool</span>(poolConfig, <span class="string">&quot;101.42.225.160&quot;</span>, <span class="number">6379</span>, <span class="number">1000</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Jedis <span class="title function_">getJedis</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> jedisPool.getResource();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>之后我们的测试类就可以修改为如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RedisTestApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Jedis</span> <span class="variable">jedis</span> <span class="operator">=</span> JedisConnectionFactory.getJedis();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testString</span><span class="params">()</span>&#123;</span><br><span class="line">        jedis.set(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Kyle&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> jedis.get(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;name = &quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testHash</span><span class="params">()</span>&#123;</span><br><span class="line">        jedis.hset(<span class="string">&quot;reggie:user:1&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Jack&quot;</span>);</span><br><span class="line">        jedis.hset(<span class="string">&quot;reggie:user:2&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Rose&quot;</span>);</span><br><span class="line">        jedis.hset(<span class="string">&quot;reggie:user:3&quot;</span>,<span class="string">&quot;name&quot;</span>,<span class="string">&quot;Kyle&quot;</span>);</span><br><span class="line">        jedis.hset(<span class="string">&quot;reggie:user:1&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;21&quot;</span>);</span><br><span class="line">        jedis.hset(<span class="string">&quot;reggie:user:2&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;18&quot;</span>);</span><br><span class="line">        jedis.hset(<span class="string">&quot;reggie:user:3&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;18&quot;</span>);</span><br><span class="line">        Map&lt;String, String&gt; map = jedis.hgetAll(<span class="string">&quot;reggie:user:1&quot;</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (jedis != <span class="literal">null</span>)&#123;</span><br><span class="line">            jedis.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="SpringDataRedis客户端"><a href="#SpringDataRedis客户端" class="headerlink" title="SpringDataRedis客户端"></a>SpringDataRedis客户端</h3><ul>
<li>SpringData是Spring中数据操作的模块，包含对各种数据库的集成，其中对Redis的集成模块就叫做SpringDataRedis</li>
<li>官网地址：<a href="https://spring.io/projects/spring-data-redis">https://spring.io/projects/spring-data-redis</a><ul>
<li>提供了对不同Redis客户端的整合（Lettuce和Jedis）</li>
<li>提供了RedisTemplate统一API来操作Redis</li>
<li>支持Redis的发布订阅模型</li>
<li>支持Redis哨兵和Redis集群</li>
<li>支持基于Lettuce的响应式编程</li>
<li>支持基于JDK、JSON、字符串、Spring对象的数据序列化及反序列化</li>
<li>支持基于Redis的JDKCollection实现</li>
</ul>
</li>
<li>SpringDataRedis中提供了RedisTemplate工具类，其中封装了各种对Redis的操作。并且将不同数据类型的操作API封装到了不同的类型中：</li>
</ul>
<table>
<thead>
<tr>
<th>API</th>
<th>返回值类型</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>redisTemplate.opsForValue()</td>
<td>ValueOperations</td>
<td>操作String类型数据</td>
</tr>
<tr>
<td>redisTemplate.opsForHash()</td>
<td>HashOperations</td>
<td>操作Hash类型数据</td>
</tr>
<tr>
<td>redisTemplate.opsForList()</td>
<td>ListOperations</td>
<td>操作List类型数据</td>
</tr>
<tr>
<td>redisTemplate.opsForSet()</td>
<td>SetOperations</td>
<td>操作Set类型数据</td>
</tr>
<tr>
<td>redisTemplate.opsForzSet()</td>
<td>ZSetOperations</td>
<td>操作SortedSet类型数据</td>
</tr>
<tr>
<td>redisTemplate</td>
<td></td>
<td>通用的命令</td>
</tr>
</tbody></table>
<h4 id="快速入门-1"><a href="#快速入门-1" class="headerlink" title="快速入门"></a>快速入门</h4><p>SpringBoot已经提供了对SpringDataRedis的支持，使用起来非常简单</p>
<ol>
<li>导入依赖，</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--redis依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--common-pool--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-pool2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--Jackson依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--lombok--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.projectlombok<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>lombok<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>配置Redis</li>
</ol>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="number">101.42</span><span class="number">.225</span><span class="number">.160</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">6379</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">lettuce:</span></span><br><span class="line">      <span class="attr">pool:</span></span><br><span class="line">        <span class="attr">max-active:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">max-idle:</span> <span class="number">8</span></span><br><span class="line">        <span class="attr">min-idle:</span> <span class="number">0</span></span><br><span class="line">        <span class="attr">max-wait:</span> <span class="string">100ms</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>注入RedisTemplate<br>因为有了SpringBoot的自动装配，我们可以拿来就用</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>编写测试方法</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">stringTest</span><span class="params">()</span>&#123;</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;username&quot;</span>,<span class="string">&quot;David&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">username</span> <span class="operator">=</span> (String) redisTemplate.opsForValue().get(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">    System.out.println(username);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="自定义序列化"><a href="#自定义序列化" class="headerlink" title="自定义序列化"></a>自定义序列化</h4><ul>
<li>RedisTemplate可以接收任意Object作为值写入Redis</li>
<li>只不过写入前会把Object序列化为字节形式，默认是采用JDK序列化，得到的结果是这样的</li>
</ul>
<p>\xAC\xED\x00\x05t\x00\x06\xE5\xBC\xA0\xE4\xB8\x89</p>
<ul>
<li>缺点：<ul>
<li>可读性差</li>
<li>内存占用较大</li>
</ul>
</li>
<li>我们可以自定义RedisTemplate的序列化方式，代码如下<br>在com.blog.config包下编写对应的配置类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建RedisTemplate对象</span></span><br><span class="line">        RedisTemplate&lt;String, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        <span class="comment">// 设置连接工厂</span></span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="comment">// 创建JSON序列化工具</span></span><br><span class="line">        <span class="type">GenericJackson2JsonRedisSerializer</span> <span class="variable">jsonRedisSerializer</span> <span class="operator">=</span></span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">GenericJackson2JsonRedisSerializer</span>();</span><br><span class="line">        <span class="comment">// 设置Key的序列化</span></span><br><span class="line">        template.setKeySerializer(RedisSerializer.string());</span><br><span class="line">        template.setHashKeySerializer(RedisSerializer.string());</span><br><span class="line">        <span class="comment">// 设置Value的序列化</span></span><br><span class="line">        template.setValueSerializer(jsonRedisSerializer);</span><br><span class="line">        template.setHashValueSerializer(jsonRedisSerializer);</span><br><span class="line">        <span class="comment">// 返回</span></span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>我们编写一个User类，并尝试将其创建的对象存入Redis，看看是什么效果</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="meta">@NoArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>测试方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">stringTest</span><span class="params">()</span>&#123;</span><br><span class="line">    redisTemplate.opsForValue().set(<span class="string">&quot;userdata&quot;</span>,<span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;张三&quot;</span>,<span class="number">18</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>这里采用了JSON序列化来代替默认的JDK序列化方式。最终结果如下：</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@class&quot;</span><span class="punctuation">:</span> <span class="string">&quot;com.blog.entity.User&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;张三&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span> <span class="number">18</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>整体可读性有了很大提升，并且能将Java对象自动的序列化为JSON字符串，并且查询时能自动把JSON反序列化为Java对象。不过，其中记录了序列化时对应的class名称，目的是为了查询时实现自动反序列化。这会带来额外的内存开销。</li>
<li>所以肯定会有更好的方法</li>
</ul>
<h4 id="StringRedisTemplate"><a href="#StringRedisTemplate" class="headerlink" title="StringRedisTemplate"></a>StringRedisTemplate</h4><ul>
<li>为了节省内存空间，我们可以不使用JSON序列化器来处理value，而是统一使用String序列化器，要求只能存储String类型的key和value。当需要存储Java对象时，手动完成对象的序列化和反序列化。</li>
<li>因为存入和读取时的序列化及反序列化都是我们自己实现的，SpringDataRedis就不会将class信息写入Redis了</li>
<li>这种用法比较普遍，因此SpringDataRedis就提供了RedisTemplate的子类：StringRedisTemplate，它的key和value的序列化方式默认就是String方式。源码如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringRedisTemplate</span> <span class="keyword">extends</span> <span class="title class_">RedisTemplate</span>&lt;String, String&gt; &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">StringRedisTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setKeySerializer(RedisSerializer.string());</span><br><span class="line">        <span class="built_in">this</span>.setValueSerializer(RedisSerializer.string());</span><br><span class="line">        <span class="built_in">this</span>.setHashKeySerializer(RedisSerializer.string());</span><br><span class="line">        <span class="built_in">this</span>.setHashValueSerializer(RedisSerializer.string());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>省去了我们自定义RedisTemplate的序列化方式的步骤（可以将之前配置的RedisConfig删除掉），而是直接使用：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">stringTest</span><span class="params">()</span> <span class="keyword">throws</span> JsonProcessingException &#123;</span><br><span class="line">    <span class="comment">//创建对象</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;张三&quot;</span>, <span class="number">18</span>);</span><br><span class="line">    <span class="comment">//手动序列化</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> mapper.writeValueAsString(user);</span><br><span class="line">    <span class="comment">//写入数据</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(<span class="string">&quot;userdata&quot;</span>, json);</span><br><span class="line">    <span class="comment">//获取数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">userdata</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(<span class="string">&quot;userdata&quot;</span>);</span><br><span class="line">    <span class="comment">//手动反序列化</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">readValue</span> <span class="operator">=</span> mapper.readValue(userdata, User.class);</span><br><span class="line">    System.out.println(readValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>存入Redis中是这样的</p>
</li>
<li><pre><code class="json">&#123;
  &quot;name&quot;: &quot;张三&quot;,
  &quot;age&quot;: 18
&#125;
</code></pre>
</li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis基础</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis高级_优惠劵秒杀</title>
    <url>/2024/05/09/Redis%E9%AB%98%E7%BA%A7-%E4%BC%98%E6%83%A0%E5%8A%B5%E7%A7%92%E6%9D%80/</url>
    <content><![CDATA[<h2 id="优惠券秒杀"><a href="#优惠券秒杀" class="headerlink" title="优惠券秒杀"></a>优惠券秒杀</h2><h3 id="Redis实现全局唯一ID"><a href="#Redis实现全局唯一ID" class="headerlink" title="Redis实现全局唯一ID"></a>Redis实现全局唯一ID</h3><ul>
<li>在各类购物App中，都会遇到商家发放的优惠券</li>
<li>当用户抢购商品时，生成的订单会保存到tb_voucher_order表中，而订单表如果使用数据库自增ID就会存在一些问题<ol>
<li>id规律性太明显</li>
<li>受单表数据量的限制</li>
</ol>
</li>
<li>如果我们的订单id有太明显的规律，那么对于用户或者竞争对手，就很容易猜测出我们的一些敏感信息，例如商城一天之内能卖出多少单，这明显不合适</li>
<li>随着我们商城的规模越来越大，MySQL的单表容量不宜超过500W，数据量过大之后，我们就要进行拆库拆表，拆分表了之后，他们从逻辑上讲，是同一张表，所以他们的id不能重复，于是乎我们就要保证id的唯一性</li>
<li>那么这就引出我们的全局ID生成器了<ul>
<li>全局ID生成器是一种在分布式系统下用来生成全局唯一ID的工具，一般要满足一下特性<ul>
<li>唯一性</li>
<li>高可用</li>
<li>高性能</li>
<li>递增性</li>
<li>安全性</li>
</ul>
</li>
</ul>
</li>
<li>为了增加ID的安全性，我们可以不直接使用Redis自增的数值，而是拼接一些其他信息</li>
<li>ID组成部分<ul>
<li>符号位：1bit，永远为0</li>
<li>时间戳：31bit，以秒为单位，可以使用69年（2^31秒约等于69年）</li>
<li>序列号：32bit，秒内的计数器，支持每秒传输2^32个不同ID</li>
</ul>
</li>
<li>那我们就根据我们分析的ID生成策略，来编写代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//设置一下起始时间，时间戳就是起始时间与当前时间的秒数差</span></span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">tmp</span> <span class="operator">=</span> LocalDateTime.of(<span class="number">2022</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    System.out.println(tmp.toEpochSecond(ZoneOffset.UTC));</span><br><span class="line">    <span class="comment">//结果为1640995200L</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>完整代码如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisIdWorker</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="comment">//设置起始时间，我这里设定的是2022.01.01 00:00:00</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">BEGIN_TIMESTAMP</span> <span class="operator">=</span> <span class="number">1640995200L</span>;</span><br><span class="line">    <span class="comment">//序列号长度</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">COUNT_BIT</span> <span class="operator">=</span> <span class="number">32L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">nextId</span><span class="params">(String keyPrefix)</span>&#123;</span><br><span class="line">        <span class="comment">//1. 生成时间戳</span></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">now</span> <span class="operator">=</span> LocalDateTime.now();</span><br><span class="line">        <span class="type">long</span> <span class="variable">currentSecond</span> <span class="operator">=</span> now.toEpochSecond(ZoneOffset.UTC);</span><br><span class="line">        <span class="type">long</span> <span class="variable">timeStamp</span> <span class="operator">=</span> currentSecond - BEGIN_TIMESTAMP;</span><br><span class="line">        <span class="comment">//2. 生成序列号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">date</span> <span class="operator">=</span> now.format(DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy:MM:dd&quot;</span>));</span><br><span class="line">        <span class="type">long</span> <span class="variable">count</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().increment(<span class="string">&quot;inc:&quot;</span>+keyPrefix+<span class="string">&quot;:&quot;</span>+date);</span><br><span class="line">        <span class="comment">//3. 拼接并返回，简单位运算</span></span><br><span class="line">        <span class="keyword">return</span> timeStamp &lt;&lt; COUNT_BIT | count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="添加优惠券"><a href="#添加优惠券" class="headerlink" title="添加优惠券"></a>添加优惠券</h3><ul>
<li>每个店铺度可以发布优惠券，分为平价券和特价券，平价券可以任意购买，而特价券需要秒杀抢购</li>
<li>tb_voucher：优惠券的基本信息，优惠金额、使用规则等</li>
</ul>
<table>
<thead>
<tr>
<th>Field</th>
<th>Type</th>
<th>Collation</th>
<th>Null</th>
<th>Key</th>
<th>Default</th>
<th>Extra</th>
<th>Comment</th>
</tr>
</thead>
<tbody><tr>
<td>id</td>
<td>bigint unsigned</td>
<td>(NULL)</td>
<td>NO</td>
<td>PRI</td>
<td>(NULL)</td>
<td>auto_increment</td>
<td>主键</td>
</tr>
<tr>
<td>shop_id</td>
<td>bigint unsigned</td>
<td>(NULL)</td>
<td>YES</td>
<td></td>
<td>(NULL)</td>
<td></td>
<td>商铺id</td>
</tr>
<tr>
<td>title</td>
<td>varchar(255)</td>
<td>utf8mb4_general_ci</td>
<td>NO</td>
<td></td>
<td>(NULL)</td>
<td></td>
<td>代金券标题</td>
</tr>
<tr>
<td>sub_title</td>
<td>varchar(255)</td>
<td>utf8mb4_general_ci</td>
<td>YES</td>
<td></td>
<td>(NULL)</td>
<td></td>
<td>副标题</td>
</tr>
<tr>
<td>rules</td>
<td>varchar(1024)</td>
<td>utf8mb4_general_ci</td>
<td>YES</td>
<td></td>
<td>(NULL)</td>
<td></td>
<td>使用规则</td>
</tr>
<tr>
<td>pay_value</td>
<td>bigint unsigned</td>
<td>(NULL)</td>
<td>NO</td>
<td></td>
<td>(NULL)</td>
<td></td>
<td>支付金额，单位是分。例如200代表2元</td>
</tr>
<tr>
<td>actual_value</td>
<td>bigint</td>
<td>(NULL)</td>
<td>NO</td>
<td></td>
<td>(NULL)</td>
<td></td>
<td>抵扣金额，单位是分。例如200代表2元</td>
</tr>
<tr>
<td>type</td>
<td>tinyint unsigned</td>
<td>(NULL)</td>
<td>NO</td>
<td></td>
<td>0</td>
<td></td>
<td>0,普通券；1,秒杀券</td>
</tr>
<tr>
<td>status</td>
<td>tinyint unsigned</td>
<td>(NULL)</td>
<td>NO</td>
<td></td>
<td>1</td>
<td></td>
<td>1,上架; 2,下架; 3,过期</td>
</tr>
<tr>
<td>create_time</td>
<td>timestamp</td>
<td>(NULL)</td>
<td>NO</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
<td>DEFAULT_GENERATED</td>
<td>创建时间</td>
</tr>
<tr>
<td>update_time</td>
<td>timestamp</td>
<td>(NULL)</td>
<td>NO</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
<td>DEFAULT_GENERATED on update CURRENT_TIMESTAMP</td>
<td>更新时间</td>
</tr>
</tbody></table>
<ul>
<li>tb_seckill_voucher：优惠券的库存、开始抢购时间，结束抢购时间。特价优惠券才需要填写这些信息</li>
</ul>
<table>
<thead>
<tr>
<th>Field</th>
<th>Type</th>
<th>Collation</th>
<th>Null</th>
<th>Key</th>
<th>Default</th>
<th>Extra</th>
<th>Comment</th>
</tr>
</thead>
<tbody><tr>
<td>voucher_id</td>
<td>bigint unsigned</td>
<td>(NULL)</td>
<td>NO</td>
<td>PRI</td>
<td>(NULL)</td>
<td></td>
<td>关联的优惠券的id</td>
</tr>
<tr>
<td>stock</td>
<td>int</td>
<td>(NULL)</td>
<td>NO</td>
<td></td>
<td>(NULL)</td>
<td></td>
<td>库存</td>
</tr>
<tr>
<td>create_time</td>
<td>timestamp</td>
<td>(NULL)</td>
<td>NO</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
<td>DEFAULT_GENERATED</td>
<td>创建时间</td>
</tr>
<tr>
<td>begin_time</td>
<td>timestamp</td>
<td>(NULL)</td>
<td>NO</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
<td>DEFAULT_GENERATED</td>
<td>生效时间</td>
</tr>
<tr>
<td>end_time</td>
<td>timestamp</td>
<td>(NULL)</td>
<td>NO</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
<td>DEFAULT_GENERATED</td>
<td>失效时间</td>
</tr>
<tr>
<td>update_time</td>
<td>timestamp</td>
<td>(NULL)</td>
<td>NO</td>
<td></td>
<td>CURRENT_TIMESTAMP</td>
<td>DEFAULT_GENERATED on update CURRENT_TIMESTAMP</td>
<td>更新时间</td>
</tr>
</tbody></table>
<ul>
<li>平价券由于优惠力度并不是很大，所以是可以任意领取</li>
<li>而代金券由于优惠力度大，所以像第二种券，就得限制数量，从表结构上也能看出，特价券除了具有优惠券的基本信息以外，还具有库存，抢购时间，结束时间等等字段</li>
<li>添加优惠券的代码已经提供好了<ul>
<li>新增普通券<ul>
<li>新增普通券，也就只是将普通券的信息保存到表中</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增普通券</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> voucher 优惠券信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 优惠券id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">addVoucher</span><span class="params">(<span class="meta">@RequestBody</span> Voucher voucher)</span> &#123;</span><br><span class="line">    voucherService.save(voucher);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(voucher.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>新增秒杀券<ul>
<li>新增秒杀券主要看addSeckillVoucher中的业务逻辑</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 新增秒杀券</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> voucher 优惠券信息，包含秒杀信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 优惠券id</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;seckill&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">addSeckillVoucher</span><span class="params">(<span class="meta">@RequestBody</span> Voucher voucher)</span> &#123;</span><br><span class="line">    voucherService.addSeckillVoucher(voucher);</span><br><span class="line">    <span class="keyword">return</span> Result.ok(voucher.getId());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>新增秒杀券业务逻辑<ul>
<li>秒杀券可以看做是一种特殊的普通券，将普通券信息保存到普通券表中，同时将秒杀券的数据保存到秒杀券表中，通过券的ID进行关联</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addSeckillVoucher</span><span class="params">(Voucher voucher)</span> &#123;</span><br><span class="line">    <span class="comment">// 保存优惠券</span></span><br><span class="line">    save(voucher);</span><br><span class="line">    <span class="comment">// 保存秒杀信息</span></span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">seckillVoucher</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SeckillVoucher</span>();</span><br><span class="line">    <span class="comment">// 关联普通券id</span></span><br><span class="line">    seckillVoucher.setVoucherId(voucher.getId());</span><br><span class="line">    <span class="comment">// 设置库存</span></span><br><span class="line">    seckillVoucher.setStock(voucher.getStock());</span><br><span class="line">    <span class="comment">// 设置开始时间</span></span><br><span class="line">    seckillVoucher.setBeginTime(voucher.getBeginTime());</span><br><span class="line">    <span class="comment">// 设置结束时间</span></span><br><span class="line">    seckillVoucher.setEndTime(voucher.getEndTime());</span><br><span class="line">    <span class="comment">// 保存信息到秒杀券表中</span></span><br><span class="line">    seckillVoucherService.save(seckillVoucher);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>由于这里并没有后台管理页面，所以我们只能用POSTMAN模拟发送请求来新增秒杀券，请求路径<a href="http://localhost:8081/voucher/seckill%EF%BC%8C">http://localhost:8081/voucher/seckill，</a> 请求方式POST，JSON数据如下，注意优惠券的截止日期设置，若优惠券过期，则不会在页面上显示。</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;shopId&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="string">&quot;100元代金券&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;subTitle&quot;</span><span class="punctuation">:</span><span class="string">&quot;周一至周五可用&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span><span class="string">&quot;全场通用\\n无需预约\\n可无限叠加&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;payValue&quot;</span><span class="punctuation">:</span><span class="number">8000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;actualValue&quot;</span><span class="punctuation">:</span><span class="number">10000</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span><span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;stock&quot;</span><span class="punctuation">:</span><span class="number">100</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;beginTime&quot;</span><span class="punctuation">:</span><span class="string">&quot;2022-01-01T00:00:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;endTime&quot;</span><span class="punctuation">:</span><span class="string">&quot;2022-10-31T23:59:59&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>效果如下<br><a href="https://pic1.imgdb.cn/item/6358bbb316f2c2beb1b7967c.jpg"><img src="https://cdn.nlark.com/yuque/0/2024/gif/35551100/1714981307295-45cd4149-3edb-42c0-a4a3-7ee9cbc48153.gif#averageHue=%23000000&clientId=uede9f466-cc8b-4&from=paste&id=u6f5c3dfe&originHeight=1&originWidth=1&originalType=url&ratio=1.5&rotation=0&showTitle=false&size=42&status=done&style=none&taskId=u308530d2-1517-497a-afd4-5a982d5c1ca&title=" alt="image.png"></a><img src="https://cdn.nlark.com/yuque/0/2024/png/35551100/1714996050825-a0d928b4-b7e2-4fb9-9e8b-ccf36e072249.png#averageHue=%23fdfcf6&clientId=u144b5d41-380a-4&from=paste&height=190&id=u55cb737a&originHeight=285&originWidth=560&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=79492&status=done&style=none&taskId=ub34c5b5b-62bc-48a0-a755-2457303e4c4&title=&width=373.3333333333333" alt="image.png"></li>
</ul>
<h3 id="实现秒杀下单"><a href="#实现秒杀下单" class="headerlink" title="实现秒杀下单"></a>实现秒杀下单</h3><ul>
<li>我们点击限时抢购，然后查看发送的请求</li>
</ul>
<figure class="highlight latex"><table><tr><td class="code"><pre><span class="line">请求网址: http://localhost:8080/api/voucher-order/seckill/13</span><br><span class="line">请求方法: POST</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>看样子是VoucherOrderController里的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/voucher-order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderController</span> &#123;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;seckill/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long voucherId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;功能未完成&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>那我们现在来分析一下怎么抢优惠券<ul>
<li>首先提交优惠券id，然后查询优惠券信息</li>
<li>之后判断秒杀时间是否开始<ul>
<li>开始了，则判断是否有剩余库存<ul>
<li>有库存，那么删减一个库存<ul>
<li>然后创建订单</li>
</ul>
</li>
<li>无库存，则返回一个错误信息</li>
</ul>
</li>
<li>没开始，则返回一个错误信息</li>
</ul>
</li>
</ul>
</li>
<li>对应的流程图如下<br><a href="https://pic1.imgdb.cn/item/6358c21a16f2c2beb1bfd43a.jpg"><img src="https://cdn.nlark.com/yuque/0/2024/gif/35551100/1714981307291-3e6bbfe7-5938-495c-86b2-53975cd3eeed.gif#averageHue=%23000000&clientId=uede9f466-cc8b-4&from=paste&id=u744adcbb&originHeight=1&originWidth=1&originalType=url&ratio=1.5&rotation=0&showTitle=false&size=42&status=done&style=none&taskId=u8cffa51e-3d70-4e6d-aef8-5773080d6f2&title=" alt="image.png"></a>	<img src="https://cdn.nlark.com/yuque/0/2024/png/35551100/1714996101749-fc652f40-ec51-4056-a001-21138a59f963.png#averageHue=%23f8f5f5&clientId=u144b5d41-380a-4&from=paste&height=354&id=u0b1f3339&originHeight=750&originWidth=1221&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=255646&status=done&style=none&taskId=u82653474-fc4c-41f5-b376-e32fd62e441&title=&width=576.6666870117188" alt="image.png"></li>
<li>那现在我们就根据我们刚刚的分析和流程图，来编写对应的代码<ul>
<li>VoucherOrderController<ul>
<li>具体的业务逻辑我们还是放到Service层里写，在Service层创建seckillVoucher方法</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/voucher-order&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">VoucherOrderController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IVoucherOrderService voucherOrderService;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/seckill/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long voucherId)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> voucherOrderService.seckillVoucher(voucherId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>IVoucherOrderService</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IVoucherOrderService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;VoucherOrder&gt; &#123;</span><br><span class="line">    Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>VoucherOrderServiceImpl</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> ISeckillVoucherService seckillVoucherService;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> RedisIdWorker redisIdWorker;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;SeckillVoucher&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//1. 查询优惠券</span></span><br><span class="line">    queryWrapper.eq(SeckillVoucher::getVoucherId, voucherId);</span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">seckillVoucher</span> <span class="operator">=</span> seckillVoucherService.getOne(queryWrapper);</span><br><span class="line">    <span class="comment">//2. 判断秒杀时间是否开始</span></span><br><span class="line">    <span class="keyword">if</span> (LocalDateTime.now().isBefore(seckillVoucher.getBeginTime())) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀还未开始，请耐心等待&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3. 判断秒杀时间是否结束</span></span><br><span class="line">    <span class="keyword">if</span> (LocalDateTime.now().isAfter(seckillVoucher.getEndTime())) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已经结束！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4. 判断库存是否充足</span></span><br><span class="line">    <span class="keyword">if</span> (seckillVoucher.getStock() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;优惠券已被抢光了哦，下次记得手速快点&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5. 扣减库存</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">        .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>)</span><br><span class="line">        .eq(<span class="string">&quot;voucher_id&quot;</span>,voucherId)</span><br><span class="line">        .update();</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6. 创建订单</span></span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">    <span class="comment">//6.1 设置订单id</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    <span class="comment">//6.2 设置用户id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//6.3 设置代金券id</span></span><br><span class="line">    voucherOrder.setVoucherId(voucherId);</span><br><span class="line">    voucherOrder.setId(orderId);</span><br><span class="line">    voucherOrder.setUserId(id);</span><br><span class="line">    <span class="comment">//7. 将订单数据保存到表中</span></span><br><span class="line">    save(voucherOrder);</span><br><span class="line">    <span class="comment">//8. 返回订单id</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="超卖问题"><a href="#超卖问题" class="headerlink" title="超卖问题"></a>超卖问题</h3><ul>
<li>我们之前的代码其实是有问题的，当遇到高并发场景时，会出现超卖现象，我们可以用Jmeter开200个线程来模拟抢优惠券的场景，URL为 localhost:8081&#x2F;voucher-order&#x2F;seckill&#x2F;13，请求方式为POST</li>
</ul>
<p>注意使用Jmeter进行压测时，需要携带我们登录的token<br><a href="https://pic1.imgdb.cn/item/635a168316f2c2beb193f83d.jpg"><img src="https://cdn.nlark.com/yuque/0/2024/gif/35551100/1714981307327-0cdb05b3-04b5-4c2f-9620-f7f0f0c618fd.gif#averageHue=%23000000&clientId=uede9f466-cc8b-4&from=paste&id=u2ba79a18&originHeight=1&originWidth=1&originalType=url&ratio=1.5&rotation=0&showTitle=false&size=42&status=done&style=none&taskId=uf989a805-8110-4b98-b53c-c1469b0feca&title=" alt="image.png"></a><img src="https://cdn.nlark.com/yuque/0/2024/png/35551100/1714996173989-dbe68ee5-d33d-48f0-9bde-3cb7f01bd6bd.png#averageHue=%233e4346&clientId=u144b5d41-380a-4&from=paste&height=133&id=u744f0a28&originHeight=200&originWidth=1317&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=121822&status=done&style=none&taskId=udab7800e-f31e-43ab-b320-9cf6217cf5b&title=&width=878" alt="image.png"></p>
<ul>
<li>测试完毕之后，查看数据库中的订单表，我们明明只设置了100张优惠券，却有166条数据，去优惠券表查看，库存为-66，超卖了66张<br><a href="https://pic1.imgdb.cn/item/635a16d316f2c2beb19443a7.jpg"><img src="https://cdn.nlark.com/yuque/0/2024/gif/35551100/1714981307463-da7c48c9-2b42-4784-ad82-a4e1ce9ddc33.gif#averageHue=%23000000&clientId=uede9f466-cc8b-4&from=paste&id=u7d987290&originHeight=1&originWidth=1&originalType=url&ratio=1.5&rotation=0&showTitle=false&size=42&status=done&style=none&taskId=ua642db16-bf15-44b2-8826-a55d261ab4c&title=" alt="image.png"></a></li>
<li>那么如何解决这个问题呢？先来看看我们的代码中是怎么写的</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//4. 判断库存是否充足</span></span><br><span class="line"><span class="keyword">if</span> (seckillVoucher.getStock() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> Result.fail(<span class="string">&quot;优惠券已被抢光了哦，下次记得手速快点&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//5. 扣减库存</span></span><br><span class="line"><span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update().setSql(<span class="string">&quot;stock = stock - 1&quot;</span>).eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).update();</span><br><span class="line"><span class="keyword">if</span> (!success) &#123;</span><br><span class="line">    <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>假设现在只剩下一张优惠券，线程1过来查询库存，判断库存数大于1，但还没来得及去扣减库存，此时库线程2也过来查询库存，发现库存数也大于1，那么这两个线程都会进行扣减库存操作，最终相当于是多个线程都进行了扣减库存，那么此时就会出现超卖问题</li>
<li>超卖问题是典型的多线程安全问题，针对这一问题的常见解决方案就是加锁：而对于加锁，我们通常有两种解决方案<ol>
<li>悲观锁<ul>
<li>悲观锁认为线程安全问题一定会发生，因此在操作数据之前先获取锁，确保线程串行执行</li>
<li>例如Synchronized、Lock等，都是悲观锁</li>
</ul>
</li>
<li>乐观锁<ul>
<li>乐观锁认为线程安全问题不一定会发生，因此不加锁，只是在更新数据的时候再去判断有没有其他线程对数据进行了修改<ul>
<li>如果没有修改，则认为自己是安全的，自己才可以更新数据</li>
<li>如果已经被其他线程修改，则说明发生了安全问题，此时可以重试或者异常</li>
</ul>
</li>
</ul>
</li>
</ol>
</li>
<li>悲观锁：悲观锁可以实现对于数据的串行化执行，比如syn，和lock都是悲观锁的代表，同时，悲观锁中又可以再细分为公平锁，非公平锁，可重入锁，等等</li>
<li>乐观锁：乐观锁会有一个版本号，每次操作数据会对版本号+1，再提交回数据时，会去校验是否比之前的版本大1 ，如果大1 ，则进行操作成功，这套机制的核心逻辑在于，如果在操作过程中，版本号只比原来大1 ，那么就意味着操作过程中没有人对他进行过修改，他的操作就是安全的，如果不大1，则数据被修改过，当然乐观锁还有一些变种的处理方式比如CAS</li>
<li>乐观锁的典型代表：就是CAS(Compare-And-Swap)，利用CAS进行无锁化机制加锁，var5 是操作前读取的内存值，while中的var1+var2 是预估值，如果预估值 &#x3D;&#x3D; 内存值，则代表中间没有被人修改过，此时就将新值去替换 内存值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> var5;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    var5 = <span class="built_in">this</span>.getIntVolatile(var1, var2);</span><br><span class="line">&#125; <span class="keyword">while</span>(!<span class="built_in">this</span>.compareAndSwapInt(var1, var2, var5, var5 + var4));</span><br><span class="line"><span class="keyword">return</span> var5;</span><br></pre></td></tr></table></figure>

<ul>
<li>其中do while是为了操作失败时，再次进行自旋操作，即把之前的逻辑再操作一次</li>
</ul>
<hr>
<ul>
<li>该项目中的具体解决方式</li>
<li>这里并不需要真的来指定一下版本号，完全可以使用stock来充当版本号，在扣减库存时，比较查询到的优惠券库存和实际数据库中优惠券库存是否相同</li>
</ul>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">public Result seckillVoucher(Long voucherId) &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;SeckillVoucher&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">    //1. 查询优惠券</span><br><span class="line">    queryWrapper.eq(SeckillVoucher::getVoucherId, voucherId);</span><br><span class="line">    SeckillVoucher seckillVoucher = seckillVoucherService.getOne(queryWrapper);</span><br><span class="line">    //2. 判断秒杀时间是否开始</span><br><span class="line">    if (LocalDateTime.now().isBefore(seckillVoucher.getBeginTime())) &#123;</span><br><span class="line">        return Result.fail(&quot;秒杀还未开始，请耐心等待&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //3. 判断秒杀时间是否结束</span><br><span class="line">    if (LocalDateTime.now().isAfter(seckillVoucher.getEndTime())) &#123;</span><br><span class="line">        return Result.fail(&quot;秒杀已经结束！&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //4. 判断库存是否充足</span><br><span class="line">    if (seckillVoucher.getStock() &lt; 1) &#123;</span><br><span class="line">        return Result.fail(&quot;优惠券已被抢光了哦，下次记得手速快点&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //5. 扣减库存</span><br><span class="line">    boolean success = seckillVoucherService.update()</span><br><span class="line">            .setSql(&quot;stock = stock - 1&quot;)</span><br><span class="line">            .eq(&quot;voucher_id&quot;, voucherId)</span><br><span class="line"><span class="addition">+           .eq(&quot;stock&quot;,seckillVoucher.getStock())</span></span><br><span class="line">            .update();</span><br><span class="line">    if (!success) &#123;</span><br><span class="line">        return Result.fail(&quot;库存不足&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    //6. 创建订单</span><br><span class="line">    VoucherOrder voucherOrder = new VoucherOrder();</span><br><span class="line">    //6.1 设置订单id</span><br><span class="line">    long orderId = redisIdWorker.nextId(&quot;order&quot;);</span><br><span class="line">    //6.2 设置用户id</span><br><span class="line">    Long id = UserHolder.getUser().getId();</span><br><span class="line">    //6.3 设置代金券id</span><br><span class="line">    voucherOrder.setVoucherId(voucherId);</span><br><span class="line">    voucherOrder.setId(orderId);</span><br><span class="line">    voucherOrder.setUserId(id);</span><br><span class="line">    //7. 将订单数据保存到表中</span><br><span class="line">    save(voucherOrder);</span><br><span class="line">    //8. 返回订单id</span><br><span class="line">    return Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>以上逻辑的核心含义是：只要我扣减库存时的库存和之前我查询到的库存是一样的，就意味着没有人在中间修改过库存，那么此时就是安全的，但是以上这种方式通过测试发现会有很多失败的情况，失败的原因在于：在使用乐观锁过程中假设100个线程同时都拿到了100的库存，然后大家一起去进行扣减，但是100个人中只有1个人能扣减成功，其他的人在处理时，他们在扣减时，库存已经被修改过了，所以此时其他线程都会失败<br><a href="https://pic1.imgdb.cn/item/635a30ca16f2c2beb1ba8efd.jpg"><img src="https://cdn.nlark.com/yuque/0/2024/gif/35551100/1714981307536-2a1b93ba-f519-4db1-a01c-61eca8b281ec.gif#averageHue=%23000000&clientId=uede9f466-cc8b-4&from=paste&id=ubae35fdc&originHeight=1&originWidth=1&originalType=url&ratio=1.5&rotation=0&showTitle=false&size=42&status=done&style=none&taskId=ue65ba919-0123-4607-97e3-a0c4a5410c1&title=" alt="image.png"></a><img src="https://cdn.nlark.com/yuque/0/2024/png/35551100/1714996254022-1235a8ad-16dc-4712-a20c-494a5e172b81.png#averageHue=%23fafafa&clientId=u144b5d41-380a-4&from=paste&height=444&id=ud9f18b3d&originHeight=912&originWidth=1238&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=323403&status=done&style=none&taskId=u9b189308-9fa1-4e1b-bf5a-56093eda4eb&title=&width=602.6666870117188" alt="image.png"></p>
</li>
<li><p>那么我们继续完善代码，修改我们的逻辑，在这种场景，我们可以只判断是否有剩余优惠券，即只要数据库中的库存大于0，都能顺利完成扣减库存操作</p>
</li>
<li><p>重启服务器，继续使用Jmeter进行测试，这次就能顺利将优惠券刚好抢空了</p>
</li>
</ul>
<h3 id="一人一单"><a href="#一人一单" class="headerlink" title="一人一单"></a>一人一单</h3><ul>
<li>需求：修改秒杀业务，要求同一个优惠券，一个用户只能抢一张</li>
<li>具体操作逻辑如下：我们在判断库存是否充足之后，根据我们保存的订单数据，判断用户订单是否已存在<ul>
<li>如果已存在，则不能下单，返回错误信息</li>
<li>如果不存在，则继续下单，获取优惠券</li>
</ul>
</li>
<li>初步代码</li>
</ul>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">    @Override</span><br><span class="line">    public Result seckillVoucher(Long voucherId) &#123;</span><br><span class="line">        LambdaQueryWrapper&lt;SeckillVoucher&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        //1. 查询优惠券</span><br><span class="line">        queryWrapper.eq(SeckillVoucher::getVoucherId, voucherId);</span><br><span class="line">        SeckillVoucher seckillVoucher = seckillVoucherService.getOne(queryWrapper);</span><br><span class="line">        //2. 判断秒杀时间是否开始</span><br><span class="line">        if (LocalDateTime.now().isBefore(seckillVoucher.getBeginTime())) &#123;</span><br><span class="line">            return Result.fail(&quot;秒杀还未开始，请耐心等待&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //3. 判断秒杀时间是否结束</span><br><span class="line">        if (LocalDateTime.now().isAfter(seckillVoucher.getEndTime())) &#123;</span><br><span class="line">            return Result.fail(&quot;秒杀已经结束！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //4. 判断库存是否充足</span><br><span class="line">        if (seckillVoucher.getStock() &lt; 1) &#123;</span><br><span class="line">            return Result.fail(&quot;优惠券已被抢光了哦，下次记得手速快点&quot;);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="addition">+       // 一人一单逻辑</span></span><br><span class="line"><span class="addition">+       Long userId = UserHolder.getUser().getId();</span></span><br><span class="line"><span class="addition">+       int count = query().eq(&quot;voucher_id&quot;, voucherId).eq(&quot;user_id&quot;, userId).count();</span></span><br><span class="line"><span class="addition">+       if (count &gt; 0)&#123;</span></span><br><span class="line"><span class="addition">+           return Result.fail(&quot;你已经抢过优惠券了哦&quot;);</span></span><br><span class="line"><span class="addition">+       &#125;</span></span><br><span class="line">        //5. 扣减库存</span><br><span class="line">        boolean success = seckillVoucherService.update()</span><br><span class="line">                .setSql(&quot;stock = stock - 1&quot;)</span><br><span class="line">                .eq(&quot;voucher_id&quot;, voucherId)</span><br><span class="line">                .gt(&quot;stock&quot;, 0)</span><br><span class="line">                .update();</span><br><span class="line">        if (!success) &#123;</span><br><span class="line">            return Result.fail(&quot;库存不足&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //6. 创建订单</span><br><span class="line">        VoucherOrder voucherOrder = new VoucherOrder();</span><br><span class="line">        //6.1 设置订单id</span><br><span class="line">        long orderId = redisIdWorker.nextId(&quot;order&quot;);</span><br><span class="line">        //6.2 设置用户id</span><br><span class="line">        Long id = UserHolder.getUser().getId();</span><br><span class="line">        //6.3 设置代金券id</span><br><span class="line">        voucherOrder.setVoucherId(voucherId);</span><br><span class="line">        voucherOrder.setId(orderId);</span><br><span class="line">        voucherOrder.setUserId(id);</span><br><span class="line">        //7. 将订单数据保存到表中</span><br><span class="line">        save(voucherOrder);</span><br><span class="line">        //8. 返回订单id</span><br><span class="line">        return Result.ok(orderId);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>存在问题：还是和之前一样，如果这个用户故意开多线程抢优惠券，那么在判断库存充足之后，执行一人一单逻辑之前，在这个区间如果进来了多个线程，还是可以抢多张优惠券的，那我们这里使用悲观锁来解决这个问题</li>
<li>初步代码，我们把一人一单逻辑之后的代码都提取到一个createVoucherOrder方法中，然后给这个方法加锁</li>
<li>不管哪一个线程（例如线程A），运行到这个方法时，都要检查有没有其它线程B（或者C、 D等）正在用这个方法(或者该类的其他同步方法)，有的话要等正在使用synchronized方法的线程B（或者C 、D）运行完这个方法后再运行此线程A，没有的话，锁定调用者，然后直接运行。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Result <span class="title function_">createVoucherOrder</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">// 一人一单逻辑</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).eq(<span class="string">&quot;user_id&quot;</span>, userId).count();</span><br><span class="line">    <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;你已经抢过优惠券了哦&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5. 扣减库存</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">            .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>)</span><br><span class="line">            .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId)</span><br><span class="line">            .gt(<span class="string">&quot;stock&quot;</span>, <span class="number">0</span>)</span><br><span class="line">            .update();</span><br><span class="line">    <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6. 创建订单</span></span><br><span class="line">    <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">    <span class="comment">//6.1 设置订单id</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">    <span class="comment">//6.2 设置用户id</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">//6.3 设置代金券id</span></span><br><span class="line">    voucherOrder.setVoucherId(voucherId);</span><br><span class="line">    voucherOrder.setId(orderId);</span><br><span class="line">    voucherOrder.setUserId(id);</span><br><span class="line">    <span class="comment">//7. 将订单数据保存到表中</span></span><br><span class="line">    save(voucherOrder);</span><br><span class="line">    <span class="comment">//8. 返回订单id</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>但是这样加锁，锁的细粒度太粗了，在使用锁的过程中，控制锁粒度是一个非常重要的事情，因为如果锁的粒度太大，会导致每个线程进来都会被锁住，现在的情况就是所有用户都公用这一把锁，串行执行，效率很低，我们现在要完成的业务是一人一单，所以这个锁，应该只加在单个用户上，用户标识可以用userId</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">createVoucherOrder</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    <span class="comment">// 一人一单逻辑</span></span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="keyword">synchronized</span> (userId.toString().intern()) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> query().eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).eq(<span class="string">&quot;user_id&quot;</span>, userId).count();</span><br><span class="line">        <span class="keyword">if</span> (count &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;你已经抢过优惠券了哦&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5. 扣减库存</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">                .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>)</span><br><span class="line">                .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId)</span><br><span class="line">                .gt(<span class="string">&quot;stock&quot;</span>, <span class="number">0</span>)</span><br><span class="line">                .update();</span><br><span class="line">        <span class="keyword">if</span> (!success) &#123;</span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;库存不足&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6. 创建订单</span></span><br><span class="line">        <span class="type">VoucherOrder</span> <span class="variable">voucherOrder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">VoucherOrder</span>();</span><br><span class="line">        <span class="comment">//6.1 设置订单id</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">orderId</span> <span class="operator">=</span> redisIdWorker.nextId(<span class="string">&quot;order&quot;</span>);</span><br><span class="line">        <span class="comment">//6.2 设置用户id</span></span><br><span class="line">        <span class="type">Long</span> <span class="variable">id</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">        <span class="comment">//6.3 设置代金券id</span></span><br><span class="line">        voucherOrder.setVoucherId(voucherId);</span><br><span class="line">        voucherOrder.setId(orderId);</span><br><span class="line">        voucherOrder.setUserId(id);</span><br><span class="line">        <span class="comment">//7. 将订单数据保存到表中</span></span><br><span class="line">        save(voucherOrder);</span><br><span class="line">        <span class="comment">//8. 返回订单id</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(orderId);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//执行到这里，锁已经被释放了，但是可能当前事务还未提交，如果此时有线程进来，不能确保事务不出问题</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>由于toString的源码是new String，所以如果我们只用userId.toString()拿到的也不是同一个用户，需要使用intern()，如果字符串常量池中已经包含了一个等于这个string对象的字符串（由equals（object）方法确定），那么将返回池中的字符串。否则，将此String对象添加到池中，并返回对此String对象的引用。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">toString</span><span class="params">(<span class="type">long</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == Long.MIN_VALUE)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;-9223372036854775808&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> (i &lt; <span class="number">0</span>) ? stringSize(-i) + <span class="number">1</span> : stringSize(i);</span><br><span class="line">    <span class="type">char</span>[] buf = <span class="keyword">new</span> <span class="title class_">char</span>[size];</span><br><span class="line">    getChars(i, size, buf);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>(buf, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>但是以上代码还是存在问题，问题的原因在于当前方法被Spring的事务控制，如果你在内部加锁，可能会导致当前方法事务还没有提交，但是锁已经释放了，这样也会导致问题，所以我们选择将当前方法整体包裹起来，确保事务不会出现问题</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;SeckillVoucher&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//1. 查询优惠券</span></span><br><span class="line">    queryWrapper.eq(SeckillVoucher::getVoucherId, voucherId);</span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">seckillVoucher</span> <span class="operator">=</span> seckillVoucherService.getOne(queryWrapper);</span><br><span class="line">    <span class="comment">//2. 判断秒杀时间是否开始</span></span><br><span class="line">    <span class="keyword">if</span> (LocalDateTime.now().isBefore(seckillVoucher.getBeginTime())) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀还未开始，请耐心等待&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3. 判断秒杀时间是否结束</span></span><br><span class="line">    <span class="keyword">if</span> (LocalDateTime.now().isAfter(seckillVoucher.getEndTime())) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已经结束！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4. 判断库存是否充足</span></span><br><span class="line">    <span class="keyword">if</span> (seckillVoucher.getStock() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;优惠券已被抢光了哦，下次记得手速快点&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="keyword">synchronized</span> (userId.toString().intern()) &#123;</span><br><span class="line">        <span class="keyword">return</span> createVoucherOrder(voucherId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>但是以上做法依然有问题，因为你调用的方法，其实是this.的方式调用的，事务想要生效，还得利用代理来生效，所以这个地方，我们需要获得原始的事务对象， 来操作事务，这里可以使用AopContext.currentProxy()来获取当前对象的代理对象，然后再用代理对象调用方法，记得要去IVoucherOrderService中创建createVoucherOrder方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line"><span class="keyword">synchronized</span> (userId.toString().intern()) &#123;</span><br><span class="line">    <span class="type">IVoucherOrderService</span> <span class="variable">proxy</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">    <span class="keyword">return</span> proxy.createVoucherOrder(voucherId);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>但是该方法会用到一个依赖，我们需要导入一下</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>同时在启动类上加上@EnableAspectJAutoProxy(exposeProxy &#x3D; true)注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.hmdp.mapper&quot;)</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy(exposeProxy = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HmDianPingApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(HmDianPingApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>重启服务器，再次使用Jmeter测试，200个线程并发，但是只能抢到一张优惠券，目的达成</li>
</ul>
<h3 id="集群环境下的并发问题"><a href="#集群环境下的并发问题" class="headerlink" title="集群环境下的并发问题"></a>集群环境下的并发问题</h3><ul>
<li>通过加锁可以解决在单机情况下的一人一单安全问题，但是在集群模式下就不行了<ol>
<li>我们将服务启动两份，端口分别为8081和8082</li>
<li>然后修改nginx的config目录下的nginx.conf文件，配置反向代理和负载均衡（默认轮询就行）</li>
</ol>
</li>
<li>具体操作，我们使用POSTMAN发送两次请求，header携带同一用户的token，尝试用同一账号抢两张优惠券，发现是可行的。</li>
<li>失败原因分析：由于我们部署了多个Tomcat，每个Tomcat都有一个属于自己的jvm，那么假设在服务器A的Tomcat内部，有两个线程，即线程1和线程2，这两个线程使用的是同一份代码，那么他们的锁对象是同一个，是可以实现互斥的。但是如果在Tomcat的内部，又有两个线程，但是他们的锁对象虽然写的和服务器A一样，但是锁对象却不是同一个，所以线程3和线程4可以实现互斥，但是却无法和线程1和线程2互斥<br><a href="https://pic1.imgdb.cn/item/635a5e3e16f2c2beb1289579.jpg"><img src="https://cdn.nlark.com/yuque/0/2024/png/35551100/1714996350674-6d68eb13-f0fa-4f5a-ba6d-c537c3fa6188.png#averageHue=%23efedec&clientId=u144b5d41-380a-4&from=paste&id=ue11ef542&originHeight=785&originWidth=1580&originalType=url&ratio=1.5&rotation=0&showTitle=false&size=553596&status=done&style=none&taskId=u95ca6485-c559-4481-8894-13b1358d0dc&title=" alt="image.png"></a></li>
<li>这就是集群环境下，syn锁失效的原因，在这种情况下，我们需要使用分布式锁来解决这个问题，让锁不存在于每个jvm的内部，而是让所有jvm公用外部的一把锁（Redis）</li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis高级</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis高级_商户查询缓存</title>
    <url>/2024/05/08/Redis%E9%AB%98%E7%BA%A7-%E5%95%86%E6%88%B7%E6%9F%A5%E8%AF%A2%E7%BC%93%E5%AD%98/</url>
    <content><![CDATA[<h2 id="商户查询缓存"><a href="#商户查询缓存" class="headerlink" title="商户查询缓存"></a>商户查询缓存</h2><h3 id="什么是缓存"><a href="#什么是缓存" class="headerlink" title="什么是缓存"></a>什么是缓存</h3><ul>
<li><p>什么是缓存？</p>
<ul>
<li>缓存就像自行车、越野车的避震器</li>
</ul>
</li>
<li><p>举个例子</p>
<ul>
<li>越野车、山地自行车都有避震器，防止车体加速之后因惯性，在U型地形上飞跃硬着陆导致损坏，像个弹簧意义</li>
</ul>
</li>
<li><p>同样，在实际开发中，系统也需要避震器，防止过高的数据量猛冲系统，导致其操作线程无法及时处理信息而瘫痪</p>
</li>
<li><p>在实际开发中，对企业来讲，产品口碑、用户评价都是致命的，所以企业非常重视缓存技术</p>
</li>
<li><p>缓存(Cache)就是数据交换的缓冲区，俗称的缓存就是缓冲区内的数据，一般从数据库中获取，存储于本地，例如</p>
<ul>
<li><p>本地用高并发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Static <span class="keyword">final</span> ConcurrentHashMap&lt;K,V&gt; map = <span class="keyword">new</span> <span class="title class_">ConcurrentHashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure>

<ul>
<li><p>用于Redis等缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> Cache&lt;K,V&gt; USER_CACHE = CacheBuilder.newBuilder().build();</span><br></pre></td></tr></table></figure>
</li>
<li><p>本地缓存</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Static <span class="keyword">final</span> Map&lt;K,V&gt; map =  <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br></pre></td></tr></table></figure>

<ul>
<li>由于其被static修饰，所以随着类的加载而加载到内存之中，作为本地缓存，由于其又被final修饰，所以其引用之间的关系是固定的，不能改变，因此不用担心复制导致缓存失败</li>
</ul>
<h4 id="为什么要使用缓存"><a href="#为什么要使用缓存" class="headerlink" title="为什么要使用缓存"></a>为什么要使用缓存</h4><ul>
<li>言简意赅：速度快，好用</li>
<li>缓存数据存储于代码中，而代码运行在内存中，内存的读写性能远高于磁盘，缓存可以大大降低用户访问并发量带来的服务器读写压力</li>
<li>实际开发中，企业的数据量，少则几十万，多则几千万，这么大的数据量，如果没有缓存来作为避震器系统是几乎撑不住的，所以企业会大量运用缓存技术</li>
<li>但是缓存也会增加代码复杂度和运营成本</li>
<li>缓存的作用<ol>
<li>降低后端负载</li>
<li>提高读写效率，降低响应时间</li>
</ol>
</li>
<li>缓存的成本<ol>
<li>数据一致性成本</li>
<li>代码维护成本</li>
<li>运维成本（一般采用服务器集群，需要多加机器，机器就是钱）</li>
</ol>
</li>
</ul>
<h4 id="如何使用缓存"><a href="#如何使用缓存" class="headerlink" title="如何使用缓存"></a>如何使用缓存</h4><ul>
<li>实际开发中，会构筑多级缓存来时系统运行速度进一步提升，例如：本地缓存与Redis中的缓存并发使用</li>
<li>浏览器缓存：主要是存在于浏览器端的缓存</li>
<li>应用层缓存：可以分为toncat本地缓存，例如之前提到的map或者是使用Redis作为缓存</li>
<li>数据库缓存：在数据库中有一片空间是buffer pool，增改查数据都会先加载到mysql的缓存中</li>
<li>CPU缓存：当代计算机最大的问题就是CPU性能提升了，但是内存读写速度没有跟上，所以为了适应当下的情况，增加了CPU的L1，L2，L3级的缓存</li>
</ul>
<h3 id="添加商户缓存"><a href="#添加商户缓存" class="headerlink" title="添加商户缓存"></a>添加商户缓存</h3><ul>
<li>我们先启动前端和后端的项目，登陆之后随便访问一个商户，查看浏览器发送的请求</li>
</ul>
<p>请求网址: <a href="http://localhost:8080/api/shop/10">http://localhost:8080/api/shop/10</a><br>请求方法: GET</p>
<ul>
<li>不出意外是ShopController里的业务逻辑，而且restFul风格的</li>
<li>在我们查询商户信息时，我们是直接操作从数据库中去进行查询的，大致逻辑是这样，直接查询数据库肯定慢</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 根据id查询商铺信息</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> id 商铺id</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 商铺详情数据</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryShopById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Result.ok(shopService.getById(id));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>所以我们可以在客户端与数据库之间加上一个Redis缓存，先从Redis中查询，如果没有查到，再去MySQL中查询，同时查询完毕之后，将查询到的数据也存入Redis，这样当下一个用户来进行查询的时候，就可以直接从Redis中获取到数据</li>
</ul>
<p><a href="https://pic1.imgdb.cn/item/6354a19216f2c2beb1b095dd.jpg"><img src="https://cdn.nlark.com/yuque/0/2024/gif/35551100/1714981303991-6f8c483b-9e88-4496-9445-f182c4a18ce1.gif#averageHue=%23000000&clientId=uede9f466-cc8b-4&from=paste&id=ub84c9f17&originHeight=1&originWidth=1&originalType=url&ratio=1.5&rotation=0&showTitle=false&size=42&status=done&style=none&taskId=u10eff55a-a7f9-4faa-bdc8-535755723ab&title=" alt="image.png"></a><img src="https://cdn.nlark.com/yuque/0/2024/png/35551100/1714991293372-da92b0ad-10ce-43f9-bae6-0582752e93aa.png#averageHue=%23eeeeee&clientId=u144b5d41-380a-4&from=paste&height=317&id=u80ce4324&originHeight=941&originWidth=718&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=135689&status=done&style=none&taskId=uc481c702-999e-4ffe-b86f-4bc9c0d96ab&title=&width=241.66668701171875" alt="image.png"></p>
<h4 id="缓存模型和思路"><a href="#缓存模型和思路" class="headerlink" title="缓存模型和思路"></a>缓存模型和思路</h4><ul>
<li>标准的操作方式就是查询数据库之前先查询缓存，如果缓存数据存在，则直接从缓存中返回，如果缓存数据不存在，再查询数据库，然后将数据存入Redis。<br><a href="https://pic1.imgdb.cn/item/6354a1aa16f2c2beb1b0aa83.jpg"><img src="https://cdn.nlark.com/yuque/0/2024/gif/35551100/1714981304361-8027e35f-5b84-4247-a0f7-eeb00301ad23.gif#averageHue=%23000000&clientId=uede9f466-cc8b-4&from=paste&id=ud82d3bbe&originHeight=1&originWidth=1&originalType=url&ratio=1.5&rotation=0&showTitle=false&size=42&status=done&style=none&taskId=u54d28ac3-82d9-45c1-a04c-25078396cbb&title=" alt="image.png"></a><img src="https://cdn.nlark.com/yuque/0/2024/png/35551100/1714991307473-cf299e7d-808f-4087-8b2d-c857f01d1b82.png#averageHue=%23dfc3bf&clientId=u144b5d41-380a-4&from=paste&height=458&id=u1732addb&originHeight=958&originWidth=881&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=341291&status=done&style=none&taskId=ud1f4bb92-2ca7-4c88-a777-18d9d06f033&title=&width=421.3333740234375" alt="image.png"></li>
</ul>
<h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><ul>
<li>代码思路：如果Redis缓存里有数据，那么直接返回，如果缓存中没有，则去查询数据库，然后存入Redis<ul>
<li>Controller层</li>
</ul>
</li>
</ul>
<p>业务逻辑我们写到Service中，需要在Service层创建这个queryById方法，然后去ServiceImpl中实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryShopById</span><span class="params">(<span class="meta">@PathVariable(&quot;id&quot;)</span> Long id)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> shopService.queryById(id);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>Servie层</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IShopService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;Shop&gt; &#123;</span><br><span class="line">    Result <span class="title function_">queryById</span><span class="params">(Long id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ServieImpl层</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//先从Redis中查，这里的常量值是固定的前缀 + 店铺id</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);</span><br><span class="line">    <span class="comment">//如果不为空（查询到了），则转为Shop类型直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//否则去数据库中查</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="comment">//查不到返回一个错误信息或者返回空都可以，根据自己的需求来</span></span><br><span class="line">    <span class="keyword">if</span> (shop == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查到了则转为json字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> JSONUtil.toJsonStr(shop);</span><br><span class="line">    <span class="comment">//并存入redis</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, jsonStr);</span><br><span class="line">    <span class="comment">//最终把查询到的商户信息返回给前端</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>重启服务器，访问商户信息，观察控制台日志输出，后续刷新页面，不会出现SQL语句查询商户信息，去Redis图形化界面中查看，可以看到缓存的商户信息数据</li>
</ul>
<h4 id="趁热打铁"><a href="#趁热打铁" class="headerlink" title="趁热打铁"></a>趁热打铁</h4><ul>
<li>完成了商户数据缓存之后，我们尝试做一下商户类型数据缓存<ul>
<li>Controller层</li>
</ul>
</li>
</ul>
<p>业务逻辑依旧是写在Service中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;list&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryTypeList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> typeService.queryList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Service层</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IShopTypeService</span> <span class="keyword">extends</span> <span class="title class_">IService</span>&lt;ShopType&gt; &#123;</span><br><span class="line">    Result <span class="title function_">queryList</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<ul>
<li>ServiceImpl层<ul>
<li>整体代码都是类似的，前面只需要将单个店铺信息从JSON和Bean之间相互转换</li>
<li>这里只不过是将查询到的多个店铺类型信息从JSON和Bean之间相互转换，只是多了一个foreach循环</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">//先从Redis中查，这里的常量值是固定前缀 + 店铺id</span></span><br><span class="line">    List&lt;String&gt; shopTypes =</span><br><span class="line">            stringRedisTemplate.opsForList().range(CACHE_SHOP_TYPE_KEY, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="comment">//如果不为空（查询到了），则转为ShopType类型直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (!shopTypes.isEmpty()) &#123;</span><br><span class="line">        List&lt;ShopType&gt; tmp = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (String types : shopTypes) &#123;</span><br><span class="line">            <span class="type">ShopType</span> <span class="variable">shopType</span> <span class="operator">=</span> JSONUtil.toBean(types, ShopType.class);</span><br><span class="line">            tmp.add(shopType);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Result.ok(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//否则去数据库中查</span></span><br><span class="line">    List&lt;ShopType&gt; tmp = query().orderByAsc(<span class="string">&quot;sort&quot;</span>).list();</span><br><span class="line">    <span class="keyword">if</span> (tmp == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺类型不存在！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查到了转为json字符串，存入redis</span></span><br><span class="line">    <span class="keyword">for</span> (ShopType shopType : tmp) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> JSONUtil.toJsonStr(shopType);</span><br><span class="line">        shopTypes.add(jsonStr);</span><br><span class="line">    &#125;</span><br><span class="line">    stringRedisTemplate.opsForList().leftPushAll(CACHE_SHOP_TYPE_KEY,shopTypes);</span><br><span class="line">    <span class="comment">//最终把查询到的商户分类信息返回给前端</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(tmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>可以用stream流来简化代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryList</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 先从Redis中查，这里的常量值是固定前缀 + 店铺id</span></span><br><span class="line">    List&lt;String&gt; shopTypes =</span><br><span class="line">            stringRedisTemplate.opsForList().range(CACHE_SHOP_TYPE_KEY, <span class="number">0</span>, -<span class="number">1</span>);</span><br><span class="line">    <span class="comment">// 如果不为空（查询到了），则转为ShopType类型直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (!shopTypes.isEmpty()) &#123;</span><br><span class="line">        List&lt;ShopType&gt; tmp = shopTypes.stream().map(type -&gt; JSONUtil.toBean(type, ShopType.class))</span><br><span class="line">                                          .collect(Collectors.toList());</span><br><span class="line">        <span class="keyword">return</span> Result.ok(tmp);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 否则去数据库中查</span></span><br><span class="line">    List&lt;ShopType&gt; tmp = query().orderByAsc(<span class="string">&quot;sort&quot;</span>).list();</span><br><span class="line">    <span class="keyword">if</span> (tmp == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺类型不存在！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 查到了转为json字符串，存入redis</span></span><br><span class="line">    shopTypes = tmp.stream().map(type -&gt; JSONUtil.toJsonStr(type))</span><br><span class="line">                                    .collect(Collectors.toList());</span><br><span class="line">    stringRedisTemplate.opsForList().leftPushAll(CACHE_SHOP_TYPE_KEY,shopTypes);</span><br><span class="line">    <span class="comment">// 最终把查询到的商户分类信息返回给前端</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(tmp);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="缓存更新策略"><a href="#缓存更新策略" class="headerlink" title="缓存更新策略"></a>缓存更新策略</h3><ul>
<li><p>缓存更新是Redis为了节约内存而设计出来的一个东西，主要是因为内存数据宝贵，当我们想Redis插入太多数据，此时就可能会导致缓存中数据过多，所以Redis会对部分数据进行更新，或者把它成为淘汰更合适</p>
</li>
<li><p>内存淘汰：Redis自动进行，当Redis内存大道我们设定的max-memery时，会自动触发淘汰机制，淘汰掉一些不重要的数据（可以自己设置策略方式）</p>
</li>
<li><p>超时剔除：当我们给Redis设置了过期时间TTL之后，Redis会将超时的数据进行删除，方便我们继续使用缓存</p>
</li>
<li><p>主动更新：我们可以手动调用方法把缓存删除掉，通常用于解决缓存和数据库不一致问题</p>
<table>
<thead>
<tr>
<th></th>
<th>内存淘汰</th>
<th>超时剔除</th>
<th>主动更新</th>
</tr>
</thead>
<tbody><tr>
<td>说明</td>
<td>不用自己维护， 利用Redis的内存淘汰机制， 当内存不足时自动淘汰部分数据。 下次查询时更新缓存。</td>
<td>给缓存数据添加TTL时间， 到期后自动删除缓存。 下次查询时更新缓存。</td>
<td>编写业务逻辑， 在修改数据库的同时， 更新缓存。</td>
</tr>
<tr>
<td>一致性</td>
<td>差</td>
<td>一般</td>
<td>好</td>
</tr>
<tr>
<td>维护成本</td>
<td>无</td>
<td>低</td>
<td>高</td>
</tr>
</tbody></table>
</li>
<li><p>业务场景</p>
<ul>
<li>低一致性需求：使用内存淘汰机制，例如店铺类型的查询缓存（因为这个很长一段时间都不需要更新）</li>
<li>高一致性需求：主动更新，并以超时剔除作为兜底方案，例如店铺详情查询的缓存</li>
</ul>
</li>
</ul>
<h4 id="数据库和缓存不一致解决方案"><a href="#数据库和缓存不一致解决方案" class="headerlink" title="数据库和缓存不一致解决方案"></a>数据库和缓存不一致解决方案</h4><ul>
<li>由于我们的缓存数据源来自数据库，而数据库的数据是会发生变化的，因此，如果当数据库中数据发生变化，而缓存却没有同步，此时就会有一致性问题存在，其后果是<ul>
<li>用户使用缓存中的过时数据，就会产生类似多线程数据安全问题，从而影响业务，产品口碑等</li>
</ul>
</li>
<li>那么如何解决这个问题呢？有如下三种方式<ol>
<li>Cache Aside Pattern 人工编码方式：缓存调用者在更新完数据库之后再去更新缓存，也称之为双写方案</li>
<li>Read&#x2F;Write Through Pattern：缓存与数据库整合为一个服务，由服务来维护一致性。调用者调用该服务，无需关心缓存一致性问题。但是维护这样一个服务很复杂，市面上也不容易找到这样的一个现成的服务，开发成本高</li>
<li>Write Behind Caching Pattern：调用者只操作缓存，其他线程去异步处理数据库，最终实现一致性。但是维护这样的一个异步的任务很复杂，需要实时监控缓存中的数据更新，其他线程去异步更新数据库也可能不太及时，而且缓存服务器如果宕机，那么缓存的数据也就丢失了</li>
</ol>
</li>
</ul>
<h4 id="数据库和缓存不一致采用什么方案"><a href="#数据库和缓存不一致采用什么方案" class="headerlink" title="数据库和缓存不一致采用什么方案"></a>数据库和缓存不一致采用什么方案</h4><ul>
<li>综上所述，在企业的实际应用中，还是方案一最可靠，但是方案一的调用者该如何处理呢？</li>
<li>如果采用方案一，假设我们每次操作完数据库之后，都去更新一下缓存，但是如果中间并没有人查询数据，那么这个更新动作只有最后一次是有效的，中间的更新动作意义不大，所以我们可以把缓存直接删除，等到有人再次查询时，再将缓存中的数据加载出来</li>
<li>对比删除缓存与更新缓存<ul>
<li>更新缓存：每次更新数据库都需要更新缓存，无效写操作较多</li>
<li>删除缓存：更新数据库时让缓存失效，再次查询时更新缓存</li>
</ul>
</li>
<li>如何保证缓存与数据库的操作同时成功&#x2F;同时失败<ul>
<li>单体系统：将缓存与数据库操作放在同一个事务</li>
<li>分布式系统：利用TCC等分布式事务方案</li>
</ul>
</li>
<li>先操作缓存还是先操作数据库？我们来仔细分析一下这两种方式的线程安全问题</li>
<li>先删除缓存，再操作数据库<br>删除缓存的操作很快，但是更新数据库的操作相对较慢，如果此时有一个线程2刚好进来查询缓存，由于我们刚刚才删除缓存，所以线程2需要查询数据库，并写入缓存，但是我们更新数据库的操作还未完成，所以线程2查询到的数据是脏数据，出现线程安全问题<br><a href="https://pic1.imgdb.cn/item/6354be3e16f2c2beb1d11bd0.jpg"><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/35551100/1714981306389-24643940-3e1f-4fa0-b586-216ac12ff1e2.jpeg#averageHue=%23eeeded&clientId=uede9f466-cc8b-4&from=paste&height=365&id=u6bc857a8&originHeight=695&originWidth=541&originalType=url&ratio=1.5&rotation=0&showTitle=false&status=done&style=none&taskId=ue5e9a302-c879-4187-9c84-acec4b9516b&title=&width=284"></a></li>
<li>先操作数据库，再删除缓存<br>线程1在查询缓存的时候，缓存TTL刚好失效，需要查询数据库并写入缓存，这个操作耗时相对较短（相比较于上图来说），但是就在这么短的时间内，线程2进来了，更新数据库，删除缓存，但是线程1虽然查询完了数据（更新前的旧数据），但是还没来得及写入缓存，所以线程2的更新数据库与删除缓存，并没有影响到线程1的查询旧数据，写入缓存，造成线程安全问题<br><a href="https://pic1.imgdb.cn/item/6354be5316f2c2beb1d130c0.jpg"><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/35551100/1714981306482-6ef57c59-ed79-4b91-8e79-b9b74b047b21.jpeg#averageHue=%23edecec&clientId=uede9f466-cc8b-4&from=paste&height=346&id=ua5ca147a&originHeight=690&originWidth=529&originalType=url&ratio=1.5&rotation=0&showTitle=false&status=done&style=none&taskId=ub5ec7a64-7ba9-4857-8c33-da70b40804d&title=&width=265"></a></li>
<li>虽然这二者都存在线程安全问题，但是相对来说，后者出现线程安全问题的概率相对较低，所以我们最终采用后者先操作数据库，再删除缓存的方案</li>
</ul>
<h3 id="实现商铺缓存与数据库双写一致"><a href="#实现商铺缓存与数据库双写一致" class="headerlink" title="实现商铺缓存与数据库双写一致"></a>实现商铺缓存与数据库双写一致</h3><ul>
<li><p>核心思路如下</p>
<ul>
<li>修改ShopController中的业务逻辑，满足以下要求</li>
</ul>
<ol>
<li>根据id查询店铺时，如果缓存未命中，则查询数据库，并将数据库结果写入缓存，并设置TTL</li>
<li>根据id修改店铺时，先修改数据库，再删除缓存</li>
</ol>
</li>
<li><p>修改ShopService的queryById方法，写入缓存时设置一下TTL</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">  <span class="comment">//先从Redis中查，这里的常量值是固定的前缀 + 店铺id</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);</span><br><span class="line">  <span class="comment">//如果不为空（查询到了），则转为Shop类型直接返回</span></span><br><span class="line">  <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">      <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">      <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//否则去数据库中查</span></span><br><span class="line">  <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">  <span class="comment">//查不到返回一个错误信息或者返回空都可以，根据自己的需求来</span></span><br><span class="line">  <span class="keyword">if</span> (shop == <span class="literal">null</span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在！！&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//查到了则转为json字符串</span></span><br><span class="line">  <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> JSONUtil.toJsonStr(shop);</span><br><span class="line">  <span class="comment">//并存入redis，设置TTL</span></span><br><span class="line">  stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, jsonStr,CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">  <span class="comment">//最终把查询到的商户信息返回给前端</span></span><br><span class="line">  <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>修改update方法</p>
<ul>
<li>之前的update方法</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 更新商铺信息</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> shop 商铺数据</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">updateShop</span><span class="params">(<span class="meta">@RequestBody</span> Shop shop)</span> &#123;</span><br><span class="line">    <span class="comment">// 写入数据库</span></span><br><span class="line">    shopService.updateById(shop);</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>修改后的update方法<ul>
<li>业务逻辑我们依旧是放在Service层去写</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 更新商铺信息</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> shop 商铺数据</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">updateShop</span><span class="params">(<span class="meta">@RequestBody</span> Shop shop)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> shopService.update(shop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Service层<ul>
<li>新增一个方法，Impl里去实现<strong>JAV</strong></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 更新商铺信息</span></span><br><span class="line"><span class="comment">    *</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> shop 商铺数据</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 无</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@PutMapping</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">updateShop</span><span class="params">(<span class="meta">@RequestBody</span> Shop shop)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> shopService.update(shop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ServiceImpl层</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(Shop shop)</span> &#123;</span><br><span class="line">    <span class="comment">//首先先判一下空</span></span><br><span class="line">    <span class="keyword">if</span> (shop.getId() == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺id不能为空！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//先修改数据库</span></span><br><span class="line">    updateById(shop);</span><br><span class="line">    <span class="comment">//再删除缓存</span></span><br><span class="line">    stringRedisTemplate.delete(CACHE_SHOP_KEY + shop.getId());</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>修改完毕之后我们重启服务器进行测试，首先随便挑一个顺眼的数据，我这里就是拿餐厅数据做测试，，我们先访问该餐厅，将该餐厅的数据缓存到Redis中，之后使用POSTMAN发送PUT请求，请求路径<a href="http://localhost:8080/api/shop/">http://localhost:8080/api/shop/</a> ，携带JSON数据如下</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;area&quot;</span><span class="punctuation">:</span> <span class="string">&quot;大关&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;openHours&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10:00-22:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sold&quot;</span><span class="punctuation">:</span> <span class="number">4215</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;金华路锦昌文华苑29号&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="number">3035</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;avgPrice&quot;</span><span class="punctuation">:</span> <span class="number">80</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="number">37</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;476茶餐厅&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typeId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>之后再Redis图形化页面刷新数据，发现该餐厅的数据确实不在Redis中了，之后我们刷新网页，餐厅名会被改为476茶餐厅，然后我们再去Redis中刷新，发现新数据已经被缓存了</li>
<li>那么现在功能就实现完毕了，只有当我们刷新页面的时候，才会重新查询数据库，并将数据缓存到Redis，中途无论修改多少次，只要不刷新页面访问，Redis中都不会更新数据</li>
</ul>
<h3 id="缓存穿透问题的解决思路"><a href="#缓存穿透问题的解决思路" class="headerlink" title="缓存穿透问题的解决思路"></a>缓存穿透问题的解决思路</h3><ul>
<li>缓存穿透：缓存穿透是指客户端请求的数据在缓存中和数据库中都不存在，这样缓存永远都不会生效（只有数据库查到了，才会让redis缓存，但现在的问题是查不到），会频繁的去访问数据库。</li>
<li>常见的结局方案有两种<ol>
<li>缓存空对象<ul>
<li>优点：实现简单，维护方便</li>
<li>缺点：额外的内存消耗，可能造成短期的不一致</li>
</ul>
</li>
<li>布隆过滤<ul>
<li>优点：内存占用啥哦，没有多余的key</li>
<li>缺点：实现复杂，可能存在误判</li>
</ul>
</li>
</ol>
</li>
<li>缓存空对象思路分析：当我们客户端访问不存在的数据时，会先请求redis，但是此时redis中也没有数据，就会直接访问数据库，但是数据库里也没有数据，那么这个数据就穿透了缓存，直击数据库。但是数据库能承载的并发不如redis这么高，所以如果大量的请求同时都来访问这个不存在的数据，那么这些请求就会访问到数据库，简单的解决方案就是哪怕这个数据在数据库里不存在，我们也把这个这个数据存在redis中去（这就是为啥说会有额外的内存消耗），这样下次用户过来访问这个不存在的数据时，redis缓存中也能找到这个数据，不用去查数据库。可能造成的短期不一致是指在空对象的存活期间，我们更新了数据库，把这个空对象变成了正常的可以访问的数据，但由于空对象的TTL还没过，所以当用户来查询的时候，查询到的还是空对象，等TTL过了之后，才能访问到正确的数据，不过这种情况很少见罢了</li>
<li>布隆过滤思路分析：布隆过滤器其实采用的是哈希思想来解决这个问题，通过一个庞大的二进制数组，根据哈希思想去判断当前这个要查询的数据是否存在，如果布隆过滤器判断存在，则放行，这个请求会去访问redis，哪怕此时redis中的数据过期了，但是数据库里一定会存在这个数据，从数据库中查询到数据之后，再将其放到redis中。如果布隆过滤器判断这个数据不存在，则直接返回。这种思想的优点在于节约内存空间，但存在误判，误判的原因在于：布隆过滤器使用的是哈希思想，只要是哈希思想，都可能存在哈希冲突</li>
</ul>
<h3 id="编码解决商品查询的缓存穿透问题"><a href="#编码解决商品查询的缓存穿透问题" class="headerlink" title="编码解决商品查询的缓存穿透问题"></a>编码解决商品查询的缓存穿透问题</h3><ul>
<li>核心思路如下</li>
<li>在原来的逻辑中，我们如果发现这个数据在MySQL中不存在，就直接返回一个错误信息了，但是这样存在缓存穿透问题</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//先从Redis中查，这里的常量值是固定的前缀 + 店铺id</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);</span><br><span class="line">    <span class="comment">//如果不为空（查询到了），则转为Shop类型直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//否则去数据库中查</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="comment">//查不到返回一个错误信息或者返回空都可以，根据自己的需求来</span></span><br><span class="line">    <span class="keyword">if</span> (shop == <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查到了则转为json字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> JSONUtil.toJsonStr(shop);</span><br><span class="line">    <span class="comment">//并存入redis，设置TTL</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, jsonStr,CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">    <span class="comment">//最终把查询到的商户信息返回给前端</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>现在的逻辑是：如果这个数据不存在，将这个数据写入到Redis中，并且将value设置为空字符串，然后设置一个较短的TTL，返回错误信息。当再次发起查询时，先去Redis中判断value是否为空字符串，如果是空字符串，则说明是刚刚我们存的不存在的数据，直接返回错误信息</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//先从Redis中查，这里的常量值是固定的前缀 + 店铺id</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);</span><br><span class="line">    <span class="comment">//如果不为空（查询到了），则转为Shop类型直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">        <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//如果查询到的是空字符串，则说明是我们缓存的空数据</span></span><br><span class="line">    <span class="keyword">if</span> (shopjson != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//否则去数据库中查</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="comment">//查不到，则将空字符串写入Redis</span></span><br><span class="line">    <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">//这里的常量值是2分钟</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查到了则转为json字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> JSONUtil.toJsonStr(shop);</span><br><span class="line">    <span class="comment">//并存入redis，设置TTL</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, jsonStr, CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">    <span class="comment">//最终把查询到的商户信息返回给前端</span></span><br><span class="line">    <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>小结：</p>
<ul>
<li>缓存穿透产生的原因是什么？<ul>
<li>用户请求的数据在缓存中和在数据库中都不存在，不断发起这样的请求，会给数据库带来巨大压力</li>
</ul>
</li>
<li>缓存产投的解决方案有哪些？<ul>
<li>缓存null值</li>
<li>布隆过滤</li>
<li>增强id复杂度，避免被猜测id规律（可以采用雪花算法）</li>
<li>做好数据的基础格式校验</li>
<li>加强用户权限校验</li>
<li>做好热点参数的限流</li>
</ul>
</li>
</ul>
<h3 id="缓存雪崩问题及解决思路"><a href="#缓存雪崩问题及解决思路" class="headerlink" title="缓存雪崩问题及解决思路"></a>缓存雪崩问题及解决思路</h3><ul>
<li>缓存雪崩是指在同一时间段，大量缓存的key同时失效，或者Redis服务宕机，导致大量请求到达数据库，带来巨大压力</li>
<li>解决方案<ul>
<li>给不同的Key的TTL添加随机值，让其在不同时间段分批失效</li>
<li>利用Redis集群提高服务的可用性（使用一个或者多个哨兵(Sentinel)实例组成的系统，对redis节点进行监控，在主节点出现故障的情况下，能将从节点中的一个升级为主节点，进行故障转义，保证系统的可用性。 ）</li>
<li>给缓存业务添加降级限流策略</li>
<li>给业务添加多级缓存（浏览器访问静态资源时，优先读取浏览器本地缓存；访问非静态资源（ajax查询数据）时，访问服务端；请求到达Nginx后，优先读取Nginx本地缓存；如果Nginx本地缓存未命中，则去直接查询Redis（不经过Tomcat）；如果Redis查询未命中，则查询Tomcat；请求进入Tomcat后，优先查询JVM进程缓存；如果JVM进程缓存未命中，则查询数据库）</li>
</ul>
</li>
</ul>
<h3 id="缓存击穿问题及解决思路"><a href="#缓存击穿问题及解决思路" class="headerlink" title="缓存击穿问题及解决思路"></a>缓存击穿问题及解决思路</h3><ul>
<li>缓存击穿也叫热点Key问题，就是一个被高并发访问并且缓存重建业务较复杂的key突然失效了，那么无数请求访问就会在瞬间给数据库带来巨大的冲击</li>
<li>举个不太恰当的例子：一件秒杀中的商品的key突然失效了，大家都在疯狂抢购，那么这个瞬间就会有无数的请求访问去直接抵达数据库，从而造成缓存击穿</li>
<li>常见的解决方案有两种<ol>
<li>互斥锁</li>
<li>逻辑过期</li>
</ol>
</li>
<li>逻辑分析：假设线程1在查询缓存之后未命中，本来应该去查询数据库，重建缓存数据，完成这些之后，其他线程也就能从缓存中加载这些数据了。但是在线程1还未执行完毕时，又进来了线程2、3、4同时来访问当前方法，那么这些线程都不能从缓存中查询到数据，那么他们就会在同一时刻访问数据库，执行SQL语句查询，对数据库访问压力过大<br><a href="https://pic1.imgdb.cn/item/6354f77716f2c2beb1225032.jpg"><img src="https://cdn.nlark.com/yuque/0/2024/gif/35551100/1714981306171-442e47ef-0dc2-41ee-bec2-21fa01d758a2.gif#averageHue=%23000000&clientId=uede9f466-cc8b-4&from=paste&id=u53053f6a&originHeight=1&originWidth=1&originalType=url&ratio=1.5&rotation=0&showTitle=false&size=42&status=done&style=none&taskId=u8a3db4c1-9ae8-42b7-a33c-d0553bba6c1&title=" alt="image.png"></a><img src="https://cdn.nlark.com/yuque/0/2024/png/35551100/1714991649520-db5c4e2d-8c71-4776-89a4-500fa99c9235.png#averageHue=%23eae9e8&clientId=u144b5d41-380a-4&from=paste&height=343&id=ua831e633&originHeight=800&originWidth=1296&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=343402&status=done&style=none&taskId=ueb87740e-f832-4669-a771-295cb447f02&title=&width=555.6666870117188" alt="image.png"></li>
<li>解决方案一：互斥锁</li>
<li>利用锁的互斥性，假设线程过来，只能一个人一个人的访问数据库，从而避免对数据库频繁访问产生过大压力，但这也会影响查询的性能，将查询的性能从并行变成了串行，我们可以采用tryLock方法+double check来解决这个问题</li>
<li>线程1在操作的时候，拿着锁把房门锁上了，那么线程2、3、4就不能都进来操作数据库，只有1操作完了，把房门打开了，此时缓存数据也重建好了，线程2、3、4直接从redis中就可以查询到数据。</li>
</ul>
<p><a href="https://pic1.imgdb.cn/item/6354f76816f2c2beb1223b47.jpg"><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/35551100/1714981306820-e0979874-0194-4c34-b8c5-883e73af855a.jpeg#averageHue=%23ebeae8&clientId=uede9f466-cc8b-4&from=paste&height=458&id=u1fa1e82b&originHeight=850&originWidth=655&originalType=url&ratio=1.5&rotation=0&showTitle=false&status=done&style=none&taskId=uc250a971-4f09-4e8a-ade7-70d21d86a19&title=&width=353"></a></p>
<ul>
<li>解决方案二：逻辑过期方案</li>
<li>方案分析：我们之所以会出现缓存击穿问题，主要原因是在于我们对key设置了TTL，如果我们不设置TTL，那么就不会有缓存击穿问题，但是不设置TTL，数据又会一直占用我们的内存，所以我们可以采用逻辑过期方案</li>
<li>我们之前是TTL设置在redis的value中，注意：这个过期时间并不会直接作用于Redis，而是我们后续通过逻辑去处理。假设线程1去查询缓存，然后从value中判断当前数据已经过期了，此时线程1去获得互斥锁，那么其他线程会进行阻塞，获得了锁的进程他会开启一个新线程去进行之前的重建缓存数据的逻辑，直到新开的线程完成者逻辑之后，才会释放锁，而线程1直接进行返回，假设现在线程3过来访问，由于线程2拿着锁，所以线程3无法获得锁，线程3也直接返回数据（但只能返回旧数据，牺牲了数据一致性，换取性能上的提高），只有等待线程2重建缓存数据之后，其他线程才能返回正确的数据</li>
<li>这种方案巧妙在于，异步构建缓存数据，缺点是在重建完缓存数据之前，返回的都是脏数据<br><a href="https://pic1.imgdb.cn/item/6354f97716f2c2beb124e950.jpg"><img src="https://cdn.nlark.com/yuque/0/2024/gif/35551100/1714981306742-f920ea70-ba90-419e-a920-46f92662f302.gif#averageHue=%23000000&clientId=uede9f466-cc8b-4&from=paste&id=u1a435438&originHeight=1&originWidth=1&originalType=url&ratio=1.5&rotation=0&showTitle=false&size=42&status=done&style=none&taskId=u1a5bc3db-5589-4258-bdd5-33bc930c7da&title=" alt="image.png"></a><img src="https://cdn.nlark.com/yuque/0/2024/png/35551100/1714991682765-8c774670-0284-4880-adc5-042eabc9b3fd.png#averageHue=%23ecebea&clientId=u144b5d41-380a-4&from=paste&height=428&id=u60d11b49&originHeight=909&originWidth=1243&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=450974&status=done&style=none&taskId=u114c2621-2a5d-4a2a-96ca-74e868c395f&title=&width=584.6666870117188" alt="image.png"></li>
</ul>
<h3 id="对比互斥锁与逻辑删除"><a href="#对比互斥锁与逻辑删除" class="headerlink" title="对比互斥锁与逻辑删除"></a>对比互斥锁与逻辑删除</h3><ul>
<li>互斥锁方案：由于保证了互斥性，所以数据一致，且实现简单，只是加了一把锁而已，也没有其他的事情需要操心，所以没有额外的内存消耗，缺点在于有锁的情况，就可能死锁，所以只能串行执行，性能会受到影响</li>
<li>逻辑过期方案：线程读取过程中不需要等待，性能好，有一个额外的线程持有锁去进行重构缓存数据，但是在重构数据完成之前，其他线程只能返回脏数据，且实现起来比较麻烦</li>
<li></li>
</ul>
<table>
<thead>
<tr>
<th>解决方案</th>
<th>优点</th>
<th>缺点</th>
</tr>
</thead>
<tbody><tr>
<td>互斥锁</td>
<td>没有额外的内存消耗 保证一致性 实现简单</td>
<td>线程需要等待，性能受影响 可能有死锁风险</td>
</tr>
<tr>
<td>逻辑过期</td>
<td>线程无需等待，性能较好</td>
<td>不保证一致性 有额外内存消耗 实现复杂</td>
</tr>
</tbody></table>
<h3 id="利用互斥锁解决缓存击穿问题"><a href="#利用互斥锁解决缓存击穿问题" class="headerlink" title="利用互斥锁解决缓存击穿问题"></a>利用互斥锁解决缓存击穿问题</h3><ul>
<li>核心思路：相较于原来从缓存中查询不到数据后直接查询数据库而言，现在的方案是，进行查询之后，如果没有从缓存中查询到数据，则进行互斥锁的获取，获取互斥锁之后，判断是否获取到了锁，如果没获取到，则休眠一段时间，过一会儿再去尝试，知道获取到锁为止，才能进行查询</li>
<li>如果获取到了锁的线程，则进行查询，将查询到的数据写入Redis，再释放锁，返回数据，利用互斥锁就能保证只有一个线程去执行数据库的逻辑，防止缓存击穿<br><a href="https://pic1.imgdb.cn/item/6354fb8116f2c2beb127ac8b.jpg"><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/35551100/1714981306937-64450fae-394a-4871-b7dc-8a79904fb62d.jpeg#averageHue=%23faf6f6&clientId=uede9f466-cc8b-4&from=paste&height=390&id=u8e225781&originHeight=749&originWidth=1076&originalType=url&ratio=1.5&rotation=0&showTitle=false&status=done&style=none&taskId=ue9118722-6f45-4baf-9fc9-072adbb9168&title=&width=559.6666870117188"></a></li>
<li>操作锁的代码</li>
<li>核心思路就是利用redis的setnx方法来表示获取锁，如果redis没有这个key，则插入成功，返回1，如果已经存在这个key，则插入失败，返回0。在StringRedisTemplate中返回true&#x2F;false，我们可以根据返回值来判断是否有线程成功获取到了锁<ul>
<li>tryLock</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">    <span class="comment">//避免返回值为null，我们这里使用了BooleanUtil工具类</span></span><br><span class="line">    <span class="keyword">return</span> BooleanUtil.isTrue(flag);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>unlock</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">    stringRedisTemplate.delete(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>然后这里先把我们之前写的缓存穿透代码修改一下，提取成一个独立的方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Shop <span class="title function_">queryWithPassThrough</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//先从Redis中查，这里的常量值是固定的前缀 + 店铺id</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);</span><br><span class="line">    <span class="comment">//如果不为空（查询到了），则转为Shop类型直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">        <span class="keyword">return</span> shop;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (shopjson != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//否则去数据库中查</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="comment">//查不到，则将空值写入Redis</span></span><br><span class="line">    <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查到了则转为json字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> JSONUtil.toJsonStr(shop);</span><br><span class="line">    <span class="comment">//并存入redis，设置TTL</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, jsonStr, CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">    <span class="comment">//最终把查询到的商户信息返回给前端</span></span><br><span class="line">    <span class="keyword">return</span> shop;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>之后编写我们的互斥锁代码，其实与缓存穿透代码类似，只需要在上面稍加修改即可<ul>
<li>DIFF</li>
</ul>
</li>
</ul>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line"><span class="deletion">-   public Shop queryWithPassThrough(Long id) &#123;</span></span><br><span class="line"><span class="addition">+   public Shop queryWithMutex(Long id) &#123;</span></span><br><span class="line">        //先从Redis中查，这里的常量值是固定的前缀 + 店铺id</span><br><span class="line">        String shopJson = stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);</span><br><span class="line">        //如果不为空（查询到了），则转为Shop类型直接返回</span><br><span class="line">        if (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">            Shop shop = JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">            return shop;</span><br><span class="line">        &#125;</span><br><span class="line">        if (shopjson != null) &#123;</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        //否则去数据库中查</span><br><span class="line"><span class="addition">+       //从这里，用try/catch/finally包裹</span></span><br><span class="line"><span class="addition">+       //获取互斥锁</span></span><br><span class="line"><span class="addition">+       boolean flag = tryLock(LOCK_SHOP_KEY + id);</span></span><br><span class="line"><span class="addition">+       //判断是否获取成功</span></span><br><span class="line"><span class="addition">+       if (!flag) &#123;</span></span><br><span class="line"><span class="addition">+           //失败，则休眠并重试</span></span><br><span class="line"><span class="addition">+           Thread.sleep(50);</span></span><br><span class="line"><span class="addition">+           return queryWithMutex(id);</span></span><br><span class="line"><span class="addition">+       &#125;</span></span><br><span class="line">        Shop shop = getById(id);</span><br><span class="line">        //查不到，则将空值写入Redis</span><br><span class="line">        if (shop == null) &#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, &quot;&quot;, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">            return null;</span><br><span class="line">        &#125;</span><br><span class="line">        //查到了则转为json字符串</span><br><span class="line">        String jsonStr = JSONUtil.toJsonStr(shop);</span><br><span class="line">        //并存入redis，设置TTL</span><br><span class="line">        stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, jsonStr, CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line"><span class="addition">+       //try/catch/finally包裹到这里，然后把释放锁的操作放到finally里</span></span><br><span class="line"><span class="addition">+       //释放互斥锁</span></span><br><span class="line"><span class="addition">+       unlock(LOCK_SHOP_KEY + id);</span></span><br><span class="line">        //最终把查询到的商户信息返回给前端</span><br><span class="line">        return shop;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>修改后代码<ul>
<li>在上面的基础上，使用try&#x2F;catch&#x2F;finally包裹，因为不管前面是否会有异常，最终都必须释放锁</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Shop <span class="title function_">queryWithMutex</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//先从Redis中查，这里的常量值是固定的前缀 + 店铺id</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);</span><br><span class="line">    <span class="comment">//如果不为空（查询到了），则转为Shop类型直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">        <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">        <span class="keyword">return</span> shop;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (shopJson != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//否则去数据库中查</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> tryLock(LOCK_SHOP_KEY + id);</span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            <span class="keyword">return</span> queryWithMutex(id);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查不到，则将空值写入Redis</span></span><br><span class="line">        shop = getById(id);</span><br><span class="line">        <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查到了则转为json字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> JSONUtil.toJsonStr(shop);</span><br><span class="line">        <span class="comment">//并存入redis，设置TTL</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, jsonStr, CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">//最终把查询到的商户信息返回给前端</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        unlock(LOCK_SHOP_KEY + id);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> shop;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<ul>
<li><p>最终修改queryById方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> queryWithMutex(id);</span><br><span class="line">    <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


</li>
<li><p>使用Jmeter进行测试</p>
<ul>
<li>我们先来模拟一下缓存击穿的情景，缓存击穿是指在某时刻，一个热点数据的TTL到期了，此时用户不能从Redis中获取热点商品数据，然后就都得去数据库里查询，造成数据库压力过大。</li>
<li>那么我们首先将Redis中的热点商品数据删除，模拟TTL到期，然后用Jmeter进行压力测试，开100个线程来访问这个没有缓存的热点数据<ul>
<li>如果后台日志只输出了一条SQL语句，则说明我们的互斥锁是生效的，没有造成大量用户都去查询数据库，执行SQL语句</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">: ==&gt;  Preparing: SELECT id,name,type_id,images,area,address,x,y,avg_price,sold,comments,score,open_hours,create_time,update_time FROM tb_shop WHERE id=?</span><br><span class="line">: ==&gt; Parameters: 2(Long)</span><br><span class="line">: &lt;==      Total: 1</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>如果日志输出了好多SQL语句，则说明我们的代码有问题</li>
</ul>
<p><a href="https://pic1.imgdb.cn/item/6356424916f2c2beb1a493ea.jpg"><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/35551100/1714981306935-f599fe1d-8226-4b1d-8fa0-d384c3aed96d.jpeg#averageHue=%233e4245&clientId=uede9f466-cc8b-4&from=paste&id=u801523d7&originHeight=446&originWidth=1461&originalType=url&ratio=1.5&rotation=0&showTitle=false&status=done&style=none&taskId=u390b163b-8244-4cde-832f-e3fa7fc27f1&title="></a></p>
<h3 id="利用逻辑过期解决缓存击穿问题"><a href="#利用逻辑过期解决缓存击穿问题" class="headerlink" title="利用逻辑过期解决缓存击穿问题"></a>利用逻辑过期解决缓存击穿问题</h3><ul>
<li>需求：根据id查询商铺的业务，基于逻辑过期方式来解决缓存击穿问题</li>
<li>思路分析：当用户开始查询redis时，判断是否命中<ul>
<li>如果没有命中则直接返回空数据，不查询数据库</li>
<li>如果命中，则将value取出，判断value中的过期时间是否满足<ul>
<li>如果没有过期，则直接返回redis中的数据</li>
<li>如果过期，则在开启独立线程后，直接返回之前的数据，独立线程去重构数据，重构完成后再释放互斥锁<br><a href="https://pic1.imgdb.cn/item/6355073c16f2c2beb1375808.jpg"><img src="https://cdn.nlark.com/yuque/0/2024/gif/35551100/1714981306860-841dc3f1-47d5-422a-b147-e609c0b6698a.gif#averageHue=%23000000&clientId=uede9f466-cc8b-4&from=paste&id=ub0168d91&originHeight=1&originWidth=1&originalType=url&ratio=1.5&rotation=0&showTitle=false&size=42&status=done&style=none&taskId=uc27af04d-fb6c-44b9-b979-6e853b94a01&title=" alt="image.png"></a><img src="https://cdn.nlark.com/yuque/0/2024/png/35551100/1714991885050-4e779715-176d-41f0-8e3b-afa4ed34e844.png#averageHue=%23f8f3f3&clientId=u144b5d41-380a-4&from=paste&height=435&id=u24fb6377&originHeight=652&originWidth=1245&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=286415&status=done&style=none&taskId=u1c98c64d-0e0b-4fd3-9e57-0ce034f1f04&title=&width=830" alt="image.png"></li>
</ul>
</li>
</ul>
</li>
<li>封装数据：因为现在redis中存储的数据的value需要带上过期时间，此时要么你去修改原来的实体类，要么新建一个类包含原有的数据和过期时间</li>
<li>步骤一</li>
<li>这里我们选择新建一个实体类，包含原有数据(用万能的Object)和过期时间，这样对原有的代码没有侵入性</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisData</span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime expireTime;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>步骤二</li>
<li>在ShopServiceImpl中新增方法，进行单元测试，看看能否写入数据</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveShop2Redis</span><span class="params">(Long id, Long expirSeconds)</span> &#123;</span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisData</span>();</span><br><span class="line">    redisData.setData(shop);</span><br><span class="line">    redisData.setExpireTime(LocalDateTime.now().plusSeconds(expirSeconds));</span><br><span class="line">    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, JSONUtil.toJsonStr(redisData));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>编写测试方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HmDianPingApplicationTests</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ShopServiceImpl shopService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        shopService.saveShop2Redis(<span class="number">1L</span>,<span class="number">1000L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>运行测试方法，去Redis图形化页面看到存入的value，确实包含了data和expireTime1</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;area&quot;</span><span class="punctuation">:</span> <span class="string">&quot;大关&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;openHours&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10:00-22:00&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sold&quot;</span><span class="punctuation">:</span> <span class="number">4215</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;images&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://qcloud.dpfile.com/pc/jiclIsCKmOI2arxKN1Uf0Hx3PucIJH8q0QSz-Z8llzcN56-_QiKuOvyio1OOxsRtFoXqu0G3iT2T27qat3WhLVEuLYk00OmSS1IdNpm8K8sG4JN9RIm2mTKcbLtc2o2vfCF2ubeXzk49OsGrXt_KYDCngOyCwZK-s3fqawWswzk.jpg,https://qcloud.dpfile.com/pc/IOf6VX3qaBgFXFVgp75w-KKJmWZjFc8GXDU8g9bQC6YGCpAmG00QbfT4vCCBj7njuzFvxlbkWx5uwqY2qcjixFEuLYk00OmSS1IdNpm8K8sG4JN9RIm2mTKcbLtc2o2vmIU_8ZGOT1OjpJmLxG6urQ.jpg&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span> <span class="string">&quot;金华路锦昌文华苑29号&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;comments&quot;</span><span class="punctuation">:</span> <span class="number">3035</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;avgPrice&quot;</span><span class="punctuation">:</span> <span class="number">80</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span> <span class="number">1666502007000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="number">37</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span> <span class="number">1640167839000</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;476茶餐厅&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;x&quot;</span><span class="punctuation">:</span> <span class="number">120.149192</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;y&quot;</span><span class="punctuation">:</span> <span class="number">30.316078</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typeId&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;expireTime&quot;</span><span class="punctuation">:</span> <span class="number">1666519036559</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>步骤三：正式代码<br>正式代码我们就直接照着流程图写就好了</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//这里需要声明一个线程池，因为下面我们需要新建一个现成来完成重构缓存</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">CACHE_REBUILD_EXECUTOR</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Shop <span class="title function_">queryWithLogicalExpire</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//1. 从redis中查询商铺缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);</span><br><span class="line">    <span class="comment">//2. 如果未命中，则返回空</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isBlank(json)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3. 命中，将json反序列化为对象</span></span><br><span class="line">    <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(json, RedisData.class);</span><br><span class="line">    <span class="comment">//3.1 将data转为Shop对象</span></span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">shopJson</span> <span class="operator">=</span> (JSONObject) redisData.getData();</span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">    <span class="comment">//3.2 获取过期时间</span></span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">expireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line">    <span class="comment">//4. 判断是否过期</span></span><br><span class="line">    <span class="keyword">if</span> (LocalDateTime.now().isBefore(time)) &#123;</span><br><span class="line">        <span class="comment">//5. 未过期，直接返回商铺信息</span></span><br><span class="line">        <span class="keyword">return</span> shop;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6. 过期，尝试获取互斥锁</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> tryLock(LOCK_SHOP_KEY + id);</span><br><span class="line">    <span class="comment">//7. 获取到了锁</span></span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="comment">//8. 开启独立线程</span></span><br><span class="line">        CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="built_in">this</span>.saveShop2Redis(id, LOCK_SHOP_TTL);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                unlock(LOCK_SHOP_KEY + id);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//9. 直接返回商铺信息</span></span><br><span class="line">        <span class="keyword">return</span> shop;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//10. 未获取到锁，直接返回商铺信息</span></span><br><span class="line">    <span class="keyword">return</span> shop;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>使用Jmeter进行测试<ul>
<li>先来复现一遍场景，当某个用户去Redis中访问缓存的数据时，发现该数据已经过期了，于是新开一个线程去重构缓存数据，但在重构完成之前，用户得到的数据都是脏数据，重构完成之后，才是新数据</li>
<li>那我们先使用saveShop2Redis方法，向redis中添加一个逻辑过期数据，设置过期时间为2秒，这样很快就过期了，<ul>
<li>saveShop2Redis</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">saveShop2Redis</span><span class="params">(Long id, Long expirSeconds)</span> &#123;</span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisData</span>();</span><br><span class="line">    redisData.setData(shop);</span><br><span class="line">    redisData.setExpireTime(LocalDateTime.now().plusSeconds(expirSeconds));</span><br><span class="line">    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, JSONUtil.toJsonStr(redisData));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>  - Test
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">    shopService.saveShop2Redis(<span class="number">2L</span>,<span class="number">2L</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>之后去数据库把这个数据修改一下，这样逻辑过期前和逻辑过期后的数据就不一致，当用户来访问数据的时候，需要花时间来进行重构缓存数据，但是在重构完成之前，都只能获得脏数据（也就是我们修改前的数据），只有当重构完毕之后，才能获得新数据（我们修改后的数据）</li>
<li>测试结果如下，同样是开了100个线程去访问逻辑过期数据，前面的用户只能看到脏数据，后面的用户看到的才是新数据<br><a href="https://pic1.imgdb.cn/item/6356558116f2c2beb1d8a832.jpg"><img src="https://cdn.nlark.com/yuque/0/2024/gif/35551100/1714981307109-538dd3f7-67dc-43d9-9249-cb13c3373396.gif#averageHue=%23000000&clientId=uede9f466-cc8b-4&from=paste&id=u077196c3&originHeight=1&originWidth=1&originalType=url&ratio=1.5&rotation=0&showTitle=false&size=42&status=done&style=none&taskId=u67417cfc-3993-413c-9b88-93d03206190&title=" alt="image.png"></a><img src="https://cdn.nlark.com/yuque/0/2024/png/35551100/1714992026531-24eb0859-e46e-4ced-8272-eeae65fcc60e.png#averageHue=%2342474a&clientId=u144b5d41-380a-4&from=paste&height=433&id=udb41068f&originHeight=650&originWidth=1289&originalType=binary&ratio=1.5&rotation=0&showTitle=false&size=905538&status=done&style=none&taskId=u98bf77f2-e4fa-452a-9133-abd2f7e2998&title=&width=859.3333333333334" alt="image.png"></li>
</ul>
<h3 id="封装Redis工具类"><a href="#封装Redis工具类" class="headerlink" title="封装Redis工具类"></a>封装Redis工具类</h3><ul>
<li>基于StringRedisTemplate封装一个缓存工具类，需满足下列要求<ul>
<li>方法1：将任意Java对象序列化为JSON，并存储到String类型的Key中，并可以设置TTL过期时间</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, Long time, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">    stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(value), time, timeUnit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>方法2：将任意Java对象序列化为JSON，并存储在String类型的Key中，并可以设置逻辑过期时间，用于处理缓存击穿问题</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWithLogicExpire</span><span class="params">(String key, Object value, Long time, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">    <span class="comment">//由于需要设置逻辑过期时间，所以我们需要用到RedisData</span></span><br><span class="line">    RedisData&lt;Object&gt; redisData = <span class="keyword">new</span> <span class="title class_">RedisData</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//redisData的data就是传进来的value对象</span></span><br><span class="line">    redisData.setData(value);</span><br><span class="line">    <span class="comment">//逻辑过期时间就是当前时间加上传进来的参数时间，用TimeUnit可以将时间转为秒，随后与当前时间相加</span></span><br><span class="line">    redisData.setExpireTime(LocalDateTime.now().plusSeconds(timeUnit.toSeconds(time)));</span><br><span class="line">    <span class="comment">//由于是逻辑过期，所以这里不需要设置过期时间，只存一下key和value就好了，同时注意value是ridisData类型</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(redisData));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>方法3：根据指定的Key查询缓存，并反序列化为指定类型，利用缓存空值的方式解决缓存穿透问题<ul>
<li>原方法</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Shop <span class="title function_">queryWithPassThrough</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//先从Redis中查，这里的常量值是固定的前缀 + 店铺id</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);</span><br><span class="line">    <span class="comment">//如果不为空（查询到了），则转为Shop类型直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">        <span class="keyword">return</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (shopjson != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//否则去数据库中查</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="comment">//查不到，则将空值写入Redis</span></span><br><span class="line">    <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查到了则转为json字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> JSONUtil.toJsonStr(shop);</span><br><span class="line">    <span class="comment">//并存入redis，设置TTL</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, jsonStr, CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">    <span class="comment">//最终把查询到的商户信息返回给前端</span></span><br><span class="line">    <span class="keyword">return</span> shop;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>  - 改为通用方法
     - 改为通用方法，那么返回值就需要进行修改，不能返回Shop了，那我们直接设置一个泛型，同时ID的类型，也不一定都是Long类型，所以我们也采用泛型。
     - Key的前缀也会随着业务需求的不同而修改，所以参数列表里还需要加入Key的前缀
     - 通过id去数据库查询的具体业务需求我们也不清楚，所以我们也要在参数列表中加入一个查询数据库逻辑的函数
     - 最后再加上设置TTL需要的两个参数
     - 那么综上所述，我们的参数列表需要
        1. key前缀
        2. id（类型泛型）
        3. 返回值类型（泛型）
        4. 查询的函数
        5. TTL需要的两个参数
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Shop <span class="title function_">queryWithPassThrough</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="comment">//先从Redis中查，这里的常量值是固定的前缀 + 店铺id</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(CACHE_SHOP_KEY + id);</span><br><span class="line">    <span class="comment">//如果不为空（查询到了），则转为Shop类型直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">        <span class="keyword">return</span> JSONUtil.toBean(shopJson, Shop.class);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (shopjson != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//否则去数据库中查</span></span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> getById(id);</span><br><span class="line">    <span class="comment">//查不到，则将空值写入Redis</span></span><br><span class="line">    <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//查到了则转为json字符串</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> JSONUtil.toJsonStr(shop);</span><br><span class="line">    <span class="comment">//并存入redis，设置TTL</span></span><br><span class="line">    stringRedisTemplate.opsForValue().set(CACHE_SHOP_KEY + id, jsonStr, CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">    <span class="comment">//最终把查询到的商户信息返回给前端</span></span><br><span class="line">    <span class="keyword">return</span> shop;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<pre><code>  - 使用方法
</code></pre>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Result <span class="title function_">queryById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">    <span class="type">Shop</span> <span class="variable">shop</span> <span class="operator">=</span> cacheClient.</span><br><span class="line">            queryWithPassThrough(CACHE_SHOP_KEY, id, Shop.class, <span class="built_in">this</span>::getById, CACHE_SHOP_TTL, TimeUnit.MINUTES);</span><br><span class="line">    <span class="keyword">if</span> (shop == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;店铺不存在！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Result.ok(shop);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>方法4：根据指定的Key查询缓存，并反序列化为指定类型，需要利用逻辑过期解决缓存击穿问题</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;R, ID&gt; R <span class="title function_">queryWithLogicalExpire</span><span class="params">(String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">    <span class="comment">//1. 从redis中查询商铺缓存</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">    <span class="comment">//2. 如果未命中，则返回空</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isBlank(json)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3. 命中，将json反序列化为对象</span></span><br><span class="line">    <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(json, RedisData.class);</span><br><span class="line">    <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> JSONUtil.toBean((JSONObject) redisData.getData(), type);</span><br><span class="line">    <span class="type">LocalDateTime</span> <span class="variable">expireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line">    <span class="comment">//4. 判断是否过期</span></span><br><span class="line">    <span class="keyword">if</span> (expireTime.isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">        <span class="comment">//5. 未过期，直接返回商铺信息</span></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//6. 过期，尝试获取互斥锁</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">    <span class="comment">//7. 获取到了锁</span></span><br><span class="line">    <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">        <span class="comment">//8. 开启独立线程</span></span><br><span class="line">        CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">R</span> <span class="variable">tmp</span> <span class="operator">=</span> dbFallback.apply(id);</span><br><span class="line">                <span class="built_in">this</span>.setWithLogicExpire(key, tmp, time, timeUnit);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                unlock(lockKey);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">//9. 直接返回商铺信息</span></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//10. 未获取到锁，直接返回商铺信息</span></span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>方法5：根据指定的Key查询缓存，并反序列化为指定类型，需要利用互斥锁解决缓存击穿问题</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;R, ID&gt; R <span class="title function_">queryWithMutex</span><span class="params">(String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">    <span class="comment">//先从Redis中查，这里的常量值是固定的前缀 + 店铺id</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">    <span class="comment">//如果不为空（查询到了），则转为Shop类型直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isNotBlank(json)) &#123;</span><br><span class="line">        <span class="keyword">return</span> JSONUtil.toBean(json, type);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (json != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//否则去数据库中查</span></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">        <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">            Thread.sleep(<span class="number">50</span>);</span><br><span class="line">            <span class="keyword">return</span> queryWithMutex(keyPrefix, id, type, dbFallback, time, timeUnit);</span><br><span class="line">        &#125;</span><br><span class="line">        r = dbFallback.apply(id);</span><br><span class="line">        <span class="comment">//查不到，则将空值写入Redis</span></span><br><span class="line">        <span class="keyword">if</span> (r == <span class="literal">null</span>) &#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//并存入redis，设置TTL</span></span><br><span class="line">        <span class="built_in">this</span>.set(key, r, time, timeUnit);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        unlock(lockKey);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>完整代码如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cn.hutool.core.util.BooleanUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> cn.hutool.json.JSONUtil;</span><br><span class="line"><span class="keyword">import</span> com.hmdp.entity.RedisData;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.redis.core.StringRedisTemplate;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.time.LocalDateTime;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"><span class="keyword">import</span> java.util.function.Function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> com.hmdp.utils.RedisConstants.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">CACHE_REBUILD_EXECUTOR</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheClient</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, Long time, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(value), time, timeUnit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWithLogicExpire</span><span class="params">(String key, Object value, Long time, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        RedisData&lt;Object&gt; redisData = <span class="keyword">new</span> <span class="title class_">RedisData</span>&lt;&gt;();</span><br><span class="line">        redisData.setData(value);</span><br><span class="line">        redisData.setExpireTime(LocalDateTime.now().plusSeconds(timeUnit.toSeconds(time)));</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(redisData));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;R, ID&gt; R <span class="title function_">queryWithPassThrough</span><span class="params">(String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        <span class="comment">//先从Redis中查，这里的常量值是固定的前缀 + 店铺id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">//如果不为空（查询到了），则转为R类型直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(json)) &#123;</span><br><span class="line">            <span class="keyword">return</span> JSONUtil.toBean(json, type);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (json != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//否则去数据库中查，查询逻辑用我们参数中注入的函数</span></span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> dbFallback.apply(id);</span><br><span class="line">        <span class="comment">//查不到，则将空值写入Redis</span></span><br><span class="line">        <span class="keyword">if</span> (r == <span class="literal">null</span>) &#123;</span><br><span class="line">            stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//查到了则转为json字符串</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonStr</span> <span class="operator">=</span> JSONUtil.toJsonStr(r);</span><br><span class="line">        <span class="comment">//并存入redis，设置TTL</span></span><br><span class="line">        <span class="built_in">this</span>.set(key, jsonStr, time, timeUnit);</span><br><span class="line">        <span class="comment">//最终把查询到的商户信息返回给前端</span></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;R, ID&gt; R <span class="title function_">queryWithLogicalExpire</span><span class="params">(String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        <span class="comment">//1. 从redis中查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">//2. 如果未命中，则返回空</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(json)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3. 命中，将json反序列化为对象</span></span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(json, RedisData.class);</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> JSONUtil.toBean((JSONObject) redisData.getData(), type);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">expireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line">        <span class="comment">//4. 判断是否过期</span></span><br><span class="line">        <span class="keyword">if</span> (expireTime.isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">            <span class="comment">//5. 未过期，直接返回商铺信息</span></span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//6. 过期，尝试获取互斥锁</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">        <span class="comment">//7. 获取到了锁</span></span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="comment">//8. 开启独立线程</span></span><br><span class="line">            CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">R</span> <span class="variable">tmp</span> <span class="operator">=</span> dbFallback.apply(id);</span><br><span class="line">                    <span class="built_in">this</span>.setWithLogicExpire(key, tmp, time, timeUnit);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    unlock(lockKey);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">//9. 直接返回商铺信息</span></span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//10. 未获取到锁，直接返回商铺信息</span></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;R, ID&gt; R <span class="title function_">queryWithMutex</span><span class="params">(String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        <span class="comment">//先从Redis中查，这里的常量值是固定的前缀 + 店铺id</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">//如果不为空（查询到了），则转为Shop类型直接返回</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(json)) &#123;</span><br><span class="line">            <span class="keyword">return</span> JSONUtil.toBean(json, type);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (json != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> LOCK_SHOP_KEY + id;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//否则去数据库中查</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">            <span class="keyword">if</span> (!flag) &#123;</span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                <span class="keyword">return</span> queryWithMutex(keyPrefix, id, type, dbFallback, time, timeUnit);</span><br><span class="line">            &#125;</span><br><span class="line">            r = dbFallback.apply(id);</span><br><span class="line">            <span class="comment">//查不到，则将空值写入Redis</span></span><br><span class="line">            <span class="keyword">if</span> (r == <span class="literal">null</span>) &#123;</span><br><span class="line">                stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, CACHE_NULL_TTL, TimeUnit.MINUTES);</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//并存入redis，设置TTL</span></span><br><span class="line">            <span class="built_in">this</span>.set(key, r, time, timeUnit);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            unlock(lockKey);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> BooleanUtil.isTrue(flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        stringRedisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis高级</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis高级_分布式锁</title>
    <url>/2024/05/10/Redis%E9%AB%98%E7%BA%A7-%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</url>
    <content><![CDATA[<h2 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h2><h3 id="基本原理和实现方式对比"><a href="#基本原理和实现方式对比" class="headerlink" title="基本原理和实现方式对比"></a>基本原理和实现方式对比</h3><ul>
<li>分布式锁：满足分布式系统或集群模式下多线程课件并且可以互斥的锁</li>
<li>分布式锁的核心思想就是让大家共用同一把锁，那么我们就能锁住线程，不让线程进行，让程序串行执行，这就是分布式锁的核心思路<br><a href="https://pic1.imgdb.cn/item/635a5e5516f2c2beb1292f05.jpg"><img src="https://cdn.nlark.com/yuque/0/2024/png/35551100/1714996350876-2a5106c7-ab28-4d02-a2f4-7c7c997f5e4f.png#averageHue=%23f3f2f2&clientId=u144b5d41-380a-4&from=paste&id=uac4987e7&originHeight=808&originWidth=1616&originalType=url&ratio=1.5&rotation=0&showTitle=false&size=531180&status=done&style=none&taskId=u07dbba27-0ff8-49e5-8691-b4bcd86a410&title=" alt="image.png"></a></li>
<li>那么分布式锁应该满足一些什么条件呢？<ol>
<li>可见性：多个线程都能看到相同的结果。</li>
</ol>
</li>
<li>注意：这里说的可见性并不是并发编程中指的内存可见性，只是说多个进程之间都能感知到变化的意思<ol>
<li>互斥：互斥是分布式锁的最基本条件，使得程序串行执行</li>
<li>高可用：程序不易崩溃，时时刻刻都保证较高的可用性</li>
<li>高性能：由于加锁本身就让性能降低，所以对于分布式锁需要他较高的加锁性能和释放锁性能</li>
<li>安全性：安全也是程序中必不可少的一环</li>
</ol>
</li>
<li>常见的分布式锁有三种<ol>
<li>MySQL：MySQL本身就带有锁机制，但是由于MySQL的性能一般，所以采用分布式锁的情况下，使用MySQL作为分布式锁比较少见</li>
<li>Redis：Redis作为分布式锁是非常常见的一种使用方式，现在企业级开发中基本都是用Redis或者Zookeeper作为分布式锁，利用SETNX这个方法，如果插入Key成功，则表示获得到了锁，如果有人插入成功，那么其他人就回插入失败，无法获取到锁，利用这套逻辑完成互斥，从而实现分布式锁</li>
<li>Zookeeper：Zookeeper也是企业级开发中较好的一种实现分布式锁的方案，但本文是学Redis的，所以这里就不过多阐述了</li>
</ol>
</li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>MySQL</th>
<th>Redis</th>
<th>Zookeeper</th>
</tr>
</thead>
<tbody><tr>
<td>互斥</td>
<td>利用mysql本身的互斥锁机制</td>
<td>利用setnx这样的互斥命令</td>
<td>利用节点的唯一性和有序性实现互斥</td>
</tr>
<tr>
<td>高可用</td>
<td>好</td>
<td>好</td>
<td>好</td>
</tr>
<tr>
<td>高性能</td>
<td>一般</td>
<td>好</td>
<td>一般</td>
</tr>
<tr>
<td>安全性</td>
<td>断开连接，自动释放锁</td>
<td>利用锁超时时间，到期释放</td>
<td>临时节点，断开连接自动释放</td>
</tr>
</tbody></table>
<h3 id="Redis分布式锁的实现核心思路"><a href="#Redis分布式锁的实现核心思路" class="headerlink" title="Redis分布式锁的实现核心思路"></a>Redis分布式锁的实现核心思路</h3><ul>
<li>实现分布式锁时需要实现两个基本方法<ol>
<li>获取锁<ul>
<li>互斥：确保只能有一个线程获取锁</li>
<li>非阻塞：尝试一次，成功返回true，失败返回false</li>
</ul>
</li>
</ol>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">SET lock thread01 NX EX 10</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>释放锁<ul>
<li>手动释放</li>
<li>超时释放：获取锁的时候添加一个超时时间</li>
</ul>
</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">DEL lock</span><br></pre></td></tr></table></figure>

<ul>
<li>核心思路<ul>
<li>我们利用redis的SETNX方法，当有多个线程进入时，我们就利用该方法来获取锁。第一个线程进入时，redis 中就有这个key了，返回了1，如果结果是1，则表示他抢到了锁，那么他去执行业务，然后再删除锁，退出锁逻辑，没有抢到锁（返回了0）的线程，等待一定时间之后重试</li>
</ul>
</li>
</ul>
<h3 id="实现分布式锁"><a href="#实现分布式锁" class="headerlink" title="实现分布式锁"></a>实现分布式锁</h3><ul>
<li>锁的基本接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ILock</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 尝试获取锁</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeoutSec 锁持有的超时时间，过期自动释放</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true表示获取锁成功，false表示获取锁失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 释放锁</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>然后创建一个SimpleRedisLock类实现接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SimpleRedisLock</span> <span class="keyword">implements</span> <span class="title class_">ILock</span> &#123;</span><br><span class="line">    <span class="comment">//锁的前缀</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">KEY_PREFIX</span> <span class="operator">=</span> <span class="string">&quot;lock:&quot;</span>;</span><br><span class="line">    <span class="comment">//具体业务名称，将前缀和业务名拼接之后当做Key</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//这里不是@Autowired注入，采用的是构造器注入，在创建SimpleRedisLock时，将RedisTemplate作为参数传入</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SimpleRedisLock</span><span class="params">(String name, StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span> &#123;</span><br><span class="line">        <span class="comment">//获取线程标识</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">threadId</span> <span class="operator">=</span> Thread.currentThread().getId();</span><br><span class="line">        <span class="comment">//获取锁，使用SETNX方法进行加锁，同时设置过期时间，防止死锁</span></span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">success</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(KEY_PREFIX + name, threadId + <span class="string">&quot;&quot;</span>, timeoutSec, TimeUnit.SECONDS);</span><br><span class="line">        <span class="comment">//自动拆箱可能会出现null，这样写更稳妥</span></span><br><span class="line">        <span class="keyword">return</span> Boolean.TRUE.equals(success);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//通过DEL来删除锁</span></span><br><span class="line">        stringRedisTemplate.delete(KEY_PREFIX + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>修改业务代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">seckillVoucher</span><span class="params">(Long voucherId)</span> &#123;</span><br><span class="line">    LambdaQueryWrapper&lt;SeckillVoucher&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    <span class="comment">//1. 查询优惠券</span></span><br><span class="line">    queryWrapper.eq(SeckillVoucher::getVoucherId, voucherId);</span><br><span class="line">    <span class="type">SeckillVoucher</span> <span class="variable">seckillVoucher</span> <span class="operator">=</span> seckillVoucherService.getOne(queryWrapper);</span><br><span class="line">    <span class="comment">//2. 判断秒杀时间是否开始</span></span><br><span class="line">    <span class="keyword">if</span> (LocalDateTime.now().isBefore(seckillVoucher.getBeginTime())) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀还未开始，请耐心等待&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3. 判断秒杀时间是否结束</span></span><br><span class="line">    <span class="keyword">if</span> (LocalDateTime.now().isAfter(seckillVoucher.getEndTime())) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;秒杀已经结束！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//4. 判断库存是否充足</span></span><br><span class="line">    <span class="keyword">if</span> (seckillVoucher.getStock() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;优惠券已被抢光了哦，下次记得手速快点&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Long</span> <span class="variable">userId</span> <span class="operator">=</span> UserHolder.getUser().getId();</span><br><span class="line">    <span class="comment">// 创建锁对象</span></span><br><span class="line">    <span class="type">SimpleRedisLock</span> <span class="variable">redisLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleRedisLock</span>(<span class="string">&quot;order:&quot;</span> + userId, stringRedisTemplate);</span><br><span class="line">    <span class="comment">// 获取锁对象</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> redisLock.tryLock(<span class="number">120</span>);</span><br><span class="line">    <span class="comment">// 加锁失败，说明当前用户开了多个线程抢优惠券，但是由于key是SETNX的，所以不能创建key，得等key的TTL到期或释放锁（删除key）</span></span><br><span class="line">    <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;不允许抢多张优惠券&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 获取代理对象</span></span><br><span class="line">        <span class="type">IVoucherOrderService</span> <span class="variable">proxy</span> <span class="operator">=</span> (IVoucherOrderService) AopContext.currentProxy();</span><br><span class="line">        <span class="keyword">return</span> proxy.createVoucherOrder(voucherId);</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="comment">// 释放锁</span></span><br><span class="line">        redisLock.unlock();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用Jmeter进行压力测试，请求头中携带登录用户的token，最终只能抢到一张优惠券</li>
</ul>
<h3 id="Redis分布式锁误删情况说明"><a href="#Redis分布式锁误删情况说明" class="headerlink" title="Redis分布式锁误删情况说明"></a>Redis分布式锁误删情况说明</h3><ul>
<li>逻辑说明<ul>
<li>持有锁的线程1在锁的内部出现了阻塞，导致他的锁TTL到期，自动释放</li>
<li>此时线程2也来尝试获取锁，由于线程1已经释放了锁，所以线程2可以拿到</li>
<li>但是现在线程1阻塞完了，继续往下执行，要开始释放锁了</li>
<li>那么此时就会将属于线程2的锁释放，这就是误删别人锁的情况</li>
</ul>
</li>
<li>解决方案<ul>
<li>解决方案就是在每个线程释放锁的时候，都判断一下这个锁是不是自己的，如果不属于自己，则不进行删除操作。</li>
<li>假设还是上面的情况，线程1阻塞，锁自动释放，线程2进入到锁的内部执行逻辑，此时线程1阻塞完了，继续往下执行，开始删除锁，但是线程1发现这把锁不是自己的，所以不进行删除锁的逻辑，当线程2执行到删除锁的逻辑时，如果TTL还未到期，则判断当前这把锁是自己的，于是删除这把锁<br><a href="https://pic1.imgdb.cn/item/635aa1b016f2c2beb1e68e4f.jpg"><img src="https://cdn.nlark.com/yuque/0/2024/png/35551100/1714996350546-cddab84c-516b-4e91-acd1-f05f6797011d.png#averageHue=%23faf9f9&clientId=u144b5d41-380a-4&from=paste&id=uba7b2e89&originHeight=642&originWidth=1526&originalType=url&ratio=1.5&rotation=0&showTitle=false&size=259328&status=done&style=none&taskId=u66fd1948-843b-4719-8572-de4efc3877b&title=" alt="image.png"></a></li>
</ul>
</li>
</ul>
<h3 id="解决Redis分布式锁误删问题"><a href="#解决Redis分布式锁误删问题" class="headerlink" title="解决Redis分布式锁误删问题"></a>解决Redis分布式锁误删问题</h3><ul>
<li>需求：修改之前的分布式锁实现</li>
<li>满足：在获取锁的时候存入线程标识（用UUID标识，在一个JVM中，ThreadId一般不会重复，但是我们现在是集群模式，有多个JVM，多个JVM之间可能会出现ThreadId重复的情况），在释放锁的时候先获取锁的线程标识，判断是否与当前线程标识一致<ul>
<li>如果一致则释放锁</li>
<li>如果不一致则不释放锁</li>
</ul>
</li>
<li>核心逻辑：在存入锁的时候，放入自己的线程标识，在删除锁的时候，判断当前这把锁是不是自己存入的<ul>
<li>如果是，则进行删除</li>
<li>如果不是，则不进行删除</li>
</ul>
</li>
<li>具体实现代码如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">ID_PREFIX</span> <span class="operator">=</span> UUID.randomUUID().toString(<span class="literal">true</span>) + <span class="string">&quot;-&quot;</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(<span class="type">long</span> timeoutSec)</span> &#123;</span><br><span class="line">    <span class="comment">// 获取线程标识</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX + Thread.currentThread().getId();</span><br><span class="line">    <span class="comment">// 获取锁</span></span><br><span class="line">    <span class="type">Boolean</span> <span class="variable">success</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(KEY_PREFIX + name, threadId, timeoutSec, TimeUnit.SECONDS);</span><br><span class="line">    <span class="keyword">return</span> Boolean.TRUE.equals(success);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取当前线程的标识</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX + Thread.currentThread().getId();</span><br><span class="line">    <span class="comment">// 获取锁中的标识</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(KEY_PREFIX + name);</span><br><span class="line">    <span class="comment">// 判断标识是否一致</span></span><br><span class="line">    <span class="keyword">if</span> (threadId.equals(id)) &#123;</span><br><span class="line">        <span class="comment">// 释放锁</span></span><br><span class="line">        stringRedisTemplate.delete(KEY_PREFIX + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分布式锁的原子性问题"><a href="#分布式锁的原子性问题" class="headerlink" title="分布式锁的原子性问题"></a>分布式锁的原子性问题</h3><ul>
<li>更为极端的误删逻辑说明</li>
<li>假设线程1已经获取了锁，在判断标识一致之后，准备释放锁的时候，又出现了阻塞（例如JVM垃圾回收机制）</li>
<li>于是锁的TTL到期了，自动释放了</li>
<li>那么现在线程2趁虚而入，拿到了一把锁</li>
<li>但是线程1的逻辑还没执行完，那么线程1就会执行删除锁的逻辑</li>
<li>但是在阻塞前线程1已经判断了标识一致，所以现在线程1把线程2的锁给删了</li>
<li>那么就相当于判断标识那行代码没有起到作用</li>
<li>这就是删锁时的原子性问题</li>
<li>因为线程1的拿锁，判断标识，删锁，不是原子操作，所以我们要防止刚刚的情况</li>
</ul>
<p><a href="https://pic1.imgdb.cn/item/635c85c916f2c2beb1236040.jpg"><img src="https://cdn.nlark.com/yuque/0/2024/png/35551100/1714996351023-128cfdca-f0e4-4568-a310-f93e2ee4e072.png#averageHue=%23f9f8f8&clientId=u144b5d41-380a-4&from=paste&id=ngIMz&originHeight=599&originWidth=1070&originalType=url&ratio=1.5&rotation=0&showTitle=false&size=198030&status=done&style=none&taskId=u1b895783-f0a9-4382-85cc-52df8e2151f&title=" alt="image.png"></a></p>
<h3 id="Lua脚本解决多条命令原子性问题"><a href="#Lua脚本解决多条命令原子性问题" class="headerlink" title="Lua脚本解决多条命令原子性问题"></a>Lua脚本解决多条命令原子性问题</h3><ul>
<li>Redis提供了Lua脚本功能，在一个脚本中编写多条Redis命令，确保多条命令执行时的原子性。</li>
<li>Lua是一种编程语言，它的基本语法可以上菜鸟教程看看，链接：<a href="https://www.runoob.com/lua/lua-tutorial.html">https://www.runoob.com/lua/lua-tutorial.html</a></li>
<li>这里重点介绍Redis提供的调用函数，我们可以使用Lua去操作Redis，而且还能保证它的原子性，这样就可以实现拿锁，判断标识，删锁是一个原子性动作了</li>
<li>Redis提供的调用函数语法如下</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis.call(<span class="string">&#x27;命令名称&#x27;</span>,<span class="string">&#x27;key&#x27;</span>,<span class="string">&#x27;其他参数&#x27;</span>, ...)</span><br></pre></td></tr></table></figure>

<ul>
<li>例如我们要执行set name Kyle，则脚本是这样</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">redis.call(<span class="string">&#x27;set&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;Kyle&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>例如我我们要执行set name David，在执行get name，则脚本如下</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 先执行set name David</span></span><br><span class="line">redis.call(<span class="string">&#x27;set&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;David&#x27;</span>)</span><br><span class="line"><span class="comment">## 再执行get name</span></span><br><span class="line"><span class="built_in">local</span> name = redis.call(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;name&#x27;</span>)</span><br><span class="line"><span class="comment">## 返回</span></span><br><span class="line"><span class="built_in">return</span> name</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>写好脚本以后，需要用Redis命令来调用脚本，调用脚本的常见命令如下</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">EVAL script numkeys key [key ...] arg [arg ...]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>例如，我们要调用redis.call(‘set’, ‘name’, ‘Kyle’) 0这个脚本，语法如下</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">EVAL <span class="string">&quot;return redis.call(&#x27;set&#x27;, &#x27;name&#x27;, &#x27;Kyle&#x27;)&quot;</span> 0</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>如果脚本中的key和value不想写死，可以作为参数传递，key类型参数会放入KEYS数组，其他参数会放入ARGV数组，在脚本中可以从KEYS和ARGV数组中获取这些参数</li>
</ul>
<p>注意：在Lua中，数组下标从1开始</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">EVAL <span class="string">&quot;return redis.call(&#x27;set&#x27;, KEYS[1], ARGV[1])&quot;</span> 1 name Lucy</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>那现在我们来使用Lua脚本来代替我们释放锁的逻辑<ul>
<li>原逻辑</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// 获取当前线程的标识</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">threadId</span> <span class="operator">=</span> ID_PREFIX + Thread.currentThread().getId();</span><br><span class="line">    <span class="comment">// 获取锁中的标识</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">id</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(KEY_PREFIX + name);</span><br><span class="line">    <span class="comment">// 判断标识是否一致</span></span><br><span class="line">    <span class="keyword">if</span> (threadId.equals(id)) &#123;</span><br><span class="line">        <span class="comment">// 释放锁</span></span><br><span class="line">        stringRedisTemplate.delete(KEY_PREFIX + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>改写为Lua脚本01<ul>
<li>但是现在是写死了的，我们可以通过传参的方式来变成动态的Lua脚本</li>
</ul>
</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 线程标识</span></span><br><span class="line"><span class="keyword">local</span> threadId = <span class="string">&quot;UUID-31&quot;</span></span><br><span class="line"><span class="comment">-- 锁的key</span></span><br><span class="line"><span class="keyword">local</span> key = <span class="string">&quot;lock:order:userId&quot;</span></span><br><span class="line"><span class="comment">-- 获取锁中线程标识</span></span><br><span class="line"><span class="keyword">local</span> id = redis.call(<span class="string">&#x27;get&#x27;</span>, key)</span><br><span class="line"><span class="comment">-- 比较线程标识与锁的标识是否一致</span></span><br><span class="line"><span class="keyword">if</span> (threadId == id) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 一致则释放锁 del key</span></span><br><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">&#x27;del&#x27;</span>, key)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<ul>
<li>改写为Lua脚本02<ul>
<li>但是现在是写死了的，我们可以通过传参的方式来变成动态的Lua脚本</li>
</ul>
</li>
</ul>
<figure class="highlight lua"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 这里的KEYS[1]就是传入锁的key</span></span><br><span class="line"><span class="comment">-- 这里的ARGV[1]就是线程标识</span></span><br><span class="line"><span class="comment">-- 比较锁中的线程标识与线程标识是否一致</span></span><br><span class="line"><span class="keyword">if</span> (redis.call(<span class="string">&#x27;get&#x27;</span>, KEYS[<span class="number">1</span>]) == ARGV[<span class="number">1</span>]) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 一致则释放锁</span></span><br><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">&#x27;del&#x27;</span>, KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>

<h3 id="利用Java代码调用Lua脚本改造分布式锁"><a href="#利用Java代码调用Lua脚本改造分布式锁" class="headerlink" title="利用Java代码调用Lua脚本改造分布式锁"></a>利用Java代码调用Lua脚本改造分布式锁</h3><ul>
<li>在RedisTemplate中，可以利用execute方法去执行lua脚本</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">execute</span><span class="params">(RedisScript&lt;T&gt; script, List&lt;K&gt; keys, Object... args)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.scriptExecutor.execute(script, keys, args);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>对应的Java代码如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> DefaultRedisScript&lt;Long&gt; UNLOCK_SCRIPT;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">    UNLOCK_SCRIPT = <span class="keyword">new</span> <span class="title class_">DefaultRedisScript</span>();</span><br><span class="line">    UNLOCK_SCRIPT.setLocation(<span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;unlock.lua&quot;</span>));</span><br><span class="line">    UNLOCK_SCRIPT.setResultType(Long.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">    stringRedisTemplate.execute(UNLOCK_SCRIPT,</span><br><span class="line">            Collections.singletonList(KEY_PREFIX + name),</span><br><span class="line">            ID_PREFIX + Thread.currentThread().getId());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>但是现在的分布式锁还存在一个问题：锁不住<ul>
<li>那什么是锁不住呢？<ul>
<li>如果锁的TTL快到期的时候，我们可以给它续期一下，比如续个30s，就好像是网吧上网，快没网费了的时候，让网管再给你续50块钱的，然后该玩玩，程序也继续往下执行</li>
<li>那么续期问题怎么解决呢，可以依赖于我们接下来要学习redission了</li>
</ul>
</li>
</ul>
</li>
<li>小结：基于Redis分布式锁的实现思路<ul>
<li>利用SET NX EX获取锁，并设置过期时间，保存线程标识</li>
<li>释放锁时先判断线程标识是否与自己一致，一致则删除锁<ul>
<li>特性<ul>
<li>利用SET NX满足互斥性</li>
<li>利用SET EX保证故障时依然能释放锁，避免死锁，提高安全性</li>
<li>利用Redis集群保证高可用和高并发特性</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis高级</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis高级_短信登录</title>
    <url>/2024/05/07/Redis%E9%AB%98%E7%BA%A7-%E7%9F%AD%E4%BF%A1%E7%99%BB%E5%BD%95/</url>
    <content><![CDATA[<h2 id="内容概述"><a href="#内容概述" class="headerlink" title="内容概述"></a>内容概述</h2><ul>
<li><p>短信登录</p>
</li>
<li><ul>
<li>这部分会使用Redis共享session来实现</li>
</ul>
</li>
<li><p>但其实我在之前的瑞吉外卖的项目优化部分就做过了，用Redis替换session来存储邮箱验证码</p>
</li>
<li><p>商户查询缓存</p>
</li>
<li><ul>
<li>这部分要理解缓存击穿，缓存穿透，缓存雪崩等问题，对于这些概念的理解不仅仅是停留在概念上，更是能在代码中看到对应的内容</li>
</ul>
</li>
<li><p>优惠券秒杀</p>
</li>
<li><ul>
<li>这部分我们可以学会Redis的计数器功能，结合Lua(之前一直想学Lua然后写饥荒mod)完成高性能的Redis操作，同时学会Redis分布式锁的原理，包括Redis的三种消息队列</li>
</ul>
</li>
<li><p>附近的商户</p>
</li>
<li><ul>
<li>利用Redis的GEOHash(新数据结构，前面没有应用场景就没介绍)来完成对于地理坐标的操作</li>
</ul>
</li>
<li><p>UV统计</p>
</li>
<li><ul>
<li>主要是使用Redis来完成统计功能</li>
</ul>
</li>
<li><p>用户签到</p>
</li>
<li><ul>
<li>使用Redis的BitMap数据统计功能</li>
</ul>
</li>
<li><p>好友关注</p>
</li>
<li><ul>
<li>基于Set集合的关注、取消关注，共同关注等等功能，这部分在上篇的练习题中出现过，这次我们在项目中来使用一下</li>
</ul>
</li>
<li><p>达人探店</p>
</li>
<li><ul>
<li>基于List来完成点赞列表的操作，同时基于SortedSet来完成点赞的排行榜功能</li>
</ul>
</li>
</ul>
<h2 id="短信登录"><a href="#短信登录" class="headerlink" title="短信登录"></a>短信登录</h2><h3 id="导入项目"><a href="#导入项目" class="headerlink" title="导入项目"></a>导入项目</h3><p>在实现功能之前，我们先来导入项目，让项目跑起来</p>
<h4 id="导入SQL"><a href="#导入SQL" class="headerlink" title="导入SQL"></a>导入SQL</h4><p>黑马已经在资料中提供好了SQL文件，这里简单分析一下提供的表</p>
<table>
<thead>
<tr>
<th>表</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>tb_user</td>
<td>用户表</td>
</tr>
<tr>
<td>tb_user_info</td>
<td>用户详情表</td>
</tr>
<tr>
<td>tb_shop</td>
<td>商户信息表</td>
</tr>
<tr>
<td>tb_shop_type</td>
<td>商户类型表</td>
</tr>
<tr>
<td>tb_blog</td>
<td>用户日记表（达人探店日记)</td>
</tr>
<tr>
<td>tb_follow</td>
<td>用户关注表</td>
</tr>
<tr>
<td>tb_voucher</td>
<td>优惠券表</td>
</tr>
<tr>
<td>tb_voucher_order</td>
<td>优惠券的订单表</td>
</tr>
</tbody></table>
<h4 id="有关当前模型"><a href="#有关当前模型" class="headerlink" title="有关当前模型"></a>有关当前模型</h4><ul>
<li>该项目采用的是前后端分离开发模式</li>
<li>手机或者app端发起请求，请求我们的Nginx服务器，Nginx基于七层模型走的事HTTP协议，可以实现基于Lua直接绕开Tomcat访问Redis，也可以作为静态资源服务器，轻松扛下上万并发， 负载均衡到下游Tomcat服务器，打散流量，我们都知道一台4核8G的Tomcat，在优化和处理简单业务的加持下，大不了就处理1000左右的并发， 经过Nginx的负载均衡分流后，利用集群支撑起整个项目，同时Nginx在部署了前端项目后，更是可以做到动静分离，进一步降低Tomcat服务的压力，这些功能都得靠Nginx起作用，所以Nginx是整个项目中重要的一环。</li>
<li>在Tomcat支撑起并发流量后，我们如果让Tomcat直接去访问Mysql，根据经验Mysql企业级服务器只要上点并发，一般是16或32 核心cpu，32 或64G内存，像企业级mysql加上固态硬盘能够支撑的并发，大概就是4000起~7000左右，上万并发， 瞬间就会让Mysql服务器的cpu，硬盘全部打满，容易崩溃，所以我们在高并发场景下，会选择使用mysql集群，同时为了进一步降低Mysql的压力，同时增加访问的性能，我们也会加入Redis，同时使用Redis集群使得Redis对外提供更好的服务。</li>
</ul>
<p><a href="https://pic1.imgdb.cn/item/6353709216f2c2beb134e44b.jpg"><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/35551100/1714981306299-1983f3bc-898f-467d-a80e-5078f79d2286.jpeg" alt="img"></a></p>
<h4 id="导入后端项目"><a href="#导入后端项目" class="headerlink" title="导入后端项目"></a>导入后端项目</h4><ul>
<li>黑马已经提供好了后端项目源码压缩包，我们将其解压之后，放到自己的workspace里</li>
<li>然后修改MySQL和Reids的连接要素为自己的，随后启动项目</li>
<li>访问<a href="http://localhost:8081/shop-type/list">http://localhost:8081/shop-type/list</a> ，如果可以看到JSON数据，则说明导入成功</li>
</ul>
<h4 id="导入前端工程"><a href="#导入前端工程" class="headerlink" title="导入前端工程"></a>导入前端工程</h4><ul>
<li>黑马已经提供好了前端项目源码压缩包，我们将其解压之后，放到自己的workSpace里</li>
<li>然后在nginx所在目录打开一个cmd窗口，输入命令，即可启动项目</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start nginx.exe </span><br></pre></td></tr></table></figure>

<ul>
<li>访问<a href="http://localhost:8080/">http://localhost:8080/</a> ，打开开发者模式，可以看到页面<br><a href="https://pic1.imgdb.cn/item/6353775b16f2c2beb140da1d.jpg"><img src="https://cdn.nlark.com/yuque/0/2024/jpeg/35551100/1714981306437-a09bec86-598d-4cfd-8aa0-b5a6abdc0774.jpeg" alt="img"></a></li>
</ul>
<h3 id="基于Session实现登录流程"><a href="#基于Session实现登录流程" class="headerlink" title="基于Session实现登录流程"></a>基于Session实现登录流程</h3><ol>
<li>发送验证码<br>用户在提交手机号后，会校验手机号是否合法，如果不合法，则要求用户重新输入手机号<br>如果手机号合法，后台此时生成对应的验证码，同时将验证码进行保存，然后再通过短信的方式将验证码发送给用户</li>
<li>短信验证码登录、注册<br>用户将验证码和手机号进行输入，后台从session中拿到当前验证码，然后和用户输入的验证码进行校验，如果不一致，则无法通过校验，如果一致，则后台根据手机号查询用户，如果用户不存在，则为用户创建账号信息，保存到数据库，无论是否存在，都会将用户信息保存到session中，方便后续获得当前登录信息</li>
<li>校验登录状态<br>用户在请求的时候，会从cookie中携带JsessionId到后台，后台通过JsessionId从session中拿到用户信息，如果没有session信息，则进行拦截，如果有session信息，则将用户信息保存到threadLocal中，并放行</li>
</ol>
<h3 id="实现发送短信验证码功能"><a href="#实现发送短信验证码功能" class="headerlink" title="实现发送短信验证码功能"></a>实现发送短信验证码功能</h3><ul>
<li>输入手机号，点击发送验证码按钮，查看发送的请求</li>
</ul>
<p>请求网址: <a href="http://localhost:8080/api/user/code?phone=15832165478">http://localhost:8080/api/user/code?phone=15832165478</a><br>请求方法: POST</p>
<ul>
<li>看样子是调用UserController中的code方法，携带参数是phone，看黑马提供的源码也证实了我的猜想</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">   <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 发送手机验证码</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;code&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(<span class="meta">@RequestParam(&quot;phone&quot;)</span> String phone, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">// TODO 发送短信验证码并保存验证码</span></span><br><span class="line">    <span class="keyword">return</span> Result.fail(<span class="string">&quot;功能未完成&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>但是黑马这里并不会真的使用短信服务发送验证码，只是随机生成了一个验证码，那我这里为了后期项目能真的部署上线，还是打算用邮箱验证</li>
<li>由于黑马这里貌似没有设置前端的手机号正则判断，所以我们只需要去数据库中修改phone的字段类型，将varchar(11)改为varchar(100)</li>
<li>导入邮箱验证需要的maven坐标</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.activation/activation --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.activation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activation<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.mail/mail --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.mail<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.7<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.apache.commons/commons-email --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-email<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>然后编写一个工具类，用于发送邮件验证码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.mail.Authenticator;</span><br><span class="line"><span class="keyword">import</span> javax.mail.MessagingException;</span><br><span class="line"><span class="keyword">import</span> javax.mail.PasswordAuthentication;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Session;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Transport;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.InternetAddress;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage.RecipientType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailUtils</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">        <span class="comment">//可以在这里直接测试方法，填自己的邮箱即可</span></span><br><span class="line">        sendTestMail(<span class="string">&quot;1586385296@qq.com&quot;</span>, <span class="keyword">new</span> <span class="title class_">MailUtils</span>().achieveCode());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">sendTestMail</span><span class="params">(String email, String code)</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">        <span class="comment">// 创建Properties 类用于记录邮箱的一些属性</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">props</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        <span class="comment">// 表示SMTP发送邮件，必须进行身份验证</span></span><br><span class="line">        props.put(<span class="string">&quot;mail.smtp.auth&quot;</span>, <span class="string">&quot;true&quot;</span>);</span><br><span class="line">        <span class="comment">//此处填写SMTP服务器</span></span><br><span class="line">        props.put(<span class="string">&quot;mail.smtp.host&quot;</span>, <span class="string">&quot;smtp.qq.com&quot;</span>);</span><br><span class="line">        <span class="comment">//端口号，QQ邮箱端口587</span></span><br><span class="line">        props.put(<span class="string">&quot;mail.smtp.port&quot;</span>, <span class="string">&quot;587&quot;</span>);</span><br><span class="line">        <span class="comment">// 此处填写，写信人的账号</span></span><br><span class="line">        props.put(<span class="string">&quot;mail.user&quot;</span>, <span class="string">&quot;1586385296@qq.com&quot;</span>);</span><br><span class="line">        <span class="comment">// 此处填写16位STMP口令</span></span><br><span class="line">        props.put(<span class="string">&quot;mail.password&quot;</span>, <span class="string">&quot;tXXXXXXXXXfgjb&quot;</span>);</span><br><span class="line">        <span class="comment">// 构建授权信息，用于进行SMTP进行身份验证</span></span><br><span class="line">        <span class="type">Authenticator</span> <span class="variable">authenticator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Authenticator</span>() &#123;</span><br><span class="line">            <span class="keyword">protected</span> PasswordAuthentication <span class="title function_">getPasswordAuthentication</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="comment">// 用户名、密码</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">userName</span> <span class="operator">=</span> props.getProperty(<span class="string">&quot;mail.user&quot;</span>);</span><br><span class="line">                <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> props.getProperty(<span class="string">&quot;mail.password&quot;</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PasswordAuthentication</span>(userName, password);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// 使用环境属性和授权信息，创建邮件会话</span></span><br><span class="line">        <span class="type">Session</span> <span class="variable">mailSession</span> <span class="operator">=</span> Session.getInstance(props, authenticator);</span><br><span class="line">        <span class="comment">// 创建邮件消息</span></span><br><span class="line">        <span class="type">MimeMessage</span> <span class="variable">message</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessage</span>(mailSession);</span><br><span class="line">        <span class="comment">// 设置发件人</span></span><br><span class="line">        <span class="type">InternetAddress</span> <span class="variable">form</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InternetAddress</span>(props.getProperty(<span class="string">&quot;mail.user&quot;</span>));</span><br><span class="line">        message.setFrom(form);</span><br><span class="line">        <span class="comment">// 设置收件人的邮箱</span></span><br><span class="line">        <span class="type">InternetAddress</span> <span class="variable">to</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InternetAddress</span>(email);</span><br><span class="line">        message.setRecipient(RecipientType.TO, to);</span><br><span class="line">        <span class="comment">// 设置邮件标题</span></span><br><span class="line">        message.setSubject(<span class="string">&quot;Kyle&#x27;s Blog 邮件测试&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置邮件的内容体</span></span><br><span class="line">        message.setContent(<span class="string">&quot;尊敬的用户:你好!\n注册验证码为:&quot;</span> + code + <span class="string">&quot;(有效期为一分钟,请勿告知他人)&quot;</span>, <span class="string">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class="line">        <span class="comment">// 最后当然就是发送邮件啦</span></span><br><span class="line">        Transport.send(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">achieveCode</span><span class="params">()</span> &#123;  <span class="comment">//由于数字 1 、 0 和字母 O 、l 有时分不清楚，所以，没有数字 1 、 0</span></span><br><span class="line">        String[] beforeShuffle = <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>, <span class="string">&quot;4&quot;</span>, <span class="string">&quot;5&quot;</span>, <span class="string">&quot;6&quot;</span>, <span class="string">&quot;7&quot;</span>, <span class="string">&quot;8&quot;</span>, <span class="string">&quot;9&quot;</span>, <span class="string">&quot;A&quot;</span>, <span class="string">&quot;B&quot;</span>, <span class="string">&quot;C&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;E&quot;</span>, <span class="string">&quot;F&quot;</span>,<span class="string">&quot;G&quot;</span>, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;I&quot;</span>, <span class="string">&quot;J&quot;</span>, <span class="string">&quot;K&quot;</span>, <span class="string">&quot;L&quot;</span>, <span class="string">&quot;M&quot;</span>, <span class="string">&quot;N&quot;</span>, <span class="string">&quot;O&quot;</span>, <span class="string">&quot;P&quot;</span>, <span class="string">&quot;Q&quot;</span>, <span class="string">&quot;R&quot;</span>, <span class="string">&quot;S&quot;</span>, <span class="string">&quot;T&quot;</span>, <span class="string">&quot;U&quot;</span>, <span class="string">&quot;V&quot;</span>, <span class="string">&quot;W&quot;</span>, <span class="string">&quot;X&quot;</span>, <span class="string">&quot;Y&quot;</span>, <span class="string">&quot;Z&quot;</span>, <span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>, <span class="string">&quot;c&quot;</span>, <span class="string">&quot;d&quot;</span>, <span class="string">&quot;e&quot;</span>, <span class="string">&quot;f&quot;</span>, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;h&quot;</span>, <span class="string">&quot;i&quot;</span>, <span class="string">&quot;j&quot;</span>, <span class="string">&quot;k&quot;</span>, <span class="string">&quot;l&quot;</span>, <span class="string">&quot;m&quot;</span>, <span class="string">&quot;n&quot;</span>, <span class="string">&quot;o&quot;</span>, <span class="string">&quot;p&quot;</span>, <span class="string">&quot;q&quot;</span>, <span class="string">&quot;r&quot;</span>, <span class="string">&quot;s&quot;</span>, <span class="string">&quot;t&quot;</span>, <span class="string">&quot;u&quot;</span>, <span class="string">&quot;v&quot;</span>,<span class="string">&quot;w&quot;</span>, <span class="string">&quot;x&quot;</span>, <span class="string">&quot;y&quot;</span>, <span class="string">&quot;z&quot;</span>&#125;;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(beforeShuffle);<span class="comment">//将数组转换为集合</span></span><br><span class="line">        Collections.shuffle(list);  <span class="comment">//打乱集合顺序</span></span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            sb.append(s); <span class="comment">//将集合转化为字符串</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.substring(<span class="number">3</span>, <span class="number">8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>修改sendCode方法，逻辑如下</p>
</li>
<li><ul>
<li>验证手机号&#x2F;邮箱格式</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>不正确则返回错误信息</li>
</ul>
</li>
</ul>
</li>
<li><p>正确则发送验证码</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 发送手机验证码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/code&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">sendCode</span><span class="params">(<span class="meta">@RequestParam(&quot;phone&quot;)</span> String phone, HttpSession session)</span> <span class="keyword">throws</span> MessagingException &#123;</span><br><span class="line">    <span class="comment">// TODO 发送短信验证码并保存验证码</span></span><br><span class="line">    <span class="keyword">if</span> (RegexUtils.isEmailInvalid(phone)) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;邮箱格式不正确&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> MailUtils.achieveCode();</span><br><span class="line">    session.setAttribute(phone, code);</span><br><span class="line">    log.info(<span class="string">&quot;发送登录验证码：&#123;&#125;&quot;</span>, code);</span><br><span class="line">    MailUtils.sendTestMail(phone, code);</span><br><span class="line">    <span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>然后输入邮箱，发送验证码，看看能否接收到验证码</li>
<li>测试没有问题之后，我们继续来编写登录功能，点击登录按钮，查看发送的请求</li>
</ul>
<p>请求网址: <a href="http://localhost:8080/api/user/login">http://localhost:8080/api/user/login</a><br>请求方法: POST</p>
<ul>
<li>看样子是UserController中的login方法，携带的参数也就是我们的邮箱和验证码</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span>phone<span class="punctuation">:</span> <span class="string">&quot;1586385296@qq.com&quot;</span><span class="punctuation">,</span> code<span class="punctuation">:</span> <span class="string">&quot;iMPKc&quot;</span><span class="punctuation">&#125;</span> </span><br></pre></td></tr></table></figure>

<ul>
<li>黑马提供的代码如下，看样子是把邮箱和验证码封装到了LoginFormDto中</li>
<li>login</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登录功能</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> loginForm 登录参数，包含手机号、验证码；或者手机号、密码</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> LoginFormDTO loginForm, HttpSession session)</span>&#123;</span><br><span class="line">    <span class="comment">// TODO 实现登录功能</span></span><br><span class="line">    <span class="keyword">return</span> Result.fail(<span class="string">&quot;功能未完成&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>LoginFormDTO</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginFormDTO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String code;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>修改login方法，逻辑如下</p>
</li>
<li><ul>
<li>校验手机号&#x2F;邮箱</li>
</ul>
</li>
<li><ul>
<li><ul>
<li>不正确则返回错误信息</li>
</ul>
</li>
</ul>
</li>
<li><p>正确则继续校验验证码</p>
</li>
<li><ul>
<li><ul>
<li><ul>
<li>不一致则报错</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>一致则先根据手机号&#x2F;邮箱查询用户</p>
</li>
<li><ul>
<li><ul>
<li><ul>
<li><ul>
<li>用户不存在则创建</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>存在则继续执行程序</p>
</li>
<li><ul>
<li><ul>
<li><ul>
<li>保存用户信息到session中</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><p>login</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 登录功能</span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> loginForm 登录参数，包含手机号、验证码；或者手机号、密码</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line">    <span class="comment">// TODO 实现登录功能</span></span><br><span class="line">    <span class="comment">//获取登录账号</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line">    <span class="comment">//获取登录验证码</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> loginForm.getCode();</span><br><span class="line">    <span class="comment">//获取session中的验证码</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">cacheCode</span> <span class="operator">=</span> session.getAttribute(phone);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 校验邮箱</span></span><br><span class="line">    <span class="keyword">if</span> (RegexUtils.isEmailInvalid(phone)) &#123;</span><br><span class="line">        <span class="comment">//2. 不符合格式则报错</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;邮箱格式不正确！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3. 校验验证码</span></span><br><span class="line">    log.info(<span class="string">&quot;code:&#123;&#125;,cacheCode&#123;&#125;&quot;</span>, code, cacheCode);</span><br><span class="line">    <span class="keyword">if</span> (code == <span class="literal">null</span> || !cacheCode.toString().equals(code)) &#123;</span><br><span class="line">        <span class="comment">//4. 不一致则报错</span></span><br><span class="line">        <span class="keyword">return</span> Result.fail(<span class="string">&quot;验证码不一致！！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5. 根据账号查询用户是否存在</span></span><br><span class="line">    LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">    queryWrapper.eq(User::getPhone, phone);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getOne(queryWrapper);</span><br><span class="line">    <span class="comment">//6. 如果不存在则创建</span></span><br><span class="line">    <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// 创建的逻辑封装成了一个方法</span></span><br><span class="line">        user = createUserWithPhone(phone);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//7. 保存用户信息到session中</span></span><br><span class="line">    session.setAttribute(<span class="string">&quot;user&quot;</span>, user);</span><br><span class="line"><span class="keyword">return</span> Result.ok();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>createUserWithPhone</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> User <span class="title function_">createUserWithPhone</span><span class="params">(String phone)</span> &#123;</span><br><span class="line">    <span class="comment">//创建用户</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    <span class="comment">//设置手机号</span></span><br><span class="line">    user.setPhone(phone);</span><br><span class="line">    <span class="comment">//设置昵称(默认名)，一个固定前缀+随机字符串</span></span><br><span class="line">    user.setNickName(<span class="string">&quot;user_&quot;</span> + RandomUtil.randomString(<span class="number">8</span>));</span><br><span class="line">    <span class="comment">//保存到数据库</span></span><br><span class="line">    userService.save(user);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现登录拦截功能"><a href="#实现登录拦截功能" class="headerlink" title="实现登录拦截功能"></a>实现登录拦截功能</h3><ul>
<li>这部分需要用到拦截器的知识，我在前面的SSM整合篇做过详细介绍</li>
</ul>
<p><a href="https://cyborg2077.github.io/2022/09/10/SSMIntegration/">SSM整合https://cyborg2077.github.io/2022/09/10/SSMIntegration/</a></p>
<ul>
<li>创建一个LoginInterceptor类，实现HandlerInterceptor接口，重写其中的两个方法，前置拦截器和完成处理方法，前置拦截器主要用于我们登陆之前的权限校验，完成处理方法是用于处理登录后的信息，避免内存泄露</li>
<li>LoginInterceptor</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1. 获取session</span></span><br><span class="line">        <span class="type">HttpSession</span> <span class="variable">session</span> <span class="operator">=</span> request.getSession();</span><br><span class="line">        <span class="comment">//2. 获取session中的用户信息</span></span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> (User) session.getAttribute(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">        <span class="comment">//3. 判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//4. 不存在，则拦截</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5. 存在，保存用户信息到ThreadLocal，UserHolder是提供好了的工具类</span></span><br><span class="line">        UserHolder.saveUser(user);</span><br><span class="line">        <span class="comment">//6. 放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>UserHolder</li>
</ul>
<p>这是黑马已经提供好了的一个工具类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserHolder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;User&gt; tl = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(User user)</span>&#123;</span><br><span class="line">        tl.set(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> User <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tl.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeUser</span><span class="params">()</span>&#123;</span><br><span class="line">        tl.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>MvcConfig</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">                .excludePathPatterns(</span><br><span class="line">                        <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/blog/hot&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/shop/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/shop-type/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/upload/**&quot;</span>,</span><br><span class="line">                        <span class="string">&quot;/voucher/**&quot;</span></span><br><span class="line">                );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>顺便再写一下me方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/me&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Result <span class="title function_">me</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// TODO 获取当前登录的用户并返回</span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> UserHolder.getUser();</span><br><span class="line">    <span class="keyword">return</span> Result.ok(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="隐藏用户敏感信息"><a href="#隐藏用户敏感信息" class="headerlink" title="隐藏用户敏感信息"></a>隐藏用户敏感信息</h3><ul>
<li>我们通过浏览器观察到此时用户的全部信息都在，这样极为不靠谱，所以我们应当在返回用户信息之前，将用户的敏感信息进行隐藏，采用的核心思路就是书写一个UserDto对象，这个UserDto对象就没有敏感信息了，我们在返回前，将有用户敏感信息的User对象转化成没有敏感信息的UserDto对象，那么就能够避免这个尴尬的问题了</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1010</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;phone&quot;</span><span class="punctuation">:</span><span class="string">&quot;1586385296@qq.com&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nickName&quot;</span><span class="punctuation">:</span><span class="string">&quot;user_i1b3ir09&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;createTime&quot;</span><span class="punctuation">:</span><span class="string">&quot;2022-10-22T14:20:33&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;updateTime&quot;</span><span class="punctuation">:</span><span class="string">&quot;2022-10-22T14:20:33&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>UserDto类如下，将User对象中的属性拷贝给UserDto，就可以避免暴露用户的隐藏信息</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDTO</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String nickName;</span><br><span class="line">    <span class="keyword">private</span> String icon;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>修改UserHolder，将其User类型都换为UserDto</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserHolder</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;UserDTO&gt; tl = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">saveUser</span><span class="params">(UserDTO user)</span>&#123;</span><br><span class="line">        tl.set(user);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> UserDTO <span class="title function_">getUser</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> tl.get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">removeUser</span><span class="params">()</span>&#123;</span><br><span class="line">        tl.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>修改login方法_DIFF</li>
</ul>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">@PostMapping(&quot;/login&quot;)</span><br><span class="line">    public Result login(@RequestBody LoginFormDTO loginForm, HttpSession session) &#123;</span><br><span class="line">        // TODO 实现登录功能</span><br><span class="line">        //获取登录账号</span><br><span class="line">        String phone = loginForm.getPhone();</span><br><span class="line">        //获取登录验证码</span><br><span class="line">        String code = loginForm.getCode();</span><br><span class="line">        //获取session中的验证码</span><br><span class="line">        Object cacheCode = session.getAttribute(phone);</span><br><span class="line"></span><br><span class="line">        //1. 校验邮箱</span><br><span class="line">        if (RegexUtils.isEmailInvalid(phone)) &#123;</span><br><span class="line">            //2. 不符合格式则报错</span><br><span class="line">            return Result.fail(&quot;邮箱格式不正确！！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //3. 校验验证码</span><br><span class="line">        log.info(&quot;code:&#123;&#125;,cacheCode&#123;&#125;&quot;, code, cacheCode);</span><br><span class="line">        if (code == null || !cacheCode.toString().equals(code)) &#123;</span><br><span class="line">            //4. 不一致则报错</span><br><span class="line">            return Result.fail(&quot;验证码不一致！！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //5. 根据账号查询用户是否存在</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getPhone, phone);</span><br><span class="line">        User user = userService.getOne(queryWrapper);</span><br><span class="line">        //6. 如果不存在则创建</span><br><span class="line">        if (user == null) &#123;</span><br><span class="line">            user = createUserWithPhone(phone);</span><br><span class="line">        &#125;</span><br><span class="line">        //7. 保存用户信息到session中</span><br><span class="line"><span class="deletion">-       session.setAttribute(&quot;user&quot;, user);</span></span><br><span class="line"><span class="addition">+       UserDTO userDTO = BeanUtil.copyProperties(user, UserDTO.class);</span></span><br><span class="line"><span class="addition">+       session.setAttribute(&quot;user&quot;, userDTO);</span></span><br><span class="line">        return Result.ok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>修改拦截器</li>
</ul>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">@Override</span><br><span class="line">    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception &#123;</span><br><span class="line">        //1. 获取session</span><br><span class="line">        HttpSession session = request.getSession();</span><br><span class="line">        //2. 获取session中的用户信息</span><br><span class="line"><span class="deletion">-       User user = (User) session.getAttribute(&quot;user&quot;);</span></span><br><span class="line"><span class="addition">+       UserDTO user = (UserDTO) session.getAttribute(&quot;user&quot;);</span></span><br><span class="line">        //3. 判断用户是否存在</span><br><span class="line">        if (user == null) &#123;</span><br><span class="line">            //4. 不存在，则拦截</span><br><span class="line">            response.setStatus(401);</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">        //5. 存在，保存用户信息到ThreadLocal，UserHolder是提供好了的工具类</span><br><span class="line">        UserHolder.saveUser(user);</span><br><span class="line">        //6. 放行</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>重启服务器，登录后查看此时的用户信息，敏感信息已经不存在了</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;success&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="number">1016</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nickName&quot;</span><span class="punctuation">:</span><span class="string">&quot;user_zkhf7cfv&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;icon&quot;</span><span class="punctuation">:</span><span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="session共享问题"><a href="#session共享问题" class="headerlink" title="session共享问题"></a>session共享问题</h3><ul>
<li>每个tomcat中都有一份属于自己的session,假设用户第一次访问第一台tomcat，并且把自己的信息存放到第一台服务器的session中，但是第二次这个用户访问到了第二台tomcat，那么在第二台服务器上，肯定没有第一台服务器存放的session，所以此时 整个登录拦截功能就会出现问题，我们能如何解决这个问题呢？早期的方案是session拷贝，就是说虽然每个tomcat上都有不同的session，但是每当任意一台服务器的session修改时，都会同步给其他的Tomcat服务器的session，这样的话，就可以实现session的共享了</li>
<li>但是这种方案具有两个大问题</li>
</ul>
<ol>
<li><ol>
<li>每台服务器中都有完整的一份session数据，服务器压力过大。</li>
</ol>
</li>
<li>session拷贝数据时，可能会出现延迟</li>
</ol>
<ul>
<li>所以我们后面都是基于Redis来完成，我们把session换成Redis，Redis数据本身就是共享的，就可以避免session共享的问题了</li>
</ul>
<h3 id="Redis替代session的业务流程"><a href="#Redis替代session的业务流程" class="headerlink" title="Redis替代session的业务流程"></a>Redis替代session的业务流程</h3><h4 id="设计key结构"><a href="#设计key结构" class="headerlink" title="设计key结构"></a>设计key结构</h4><ul>
<li><p>首先我们来思考一下该用什么数据结构来存储数据</p>
</li>
<li><p>由于存入的数据比较简单，我们可以使用String或者Hash</p>
</li>
<li><ul>
<li>如果使用String，以JSON字符串来保存数据，会额外占用部分空间</li>
</ul>
</li>
<li><p>如果使用Hash，则它的value中只会存储数据本身</p>
</li>
<li><p>如果不是特别在意内存，直接使用String就好了</p>
</li>
</ul>
<h4 id="设计key的具体细节"><a href="#设计key的具体细节" class="headerlink" title="设计key的具体细节"></a>设计key的具体细节</h4><ul>
<li>我们这里就采用的是简单的K-V键值对方式</li>
<li>但是对于key的处理，不能像session一样用phone或code来当做key</li>
<li>因为Redis的key是共享的，code可能会重复，phone这种敏感字段也不适合存储到Redis中</li>
<li>在设计key的时候，我们需要满足两点</li>
</ul>
<ol>
<li><ol>
<li>key要有唯一性</li>
</ol>
</li>
<li>key要方便携带</li>
</ol>
<ul>
<li>所以我们在后台随机生成一个token，然后让前端带着这个token就能完成我们的业务逻辑了</li>
</ul>
<h4 id="整体访问流程"><a href="#整体访问流程" class="headerlink" title="整体访问流程"></a>整体访问流程</h4><ul>
<li><p>当注册完成后，用户去登录，然后校验用户提交的手机号&#x2F;邮箱和验证码是否一致</p>
</li>
<li><ul>
<li>如果一致，则根据手机号查询用户信息，不存在则新建，最后将用户数据保存到Redis，并生成一个token作为Redis的key</li>
</ul>
</li>
<li><p>当我们校验用户是否登录时，回去携带着token进行访问，从Redis中获取token对应的value，判断是否存在这个数据</p>
</li>
<li><ul>
<li>如果不存在，则拦截</li>
</ul>
</li>
<li><p>如果存在，则将其用户信息(userDto)保存到threadLocal中，并放行</p>
</li>
</ul>
<h3 id="基于Redis实现短信登录"><a href="#基于Redis实现短信登录" class="headerlink" title="基于Redis实现短信登录"></a>基于Redis实现短信登录</h3><ul>
<li>由于前面已经分析过业务逻辑了，所以这里我们直接开始写代码，在此之前我们要在UserController中注入StringRedisTemplate</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> StringRedisTemplate stringRedisTemplate; </span><br></pre></td></tr></table></figure>

<ul>
<li>修改sendCode方法</li>
<li>修改sendCode方法</li>
</ul>
<p>这里的key使用用login:code:email的形式，并设置有效期2分钟，我们也可以定义一个常量类来替换这里的login:code:和2，让代码显得更专业一点</p>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">@PostMapping(&quot;/code&quot;)</span><br><span class="line">public Result sendCode(@RequestParam(&quot;phone&quot;) String phone, HttpSession session) throws MessagingException &#123;</span><br><span class="line">    // TODO 发送短信验证码并保存验证码</span><br><span class="line">    if (RegexUtils.isEmailInvalid(phone)) &#123;</span><br><span class="line">        return Result.fail(&quot;邮箱格式不正确&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    String code = MailUtils.achieveCode();</span><br><span class="line"><span class="deletion">-   session.setAttribute(phone, code);</span></span><br><span class="line"><span class="deletion">-   stringRedisTemplate.opsForValue().set(&quot;login:code:&quot; + phone, code, 2, TimeUnit.MINUTES);</span></span><br><span class="line"><span class="addition">+   stringRedisTemplate.opsForValue().set(LOGIN_CODE_KEY + phone, code, LOGIN_CODE_TTL, TimeUnit.MINUTES);</span></span><br><span class="line">    log.info(&quot;发送登录验证码：&#123;&#125;&quot;, code);</span><br><span class="line">//        MailUtils.sendTestMail(phone, code);</span><br><span class="line">    return Result.ok();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>RedisConstants</li>
</ul>
<p>定义的常量类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConstants</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOGIN_CODE_KEY</span> <span class="operator">=</span> <span class="string">&quot;login:code:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">LOGIN_CODE_TTL</span> <span class="operator">=</span> <span class="number">2L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOGIN_USER_KEY</span> <span class="operator">=</span> <span class="string">&quot;login:token:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">LOGIN_USER_TTL</span> <span class="operator">=</span> <span class="number">36000L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">CACHE_NULL_TTL</span> <span class="operator">=</span> <span class="number">2L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">CACHE_SHOP_TTL</span> <span class="operator">=</span> <span class="number">30L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">CACHE_SHOP_KEY</span> <span class="operator">=</span> <span class="string">&quot;cache:shop:&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">LOCK_SHOP_KEY</span> <span class="operator">=</span> <span class="string">&quot;lock:shop:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Long</span> <span class="variable">LOCK_SHOP_TTL</span> <span class="operator">=</span> <span class="number">10L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SECKILL_STOCK_KEY</span> <span class="operator">=</span> <span class="string">&quot;seckill:stock:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">BLOG_LIKED_KEY</span> <span class="operator">=</span> <span class="string">&quot;blog:liked:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">FEED_KEY</span> <span class="operator">=</span> <span class="string">&quot;feed:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SHOP_GEO_KEY</span> <span class="operator">=</span> <span class="string">&quot;shop:geo:&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">USER_SIGN_KEY</span> <span class="operator">=</span> <span class="string">&quot;sign:&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>修改login方法</li>
</ul>
<figure class="highlight diff"><table><tr><td class="code"><pre><span class="line">@PostMapping(&quot;/login&quot;)</span><br><span class="line">    public Result login(@RequestBody LoginFormDTO loginForm, HttpSession session) &#123;</span><br><span class="line">        // TODO 实现登录功能</span><br><span class="line">        //获取登录账号</span><br><span class="line">        String phone = loginForm.getPhone();</span><br><span class="line">        //获取登录验证码</span><br><span class="line">        String code = loginForm.getCode();</span><br><span class="line"><span class="deletion">-       //获取session中的验证码</span></span><br><span class="line"><span class="deletion">-       Object cacheCode = session.getAttribute(phone);</span></span><br><span class="line"><span class="addition">+       //获取redis中的验证码</span></span><br><span class="line"><span class="addition">+       String sessionCode = stringRedisTemplate.opsForValue().get(LOGIN_CODE_KEY + userCode);</span></span><br><span class="line">        //1. 校验邮箱</span><br><span class="line">        if (RegexUtils.isEmailInvalid(phone)) &#123;</span><br><span class="line">            //2. 不符合格式则报错</span><br><span class="line">            return Result.fail(&quot;邮箱格式不正确！！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //3. 校验验证码</span><br><span class="line">        log.info(&quot;code:&#123;&#125;,cacheCode&#123;&#125;&quot;, code, cacheCode);</span><br><span class="line">        if (code == null || !cacheCode.toString().equals(code)) &#123;</span><br><span class="line">            //4. 不一致则报错</span><br><span class="line">            return Result.fail(&quot;验证码不一致！！&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        //5. 根据账号查询用户是否存在</span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = new LambdaQueryWrapper&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getPhone, phone);</span><br><span class="line">        User user = userService.getOne(queryWrapper);</span><br><span class="line">        //6. 如果不存在则创建</span><br><span class="line">        if (user == null) &#123;</span><br><span class="line">            user = createUserWithPhone(phone);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="deletion">-       //7. 保存用户信息到session中</span></span><br><span class="line"><span class="addition">+       //7. 保存用户信息到Redis中</span></span><br><span class="line"><span class="addition">+       //7.1 随机生成token，作为登录令牌</span></span><br><span class="line"><span class="addition">+       String token = UUID.randomUUID().toString();</span></span><br><span class="line"><span class="addition">+       //7.2 将UserDto对象转为HashMap存储</span></span><br><span class="line"><span class="addition">+       UserDTO userDTO = BeanUtil.copyProperties(user, UserDTO.class);</span></span><br><span class="line"><span class="addition">+       HashMap&lt;String, String &gt; userMap = new HashMap&lt;&gt;();</span></span><br><span class="line"><span class="addition">+       userMap.put(&quot;icon&quot;, userDTO.getIcon());</span></span><br><span class="line"><span class="addition">+       userMap.put(&quot;id&quot;, String.valueOf(userDTO.getId()));</span></span><br><span class="line"><span class="addition">+       userMap.put(&quot;nickName&quot;, userDTO.getNickName(    ));</span></span><br><span class="line"><span class="addition">+       //7.3 存储</span></span><br><span class="line"><span class="addition">+       String tokenKey = LOGIN_USER_KEY + token;</span></span><br><span class="line"><span class="addition">+       stringRedisTemplate.opsForHash().putAll(tokenKey, userMap);</span></span><br><span class="line"><span class="addition">+       //7.4 设置token有效期为30分钟</span></span><br><span class="line"><span class="addition">+       stringRedisTemplate.expire(tokenKey, 30, TimeUnit.MINUTES);</span></span><br><span class="line"><span class="addition">+       //7.5 登陆成功则删除验证码信息</span></span><br><span class="line"><span class="addition">+       stringRedisTemplate.delete(LOGIN_CODE_KEY + phone);</span></span><br><span class="line"><span class="deletion">-       session.setAttribute(&quot;user&quot;, userDTO);</span></span><br><span class="line"><span class="addition">+       //8. 返回token</span></span><br><span class="line"><span class="addition">+       return Result.ok(token);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>修改后代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@PostMapping(&quot;/login&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">login</span><span class="params">(<span class="meta">@RequestBody</span> LoginFormDTO loginForm, HttpSession session)</span> &#123;</span><br><span class="line">        <span class="comment">// TODO 实现登录功能</span></span><br><span class="line">        <span class="comment">//获取登录账号</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">phone</span> <span class="operator">=</span> loginForm.getPhone();</span><br><span class="line">        <span class="comment">//获取登录验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">code</span> <span class="operator">=</span> loginForm.getCode();</span><br><span class="line">        <span class="comment">//获取redis中的验证码</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">cacheCode</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(LOGIN_CODE_KEY + phone);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 校验邮箱</span></span><br><span class="line">        <span class="keyword">if</span> (RegexUtils.isEmailInvalid(phone)) &#123;</span><br><span class="line">            <span class="comment">//2. 不符合格式则报错</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;邮箱格式不正确！！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3. 校验验证码</span></span><br><span class="line">        log.info(<span class="string">&quot;code:&#123;&#125;,cacheCode&#123;&#125;&quot;</span>, code, cacheCode);</span><br><span class="line">        <span class="keyword">if</span> (cacheCode == <span class="literal">null</span> || !cacheCode.equals(code)) &#123;</span><br><span class="line">            <span class="comment">// 不一致，报错</span></span><br><span class="line">            <span class="keyword">return</span> Result.fail(<span class="string">&quot;验证码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5. 根据账号查询用户是否存在</span></span><br><span class="line">        LambdaQueryWrapper&lt;User&gt; queryWrapper = <span class="keyword">new</span> <span class="title class_">LambdaQueryWrapper</span>&lt;&gt;();</span><br><span class="line">        queryWrapper.eq(User::getPhone, phone);</span><br><span class="line">        <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> userService.getOne(queryWrapper);</span><br><span class="line">        <span class="comment">//6. 如果不存在则创建</span></span><br><span class="line">        <span class="keyword">if</span> (user == <span class="literal">null</span>) &#123;</span><br><span class="line">            user = createUserWithPhone(phone);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//7. 保存用户信息到session中</span></span><br><span class="line">        <span class="comment">//7. 保存用户信息到Redis中</span></span><br><span class="line">        <span class="comment">//7.1 随机生成token，作为登录令牌</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> UUID.randomUUID().toString();</span><br><span class="line">        <span class="comment">//7.2 将UserDto对象转为HashMap存储</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.copyProperties(user, UserDTO.class);</span><br><span class="line">        HashMap&lt;String, String &gt; userMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        userMap.put(<span class="string">&quot;icon&quot;</span>, userDTO.getIcon());</span><br><span class="line">        userMap.put(<span class="string">&quot;id&quot;</span>, String.valueOf(userDTO.getId()));</span><br><span class="line">        userMap.put(<span class="string">&quot;nickName&quot;</span>, userDTO.getNickName());</span><br><span class="line">        <span class="comment">//高端写法，现在我还学不来，工具类还不太了解，只能自己手动转换类型然后put了</span></span><br><span class="line"><span class="comment">//        Map&lt;String, Object&gt; userMap = BeanUtil.beanToMap(userDTO, new HashMap&lt;&gt;(),</span></span><br><span class="line"><span class="comment">//                CopyOptions.create()</span></span><br><span class="line"><span class="comment">//                        .setIgnoreNullValue(true)</span></span><br><span class="line"><span class="comment">//                        .setFieldValueEditor((fieldName, fieldValue) -&gt; fieldValue.toString()));</span></span><br><span class="line">        <span class="comment">//7.3 存储</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">tokenKey</span> <span class="operator">=</span> LOGIN_USER_KEY + token;</span><br><span class="line">        stringRedisTemplate.opsForHash().putAll(tokenKey, userMap);</span><br><span class="line">        <span class="comment">//7.4 设置token有效期为30分钟</span></span><br><span class="line">        stringRedisTemplate.expire(tokenKey, <span class="number">30</span>, TimeUnit.MINUTES);</span><br><span class="line">        <span class="comment">//7.5 登陆成功则删除验证码信息</span></span><br><span class="line">        stringRedisTemplate.delete(LOGIN_CODE_KEY + phone);</span><br><span class="line">        <span class="comment">//8. 返回token</span></span><br><span class="line">        <span class="keyword">return</span> Result.ok(token);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="解决状态登录刷新问题"><a href="#解决状态登录刷新问题" class="headerlink" title="解决状态登录刷新问题"></a>解决状态登录刷新问题</h3><h4 id="初始方案"><a href="#初始方案" class="headerlink" title="初始方案"></a>初始方案</h4><ul>
<li>我们可以通过拦截器拦截到的请求，来证明用户是否在操作，如果用户没有任何操作30分钟，则token会消失，用户需要重新登录</li>
<li>通过查看请求，我们发现我们存的token在请求头里，那么我们就在拦截器里来刷新token的存活时间</li>
</ul>
<p>authorization: 6867061d-a8d0-4e60-b92f-97f7d698a1ca</p>
<ul>
<li>修改我们的登陆拦截器LoginInterceptor类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//1. 获取请求头中的token</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">    <span class="comment">//2. 如果token是空，则未登录，拦截</span></span><br><span class="line">    <span class="keyword">if</span> (StrUtil.isBlank(token)) &#123;</span><br><span class="line">        response.setStatus(<span class="number">401</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> RedisConstants.LOGIN_USER_KEY + token;</span><br><span class="line">    <span class="comment">//3. 基于token获取Redis中的用户数据</span></span><br><span class="line">    Map&lt;Object, Object&gt; userMap = stringRedisTemplate.opsForHash().entries(key);</span><br><span class="line">    <span class="comment">//4. 判断用户是否存在，不存在，则拦截</span></span><br><span class="line">    <span class="keyword">if</span> (userMap.isEmpty()) &#123;</span><br><span class="line">        response.setStatus(<span class="number">401</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5. 将查询到的Hash数据转化为UserDto对象</span></span><br><span class="line">    <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(userMap, <span class="keyword">new</span> <span class="title class_">UserDTO</span>(), <span class="literal">false</span>);</span><br><span class="line">    <span class="comment">//6. 将用户信息保存到ThreadLocal</span></span><br><span class="line">    UserHolder.saveUser(userDTO);</span><br><span class="line">    <span class="comment">//7. 刷新tokenTTL，这里的存活时间根据需要自己设置，这里的常量值我改为了30分钟</span></span><br><span class="line">    stringRedisTemplate.expire(key, RedisConstants.LOGIN_USER_TTL, TimeUnit.MINUTES);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>在这个方案中，他确实可以使用对应路径的拦截，同时刷新登录token令牌的存活时间，但是现在这个拦截器他只是拦截需要被拦截的路径，假设当前用户访问了一些不需要拦截的路径，那么这个拦截器就不会生效，所以此时令牌刷新的动作实际上就不会执行，所以这个方案他是存在问题的</li>
</ul>
<p><a href="https://pic1.imgdb.cn/item/6353edd016f2c2beb1f967f0.jpg"><img src="https://cdn.nlark.com/yuque/0/2024/gif/35551100/1714981303909-2d2fcbec-564b-4fb4-b398-7fc28b337d68.gif" alt="img"></a><img src="https://cdn.nlark.com/yuque/0/2024/png/35551100/1714991012131-68003c67-086d-43a2-819c-ba7bb8b20b7e.png" alt="img"></p>
<h4 id="优化方案"><a href="#优化方案" class="headerlink" title="优化方案"></a>优化方案</h4><ul>
<li>既然之前的拦截器无法对不需要拦截的路径生效，那么我们可以添加一个拦截器，在第一个拦截器中拦截所有的路径，把第二个拦截器做的事情放入到第一个拦截器中，同时刷新令牌，因为第一个拦截器有了threadLocal的数据，所以此时第二个拦截器只需要判断拦截器中的user对象是否存在即可，完成整体刷新功能。</li>
</ul>
<p><a href="https://pic1.imgdb.cn/item/6353ef1416f2c2beb1fb5e48.jpg"><img src="https://cdn.nlark.com/yuque/0/2024/gif/35551100/1714981303923-8aa9de64-1b93-4b62-a5e6-eb5c4d6f8063.gif" alt="img"></a><img src="https://cdn.nlark.com/yuque/0/2024/png/35551100/1714991051205-c807e082-8417-41fb-9b95-cf21713d2460.png" alt="img"></p>
<ul>
<li>新建一个RefreshTokenInterceptor类，其业务逻辑与之前的LoginInterceptor类似，就算遇到用户未登录，也继续放行，交给LoginInterceptor处理<br>由于这个对象是我们手动在WebConfig里创建的，所以这里不能用@AutoWired自动装配，只能声明一个私有的，到了WebConfig里再自动装配</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RefreshTokenInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="comment">//这里并不是自动装配，因为RefreshTokenInterceptor是我们手动在WebConfig里new出来的</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RefreshTokenInterceptor</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1. 获取请求头中的token</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;authorization&quot;</span>);</span><br><span class="line">        <span class="comment">//2. 如果token是空，直接放行，交给LoginInterceptor处理</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(token)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> RedisConstants.LOGIN_USER_KEY + token;</span><br><span class="line">        <span class="comment">//3. 基于token获取Redis中的用户数据</span></span><br><span class="line">        Map&lt;Object, Object&gt; userMap = stringRedisTemplate.opsForHash().entries(key);</span><br><span class="line">        <span class="comment">//4. 判断用户是否存在，不存在，也放行，交给LoginInterceptor</span></span><br><span class="line">        <span class="keyword">if</span> (userMap.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5. 将查询到的Hash数据转化为UserDto对象</span></span><br><span class="line">        <span class="type">UserDTO</span> <span class="variable">userDTO</span> <span class="operator">=</span> BeanUtil.fillBeanWithMap(userMap, <span class="keyword">new</span> <span class="title class_">UserDTO</span>(), <span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//6. 将用户信息保存到ThreadLocal</span></span><br><span class="line">        UserHolder.saveUser(userDTO);</span><br><span class="line">        <span class="comment">//7. 刷新tokenTTL，这里的存活时间根据需要自己设置，这里的常量值我改为了30分钟</span></span><br><span class="line">        stringRedisTemplate.expire(key, RedisConstants.LOGIN_USER_TTL, TimeUnit.MINUTES);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>修改我们之前的LoginInterceptor类，只需要判断用户是否存在，不存在，则拦截，存在则放行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoginInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//判断用户是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (UserHolder.getUser()==<span class="literal">null</span>)&#123;</span><br><span class="line">            <span class="comment">//不存在则拦截</span></span><br><span class="line">            response.setStatus(<span class="number">401</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//存在则放行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        UserHolder.removeUser();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>修改WebConfig配置类，拦截器的执行顺序可以由order来指定，如果未设置拦截路径，则默认是拦截所有路径</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="comment">//到了这里才能自动装配</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">LoginInterceptor</span>())</span><br><span class="line">        .excludePathPatterns(</span><br><span class="line">            <span class="string">&quot;/user/code&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/user/login&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/blog/hot&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/shop/**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/shop-type/**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/upload/**&quot;</span>,</span><br><span class="line">            <span class="string">&quot;/voucher/**&quot;</span></span><br><span class="line">        ).order(<span class="number">1</span>);</span><br><span class="line">        <span class="comment">//RefreshTokenInterceptor是我们手动new出来的</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> <span class="title class_">RefreshTokenInterceptor</span>(stringRedisTemplate)).order(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li><p>那么至此，大功告成，我们重启服务器，登录，然后去Redis的图形化界面查看token的ttl，如果每次切换界面之后，ttl都会重置，那么说明我们的代码没有问题</p>
</li>
<li><ul>
<li></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis高级</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE-模板语法2</title>
    <url>/2024/09/24/VUE-%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%952/</url>
    <content><![CDATA[<h3 id="v-for基本使用"><a href="#v-for基本使用" class="headerlink" title="v-for基本使用"></a><strong><font style="color:#404040;">v-for基本使用</font></strong></h3><ul>
<li><font style="color:#404040;">v-for的基本格式是 </font><font style="color:red;">“item in 数组”</font><font style="color:#404040;">：</font><ul>
<li><font style="color:#404040;">数组通常是来自</font><font style="color:red;">data或者prop</font><font style="color:#404040;">，也可以是其他方式；</font></li>
<li><font style="color:#404040;">item是我们给每项元素起的一个</font><font style="color:red;">别名</font><font style="color:#404040;">，这个别名可以自定来定义；</font></li>
</ul>
</li>
<li><font style="color:#404040;">我们知道，在遍历一个数组的时候会经常需要拿到</font><font style="color:red;">数组的索引</font><font style="color:#404040;">：</font><ul>
<li><font style="color:#404040;">如果我们需要索引，可以使用格式： </font><font style="color:red;">“(item, index) in 数组”</font><font style="color:#404040;">；</font></li>
<li><font style="color:#404040;">注意上面的顺序：数组元素项item是在前面的，索引项index是在后面的；</font></li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-top</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.item</span> <span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.电影列表进行渲染 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>电影列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;movie in movies&quot;</span>&gt;</span>&#123;&#123; movie &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.电影列表同时有索引 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(movie, index) in movies&quot;</span>&gt;</span>&#123;&#123;index + 1&#125;&#125; - &#123;&#123; movie &#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.遍历数组复杂数据 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>商品列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;item in products&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h3</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span>&gt;</span>商品: &#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span>&gt;</span>价格: &#123;&#123;item.price&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>秒杀: &#123;&#123;item.desc&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.创建app</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// data: option api</span></span></span><br><span class="line"><span class="language-javascript">      <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 1.movies</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">movies</span>: [<span class="string">&quot;星际穿越&quot;</span>, <span class="string">&quot;少年派&quot;</span>, <span class="string">&quot;大话西游&quot;</span>, <span class="string">&quot;哆啦A梦&quot;</span>],</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="comment">// 2.数组: 存放的是对象</span></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">products</span>: [</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">id</span>: <span class="number">110</span>, <span class="attr">name</span>: <span class="string">&quot;Macbook&quot;</span>, <span class="attr">price</span>: <span class="number">9.9</span>, <span class="attr">desc</span>: <span class="string">&quot;9.9秒杀, 快来抢购!&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">id</span>: <span class="number">111</span>, <span class="attr">name</span>: <span class="string">&quot;iPhone&quot;</span>, <span class="attr">price</span>: <span class="number">8.8</span>, <span class="attr">desc</span>: <span class="string">&quot;9.9秒杀, 快来抢购!&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">            &#123; <span class="attr">id</span>: <span class="number">112</span>, <span class="attr">name</span>: <span class="string">&quot;小米电脑&quot;</span>, <span class="attr">price</span>: <span class="number">9.9</span>, <span class="attr">desc</span>: <span class="string">&quot;9.9秒杀, 快来抢购!&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript">          ]</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.挂载app</span></span></span><br><span class="line"><span class="language-javascript">    app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-for支持的类型"><a href="#v-for支持的类型" class="headerlink" title="v-for支持的类型"></a><strong><font style="color:#404040;">v-for支持的类型</font></strong></h3><ul>
<li><font style="color:#404040;">v-for也支持遍历对象，并且支持有一二三个参数：</font><ul>
<li><font style="color:#404040;">一个参数： “value in object”;</font></li>
<li><font style="color:#404040;">二个参数： “(value, key) in object”;</font></li>
<li><font style="color:#404040;">三个参数： “(value, key, index) in object”;</font></li>
</ul>
</li>
<li><font style="color:#404040;">v-for同时也支持数字的遍历：</font><ul>
<li><font style="color:#404040;">每一个item都是一个数字；</font></li>
</ul>
</li>
<li><font style="color:#404040;">v-for也可以遍历其他可迭代对象(Iterable)</font></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.遍历数组 --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.遍历对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;(value, key, index) in info&quot;</span>&gt;</span>&#123;&#123;value&#125;&#125;-&#123;&#123;key&#125;&#125;-&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.遍历字符串(iterable) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in message&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4.遍历数字 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">&quot;item in 100&quot;</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.创建app</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// data: option api</span></span></span><br><span class="line"><span class="language-javascript">      data () &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">message</span>: <span class="string">&quot;Hello Vue&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">movies</span>: [],</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">info</span>: &#123; <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">height</span>: <span class="number">1.88</span> &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.挂载app</span></span></span><br><span class="line"><span class="language-javascript">    app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="template元素"><a href="#template元素" class="headerlink" title="template元素"></a><strong><font style="color:#404040;">template元素</font></strong></h3><ul>
<li><p><font style="color:#404040;">类似于v-if，你可以使用 template 元素来循环渲染一段包含多个元素的内容：</font></p>
<ul>
<li><p><font style="color:#404040;">我们使用template来对多个元素进行包裹，而不是使用div来完成；</font></p>
<pre><code>![](https://cdn.nlark.com/yuque/0/2023/png/35551100/1688892405580-f45766c8-5b4c-4ca9-8b93-0bae54fd5c40.png)
</code></pre>
</li>
</ul>
</li>
</ul>
<h3 id="数组更新检测"><a href="#数组更新检测" class="headerlink" title="数组更新检测"></a><strong><font style="color:#404040;">数组更新检测</font></strong></h3><ul>
<li><font style="color:#404040;">Vue 将被侦听的数组的变更方法进行了包裹，所以它们也将会触发视图更新。</font></li>
<li><font style="color:#404040;">这些被包裹过的方法包括：</font><ul>
<li><font style="color:#404040;">push()</font></li>
<li><font style="color:#404040;">pop()</font></li>
<li><font style="color:#404040;">shift()</font></li>
<li><font style="color:#404040;">unshift()</font></li>
<li><font style="color:#404040;">splice()</font></li>
<li><font style="color:#404040;">sort()</font></li>
<li><font style="color:#404040;">reverse()</font></li>
</ul>
</li>
<li><font style="color:#404040;">替换数组的方法</font><ul>
<li><font style="color:#404040;">上面的方法会直接修改原来的数组；</font></li>
<li><font style="color:#404040;">但是某些方法不会替换原来的数组，而是会生成新的数组，比如 filter()、concat() 和 slice()；</font></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>VUE-模板语法</title>
    <url>/2024/09/24/VUE-%E6%A8%A1%E6%9D%BF%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h3 id="双大括号语法"><a href="#双大括号语法" class="headerlink" title="双大括号语法"></a><strong><font style="color:#404040;">双大括号语法</font></strong></h3><ul>
<li><font style="color:#404040;">如果我们希望把数据显示到模板（template）中，使用最多的语法是 </font><font style="color:red;">“Mustache”语法 (双大括号) </font><font style="color:#404040;">的文本插值。</font><ul>
<li><font style="color:#404040;">并且我们前端提到过，</font><font style="color:red;">data返回的对象</font><font style="color:#404040;">是有添加到</font><font style="color:red;">Vue的响应式系统</font><font style="color:#404040;">中；</font></li>
<li><font style="color:#404040;">当</font><font style="color:red;">data中的数据发生改变</font><font style="color:#404040;">时，</font><font style="color:red;">对应的内容也会发生更新</font><font style="color:#404040;">。</font></li>
<li><font style="color:#404040;">当然，Mustache中不仅仅可以是data中的属性，也可以是一个</font><font style="color:red;">JavaScript的表达式</font><font style="color:#404040;">。</font></li>
</ul>
</li>
<li><font style="color:#404040;">另外这种用法是错误的：</font></li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688888588157-67a8f1f3-f840-4cf1-bba3-644f68723bf7.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688888601329-975eb1da-f90e-412d-8662-7abf9ef0643f.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688888614164-29475f53-f292-4547-a6ce-4eac55a4c7bd.png"></p>
<h3 id="v-once指令（了解）"><a href="#v-once指令（了解）" class="headerlink" title="v-once指令（了解）"></a><strong><font style="color:#404040;">v-once指令（了解）</font></strong></h3><ul>
<li><font style="color:#404040;">v-once用于指定元素或者组件只渲染一次：</font><ul>
<li><font style="color:#404040;">当数据发生变化时，</font><font style="color:red;">元素或者组件以及其所有的子元素</font><font style="color:#404040;">将视为</font><font style="color:red;">静态内容</font><font style="color:#404040;">并且跳过；</font></li>
<li><font style="color:#404040;">该指令可以用于</font><font style="color:red;">性能优化</font><font style="color:#404040;">；</font></li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688888708630-6a00467d-71c8-45f8-b5ca-5ae3a26edcb6.png"></p>
<ul>
<li><font style="color:#404040;">如果是子节点，也是只会渲染一次：</font></li>
</ul>
<h3 id="v-html"><a href="#v-html" class="headerlink" title="v-html"></a><strong><font style="color:#404040;">v-html</font></strong></h3><ul>
<li><font style="color:#404040;">默认情况下，如果我们展示的</font><font style="color:red;">内容本身是 html </font><font style="color:#404040;">的，那么</font><font style="color:red;">vue并不会对其进行特殊的解析</font><font style="color:#404040;">。</font><ul>
<li><font style="color:#404040;">如果我们希望这个内容</font><font style="color:red;">被Vue可以解析出来</font><font style="color:#404040;">，那么可以</font><font style="color:red;">使用 v-html </font><font style="color:#404040;">来展示；</font></li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688889101497-24e95a2b-3a6e-4ebb-9095-0d7566dfe519.png"></p>
<h3 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a><strong><font style="color:#404040;">v-pre</font></strong></h3><ul>
<li><font style="color:#404040;">v-pre用于</font><font style="color:red;">跳过元素和它的子元素的编译过程</font><font style="color:#404040;">，显示原始的Mustache标签：</font><ul>
<li><font style="color:#404040;">跳过不需要编译的节点，加快编译的速度；</font></li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688889141052-ecef525a-6477-481c-be6f-6539252a89e2.png"></p>
<h2 id="v-bind"><a href="#v-bind" class="headerlink" title="v-bind"></a>v-bind</h2><h3 id="绑定基本属性"><a href="#绑定基本属性" class="headerlink" title="绑定基本属性"></a><strong><font style="color:#404040;">绑定基本属性</font></strong></h3><ul>
<li><p><font style="color:#404040;">v-bind用于</font><font style="color:red;">绑定一个或多个属性值</font><font style="color:#404040;">，或者</font><font style="color:red;">向另一个组件传递props值</font><font style="color:#404040;">（这个学到组件时再介绍）；</font></p>
</li>
<li><p><font style="color:#404040;">在开发中，有哪些属性需要动态进行绑定呢？</font></p>
<ul>
<li><p><font style="color:#404040;">还是有很多的，比如图片的链接src、网站的链接href、动态绑定一些类、样式等等</font></p>
<pre><code>![](https://cdn.nlark.com/yuque/0/2023/png/35551100/1688889299083-ba6d24a0-9ad6-4505-bb09-3db0e7b03b2e.png)
</code></pre>
</li>
</ul>
</li>
<li><p><font style="color:#404040;">v-bind有一个对应的</font><font style="color:red;">语法糖</font><font style="color:#404040;">，也就是</font><font style="color:red;">简写方式</font><font style="color:#404040;">。</font></p>
</li>
<li><p><font style="color:#404040;">在开发中，我们通常会使用语法糖的形式，因为这样更加简洁。</font></p>
</li>
</ul>
<p><font style="color:#404040;"></font></p>
<h3 id="绑定class属性"><a href="#绑定class属性" class="headerlink" title="绑定class属性"></a><font style="color:#404040;">绑定class属性</font></h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.active</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">color</span>: red;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.基本绑定class --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;classes&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.动态class可以写对象语法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">:class</span>=<span class="string">&quot; isActive ? &#x27;active&#x27;: &#x27;&#x27; &quot;</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>我是按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.1.对象语法的基本使用(掌握)  &#123; key : value &#125;value为true时，显示key的class，为false时不显示--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; active: isActive &#125;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>我是按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.2.对象语法的多个键值对 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; active: isActive, why: true, kobe: false &#125;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>我是按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.3.动态绑定的class是可以和普通的class同时的使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;abc cba&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123; active: isActive, why: true, kobe: false &#125;&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>我是按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.4.动态绑定的class是可以和普通的class同时的使用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">&quot;abc cba&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;getDynamicClasses()&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>我是按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.动态class可以写数组语法(了解) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;abc&#x27;, &#x27;cba&#x27;]&quot;</span>&gt;</span>Hello Array<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;abc&#x27;, className]&quot;</span>&gt;</span>Hello Array<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;abc&#x27;, className, isActive? &#x27;active&#x27;: &#x27;&#x27;]&quot;</span>&gt;</span>Hello Array<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:class</span>=<span class="string">&quot;[&#x27;abc&#x27;, className, &#123; active: isActive &#125;]&quot;</span>&gt;</span>Hello Array<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.创建app</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// data: option api</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">classes</span>: <span class="string">&quot;abc cba nba&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">isActive</span>: <span class="literal">false</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">className</span>: <span class="string">&quot;why&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="attr">btnClick</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">isActive</span> = !<span class="variable language_">this</span>.<span class="property">isActive</span></span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="attr">getDynamicClasses</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="keyword">return</span> &#123; <span class="attr">active</span>: <span class="variable language_">this</span>.<span class="property">isActive</span>, <span class="attr">why</span>: <span class="literal">true</span>, <span class="attr">kobe</span>: <span class="literal">false</span> &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.挂载app</span></span></span><br><span class="line"><span class="language-javascript">    app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="绑定style属性"><a href="#绑定style属性" class="headerlink" title="绑定style属性"></a>绑定style属性</h3><ul>
<li><font style="color:#404040;">我们可以利用</font><font style="color:red;">v-bind:style</font><font style="color:#404040;">来绑定一些</font><font style="color:red;">CSS内联样式</font><font style="color:#404040;">：</font><ul>
<li><font style="color:#404040;">这次因为某些样式我们需要根据</font><font style="color:red;">数据</font><font style="color:#404040;">动态来决定；</font></li>
<li><font style="color:#404040;">比如某段文字的</font><font style="color:red;">颜色，大小</font><font style="color:#404040;">等等；</font></li>
</ul>
</li>
<li><font style="color:#404040;">CSS property 名可以用</font><font style="color:red;">驼峰式 (camelCase) </font><font style="color:#404040;">或</font><font style="color:red;">短横线分隔 (kebab-case，记得用引号括起来) </font><font style="color:#404040;">来命名；</font></li>
<li><font style="color:#404040;">绑定class有两种方式：</font><ul>
<li><font style="color:#404040;">对象语法</font></li>
<li><font style="color:#404040;">数组语法</font></li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.普通的html写法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">style</span>=<span class="string">&quot;color: red; font-size: 30px;&quot;</span>&gt;</span>哈哈哈哈<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.style中的某些值, 来自data中 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.1.动态绑定style, 在后面跟上 对象类型 (重要)--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-bind:style</span>=<span class="string">&quot;&#123; color: fontColor, fontSize: fontSize + &#x27;px&#x27; &#125;&quot;</span>&gt;</span>哈哈哈哈<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 2.2.动态的绑定属性, 这个属性是一个对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;objStyle&quot;</span>&gt;</span>呵呵呵呵<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.style的数组语法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;[objStyle, &#123; backgroundColor: &#x27;purple&#x27; &#125;]&quot;</span>&gt;</span>嘿嘿嘿嘿<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.创建app</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// data: option api</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">fontColor</span>: <span class="string">&quot;blue&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">fontSize</span>: <span class="number">30</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">objStyle</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">fontSize</span>: <span class="string">&#x27;50px&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">color</span>: <span class="string">&quot;green&quot;</span></span></span><br><span class="line"><span class="language-javascript">          &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.挂载app</span></span></span><br><span class="line"><span class="language-javascript">    app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="动态绑定属性"><a href="#动态绑定属性" class="headerlink" title="动态绑定属性"></a>动态绑定属性</h3><ul>
<li><font style="color:#404040;">在某些情况下，我们</font><font style="color:red;">属性的名称</font><font style="color:#404040;">可能也不是固定的：</font><ul>
<li><font style="color:#404040;">前端我们无论绑定src、href、class、style，属性名称都是固定的；</font></li>
<li><font style="color:#404040;">如果</font><font style="color:red;">属性名称不是固定</font><font style="color:#404040;">的，我们可以使用 </font><font style="color:red;">:[属性名]&#x3D;“值”</font><font style="color:#404040;">的格式来定义；</font></li>
<li><font style="color:#404040;">这种绑定的方式，我们称之为</font><font style="color:red;">动态绑定属性</font><font style="color:#404040;">；</font></li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:</span>[<span class="attr">name</span>]=<span class="string">&quot;&#x27;aaaa&#x27;&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.创建app</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// data: option api</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: <span class="string">&quot;class&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.挂载app</span></span></span><br><span class="line"><span class="language-javascript">    app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="绑定一个对象"><a href="#绑定一个对象" class="headerlink" title="绑定一个对象"></a><strong><font style="color:#404040;">绑定一个对象</font></strong></h3><ul>
<li><font style="color:#404040;">如果我们希望将一个</font><font style="color:red;">对象的所有属性</font><font style="color:#404040;">，绑定到</font><font style="color:red;">元素上的所有属性</font><font style="color:#404040;">，应该怎么做呢？</font><ul>
<li><font style="color:#404040;">非常简单，我们可以直接使用 </font><font style="color:red;">v-bind 绑定一个 对象</font><font style="color:#404040;">；</font></li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">:name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">:age</span>=<span class="string">&quot;age&quot;</span> <span class="attr">:height</span>=<span class="string">&quot;height&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- v-bind绑定对象: 常用来给组件传递参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span> <span class="attr">v-bind</span>=<span class="string">&quot;infos&quot;</span>&gt;</span>Hello Bind<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.创建app</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// data: option api</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">infos</span>: &#123; <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">height</span>: <span class="number">1.88</span>, <span class="attr">address</span>: <span class="string">&quot;广州市&quot;</span> &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">          <span class="attr">name</span>: <span class="string">&quot;why&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">age</span>: <span class="number">18</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">height</span>: <span class="number">1.88</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.挂载app</span></span></span><br><span class="line"><span class="language-javascript">    app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="绑定事件"><a href="#绑定事件" class="headerlink" title="绑定事件"></a>绑定事件</h2><h3 id="v-on绑定事件"><a href="#v-on绑定事件" class="headerlink" title="v-on绑定事件"></a><strong><font style="color:#404040;">v-on绑定事件</font></strong></h3><ul>
<li><strong><font style="color:#404040;">v-on的使用：</font></strong><ul>
<li><strong><font style="color:#404040;">缩写</font></strong><font style="color:#404040;">：@</font></li>
<li><strong><font style="color:#404040;">预期</font></strong><font style="color:#404040;">：Function | Inline Statement | Object</font></li>
<li><strong><font style="color:#404040;">参数</font></strong><font style="color:#404040;">：event</font></li>
<li><strong><font style="color:#404040;">修饰符</font></strong><font style="color:#404040;">：</font><ul>
<li><font style="color:#404040;">.stop - 调用 event.stopPropagation()。</font></li>
<li><font style="color:#404040;">.prevent - 调用 event.preventDefault()。</font></li>
<li><font style="color:#404040;">.capture - 添加事件侦听器时使用 capture 模式。</font></li>
<li><font style="color:#404040;">.self - 只当事件是从侦听器绑定的元素本身触发时才触发回调。</font></li>
<li><font style="color:#404040;">.{keyAlias} - 仅当事件是从特定键触发时才触发回调。</font></li>
<li><font style="color:#404040;">.once - 只触发一次回调。</font></li>
<li><font style="color:#404040;">.left - 只当点击鼠标左键时触发。</font></li>
<li><font style="color:#404040;">.right - 只当点击鼠标右键时触发。</font></li>
<li><font style="color:#404040;">.middle - 只当点击鼠标中键时触发。</font></li>
<li><font style="color:#404040;">.passive - { passive: true } 模式添加侦听器</font></li>
</ul>
</li>
<li><strong><font style="color:#404040;">用法</font></strong><font style="color:#404040;">：绑定事件监听</font></li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.基本的写法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">v-on:click</span>=<span class="string">&quot;divClick&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.语法糖写法(重点掌握) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;divClick&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.绑定的方法位置, 也可以写成一个表达式(不常用, 不推荐) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123; counter &#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;increment&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;counter++&quot;</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 4.绑定其他方法(掌握) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> @<span class="attr">mousemove</span>=<span class="string">&quot;divMousemove&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 5.元素绑定多个事件(掌握) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;divClick&quot;</span> @<span class="attr">mousemove</span>=<span class="string">&quot;divMousemove&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;div class=&quot;box&quot; v-on=&quot;&#123; click: divClick, mousemove: divMousemove &#125;&quot;&gt;&lt;/div&gt; --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- &lt;div class=&quot;box&quot; @=&quot;&#123; click: divClick, mousemove: divMousemove &#125;&quot;&gt;&lt;/div&gt; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.创建app</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// data: option api</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">counter</span>: <span class="number">0</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">divClick</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;divClick&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">this</span>.<span class="property">counter</span>++</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">divMousemove</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;divMousemove&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.挂载app</span></span></span><br><span class="line"><span class="language-javascript">    app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-on参数传递"><a href="#v-on参数传递" class="headerlink" title="v-on参数传递"></a><strong><font style="color:#404040;">v-on参数传递</font></strong></h3><ul>
<li><font style="color:#404040;">当通过methods中定义方法，以供@click调用时，需要注意参数问题：</font></li>
<li><font style="color:#404040;">情况一：如果该方法不需要额外参数，那么方法后的()可以不添加。</font><ul>
<li><font style="color:#404040;">但是注意：如果方法本身中有一个参数，那么会默认将原生事件event参数传递进去</font></li>
</ul>
</li>
<li><font style="color:#404040;">情况二：如果需要同时传入某个参数，同时需要event时，可以通过$event传入事件。</font></li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 1.默认传递event对象 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn1Click&quot;</span>&gt;</span>按钮1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 2.只有自己的参数 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn2Click(&#x27;why&#x27;, age)&quot;</span>&gt;</span>按钮2<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 3.自己的参数和event对象 --&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 在模板中想要明确的获取event对象: $event --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;btn3Click(&#x27;why&#x27;, age, $event)&quot;</span>&gt;</span>按钮3<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.创建app</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// data: option api</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">message</span>: <span class="string">&quot;Hello Vue&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">age</span>: <span class="number">18</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 1.默认参数: event对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 总结: 如果在绑定事件的时候, 没有传递任何的参数, 那么event对象会被默认传递进来</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">btn1Click</span>(<span class="params">event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;btn1Click:&quot;</span>, event)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 2.明确参数:</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">btn2Click</span>(<span class="params">name, age</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;btn2Click:&quot;</span>, name, age)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// 3.明确参数+event对象</span></span></span><br><span class="line"><span class="language-javascript">        <span class="title function_">btn3Click</span>(<span class="params">name, age, event</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;btn3Click:&quot;</span>, name, age, event)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.挂载app</span></span></span><br><span class="line"><span class="language-javascript">    app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="v-on的修饰符"><a href="#v-on的修饰符" class="headerlink" title="v-on的修饰符"></a><strong><font style="color:#404040;">v-on的修饰符</font></strong></h3><ul>
<li><font style="color:#404040;">v-on支持</font><font style="color:red;">修饰符</font><font style="color:#404040;">，修饰符相当于对事件进行了一些特殊的处理：</font><ul>
<li><font style="color:#404040;">.stop - 调用 event.stopPropagation()。</font></li>
<li><font style="color:#404040;">.prevent - 调用 event.preventDefault()。</font></li>
<li><font style="color:#404040;">.capture - 添加事件侦听器时使用 capture 模式。</font></li>
<li><font style="color:#404040;">.self - 只当事件是从侦听器绑定的元素本身触发时才触发回调。</font></li>
<li><font style="color:#404040;">.{keyAlias} - 仅当事件是从特定键触发时才触发回调。</font></li>
<li><font style="color:#404040;">.once - 只触发一次回调。</font></li>
<li><font style="color:#404040;">.left - 只当点击鼠标左键时触发。</font></li>
<li><font style="color:#404040;">.right - 只当点击鼠标右键时触发。</font></li>
<li><font style="color:#404040;">.middle - 只当点击鼠标中键时触发。</font></li>
<li><font style="color:#404040;">.passive - { passive: true } 模式添加侦听器</font></li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background-color</span>: orange;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;divClick&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click.stop</span>=<span class="string">&quot;btnClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span> // 原本事件：点击btn按钮，会冒泡到div中</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../lib/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 1.创建app</span></span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">const</span> app = <span class="title class_">Vue</span>.<span class="title function_">createApp</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">      <span class="comment">// data: option api</span></span></span><br><span class="line"><span class="language-javascript">      <span class="attr">data</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="attr">message</span>: <span class="string">&quot;Hello Vue&quot;</span></span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;,</span></span><br><span class="line"><span class="language-javascript">      <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="language-javascript">        btnClick (event) &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;btnClick&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;,</span></span><br><span class="line"><span class="language-javascript">        divClick () &#123;</span></span><br><span class="line"><span class="language-javascript">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;divClick&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">      &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;)</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// 2.挂载app</span></span></span><br><span class="line"><span class="language-javascript">    app.<span class="title function_">mount</span>(<span class="string">&quot;#app&quot;</span>)</span></span><br><span class="line"><span class="language-javascript">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="条件渲染"><a href="#条件渲染" class="headerlink" title="条件渲染"></a>条件渲染</h2><h3 id="v-if、v-else、v-else-if"><a href="#v-if、v-else、v-else-if" class="headerlink" title="v-if、v-else、v-else-if"></a><strong><font style="color:#404040;">v-if、v-else、v-else-if</font></strong></h3><ul>
<li><p><font style="color:#404040;">v-if、v-else、v-else-if用于根据条件来渲染某一块的内容：</font></p>
<ul>
<li><p><font style="color:#404040;">这些内容只有在条件为true时，才会被渲染出来；</font></p>
</li>
<li><p><font style="color:#404040;">这三个指令与JavaScript的条件语句if、else、else if类似；</font></p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688891396413-a3cadfe6-6756-4866-9ef2-c1fa7301af66.png"></p>
</li>
</ul>
</li>
<li><p><font style="color:#404040;">v-if的渲染原理：</font></p>
<ul>
<li><font style="color:#404040;">v-if是惰性的；</font></li>
<li><font style="color:#404040;">当条件为false时，其判断的内容完全不会被渲染或者会被销毁掉；</font></li>
<li><font style="color:#404040;">当条件为true时，才会真正渲染条件块中的内容；</font></li>
</ul>
</li>
</ul>
<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="template元素"><a href="#template元素" class="headerlink" title="template元素"></a><strong><font style="color:#404040;">template元素</font></strong></h3><ul>
<li><font style="color:#404040;">因为v-if是一个指令，所以必须将其添加到一个元素上：</font><ul>
<li><font style="color:#404040;">但是如果我们希望切换的是多个元素呢？</font></li>
<li><font style="color:#404040;">此时我们渲染div，但是我们并不希望div这种元素被渲染；</font></li>
<li><font style="color:#404040;">这个时候，我们可以选择使用template；</font></li>
</ul>
</li>
<li><font style="color:#404040;">template元素可以当做不可见的包裹元素，并且在v-if上使用，但是最终template不会被渲染出来：</font><ul>
<li><font style="color:#404040;">有点类似于小程序中的block</font></li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688891656539-3a7c1bb7-e9af-432b-b06a-d15c3b06af78.png"></li>
</ul>
</li>
</ul>
<h3 id="v-show"><a href="#v-show" class="headerlink" title="v-show"></a><strong><font style="color:#404040;">v-show</font></strong></h3><ul>
<li><p><font style="color:#404040;">v-show和v-if的用法看起来是一致的，也是根据一个条件决定是否显示元素或者组件：</font></p>
<pre><code>![](https://cdn.nlark.com/yuque/0/2023/png/35551100/1688891705236-1173d386-f357-4a90-8b5e-ee3334763c21.png)
</code></pre>
</li>
</ul>
<h3 id="v-show和v-if的区别"><a href="#v-show和v-if的区别" class="headerlink" title="v-show和v-if的区别"></a><strong><font style="color:#404040;">v-show和v-if的区别</font></strong></h3><ul>
<li><font style="color:#404040;">首先，在用法上的区别：</font><ul>
<li><font style="color:#404040;">v-show是不支持template；</font></li>
<li><font style="color:#404040;">v-show不可以和v-else一起使用；</font></li>
</ul>
</li>
<li><font style="color:#404040;">其次，本质的区别：</font><ul>
<li><font style="color:#404040;">v-show元素无论是否需要显示到浏览器上，它的DOM实际都是有存在的，只是通过CSS的display属性来进行切换；</font></li>
<li><font style="color:#404040;">v-if当条件为false时，其对应的原生压根不会被渲染到DOM中；</font></li>
</ul>
</li>
<li><font style="color:#404040;">开发中如何进行选择呢？</font><ul>
<li><font style="color:#404040;">如果我们的原生需要在显示和隐藏之间频繁的切换，那么使用v-show；</font></li>
<li><font style="color:#404040;">如果不会频繁的发生切换，那么使用v-if；</font></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-Router详解</title>
    <url>/2024/10/14/Vue-Router%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h3 id="路由的使用步骤"><a href="#路由的使用步骤" class="headerlink" title="路由的使用步骤"></a>路由的使用步骤</h3><p>安装Vue Router：  npm install vue-router</p>
<ul>
<li>使用vue-router的步骤:<ul>
<li>第一步：<font style="color:#DF2A3F;">创建路由需要映射的组件</font>（打算显示的页面）</li>
<li>第二步：<font style="color:#DF2A3F;">通过createRouter创建路由对象</font>，并且<font style="color:#DF2A3F;">传入routes和history模式</font>；<ul>
<li><font style="color:#DF2A3F;">配置路由映射:</font> 组件和路径映射关系的routes数组；</li>
<li>创建基于hash或者history的模式；</li>
</ul>
</li>
<li>第三步：使用app注册路由对象（use方法）；</li>
<li>第四步：路由使用: <font style="color:#DF2A3F;">通过<router-link>和<router-view>； </font></li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689335403642-6c4718c1-b49c-41a0-89a1-e20855a87654.png"></p>
<h3 id="路由的默认路径"><a href="#路由的默认路径" class="headerlink" title="路由的默认路径"></a>路由的默认路径</h3><ul>
<li>我们这里还有一个不太好的实现:<ul>
<li>默认情况下, 进入网站的首页, 我们希望<router-view>渲染首页的内容；</li>
<li>但是我们的实现中, <font style="color:#DF2A3F;">默认没有显示首页组件, 必须让用户点击才可以；</font></li>
</ul>
</li>
<li>如何可以让路径<font style="color:#DF2A3F;">默认跳到到首页</font>, 并且<router-view>渲染首页组件呢?<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689335574405-a531267d-4afc-43be-bce4-19d95695a9e1.png"></li>
<li>我们在routes中又配置了一个映射：<ul>
<li>path配置的是<font style="color:#DF2A3F;">根路径: &#x2F;</font></li>
<li><font style="color:#DF2A3F;">redirect是重定向</font>, 也就是我们将根路径重定向到&#x2F;home的路径下, 这样就可以得到我们想要的结果了</li>
</ul>
</li>
</ul>
<h3 id="history模式"><a href="#history模式" class="headerlink" title="history模式"></a>history模式</h3><p>另外一种选择的模式是history模式：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689335617519-52962f8b-4a63-4096-86fe-cdc5104d72b5.png"></p>
<h3 id="router-link"><a href="#router-link" class="headerlink" title="router-link"></a>router-link</h3><ul>
<li><strong>router-link事实上有很多属性可以配置：</strong></li>
<li><strong>to属性：</strong><ul>
<li>是一个字符串，或者是一个对象</li>
</ul>
</li>
<li><strong>replace属性</strong>：<ul>
<li>设置 replace 属性的话，当点击时，会调用 router.replace()，而不是 router.push()；</li>
</ul>
</li>
<li><strong>active-class属性：</strong><ul>
<li>设置激活a元素后应用的class，默认是router-link-active</li>
</ul>
</li>
<li><strong>exact-active-class属性：</strong><ul>
<li>链接精准激活时，应用于渲染的<a>  的 class，默认是router-link-exact-active；</li>
</ul>
</li>
</ul>
<h3 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h3><ul>
<li>当打包构建应用时，JavaScript 包会变得非常大，影响页面加载：<ul>
<li>如果我们能把不同路由对应的组件分割成不同的代码块，然后当路由被访问的时候才加载对应组件，这样就会更加高效；</li>
<li>也可以提高首屏的渲染效率；</li>
</ul>
</li>
<li>其实这里还是我们前面讲到过的webpack的分包知识，而Vue Router默认就支持动态来导入组件：<ul>
<li>这是因为component可以传入一个组件，也可以接收一个函数，该函数 需要放回一个Promise；</li>
<li>而import函数就是返回一个Promise；</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689335758327-10825c99-cd15-468f-9d28-99b1b2360c53.png"></li>
</ul>
<h3 id="路由的其他属性"><a href="#路由的其他属性" class="headerlink" title="路由的其他属性"></a>路由的其他属性</h3><ul>
<li>name属性：路由记录独一无二的名称；</li>
<li>meta属性：自定义的数据</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689335824620-c0354593-017c-4d42-9a6e-f5e3f089072a.png"></li>
</ul>
<h3 id="动态路由基本匹配"><a href="#动态路由基本匹配" class="headerlink" title="动态路由基本匹配"></a>动态路由基本匹配</h3><ul>
<li>很多时候我们需要将给定匹配模式的路由映射到同一个组件：<ul>
<li>例如，我们可能有一个 User 组件，它应该对所有用户进行渲染，但是用户的ID是不同的；</li>
<li>在Vue Router中，我们可以在路径中使用一个动态字段来实现，我们称之为 路径参数；<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689335873659-3ae6737f-b693-4944-85f7-36607a5d3518.png"></li>
</ul>
</li>
<li>在router-link中进行如下跳转：  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689335878399-7fd19e52-712e-425c-87e0-fd5bee288184.png"></li>
</ul>
<h3 id="获取动态路由的值"><a href="#获取动态路由的值" class="headerlink" title="获取动态路由的值"></a>获取动态路由的值</h3><ul>
<li>那么在User中如何获取到对应的值呢？<ul>
<li>在template中，直接通过 $route.params获取值；<ul>
<li>在created中，通过 this.$route.params获取值；</li>
<li>在setup中，我们要使用 vue-router库给我们提供的一个hook useRoute；<ul>
<li>该Hook会返回一个Route对象，对象中保存着当前路由相关的值；</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689335954467-84beba4b-9ed7-4924-a06c-6284ee5e4ef4.png"></li>
</ul>
<h3 id="NotFound"><a href="#NotFound" class="headerlink" title="NotFound"></a>NotFound</h3><ul>
<li>对于哪些没有匹配到的路由，我们通常会匹配到固定的某个页面<ul>
<li>比如NotFound的错误页面中，这个时候我们可编写一个动态路由用于匹配所有的页面；<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689336016915-3c995535-8258-44ec-8f11-c7689d3a3f81.png"></li>
</ul>
</li>
<li>我们可以通过 $route.params.pathMatch获取到传入的参数：  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689336036378-7a7fad87-ec21-4a6d-b696-ff9ff6787656.png"></li>
</ul>
<h3 id="匹配规则加"><a href="#匹配规则加" class="headerlink" title="匹配规则加*"></a>匹配规则加*</h3><ul>
<li>这里还有另外一种写法<ul>
<li>注意：我在&#x2F;:pathMatch(.*)后面又加了一个 *；<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689336090283-c2e0cbdc-5d3d-4b85-9d95-a011edf2c414.png"></li>
</ul>
</li>
<li>它们的区别在于解析的时候，是否解析 &#x2F;：  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689336100555-472ca408-7790-42fe-b7c4-29b78c43be26.png"></li>
</ul>
<h3 id="路由的嵌套"><a href="#路由的嵌套" class="headerlink" title="路由的嵌套"></a>路由的嵌套</h3><ul>
<li>什么是路由的嵌套呢？<ul>
<li>目前我们匹配的Home、About、User等都属于第一层路由，我们在它们之间可以来回进行切换；</li>
</ul>
</li>
<li>但是呢，我们Home页面本身，也可能会在多个组件之间来回切换：<ul>
<li>比如Home中包括Product、Message，它们可以在Home内部来回切换；</li>
<li>这个时候我们就需要使用嵌套路由，在Home中也使用 router-view 来占位之后需要渲染的组件；</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689336161817-d0f1b7d1-6b9d-4bb0-8bf2-4f1ba86e3e06.png"></p>
<h3 id="代码的页面跳转"><a href="#代码的页面跳转" class="headerlink" title="代码的页面跳转"></a>代码的页面跳转</h3><ul>
<li>有时候我们希望通过代码来完成页面的跳转，比如点击的是一个按钮：<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689336953172-d5759d0d-f417-4ad8-835b-1b8281f16361.png"></li>
<li>当然，我们也可以传入一个对象：</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689336960995-a8d1de5a-9c17-4a76-9baf-3b841ef37cbc.png"></li>
<li>如果是在setup中编写的代码，那么我们可以通过 useRouter 来获取：  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689336968961-f4e1956a-471d-4bc9-a037-cd047ae311a2.png"></li>
</ul>
<h3 id="query方式的参数"><a href="#query方式的参数" class="headerlink" title="query方式的参数"></a>query方式的参数</h3><p>我们也可以通过query的方式来传递参数：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689336998811-819c2419-488d-40df-b9fc-fc51cabde9c1.png"></p>
<p>在界面中通过 $route.query 来获取参数：  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689337008235-f776a8fa-747b-4760-b53d-b76651562290.png"></p>
<h3 id="替换当前的位置"><a href="#替换当前的位置" class="headerlink" title="替换当前的位置"></a>替换当前的位置</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689337033001-24ed3412-ea2e-4f06-96a4-a5504c3f07ee.png"></p>
<h3 id="页面的前进后退"><a href="#页面的前进后退" class="headerlink" title="页面的前进后退"></a>页面的前进后退</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689337047148-17575872-5a87-4111-8582-2cac7395cfa6.png"></p>
<h3 id="动态添加路由"><a href="#动态添加路由" class="headerlink" title="动态添加路由"></a>动态添加路由</h3><ul>
<li>某些情况下我们可能需要动态的来添加路由：<ul>
<li>比如根据用户不同的权限，注册不同的路由；</li>
<li>这个时候我们可以使用一个方法 addRoute；</li>
</ul>
</li>
<li>如果我们是为route添加一个children路由，那么可以传入对应的name：  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689337126616-0659bc1a-5c5c-43a5-a784-f119e4ae7934.png"></li>
</ul>
<h3 id="动态管理路由的其他方法"><a href="#动态管理路由的其他方法" class="headerlink" title="动态管理路由的其他方法"></a>动态管理路由的其他方法</h3><ul>
<li>删除路由有以下三种方式：<ul>
<li>方式一：添加一个name相同的路由；</li>
<li>方式二：通过removeRoute方法，传入路由的名称；</li>
<li>方式三：通过addRoute方法的返回值回调； <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689337179725-7a158a8b-0328-4707-9e61-4e1d0dbaa4ae.png"></li>
</ul>
</li>
<li>路由的其他方法补充：<ul>
<li>router.hasRoute()：检查路由是否存在。</li>
<li>router.getRoutes()：获取一个包含所有路由记录的数组。</li>
</ul>
</li>
</ul>
<h3 id="路由导航守卫"><a href="#路由导航守卫" class="headerlink" title="路由导航守卫"></a>路由导航守卫</h3><ul>
<li>vue-router 提供的导航守卫主要用来通过跳转或取消的方式守卫导航。</li>
<li><strong>全局的前置守卫beforeEach是在导航触发时会被回调的：</strong></li>
<li>它有两个参数：<ul>
<li><font style="color:#DF2A3F;">to</font>：即将进入的路由Route对象；</li>
<li><font style="color:#DF2A3F;">from</font>：即将离开的路由Route对象；</li>
</ul>
</li>
<li>它有返回值：<ul>
<li><font style="color:#DF2A3F;">false</font>：取消当前导航；</li>
<li><font style="color:#DF2A3F;">不返回或者undefined</font>：进行默认导航；</li>
<li><font style="color:#DF2A3F;">返回一个路由地址</font>：<ul>
<li>可以是一个string类型的路径；</li>
<li>可以是一个对象，对象中包含path、query、params等信息；</li>
</ul>
</li>
</ul>
</li>
<li>可选的第三个参数：next（不推荐使用）<ul>
<li>在Vue2中我们是通过next函数来决定如何进行跳转的；</li>
<li>但是在Vue3中我们是通过返回值来控制的，不再推荐使用next函数，这是因为开发中很容易调用多次next；</li>
</ul>
</li>
</ul>
<p>比如我们完成一个功能，只有登录后才能看到其他页面</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689337344786-a674c785-15bb-4cde-9202-1b03f1946362.png"></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-axios网络请求</title>
    <url>/2024/10/14/Vue-axios%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/</url>
    <content><![CDATA[<h3 id="axios请求方式"><a href="#axios请求方式" class="headerlink" title="axios请求方式"></a>axios请求方式</h3><ul>
<li>支持多种请求方式:<ul>
<li>axios(config)</li>
<li>axios.request(config)</li>
<li>axios.get(url[, config])</li>
<li>axios.delete(url[, config])</li>
<li>axios.head(url[, config])</li>
<li>axios.post(url[, data[, config]])</li>
<li>axios.put(url[, data[, config]])</li>
<li>axios.patch(url[, data[, config]])</li>
</ul>
</li>
<li>有时候, 我们可能需求同时发送两个请求<ul>
<li>使用axios.all, 可以放入多个请求的数组.</li>
<li>axios.all([]) 返回的结果是一个数组，使用 axios.spread 可将数组 [res1,res2] 展开为 res1, res2</li>
</ul>
</li>
</ul>
<h4 id="常见的配置选项"><a href="#常见的配置选项" class="headerlink" title="常见的配置选项"></a>常见的配置选项</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689342565447-58b964b1-ace6-4627-aa0a-a004141dc756.png"></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.发送request请求</span></span><br><span class="line">axios.<span class="title function_">request</span>(&#123;</span><br><span class="line">  <span class="attr">url</span>: <span class="string">&quot;http://123.207.32.32:8000/home/multidata&quot;</span>,</span><br><span class="line">  <span class="attr">method</span>: <span class="string">&quot;get&quot;</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res:&quot;</span>, res.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.发送get请求</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">`http://123.207.32.32:9001/lyric?id=500665346`</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res:&quot;</span>, res.<span class="property">data</span>.<span class="property">lrc</span>)</span><br><span class="line">&#125;)</span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;http://123.207.32.32:9001/lyric&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">params</span>: &#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="number">500665346</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res:&quot;</span>, res.<span class="property">data</span>.<span class="property">lrc</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.发送post请求</span></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&quot;http://123.207.32.32:1888/02_param/postjson&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;coderwhy&quot;</span>,</span><br><span class="line">  <span class="attr">password</span>: <span class="number">123456</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res&quot;</span>, res.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&quot;http://123.207.32.32:1888/02_param/postjson&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;coderwhy&quot;</span>,</span><br><span class="line">    <span class="attr">password</span>: <span class="number">123456</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res&quot;</span>, res.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.baseURL</span></span><br><span class="line"><span class="keyword">const</span> baseURL = <span class="string">&quot;http://123.207.32.32:8000&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 给axios实例配置公共的基础配置</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">baseURL</span> = baseURL</span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">timeout</span> = <span class="number">10000</span></span><br><span class="line">axios.<span class="property">defaults</span>.<span class="property">headers</span> = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.1.get: /home/multidata</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&quot;/home/multidata&quot;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res:&quot;</span>, res.<span class="property">data</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.2.get: /home/data</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.axios发送多个请求</span></span><br><span class="line"><span class="comment">// Promise.all</span></span><br><span class="line">axios.<span class="title function_">all</span>([</span><br><span class="line">  axios.<span class="title function_">get</span>(<span class="string">&quot;/home/multidata&quot;</span>),</span><br><span class="line">  axios.<span class="title function_">get</span>(<span class="string">&quot;http://123.207.32.32:9001/lyric?id=500665346&quot;</span>)</span><br><span class="line">]).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;res:&quot;</span>, res)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="axios的创建实例"><a href="#axios的创建实例" class="headerlink" title="axios的创建实例"></a>axios的创建实例</h3><ul>
<li>为什么要创建axios的实例呢?<ul>
<li>当我们从axios模块中导入对象时, 使用的实例是默认的实例；</li>
<li>当给该实例设置一些默认配置时, 这些配置就被固定下来了.</li>
<li>但是后续开发中, 某些配置可能会不太一样；</li>
<li>比如某些请求需要使用特定的baseURL或者timeout等.</li>
<li>这个时候, 我们就可以创建新的实例, 并且传入属于该实例的配置信息  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689342630214-199a82f2-27d0-4e37-a0d3-05f802527924.png"></li>
</ul>
</li>
</ul>
<h3 id="请求和响应拦截器"><a href="#请求和响应拦截器" class="headerlink" title="请求和响应拦截器"></a>请求和响应拦截器</h3><ul>
<li>axios的也可以设置拦截器：拦截每次请求和响应<ul>
<li>axios.interceptors.request.use(请求成功拦截, 请求失败拦截)</li>
<li>axios.interceptors.response.use(响应成功拦截, 响应失败拦截)</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689342938310-9d968ace-837c-4f70-af26-3136534d9103.png"></li>
</ul>
</li>
</ul>
<h3 id="axios请求库封装"><a href="#axios请求库封装" class="headerlink" title="axios请求库封装"></a>axios请求库封装</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HYRequest</span> &#123;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params">baseURL, timeout=<span class="number">10000</span></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">instance</span> = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">      baseURL,</span><br><span class="line">      timeout</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">request</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">instance</span>.<span class="title function_">request</span>(config).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(res.<span class="property">data</span>)</span><br><span class="line">      &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>(err)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">get</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(&#123; ...config, <span class="attr">method</span>: <span class="string">&quot;get&quot;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="title function_">post</span>(<span class="params">config</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">request</span>(&#123; ...config, <span class="attr">method</span>: <span class="string">&quot;post&quot;</span> &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">HYRequest</span>(<span class="string">&quot;http://xx.xx.xx.xx:9001&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-对UI组件库修改</title>
    <url>/2024/09/25/Vue-%E5%AF%B9UI%E7%BB%84%E4%BB%B6%E5%BA%93%E4%BF%AE%E6%94%B9/</url>
    <content><![CDATA[<h3 id="修改第三方UI组件库的样式"><a href="#修改第三方UI组件库的样式" class="headerlink" title="修改第三方UI组件库的样式"></a>修改第三方UI组件库的样式</h3><ul>
<li>1.用插槽，插入自己的元素<ul>
<li>在自己的作用域中直接修改这个元素</li>
</ul>
</li>
<li>2.全局定义一个变量，覆盖他默认变量的值<ul>
<li>缺点：全局修改</li>
</ul>
</li>
<li>3.局部定义一个变量，覆盖他默认变量的值<ul>
<li>优点：局部修改</li>
</ul>
</li>
<li>4.直接查找对应的子组件选择器，进行修改<ul>
<li>:deep(子组件中元素的选择器)进行修改</li>
<li>直接修改css</li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-pinia状态管理</title>
    <url>/2024/10/14/Vue-pinia%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h3 id="使用Pinia？"><a href="#使用Pinia？" class="headerlink" title="使用Pinia？"></a>使用Pinia？</h3><ul>
<li>使用Pinia之前，我们需要先对其进行安装：<ul>
<li>npm install pinia</li>
</ul>
</li>
<li>创建一个pinia并且将其传递给应用程序：</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689341186477-b142ee63-f985-402c-a2ad-305c67b2a697.png"></li>
</ul>
<h4 id="认识Store"><a href="#认识Store" class="headerlink" title="认识Store"></a>认识Store</h4><ul>
<li>什么是Store？<ul>
<li>一个 Store （如 Pinia）是一个实体，它会持有为绑定到你组件树的状态和业务逻辑，也就是保存了全局的状态；</li>
<li>它有点像始终存在，并且每个人都可以读取和写入的组件；</li>
<li>你可以在你的应用程序中定义任意数量的Store来管理你的状态；</li>
</ul>
</li>
<li>Store有三个核心概念：<ul>
<li><font style="color:#DF2A3F;">state、getters、actions；</font></li>
<li>等同于组件的data、computed、methods；</li>
<li>一旦 store 被实例化，你就可以<font style="color:#DF2A3F;">直接在 store 上访问 state、getters 和 actions </font>中定义的任何属性；</li>
</ul>
</li>
</ul>
<h4 id="定义一个Store"><a href="#定义一个Store" class="headerlink" title="定义一个Store"></a>定义一个Store</h4><ul>
<li>定义一个Store：<ul>
<li>我们需要知道 Store 是<font style="color:#DF2A3F;">使用 defineStore() </font>定义的，</li>
<li>并且它需要一个<font style="color:#DF2A3F;">唯一名称</font>，作为第一个参数传递；</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689341453727-5acdd470-590c-4985-84e4-1933ba7b8ac5.png"></li>
</ul>
</li>
<li>这个 name，也称为 id，是必要的，Pinia 使用它来将 store 连接到 devtools</li>
<li>返回的函数统一使用useX作为命名方案，这是约定的规范；</li>
</ul>
<h4 id="使用定义的Store"><a href="#使用定义的Store" class="headerlink" title="使用定义的Store"></a>使用定义的Store</h4><ul>
<li>Store在它被使用之前是不会创建的，我们可以通过调用use函数来使用Store：</li>
<li>注意Store获取到后不能被解构，那么会失去响应式：<ul>
<li>为了从 Store 中提取属性同时保持其响应式，您需要使用storeToRefs()。  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689341552448-298398b3-cf62-401c-b29d-1532142a91c6.png"></li>
</ul>
</li>
</ul>
<p>APP.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home&quot;&gt;</span><br><span class="line">    &lt;h2&gt;Home View&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;count: &#123;&#123; counterStore.count &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;count: &#123;&#123; count &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;incrementCount&quot;&gt;count+1&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">  import &#123; toRefs &#125; from &#x27;vue&#x27;</span><br><span class="line">  import &#123; storeToRefs &#125; from &#x27;pinia&#x27;</span><br><span class="line">  import useCounter from &#x27;@/stores/counter&#x27;;</span><br><span class="line"></span><br><span class="line">  const counterStore = useCounter()</span><br><span class="line"></span><br><span class="line">  // const &#123; count &#125; = toRefs(counterStore)</span><br><span class="line">  const &#123; count &#125; = storeToRefs(counterStore)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  function incrementCount() &#123;</span><br><span class="line">    counterStore.count++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>count.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义关于counter的store</span></span><br><span class="line"><span class="keyword">import</span> &#123; defineStore &#125; <span class="keyword">from</span> <span class="string">&#x27;pinia&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> useUser <span class="keyword">from</span> <span class="string">&#x27;./user&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> useCounter = <span class="title function_">defineStore</span>(<span class="string">&quot;counter&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">state</span>: <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    <span class="attr">count</span>: <span class="number">99</span>,</span><br><span class="line">    <span class="attr">friends</span>: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">111</span>, <span class="attr">name</span>: <span class="string">&quot;why&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">112</span>, <span class="attr">name</span>: <span class="string">&quot;kobe&quot;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">113</span>, <span class="attr">name</span>: <span class="string">&quot;james&quot;</span> &#125;,</span><br><span class="line">    ]</span><br><span class="line">  &#125;),</span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="comment">// 1.基本使用</span></span><br><span class="line">    <span class="title function_">doubleCount</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> state.<span class="property">count</span> * <span class="number">2</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 2.一个getter引入另外一个getter</span></span><br><span class="line">    <span class="title function_">doubleCountAddOne</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// this是store实例</span></span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">doubleCount</span> + <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 3.getters也支持返回一个函数</span></span><br><span class="line">    <span class="title function_">getFriendById</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">id</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; state.<span class="property">friends</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">          <span class="keyword">const</span> friend = state.<span class="property">friends</span>[i]</span><br><span class="line">          <span class="keyword">if</span> (friend.<span class="property">id</span> === id) &#123;</span><br><span class="line">            <span class="keyword">return</span> friend</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 4.getters中用到别的store中的数据</span></span><br><span class="line">    <span class="title function_">showMessage</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="comment">// 1.获取user信息</span></span><br><span class="line">      <span class="keyword">const</span> userStore = <span class="title function_">useUser</span>()</span><br><span class="line"></span><br><span class="line">      <span class="comment">// 2.获取自己的信息</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 3.拼接信息</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">`name:<span class="subst">$&#123;userStore.name&#125;</span>-count:<span class="subst">$&#123;state.count&#125;</span>`</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">actions</span>: &#123;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span>++</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">incrementNum</span>(<span class="params">num</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">count</span> += num</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> useCounter</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="认识和定义State"><a href="#认识和定义State" class="headerlink" title="认识和定义State"></a>认识和定义State</h3><ul>
<li>state 是 store 的核心部分，因为store是用来帮助我们管理状态的。<ul>
<li>在 Pinia 中，状态被定义为返回初始状态的函数；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689341692653-d48c06af-a152-4f98-b19d-520d6b404744.png"></li>
</ul>
</li>
</ul>
<h4 id="操作State（一）"><a href="#操作State（一）" class="headerlink" title="操作State（一）"></a>操作State（一）</h4><ul>
<li>读取和写入 state：<ul>
<li>默认情况下，您可以通过 store 实例访问状态来直接读取和写入状态；<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689341731729-340ddd89-ef8e-41a0-8f8b-f2cc9f85790c.png"></li>
</ul>
</li>
<li>重置 State：<ul>
<li>你可以通过调用 store 上的 $reset() 方法将状态 重置 到其初始值；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689341740199-8eabee8d-fbfc-4189-a3c0-f5f41261044f.png"></li>
</ul>
</li>
</ul>
<h4 id="操作State（二）"><a href="#操作State（二）" class="headerlink" title="操作State（二）"></a>操作State（二）</h4><ul>
<li>改变State<ul>
<li>除了直接用 store.counter++ 修改 store，你还可以调用 $patch 方法；</li>
<li>它允许您使用部分“state”对象<font style="color:#DF2A3F;">同时应用多个更改</font>；</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689341817167-8001f3c1-3581-4aec-b5ca-d95ffbbb944b.png"></li>
</ul>
</li>
<li>替换State：<ul>
<li>您可以通过将其 $state 属性设置为新对象来替换 Store 的整个状态：  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689341838350-2aa8a148-bb73-40bd-b88e-6728dfef4fff.png"></li>
</ul>
</li>
</ul>
<h3 id="认识和定义Getters"><a href="#认识和定义Getters" class="headerlink" title="认识和定义Getters"></a>认识和定义Getters</h3><ul>
<li>Getters相当于Store的计算属性：<ul>
<li>它们可以用 defineStore() 中的 getters 属性定义；</li>
<li>getters中可以定义接受一个state作为参数的函数；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689341875626-d60fbaa8-2c5c-427a-92be-332a9e04824a.png"></li>
</ul>
</li>
</ul>
<h4 id="访问Getters（一）"><a href="#访问Getters（一）" class="headerlink" title="访问Getters（一）"></a>访问Getters（一）</h4><ul>
<li>访问当前store的Getters：<ul>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689341940039-82816ace-8290-4621-8f9d-845c8f714fb4.png"></li>
</ul>
</li>
<li>Getters中访问自己的其他Getters：<ul>
<li>我们可以通过<font style="color:#DF2A3F;">this来访问到当前store实例的所有其他属性</font>; <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689341945515-00d7c434-6c96-49eb-93ae-a98c35ee28b5.png"></li>
</ul>
</li>
<li>访问其他store的Getters：  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689341952267-1ab80951-47ff-49c8-a789-a3cdddaabd64.png"></li>
</ul>
<h4 id="访问Getters（二）"><a href="#访问Getters（二）" class="headerlink" title="访问Getters（二）"></a>访问Getters（二）</h4><p>Getters也可以返回一个函数，这样就可以接受参数  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689342011363-591c2ed9-b4f6-49d5-9615-77587e0f5bff.png"></p>
<h3 id="认识和定义Actions"><a href="#认识和定义Actions" class="headerlink" title="认识和定义Actions"></a>认识和定义Actions</h3><ul>
<li>Actions 相当于组件中的 methods。<ul>
<li>可以使用 defineStore() 中的 actions 属性定义，并且它们非常适合定义业务逻辑；<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689342050977-f675efb1-ba35-4aff-b14d-a8981f5a1073.png"></li>
</ul>
</li>
<li>和getters一样，在action中可以<font style="color:#DF2A3F;">通过this访问整个store实例</font>的所有操作；</li>
</ul>
<h4 id="Actions执行异步操作"><a href="#Actions执行异步操作" class="headerlink" title="Actions执行异步操作"></a>Actions执行异步操作</h4><p>并且Actions中是支持异步操作的，并且我们可以编写异步函数，在函数中使用await；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689342092118-a01a5505-e31f-413d-ab08-9ad51a15b555.png"></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3-CompositionAPI-1</title>
    <url>/2024/10/09/Vue3-CompositionAPI-1/</url>
    <content><![CDATA[<h3 id="setup函数的参数"><a href="#setup函数的参数" class="headerlink" title="setup函数的参数"></a>setup函数的参数</h3><ul>
<li>我们先来研究一个setup函数的参数，它主要<strong>有两个参数</strong>：<ul>
<li>第一个参数：<font style="color:#DF2A3F;">props</font></li>
<li>第二个参数：<font style="color:#DF2A3F;">context</font></li>
</ul>
</li>
<li>props非常好理解，它其实就是父组件传递过来的属性会被放到props对象中，我们在setup中如果需要使用，那么就可以直接 通过props参数获取：<ul>
<li>对于定义props的类型，我们还是和之前的规则是一样的，在props选项中定义；</li>
<li>并且在template中依然是可以正常去使用props中的属性，比如message；</li>
<li>如果我们在setup函数中想要使用props，那么不可以通过 this 去获取（后面我会讲到为什么）；</li>
<li>因为props有直接作为参数传递到setup函数中，所以我们可以直接通过参数来使用即可；</li>
</ul>
</li>
<li>另外一个参数是context，我们也称之为是一个SetupContext，它里面包含三个属性：<ul>
<li><font style="color:#DF2A3F;">attrs</font>：所有的非prop的attribute；</li>
<li><font style="color:#DF2A3F;">slots</font>：父组件传递过来的插槽（这个在以渲染函数返回时会有作用，后面会讲到）；</li>
<li><font style="color:#DF2A3F;">emit</font>：当我们组件内部需要发出事件时会用到emit（因为我们不能访问this，所以不可以通过 this.$emit发出事件）；</li>
</ul>
</li>
</ul>
<h4 id="setup函数的返回值"><a href="#setup函数的返回值" class="headerlink" title="setup函数的返回值"></a>setup函数的返回值</h4><ul>
<li>setup既然是一个函数，那么它也可以有返回值，它的返回值用来做什么呢？<ul>
<li>setup的返回值可以在模板template中被使用；</li>
<li>也就是说我们可以通过setup的返回值来替代data选项；</li>
</ul>
</li>
<li>甚至是我们可以返回一个执行函数来代替在methods中定义的方法：<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689325714592-ec17e491-67de-48c6-9b97-01989c1f56b6.png"></li>
<li>但是，如果我们将 counter 在 increment 或者 decrement进行操作时，是否可以实现界面的响应式呢？<ul>
<li>答案是<font style="color:#DF2A3F;">不可以</font>；</li>
<li>这是因为对于一个<font style="color:#DF2A3F;">定义的变量</font>来说，默认情况下<font style="color:#DF2A3F;">，Vue并不会跟踪它的变化，来引起界面的响应式操作；  </font></li>
</ul>
</li>
</ul>
<h3 id="Reactive-API"><a href="#Reactive-API" class="headerlink" title="Reactive API  "></a><font style="color:#000000;">Reactive API  </font></h3><ul>
<li>如果想为在setup中定义的数据提供响应式的特性，那么我们可以<strong>使用reactive的函数：</strong></li>
<li><strong>那么这是什么原因呢？为什么就可以变成响应式的呢？</strong><ul>
<li>这是因为当我们<font style="color:#DF2A3F;">使用reactive函数处理我们的数据之后</font>，数据<font style="color:#DF2A3F;">再次被使用</font>时就会<font style="color:#DF2A3F;">进行依赖收集</font>；</li>
<li>当<font style="color:#DF2A3F;">数据发生改变</font>时，所有<font style="color:#DF2A3F;">收集到的依赖</font>都是<font style="color:#DF2A3F;">进行对应的响应式操作</font>（比如更新界面）；</li>
<li>事实上，我们编写的data选项，也是在内部交给了reactive函数将其编程响应式对象的；</li>
</ul>
</li>
</ul>
<h3 id="Ref-API"><a href="#Ref-API" class="headerlink" title="Ref API"></a>Ref API</h3><ul>
<li>reactive API<strong>对传入的类型是有限制</strong>的，它要求我们必须传入的是<strong>一个对象或者数组类型</strong>：<ul>
<li>如果我们传入一个<font style="color:#DF2A3F;">基本数据类型（String、Number、Boolean）会报一个警告</font>；</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689326074848-2762ee79-aab5-42c8-84b2-a0182b9afbd4.png"></li>
</ul>
</li>
<li>这个时候Vue3给我们提供了**另外一个API：ref API **<ul>
<li>ref 会返回一个<font style="color:#DF2A3F;">可变的响应式对象</font>，该对象作为一个 <font style="color:#DF2A3F;">响应式的引用</font> 维护着它<font style="color:#DF2A3F;">内部的值</font>，这就是<font style="color:#DF2A3F;">ref名称的来源；</font></li>
<li>它内部的值是<font style="color:#DF2A3F;">在ref的 value 属性</font>中被维护的；</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689326138496-3792a4c0-8ea4-47c0-98a2-7ee2eeba00b0.png"></li>
</ul>
</li>
<li>这里有两个注意事项：<ul>
<li>在<font style="color:#DF2A3F;">模板中引入ref的值</font>时，Vue会<font style="color:#DF2A3F;">自动帮助我们进行解包</font>操作，所以我们<font style="color:#DF2A3F;">并不需要在模板中通过 ref.value </font>的方式来使用；</li>
<li>但是在 <font style="color:#DF2A3F;">setup 函数内部</font>，它依然是一个<font style="color:#DF2A3F;"> ref引用</font>， 所以对其进行操作时，我们依然需要<font style="color:#DF2A3F;">使用 ref.value的方式；  </font></li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;message: &#123;&#123; message &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeMessage&quot;&gt;修改message&lt;/button&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">      &lt;h2&gt;账号: &#123;&#123; account.username &#125;&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;h2&gt;密码: &#123;&#123; account.password &#125;&#125;&lt;/h2&gt;</span><br><span class="line">      &lt;button @click=&quot;changeAccount&quot;&gt;修改账号&lt;/button&gt;</span><br><span class="line">      &lt;hr&gt;</span><br><span class="line">        &lt;!-- 默认情况下在template中使用ref时, vue会自动对其进行解包(取出其中value) --&gt;</span><br><span class="line">        &lt;h2&gt;当前计数: &#123;&#123; counter &#125;&#125;&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;increment&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">        &lt;button @click=&quot;counter++&quot;&gt;+1&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">        &lt;hr&gt;</span><br><span class="line">          &lt;!-- 使用的时候不需要写.value --&gt;</span><br><span class="line">          &lt;h2&gt;当前计数: &#123;&#123; info.counter &#125;&#125;&lt;/h2&gt;</span><br><span class="line">          &lt;!-- 修改的时候需要写.value --&gt;</span><br><span class="line">          &lt;button @click=&quot;info.counter.value++&quot;&gt;+1&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123; reactive, ref &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    setup() &#123;</span><br><span class="line">      // 1.定义普通的数据: 可以正常的被使用</span><br><span class="line">      // 缺点: 数据不是响应式的</span><br><span class="line">      let message = &quot;Hello World&quot;</span><br><span class="line">      function changeMessage() &#123;</span><br><span class="line">        message = &quot;你好啊,李银河!&quot;</span><br><span class="line">        console.log(message)</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 2.定义响应式数据</span><br><span class="line">      // 2.1.reactive函数: 定义复杂类型的数据</span><br><span class="line">      const account = reactive(&#123;</span><br><span class="line">        username: &quot;coderwhy&quot;,</span><br><span class="line">        password: &quot;123456&quot;</span><br><span class="line">      &#125;)</span><br><span class="line">      function changeAccount() &#123;</span><br><span class="line">        account.username = &quot;kobe&quot;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 2.2.ref函数: 定义简单类型的数据(也可以定义复杂类型的数据)</span><br><span class="line">      // counter定义响应式数据</span><br><span class="line">      const counter = ref(0)</span><br><span class="line">      function increment() &#123;</span><br><span class="line">        counter.value++</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      // 3.ref是浅层解包</span><br><span class="line">      const info = &#123;</span><br><span class="line">        counter</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      return &#123;</span><br><span class="line">        message,</span><br><span class="line">        changeMessage,</span><br><span class="line">        account,</span><br><span class="line">        changeAccount,</span><br><span class="line">        counter,</span><br><span class="line">        increment,</span><br><span class="line">        info</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;form&gt;</span><br><span class="line">      账号: &lt;input type=&quot;text&quot; v-model=&quot;account.username&quot;&gt;</span><br><span class="line">      密码: &lt;input type=&quot;password&quot; v-model=&quot;account.password&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;form&gt;</span><br><span class="line">      账号: &lt;input type=&quot;text&quot; v-model=&quot;username&quot;&gt;</span><br><span class="line">      密码: &lt;input type=&quot;password&quot; v-model=&quot;password&quot;&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">    &lt;hr&gt;</span><br><span class="line"></span><br><span class="line">    &lt;show-info :name=&quot;name&quot; :age=&quot;age&quot;&gt;&lt;/show-info&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123; onMounted, reactive, ref &#125; from &#x27;vue&#x27;</span><br><span class="line">  import ShowInfo from &#x27;./ShowInfo.vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">      ShowInfo</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        message: &quot;Hello World&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    setup() &#123;</span><br><span class="line">      // 定义响应式数据: reactive/ref</span><br><span class="line">      // 强调: ref也可以定义复杂的数据</span><br><span class="line">      const info = ref(&#123;&#125;)</span><br><span class="line">      console.log(info.value)</span><br><span class="line"></span><br><span class="line">      // 1.reactive的应用场景</span><br><span class="line">      // 1.1.条件一: reactive应用于本地的数据</span><br><span class="line">      // 1.2.条件二: 多个数据之间是有关系/联系(聚合的数据, 组织在一起会有特定的作用)</span><br><span class="line">      const account = reactive(&#123;</span><br><span class="line">        username: &quot;coderwhy&quot;,</span><br><span class="line">        password: &quot;1234567&quot;</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line">      const username = ref(&quot;coderwhy&quot;)</span><br><span class="line">      const password = ref(&quot;123456&quot;)</span><br><span class="line"></span><br><span class="line">      // 2.ref的应用场景: 其他的场景基本都用ref(computed)</span><br><span class="line">      // 2.1.定义本地的一些简单数据</span><br><span class="line">      const message = ref(&quot;Hello World&quot;)</span><br><span class="line">      const counter = ref(0)</span><br><span class="line">      const name = ref(&quot;why&quot;)</span><br><span class="line">      const age = ref(18)</span><br><span class="line"></span><br><span class="line">      // 2.定义从网络中获取的数据也是使用ref</span><br><span class="line">      // const musics = reactive([])</span><br><span class="line">      const musics = ref([])</span><br><span class="line">      onMounted(() =&gt; &#123;</span><br><span class="line">        const serverMusics = [&quot;海阔天空&quot;, &quot;小苹果&quot;, &quot;野狼&quot;]</span><br><span class="line">        musics.value = serverMusics</span><br><span class="line">      &#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">      return &#123;</span><br><span class="line">        account,</span><br><span class="line">        username,</span><br><span class="line">        password,</span><br><span class="line">        name,</span><br><span class="line">        age</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="认识readonly"><a href="#认识readonly" class="headerlink" title="认识readonly"></a>认识readonly</h3><ul>
<li>我们通过reactive或者ref可以获取到一个响应式的对象，但是某些情况下，我们传入给其他地方（组件）的这个响应式对象希 望在另外一个地方（组件）被使用，但是不能被修改，这个时候如何防止这种情况的出现呢？<ul>
<li>Vue3为我们提供了readonly的方法；</li>
<li><font style="color:#DF2A3F;">readonly会返回原生对象的只读代理</font>（也就是它依然是一个Proxy，这是一个proxy的set方法被劫持，并且不能对其进行修 改）；</li>
</ul>
</li>
<li>在开发中常见的readonly方法会传入三个类型的参数：<ul>
<li>类型一：<font style="color:#DF2A3F;">普通对象</font>；</li>
<li>类型二：<font style="color:#DF2A3F;">reactive返回的对象</font>；</li>
<li>类型三：<font style="color:#DF2A3F;">ref的对象</font>；</li>
</ul>
</li>
</ul>
<h3 id="readonly的使用"><a href="#readonly的使用" class="headerlink" title="readonly的使用"></a>readonly的使用</h3><ul>
<li>在readonly的使用过程中，有如下规则：<ul>
<li>readonly<font style="color:#DF2A3F;">返回的对象都是不允许修改</font>的；</li>
<li>但是经过readonly处理的<font style="color:#DF2A3F;">原来的对象</font>是允许被修改的；<ul>
<li>比如 const info &#x3D; readonly(obj)，<font style="color:#DF2A3F;">info对象是不允许被修改</font>的；</li>
<li>当<font style="color:#DF2A3F;">obj被修改</font>时，<font style="color:#DF2A3F;">readonly返回的info对象</font>也会被修改；</li>
<li>但是我们<font style="color:#DF2A3F;">不能去修改readonly返回的对象info；</font></li>
</ul>
</li>
</ul>
</li>
<li>其实本质上就是<font style="color:#DF2A3F;">readonly返回的对象的setter方法被劫持了</font>而已；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689328258558-c58d2edc-e7f7-4178-9d8e-76b309434b91.png"></li>
</ul>
<h3 id="readonly的应用"><a href="#readonly的应用" class="headerlink" title="readonly的应用"></a>readonly的应用</h3><ul>
<li>那么这个readonly有什么用呢？<ul>
<li>在我们传递给其他组件数据时，往往希望其他组件使用我们传递的内容，但是不允许它们修改时，就可以使用readonly了；</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689328384790-6dc6bd9c-7e6c-40be-b165-3ac11263d5be.png"></p>
<h3 id="Reactive判断的API"><a href="#Reactive判断的API" class="headerlink" title="Reactive判断的API"></a>Reactive判断的API</h3><ul>
<li>isProxy<ul>
<li>检查对象是否是由 reactive 或 readonly创建的 proxy。</li>
</ul>
</li>
<li>isReactive<ul>
<li>检查对象是否是由 reactive创建的响应式代理：</li>
<li>如果该代理是 readonly 建的，但包裹了由 reactive 创建的另一个代理，它也会返回 true；</li>
</ul>
</li>
<li>isReadonly<ul>
<li>检查对象是否是由 readonly 创建的只读代理。</li>
</ul>
</li>
<li>toRaw<ul>
<li>返回 reactive 或 readonly 代理的原始对象（不建议保留对原始对象的持久引用。请谨慎使用）。</li>
</ul>
</li>
<li>shallowReactive<ul>
<li>创建一个响应式代理，它跟踪其自身 property 的响应性，但不执行嵌套对象的深层响应式转换 (深层还是原生对象)。</li>
</ul>
</li>
<li>shallowReadonly<ul>
<li>创建一个 proxy，使其自身的 property 为只读，但不执行嵌套对象的深度只读转换（深层还是可读、可写的）</li>
</ul>
</li>
</ul>
<h3 id="toRefs"><a href="#toRefs" class="headerlink" title="toRefs"></a>toRefs</h3><ul>
<li>如果我们使用ES6的解构语法，对<font style="color:#DF2A3F;">reactive返回的对象进行解构获取值</font>，那么之后无论是<strong>修改结构后的变量，还是修改reactive 返回的state对象，</strong>**<font style="color:#DF2A3F;">数据都不再是响应式</font>**<strong>的</strong><ul>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689328587496-3c0ee553-2092-424f-8883-7a36a0bd6681.png"></li>
</ul>
</li>
<li>那么有没有办法<strong>让我们解构出来的属性是响应式</strong>的呢？<ul>
<li>Vue为我们提供了一个<font style="color:#DF2A3F;">toRefs的函数</font>，可以将<font style="color:#DF2A3F;">reactive返回的对象中的属性都转成ref</font>；</li>
<li>那么我们再次进行结构出来的 <font style="color:#DF2A3F;">name 和 age 本身都是 ref的</font>；</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689328633165-d0be2cfc-b802-4a2a-866a-07911b53278c.png"></li>
</ul>
</li>
<li>这种做法相当于已经在<font style="color:#DF2A3F;">state.name和ref.value</font>之间建立了 <font style="color:#DF2A3F;">链接，任何一个修改都会引起另外一个变化；  </font></li>
</ul>
<p><font style="color:#DF2A3F;"></font></p>
<h3 id="toRef"><a href="#toRef" class="headerlink" title=" toRef  "></a><font style="color:#000000;"> toRef  </font></h3><p>如果我们只希望转换一个<strong>reactive对象中的属性为ref</strong>, 那么可以<strong>使用toRef</strong>的方法：  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689328694842-03954086-51df-4ba6-b611-8ea38d056d44.png"></p>
<h3 id="setup不可以使用this"><a href="#setup不可以使用this" class="headerlink" title="setup不可以使用this"></a>setup不可以使用this</h3><ul>
<li>表达的含义是<font style="color:#DF2A3F;">this并没有指向当前组件实例；</font></li>
<li>并且<font style="color:#DF2A3F;">在setup被调用之前，data、computed、methods</font>等都没有被解析；</li>
<li>所以<font style="color:#DF2A3F;">无法在setup中获取this；</font></li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3-高级特性补充</title>
    <url>/2024/10/14/Vue3-%E9%AB%98%E7%BA%A7%E7%89%B9%E6%80%A7%E8%A1%A5%E5%85%85/</url>
    <content><![CDATA[<h3 id="认识自定义指令"><a href="#认识自定义指令" class="headerlink" title="认识自定义指令"></a>认识自定义指令</h3><ul>
<li>在Vue的模板语法中我们学习过各种各样的指令：v-show、v-for、v-model等等，除了使用这些指令之外，Vue也允许我们来 自定义自己的指令。<ul>
<li>注意：在Vue中，代码的复用和抽象主要还是通过组件；</li>
<li>通常在某些情况下，你需要对DOM元素进行底层操作，这个时候就会用到自定义指令；</li>
</ul>
</li>
<li>自定义指令分为两种：<ul>
<li><font style="color:#DF2A3F;">自定义局部指令</font>：组件中通过 <font style="color:#DF2A3F;">directives 选项</font>，只能在当前组件中使用；</li>
<li><font style="color:#DF2A3F;">自定义全局指令</font>：app的<font style="color:#DF2A3F;"> directive 方法</font>，可以在任意组件中被使用；</li>
</ul>
</li>
<li>比如我们来做一个非常简单的案例：当某个元素挂载完成后可以自定获取焦点<ul>
<li>实现方式一：如果我们使用默认的实现方式；</li>
<li>实现方式二：自定义一个 v-focus 的局部指令；</li>
<li>实现方式三：自定义一个 v-focus 的全局指令；</li>
</ul>
</li>
</ul>
<h4 id="实现方式一：聚焦的默认实现"><a href="#实现方式一：聚焦的默认实现" class="headerlink" title="实现方式一：聚焦的默认实现"></a>实现方式一：聚焦的默认实现</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689332361419-aff10768-7819-412c-915b-ea2d0b24b9d7.png"></p>
<h4 id="实现方式二：局部自定义指令"><a href="#实现方式二：局部自定义指令" class="headerlink" title="实现方式二：局部自定义指令"></a>实现方式二：局部自定义指令</h4><ul>
<li>实现方式二：自定义<font style="color:#DF2A3F;">一个 v-focus 的局部指令</font><ul>
<li>这个自定义指令实现非常简单，我们只需要在<font style="color:#DF2A3F;">组件选项</font>中使用 <font style="color:#DF2A3F;">directives</font> 即可；</li>
<li>它是一个对象，在对象中编写我们<font style="color:#DF2A3F;">自定义指令的名称</font>（注意：这里不需要加v-）；</li>
<li>自定义指令有一个生命周期，是<font style="color:#DF2A3F;">在组件挂载后调用的 mounted</font>，我们可以在其中完成操作；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689332491112-8b16ed06-86bc-47f6-bf58-b76c83e93650.png"></li>
</ul>
</li>
</ul>
<h4 id="方式三：自定义全局指令"><a href="#方式三：自定义全局指令" class="headerlink" title="方式三：自定义全局指令"></a>方式三：自定义全局指令</h4><p>自定义一个全局的v-focus指令可以让我们在任何地方直接使用</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689332532778-8c21623c-81c1-497d-bd01-d2641cdb9457.png"></p>
<h4 id="指令的参数和修饰符"><a href="#指令的参数和修饰符" class="headerlink" title="指令的参数和修饰符"></a>指令的参数和修饰符</h4><ul>
<li>如果我们指令需要接受一些参数或者修饰符应该如何操作呢？<ul>
<li>info是参数的名称</li>
<li>aaa-bbb是修饰符的名称；</li>
<li>后面是传入的具体的值；</li>
</ul>
</li>
<li>在我们的生命周期中，我们可以通过 bindings 获取到对应的内容：  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689332619126-dc0a34bd-a68b-4814-bfe0-526a732cba86.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689332626318-66b4d675-a8d0-4a07-ac96-0c6fefb0a9ce.png"></li>
</ul>
<h4 id="自定义指令练习"><a href="#自定义指令练习" class="headerlink" title="自定义指令练习"></a>自定义指令练习</h4><ul>
<li>自定义指令案例：时间戳的显示需求：<ul>
<li>在开发中，大多数情况下从服务器获取到的都是时间戳；</li>
<li>我们需要将时间戳转换成具体格式化的时间来展示；</li>
<li>在Vue2中我们可以通过过滤器来完成；</li>
<li>在Vue3中我们可以通过 计算属性（computed） 或者 自定义一个方法（methods） 来完成；</li>
<li>其实我们还可以通过一个自定义的指令来完成；</li>
</ul>
</li>
<li>我们来实现一个可以自动对时间格式化的指令v-format-time：<ul>
<li>这里我封装了一个函数，在首页中我们只需要调用这个函数并且传入app即可；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689333354340-a121d972-5495-476f-a48f-b6fe428c0e89.png"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue3-CompositionAPI-2</title>
    <url>/2024/10/09/Vue3-CompositionAPI-2/</url>
    <content><![CDATA[<h3 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h3><ul>
<li>在前面我们讲解过计算属性computed：当我们的某些属性是依赖其他状态时，我们可以使用计算属性来处理<ul>
<li>在前面的Options API中，我们是使用computed选项来完成的；</li>
<li>在Composition API中，我们可以在 setup 函数中使用 computed 方法来编写一个计算属性；</li>
</ul>
</li>
<li>如何使用computed呢？<ul>
<li><font style="color:#DF2A3F;">方式一</font>：接收一个<font style="color:#DF2A3F;">getter函数</font>，并为 getter 函数返回的值，返回一个不变的 ref 对象；</li>
<li><font style="color:#DF2A3F;">方式二</font>：接收一个具有<font style="color:#DF2A3F;"> get 和 set 的对象</font>，返回一个可变的（可读写）ref 对象；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689329288554-c935009b-98ac-404f-a786-f6cf7292b2b1.png"></li>
</ul>
</li>
</ul>
<h3 id="setup中使用ref"><a href="#setup中使用ref" class="headerlink" title="setup中使用ref"></a>setup中使用ref</h3><ul>
<li>在setup中如何使用ref获取元素或者组件？<ul>
<li>其实非常简单，我们只需要定义一个ref对象，绑定到元素或者组件的ref属性上即可；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689329397742-db1a7b7b-be28-4a73-97d6-4c00253ac9f4.png"></li>
</ul>
</li>
</ul>
<h3 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h3><ul>
<li>我们前面说过 setup 可以用来替代 data 、 methods 、 computed 等等这些选项，也可以替代 生命周期钩子。</li>
<li>那么setup中如何使用生命周期函数呢？<ul>
<li>可以使用直接导入的 onX 函数注册生命周期钩子；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689329447015-6905627a-310e-40b9-a019-e887d02ee6f4.png"></li>
</ul>
</li>
</ul>
<h3 id="Provide函数"><a href="#Provide函数" class="headerlink" title="Provide函数"></a>Provide函数</h3><ul>
<li>事实上我们之前还学习过Provide和Inject，Composition API也可以替代之前的 Provide 和 Inject 的选项。</li>
<li>我们可以通过 provide来提供数据：<ul>
<li>可以通过 provide 方法来定义每个 Property；</li>
</ul>
</li>
<li>provide可以传入两个参数：<ul>
<li>name：提供的属性名称；</li>
<li>value：提供的属性值；</li>
</ul>
</li>
</ul>
<h3 id="Inject函数"><a href="#Inject函数" class="headerlink" title="Inject函数"></a>Inject函数</h3><ul>
<li>在 后代组件 中可以通过 inject 来注入需要的属性和对应的值：<ul>
<li>可以通过 inject 来注入需要的内容；</li>
</ul>
</li>
<li>inject可以传入两个参数：<ul>
<li>要 inject 的 property 的 name；</li>
<li>默认值；</li>
</ul>
</li>
</ul>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;AppContent: &#123;&#123; name &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;name = &#x27;kobe&#x27;&quot;&gt;app btn&lt;/button&gt;</span><br><span class="line">  &lt;show-info&gt;&lt;/show-info&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123; provide, ref &#125; from &#x27;vue&#x27;</span><br><span class="line">  import ShowInfo from &#x27;./ShowInfo.vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">      ShowInfo</span><br><span class="line">    &#125;,</span><br><span class="line">    setup() &#123;</span><br><span class="line">      const name = ref(&quot;why&quot;)</span><br><span class="line"></span><br><span class="line">      provide(&quot;name&quot;, name)</span><br><span class="line">      provide(&quot;age&quot;, 18)</span><br><span class="line"></span><br><span class="line">      return &#123;</span><br><span class="line">        name</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>ShowInfo.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;ShowInfo: &#123;&#123; name &#125;&#125;-&#123;&#123; age &#125;&#125;-&#123;&#123; height &#125;&#125; &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123; inject &#125; from &#x27;vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    // inject的options api注入, 那么依然需要手动来解包</span><br><span class="line">    // inject: [&quot;name&quot;, &quot;age&quot;],</span><br><span class="line">    setup() &#123;</span><br><span class="line">      const name = inject(&quot;name&quot;)</span><br><span class="line">      const age = inject(&quot;age&quot;)</span><br><span class="line">      const height = inject(&quot;height&quot;, 1.88)</span><br><span class="line"></span><br><span class="line">      return &#123;</span><br><span class="line">        name,</span><br><span class="line">        age,</span><br><span class="line">        height</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>







<h3 id="数据的响应式"><a href="#数据的响应式" class="headerlink" title="数据的响应式"></a>数据的响应式</h3><p>◼ 为了增加 provide 值和 inject 值之间的响应性，我们可以在 provide 值时使用 ref 和 reactive。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689329887632-d6a861cf-6b85-4cbb-8187-6f4e33717ce4.png"></p>
<h3 id="侦听数据的变化"><a href="#侦听数据的变化" class="headerlink" title="侦听数据的变化"></a>侦听数据的变化</h3><ul>
<li>在前面的Options API中，我们可以通过watch选项来侦听data或者props的数据变化，当数据变化时执行某一些操作。</li>
<li>在Composition API中，我们可以使用<font style="color:#DF2A3F;">watchEffect和watch</font>来完成响应式数据的侦听；<ul>
<li><font style="color:#DF2A3F;">watchEffect</font>：用于自动收集响应式数据的依赖；</li>
<li><font style="color:#DF2A3F;">watch</font>：需要手动指定侦听的数据源</li>
</ul>
</li>
</ul>
<h4 id="Watch的使用"><a href="#Watch的使用" class="headerlink" title="Watch的使用"></a>Watch的使用</h4><ul>
<li>watch的API完全等同于组件watch选项的Property：<ul>
<li>watch需要<font style="color:#DF2A3F;">侦听特定的数据源</font>，并且执行其回调函数；</li>
<li>默认情况下它是惰性的，只有当被侦听的源发生变化时才会执行回调；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689330006581-85cf3c16-ab50-4684-835b-079bcd169294.png"></li>
</ul>
</li>
</ul>
<h4 id="侦听多个数据源"><a href="#侦听多个数据源" class="headerlink" title="侦听多个数据源"></a>侦听多个数据源</h4><p>侦听器还可以使用数组同时侦听多个源  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689330019756-d9dbddc8-c108-483d-9fdf-394f44faa409.png"></p>
<h4 id="watch的选项"><a href="#watch的选项" class="headerlink" title="watch的选项"></a>watch的选项</h4><ul>
<li>如果我们希望侦听一个深层的侦听，那么依然需要设置 deep 为true：<ul>
<li>也可以传入 immediate 立即执行；</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689330056473-b1b98446-40c7-4ed2-93f1-7678a023729e.png"></li>
</ul>
</li>
</ul>
<h4 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h4><ul>
<li>当侦听到某些响应式数据变化时，我们希望执行某些操作，这个时候可以使用 watchEffect。</li>
<li>我们来看一个案例：<ul>
<li>首先，watchEffect传入的函数会被立即执行一次，并且在执行的过程中会收集依赖；</li>
<li>其次，只有收集的依赖发生变化时，watchEffect传入的函数才会再次执行；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689330750413-62b63ab6-d3c6-4ce7-919d-554fad86ce0a.png"></li>
</ul>
</li>
</ul>
<h4 id="watchEffect的停止侦听"><a href="#watchEffect的停止侦听" class="headerlink" title="watchEffect的停止侦听"></a>watchEffect的停止侦听</h4><ul>
<li><p>如果在发生某些情况下，我们希望停止侦听，这个时候我们可以获取watchEffect的返回值函数，调用该函数即可。</p>
</li>
<li><p>比如在上面的案例中，我们age达到20的时候就停止侦听：  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689330800423-7b6bd1eb-e988-4c5d-b13f-bd0bd4ae7db0.png"></p>
</li>
</ul>
<h3 id="script-setup语法"><a href="#script-setup语法" class="headerlink" title="script setup语法"></a>script setup语法</h3><ul>
<li><script setup> 是在单文件组件 (SFC) 中使用组合式 API 的编译时语法糖，当同时使用 SFC 与组合式 API 时则推荐该语法。
- 更少的样板内容，更简洁的代码；
- 能够使用纯 Typescript 声明 prop 和抛出事件；
- 更好的运行时性能 ；
- 更好的 IDE 类型推断性能 ；
</li>
<li><p>使用这个语法，需要将 setup attribute 添加到 <script> 代码块上：</p>
</li>
<li><p>里面的代码会被编译成组件 setup() 函数的内容：</p>
</li>
<li><p>这意味着与普通的 <script> 只在组件被首次引入的时候执行一次不同；</p>
</li>
<li><script setup> 中的代码会在每次组件实例被创建的时候执行。  


</li>
<li><p>当使用 <script setup>   的时候，  <script setup> 声明的顶层的绑定 (包括变量，函数声明，以及 import 引入的内容) 都能在模板中直接使用：</p>
</li>
<li><p>响应式数据需要通过ref、reactive来创建。</p>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;AppContent: &#123;&#123; message &#125;&#125;&lt;/div&gt;</span><br><span class="line">  &lt;button @click=&quot;changeMessage&quot;&gt;修改message&lt;/button&gt;</span><br><span class="line">  &lt;show-info name=&quot;why&quot; </span><br><span class="line">             :age=&quot;18&quot;</span><br><span class="line">             @info-btn-click=&quot;infoBtnClick&quot;</span><br><span class="line">             ref=&quot;showInfoRef&quot;&gt;</span><br><span class="line">  &lt;/show-info&gt;</span><br><span class="line">  &lt;show-info&gt;&lt;/show-info&gt;</span><br><span class="line">  &lt;show-info&gt;&lt;/show-info&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">  // 1.所有编写在顶层中的代码, 都是默认暴露给template可以使用</span><br><span class="line">  import &#123; ref, onMounted &#125; from &#x27;vue&#x27;</span><br><span class="line">  import ShowInfo from &#x27;./ShowInfo.vue&#x27;</span><br><span class="line"></span><br><span class="line">  // 2.定义响应式数据</span><br><span class="line">  const message = ref(&quot;Hello World&quot;)</span><br><span class="line">  console.log(message.value)</span><br><span class="line"></span><br><span class="line">  // 3.定义绑定的函数</span><br><span class="line">  function changeMessage() &#123;</span><br><span class="line">    message.value = &quot;你好啊, 李银河!&quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  function infoBtnClick(payload) &#123;</span><br><span class="line">    console.log(&quot;监听到showInfo内部的点击:&quot;, payload)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 4.获取组件实例</span><br><span class="line">  const showInfoRef = ref()</span><br><span class="line">  onMounted(() =&gt; &#123;</span><br><span class="line">    showInfoRef.value.foo()</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="defineProps-和-defineEmits"><a href="#defineProps-和-defineEmits" class="headerlink" title="defineProps() 和 defineEmits()"></a>defineProps() 和 defineEmits()</h3><p>为了在声明 props 和 emits 选项时获得完整的类型推断支持，我们可以使用 defineProps 和 defineEmits API，它们将自动 地在 <script setup>中可用<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689331210351-f17e84d4-bc8b-449a-95f1-5db452e088ab.png"></p>
<h3 id="案例练习"><a href="#案例练习" class="headerlink" title="案例练习"></a>案例练习</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689331324188-d92371b4-b0cf-44d4-99d5-6aed9fa299f8.png"></p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-组件间通信</title>
    <url>/2024/09/25/Vue-%E7%BB%84%E4%BB%B6%E9%97%B4%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h3 id="父子组件之间通信的方式"><a href="#父子组件之间通信的方式" class="headerlink" title="父子组件之间通信的方式"></a>父子组件之间通信的方式</h3><ul>
<li>父子组件之间如何进行通信呢？<ul>
<li>父组件传递给子组件：通过props属性；</li>
<li>子组件传递给父组件：通过$emit触发事件；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689304310929-f13a7c83-79fe-4e10-a68a-92da84c3d332.png"></li>
</ul>
</li>
</ul>
<h4 id="父组件传递给子组件"><a href="#父组件传递给子组件" class="headerlink" title="父组件传递给子组件"></a>父组件传递给子组件</h4><ul>
<li>在开发中很常见的就是父子组件之间通信，比如父组件有一些数据，需要子组件来进行展示：<ul>
<li>这个时候我们可以通过props来完成组件之间的通信；</li>
</ul>
</li>
<li>什么是Props呢？<ul>
<li>Props是你可以在组件上<font style="color:#DF2A3F;">注册一些自定义的attribute</font>；</li>
<li>父组件给<font style="color:#DF2A3F;">这些attribute赋值，子组件通过attribute的名称获取到对应的值</font>；</li>
</ul>
</li>
<li>Props有两种常见的用法：<ul>
<li>方式一：字符串数组，数组中的字符串就是attribute的名称；</li>
<li><font style="color:#DF2A3F;">方式二：对象类型</font>，对象类型我们可以在指定attribute名称的同时，指定它需要传递的类型、是否是必须的、默认值等等；</li>
</ul>
</li>
</ul>
<p>APP.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;!-- 1.展示why的个人信息 --&gt;</span><br><span class="line">  &lt;!-- 如果当前的属性是一个非prop的attribute, 那么该属性会默认添加到子组件的根元素上 --&gt;</span><br><span class="line">  &lt;show-info name=&quot;why&quot; :age=&quot;18&quot; :height=&quot;1.88&quot; </span><br><span class="line">             address=&quot;广州市&quot; abc=&quot;cba&quot; class=&quot;active&quot; /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 2.展示kobe的个人信息 --&gt;</span><br><span class="line">  &lt;show-info name=&quot;kobe&quot; :age=&quot;30&quot; :height=&quot;1.87&quot; /&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 3.展示默认的个人信息 --&gt;</span><br><span class="line">  &lt;show-info :age=&quot;100&quot; show-message=&quot;哈哈哈哈&quot;/&gt;</span><br><span class="line"></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import ShowInfo from &#x27;./ShowInfo.vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">      ShowInfo</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>showInfo.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;infos&quot;&gt;</span><br><span class="line">    &lt;h2 :class=&quot;$attrs.class&quot;&gt;姓名: &#123;&#123; name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;年龄: &#123;&#123; age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;身高: &#123;&#123; height &#125;&#125;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h2&gt;Message: &#123;&#123; showMessage &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line">  &lt;div class=&quot;others&quot; v-bind=&quot;$attrs&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    // inheritAttrs: false,</span><br><span class="line">    </span><br><span class="line">    // 作用: 接收父组件传递过来的属性</span><br><span class="line">    // 1.props数组语法</span><br><span class="line">    // 弊端: 1&gt; 不能对类型进行验证 2.没有默认值的</span><br><span class="line">    // props: [&quot;name&quot;, &quot;age&quot;, &quot;height&quot;]</span><br><span class="line"></span><br><span class="line">    // 2.props对象语法(必须掌握)</span><br><span class="line">    props: &#123;</span><br><span class="line">      name: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &quot;我是默认name&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      age: &#123;</span><br><span class="line">        type: Number,</span><br><span class="line">        required: true,</span><br><span class="line">        default: 0</span><br><span class="line">      &#125;,</span><br><span class="line">      height: &#123;</span><br><span class="line">        type: Number,</span><br><span class="line">        default: 2</span><br><span class="line">      &#125;,</span><br><span class="line">      // 重要的原则: 对象类型写默认值时, 需要编写default的函数, 函数返回默认值</span><br><span class="line">      friend: &#123;</span><br><span class="line">        type: Object,</span><br><span class="line">        default() &#123;</span><br><span class="line">          return &#123; name: &quot;james&quot; &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      hobbies: &#123;</span><br><span class="line">        type: Array,</span><br><span class="line">        default: () =&gt; [&quot;篮球&quot;, &quot;rap&quot;, &quot;唱跳&quot;]</span><br><span class="line">      &#125;,</span><br><span class="line">      showMessage: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &quot;我是showMessage&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="细节：Prop-的大小写命名"><a href="#细节：Prop-的大小写命名" class="headerlink" title="细节：Prop 的大小写命名"></a>细节：Prop 的大小写命名</h4><ul>
<li>Prop 的大小写命名</li>
<li>HTML 中的 attribute 名是大小写不敏感的，所以浏览器会把所有大写字符解释为小写字符；<ul>
<li>这意味着当你使用 DOM 中的模板时，camelCase (驼峰命名法) 的 prop 名需要使用其等价的 kebab-case (<font style="color:#DF2A3F;">短横线分隔命名</font>) 命名；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689304794406-4e89c4b5-86a8-4a20-8b65-f6c276082f4d.png"></li>
</ul>
</li>
</ul>
<h4 id="非Prop的Attribute"><a href="#非Prop的Attribute" class="headerlink" title="非Prop的Attribute"></a>非Prop的Attribute</h4><ul>
<li>什么是非Prop的Attribute呢？<ul>
<li>当我们传递给一个组件某个属性，但是该属性并没有定义对应的props或者emits时，就称之为 非Prop的Attribute；</li>
<li>常见的包括class、style、id属性等；</li>
</ul>
</li>
<li>Attribute继承<ul>
<li>当<font style="color:#DF2A3F;">组件有单个根节点</font>时，<font style="color:#DF2A3F;">非Prop的Attribute将自动添加到根节点的Attribute</font>中：  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689304864157-e4f9ad67-a897-4718-b32f-60f89a38e150.png"></li>
</ul>
</li>
</ul>
<h4 id="禁用Attribute继承和多根节点"><a href="#禁用Attribute继承和多根节点" class="headerlink" title="禁用Attribute继承和多根节点"></a>禁用Attribute继承和多根节点</h4><ul>
<li>如果我们<strong>不希望组件的根元素继承attribute</strong>，可以在组件中设置 <strong>inheritAttrs: false</strong>：<ul>
<li>禁用attribute继承的<font style="color:#DF2A3F;">常见情况</font>是<font style="color:#DF2A3F;">需要将attribute应用于根元素之外的其他元素</font>；</li>
<li>我们可以通过<font style="color:#DF2A3F;"> $attrs来访问所有的 非props的attribute</font>；</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689304993120-4fb9c94e-2e9d-47bd-8642-ad5c5e08bff2.png"></li>
</ul>
</li>
<li>多个根节点的attribute<ul>
<li>多个根节点的attribute如果没有显示的绑定，那么会报警告，我们必须手动的指定要绑定到哪一个属性上：  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689305005208-4c1f3b00-f92c-438d-81c8-62755e49a4bc.png"></li>
</ul>
</li>
</ul>
<h3 id="子组件传递给父组件"><a href="#子组件传递给父组件" class="headerlink" title="子组件传递给父组件"></a>子组件传递给父组件</h3><ul>
<li>什么情况下子组件需要传递内容到父组件呢？<ul>
<li>当子组件有一些事件发生的时候，比如在组件中发生了点击，父组件需要切换内容；</li>
<li>子组件有一些内容想要传递给父组件的时候；</li>
</ul>
</li>
<li>我们如何完成上面的操作呢？<ul>
<li>首先，我们需要在<font style="color:#DF2A3F;">子组件中定义好在某些情况下触发的事件名称</font>；</li>
<li>其次，在<font style="color:#DF2A3F;">父组件中以v-on的方式传入要监听的事件名称</font>，并且绑定到对应的方法中；</li>
<li>最后，在子组件中发生某个事件的时候，<font style="color:#DF2A3F;">根据事件名称触发对应的事件</font>；</li>
</ul>
</li>
</ul>
<h4 id="自定义事件的流程"><a href="#自定义事件的流程" class="headerlink" title="自定义事件的流程"></a>自定义事件的流程</h4><ul>
<li>我们封装一个CounterOperation.vue的组件：<ul>
<li>内部其实是监听两个按钮的点击，点击之后通过 this.$emit的方式发出去事件；</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689305256821-b4bb7787-679f-4c73-bcc6-a7f0d2ad1c17.png"></p>
<h4 id="自定义事件的参数和验证"><a href="#自定义事件的参数和验证" class="headerlink" title="自定义事件的参数和验证"></a>自定义事件的参数和验证</h4><ul>
<li>自定义事件的时候，我们也可以传递一些参数给父组件：<ul>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689305304019-1b74311e-25f0-4da3-a5f5-2f89e524c8dd.png"></li>
</ul>
</li>
<li>在vue3当中，我们可以对传递的参数进行验证：<ul>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689305311037-238f36d5-5c1a-4ff0-8562-b6e97749476e.png"></li>
</ul>
</li>
</ul>
<h3 id="组件间通信案例练习"><a href="#组件间通信案例练习" class="headerlink" title="组件间通信案例练习"></a>组件间通信案例练习</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689305793159-e7a2d171-8c57-46af-9a68-3938c73e5add.png"></p>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 1.tab-control --&gt;</span><br><span class="line">    &lt;tab-control :titles=&quot;[&#x27;衣服&#x27;, &#x27;鞋子&#x27;, &#x27;裤子&#x27;]&quot; </span><br><span class="line">                 @tab-item-click=&quot;tabItemClick&quot;/&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- &lt;tab-control :titles=&quot;[&#x27;流行&#x27;, &#x27;最新&#x27;, &#x27;优选&#x27;]&quot;/&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 2.展示内容 --&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; pageContents[currentIndex] &#125;&#125;&lt;/h1&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import TabControl from &#x27;./TabControl.vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">      TabControl</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        pageContents: [ &quot;衣服列表&quot;, &quot;鞋子列表&quot;, &quot;裤子列表&quot; ],</span><br><span class="line">        currentIndex: 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      tabItemClick(index) &#123;</span><br><span class="line">        console.log(&quot;app:&quot;, index)</span><br><span class="line">        this.currentIndex = index</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>TabControl.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;tab-control&quot;&gt;</span><br><span class="line">    &lt;template v-for=&quot;(item, index) in titles&quot; :key=&quot;item&quot;&gt;</span><br><span class="line">      &lt;div class=&quot;tab-control-item&quot;</span><br><span class="line">           :class=&quot;&#123; active: index === currentIndex &#125;&quot;</span><br><span class="line">           @click=&quot;itemClick(index)&quot;&gt;</span><br><span class="line">        &lt;span&gt;&#123;&#123; item &#125;&#125;&lt;/span&gt;</span><br><span class="line">      &lt;/div&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      titles: &#123;</span><br><span class="line">        type: Array,</span><br><span class="line">        default: () =&gt; []</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        currentIndex: 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    emits: [&quot;tabItemClick&quot;],</span><br><span class="line">    methods: &#123;</span><br><span class="line">      itemClick(index) &#123;</span><br><span class="line">        this.currentIndex = index</span><br><span class="line">        this.$emit(&quot;tabItemClick&quot;, index)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .tab-control &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    height: 44px;</span><br><span class="line">    line-height: 44px;</span><br><span class="line">    text-align: center;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .tab-control-item &#123;</span><br><span class="line">    flex: 1;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .tab-control-item.active &#123;</span><br><span class="line">    color: red;</span><br><span class="line">    font-weight: 700;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  .tab-control-item.active span &#123;</span><br><span class="line">    border-bottom: 3px solid red;</span><br><span class="line">    padding: 8px;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue组件化-插槽slot_非父子通信</title>
    <url>/2024/10/09/Vue%E7%BB%84%E4%BB%B6%E5%8C%96-%E6%8F%92%E6%A7%BDslot-%E9%9D%9E%E7%88%B6%E5%AD%90%E9%80%9A%E4%BF%A1/</url>
    <content><![CDATA[<h3 id="如何使用插槽slot？"><a href="#如何使用插槽slot？" class="headerlink" title="如何使用插槽slot？"></a>如何使用插槽slot？</h3><ul>
<li>这个时候我们就可以来定义插槽slot：<ul>
<li>插槽的使用过程其实是抽取共性、预留不同；</li>
<li>我们会将共同的元素、内容依然在组件内进行封装；</li>
<li>同时会将不同的元素使用slot作为占位，让外部决定到底显示什么样的元素；</li>
</ul>
</li>
<li>如何使用slot呢？<ul>
<li>Vue中将<slot>  元素作为承载分发内容的出口；</li>
<li>在封装组件中，使用特殊的元素就可以为封装组件开启一个插槽；</li>
<li>该插槽<strong>插入什么内容取决于父组件如何使用</strong>；</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689306092248-1c75d74d-e50b-46fe-b1ba-9fd424e684e2.png"></li>
</ul>
</li>
</ul>
<h4 id="插槽的默认内容"><a href="#插槽的默认内容" class="headerlink" title="插槽的默认内容"></a>插槽的默认内容</h4><ul>
<li>有时候我们希望在使用插槽时，如果没有插入对应的内容，那么我们需要显示一个默认的内容：<ul>
<li>当然这个默认的内容只会在没有提供插入的内容时，才会显示；</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689306157675-7df1a188-0a96-432b-ae0a-ace3f0e47555.png"></p>
<h4 id="多个插槽的效果"><a href="#多个插槽的效果" class="headerlink" title="多个插槽的效果"></a>多个插槽的效果</h4><ul>
<li>我们先测试一个知识点：如果一个组件中<strong>含有</strong>**<font style="color:#DF2A3F;">多个插槽</font>**<strong>，我们插入多个内容时是什么效果</strong>？<ul>
<li>我们会发现默认情况下每个插槽都会获取到我们插入的内容来显示；</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689306229363-614949f1-04af-46b5-96fc-678ae03d7c52.png"></p>
<h4 id="具名插槽的使用"><a href="#具名插槽的使用" class="headerlink" title="具名插槽的使用"></a>具名插槽的使用</h4><ul>
<li>事实上，我们希望达到的效果是插槽对应的显示，这个时候我们就可以使用 <strong>具名插槽</strong>：<ul>
<li>具名插槽顾名思义就是<font style="color:#DF2A3F;">给插槽起一个名字</font>，<slot> 元素有一个<font style="color:#DF2A3F;">特殊的 attribute：name</font>；</li>
<li>一个<font style="color:#DF2A3F;">不带 name 的slot，会带有隐含的名字 default；</font></li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689306357559-28e6154f-c295-4a77-8ade-0aa0cb0da414.png"></p>
<h4 id="动态插槽名"><a href="#动态插槽名" class="headerlink" title="动态插槽名"></a>动态插槽名</h4><ul>
<li>什么是动态插槽名呢？<ul>
<li>目前我们使用的插槽名称都是固定的；</li>
<li>比如 v-slot:left、v-slot:center等等；</li>
<li>我们可以通过<font style="color:#DF2A3F;"> v-slot:[dynamicSlotName]</font>方式动态绑定一个名称</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689306414092-c18fe786-6cef-4140-8ec0-6f236f83696b.png"></li>
</ul>
</li>
</ul>
<h4 id="具名插槽使用的时候缩写"><a href="#具名插槽使用的时候缩写" class="headerlink" title="具名插槽使用的时候缩写"></a>具名插槽使用的时候缩写</h4><ul>
<li>具名插槽使用的时候缩写：<ul>
<li>跟 v-on 和 v-bind 一样，v-slot 也有缩写；</li>
<li>即把参数之前的所有内容<font style="color:#DF2A3F;"> (v-slot:) 替换为字符 #</font></li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689306469155-a320e165-96b1-46f8-85bb-6c387c08f345.png"></p>
<h4 id="认识作用域插槽"><a href="#认识作用域插槽" class="headerlink" title="认识作用域插槽"></a>认识作用域插槽</h4><ul>
<li>但是有时候我们希望插槽可以访问到子组件中的内容是非常重要的：<ul>
<li>当一个组件被用来渲染一个数组元素时，我们使用插槽，并且希望插槽中没有显示每项的内容；</li>
<li>这个Vue给我们提供了作用域插槽；</li>
</ul>
</li>
<li>我们来看下面的一个案例：<ul>
<li>1.在App.vue中定义好数据</li>
<li>2.传递给ShowNames组件中</li>
<li>3.ShowNames组件中遍历names数据</li>
<li>4.定义插槽的prop</li>
<li>5.通过v-slot:default的方式获取到slot的props</li>
<li>6.使用slotProps中的item和index</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689306772834-ed927167-6529-4e89-8135-4eceafe1f343.png"></p>
<h4 id="独占默认插槽的缩写"><a href="#独占默认插槽的缩写" class="headerlink" title="独占默认插槽的缩写"></a>独占默认插槽的缩写</h4><ul>
<li><strong>如果我们的插槽是默认插槽default，那么在使用的时候 v-slot:default&#x3D;”slotProps”可以简写为v-slot&#x3D;”slotProps”：</strong></li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689306781395-3d74bde3-d535-4a3d-8fd4-40154c1e0513.png"></li>
<li>**并且如果我们的插槽只有默认插槽时，组件的标签可以被当做插槽的模板来使用，这样，我们就可以将 v-slot 直接用在组件上：  **<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689306787850-b46d15c0-353b-41b8-83b4-5aaaf3cffbca.png"></li>
</ul>
<h4 id="默认插槽和具名插槽混合"><a href="#默认插槽和具名插槽混合" class="headerlink" title="默认插槽和具名插槽混合"></a>默认插槽和具名插槽混合</h4><ul>
<li>但是，如果我们有默认插槽和具名插槽，那么按照完整的template来编写。</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689306837868-85e94156-3d0b-427b-b260-10e11813e023.png"></li>
<li>只要出现多个插槽，请始终为所有的插槽使用完整的基于  的语法： <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689306845526-2ad4a75b-3b79-49ef-994a-f21537ef2299.png"></li>
</ul>
<h3 id="非父子组件的通信"><a href="#非父子组件的通信" class="headerlink" title="非父子组件的通信"></a>非父子组件的通信</h3><ul>
<li>在开发中，我们构建了组件树之后，除了父子组件之间的通信之外，还会有非父子组件之间的通信。</li>
<li><strong>这里我们主要讲两种方式：</strong><ul>
<li><font style="color:#DF2A3F;">全局事件总线；</font></li>
<li><font style="color:#DF2A3F;">Provide&#x2F;Inject；  </font></li>
</ul>
</li>
</ul>
<h4 id="全局事件总线mitt库"><a href="#全局事件总线mitt库" class="headerlink" title=" 全局事件总线mitt库  "></a><font style="color:#000000;"> 全局事件总线mitt库  </font></h4><ul>
<li>Vue3从实例中移除了 $on、$off 和 $once 方法，所以我们如果希望继续使用全局事件总线，要通过第三方的库：<ul>
<li>Vue3官方有推荐一些库，例如 mitt 或 tiny-emitter；</li>
<li>这里我们主要讲解一下 hy-event-store 的使用；</li>
</ul>
</li>
<li>首先，我们需要先安装这个库<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689307026787-b7743632-6d77-486a-baba-b78332f9b90a.png"></li>
<li>其次，我们可以封装一个工具eventbus.js：</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689307021830-363adda1-da23-4deb-ab99-2008a8bc9d2a.png"></li>
</ul>
<h4 id="使用事件总线工具"><a href="#使用事件总线工具" class="headerlink" title="使用事件总线工具"></a>使用事件总线工具</h4><ul>
<li>在项目中可以使用它们：<ul>
<li>我们在App.vue中监听事件；</li>
<li>我们在Banner.vue中触发事件；</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689307208878-00fa987a-63c0-42ad-92ef-6744bb8e3509.png"></li>
</ul>
<h4 id="Mitt的事件取消"><a href="#Mitt的事件取消" class="headerlink" title="Mitt的事件取消"></a>Mitt的事件取消</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689307228004-34c47708-da07-4e1e-9a34-26b5f89570de.png"></p>
<h4 id="Provide和Inject"><a href="#Provide和Inject" class="headerlink" title="Provide和Inject"></a>Provide和Inject</h4><ul>
<li>Provide&#x2F;Inject用于非父子组件之间共享数据：<ul>
<li>比如有<font style="color:#DF2A3F;">一些深度嵌套的组件，子组件想要获取父组件的部分内 容</font>；</li>
<li>在这种情况下，如果我们仍然<font style="color:#DF2A3F;">将props沿着组件链逐级传递下 去</font>，就会非常的麻烦；</li>
</ul>
</li>
<li>对于这种情况下，我们<strong>可以使用 Provide 和 Inject ：</strong><ul>
<li>无论层级结构有多深，父组件都可以作为其所有子组件的依赖 提供者；</li>
<li><strong>父组件有一个 provide</strong> 选项来提供数据；</li>
<li>**子组件有一个 inject **选项来开始使用这些数据；</li>
</ul>
</li>
<li><h2 id="实际上，你可以将依赖注入看作是“long-range-props”，除了：-父组件不需要知道哪些子组件使用它-provide-的-property-子组件不需要知道-inject-的-property-来自哪里"><a href="#实际上，你可以将依赖注入看作是“long-range-props”，除了：-父组件不需要知道哪些子组件使用它-provide-的-property-子组件不需要知道-inject-的-property-来自哪里" class="headerlink" title="实际上，你可以将依赖注入看作是“long range props”，除了：  - 父组件不需要知道哪些子组件使用它 provide 的 property  - 子组件不需要知道 inject 的 property 来自哪里  - "></a>实际上，你可以将依赖注入看作是“long range props”，除了：<br>  - 父组件不需要知道哪些子组件使用它 provide 的 property<br>  - 子组件不需要知道 inject 的 property 来自哪里<br>  - <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689307294337-54db8d18-bde8-4f1f-9b9c-48fefe5254c6.png"></h2></li>
</ul>
<h4 id="Provide和Inject基本使用"><a href="#Provide和Inject基本使用" class="headerlink" title="Provide和Inject基本使用"></a>Provide和Inject基本使用</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689307379990-be6ffc2d-52e2-4f16-8b56-a0de08919698.png"></p>
<h4 id="Provide和Inject函数的写法"><a href="#Provide和Inject函数的写法" class="headerlink" title="Provide和Inject函数的写法"></a>Provide和Inject函数的写法</h4><ul>
<li>如果Provide中提供的一些数据是来自data，那么我们可能会想要通过this来获取：</li>
<li>这个时候会报错： this指向问题</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689307435931-fd5b3b70-d541-44ca-8452-6da226ef8444.png"></p>
<h4 id="处-理响应式数据"><a href="#处-理响应式数据" class="headerlink" title="处 理响应式数据"></a>处 理响应式数据</h4><ul>
<li>我们先来验证一个结果：<strong>如果我们修改了this.names的内容，那么使用length的子组件会不会是响应式的？</strong></li>
<li>我们会发现对应的子组件中是<strong>没有反应</strong>的：<ul>
<li>这是因为当我们<font style="color:#DF2A3F;">修改了names之后</font>，之前在provide中引入的<font style="color:#DF2A3F;"> this.names.length 本身并不是响应式</font>的；</li>
</ul>
</li>
<li>那么怎么样可以让我们的数据变成响应式的呢？<ul>
<li>非常的简单，我们可以使用响应式的一些API来完成这些功能，比如说computed函数；</li>
<li>当然，这个computed是vue3的新特性，在后面我会专门讲解，这里大家可以先直接使用一下；</li>
</ul>
</li>
<li>注意：我们在使用length的时候需要获取其中的value<ul>
<li>这是因为<font style="color:#DF2A3F;">computed返回的是一个ref对象</font>，需要取出其中的value来使用；</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689307539642-c78a4966-4167-4c89-b2c4-d694dfa593e3.png">  </p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>docker_1</title>
    <url>/2024/04/25/docker-1/</url>
    <content><![CDATA[<h1 id="1-Docker简介"><a href="#1-Docker简介" class="headerlink" title="1 Docker简介"></a>1 Docker简介</h1><h2 id="1-1-是什么？"><a href="#1-1-是什么？" class="headerlink" title="1.1 是什么？"></a>1.1 是什么？</h2><h3 id="1-1-1-问题：为什么会有docker出现？"><a href="#1-1-1-问题：为什么会有docker出现？" class="headerlink" title="1.1.1 问题：为什么会有docker出现？"></a>1.1.1 问题：为什么会有docker出现？</h3><p>假定您在开发一个尚硅谷的谷粒商城，您使用的是一台笔记本电脑而且您的开发环境具有特定的配置。其他开发人员身处的环境配置也各有不同。您正在开发的应用依赖于您当前的配置且还要依赖于某些配置文件。此外，您的企业还拥有标准化的测试和生产环境，且具有自身的配置和一系列支持文件。您希望尽可能多在本地模拟这些环境而不产生重新创建服务器环境的开销。请问？<br>您要如何确保应用能够在这些环境中运行和通过质量检测？并且在部署过程中不出现令人头疼的版本、配置问题，也无需重新编写代码和进行故障修复？<br>答案就是使用容器。Docker之所以发展如此迅速，也是因为它对此给出了一个标准化的解决方案—–系统平滑移植，容器虚拟化技术。<br>环境配置相当麻烦，换一台机器，就要重来一次，费力费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。开发人员利用 Docker 可以消除协作编码时“在我的机器上可正常工作”的问题。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1657877273526-d0933d80-8df6-4f97-88f8-5408d85b0cac.png#averageHue=%23e6f2d2&clientId=ub814d31d-eff7-4&from=paste&height=280&id=ua0a103d5&originHeight=350&originWidth=707&originalType=binary&ratio=1&rotation=0&showTitle=false&size=168661&status=done&style=none&taskId=u5ca3c218-4e54-4cf5-9403-493187a29fa&title=&width=565.6" alt="image.png"><br>之前在服务器配置一个应用的运行环境，要安装各种软件，就拿尚硅谷电商项目的环境来说，Java&#x2F;RabbitMQ&#x2F;MySQL&#x2F;JDBC驱动包等。安装和配置这些东西有多麻烦就不说了，它还不能跨平台。假如我们是在 Windows 上安装的这些环境，到了 Linux 又得重新装。况且就算不跨操作系统，换另一台同样操作系统的服务器，要移植应用也是非常麻烦的。<br>传统上认为，软件编码开发&#x2F;测试结束后，所产出的成果即是程序或是能够编译执行的二进制字节码等(java为例)。而为了让这些程序可以顺利执行，开发团队也得准备完整的部署文件，让维运团队得以部署应用程式，开发需要清楚的告诉运维部署团队，用的全部配置文件+所有软件环境。不过，即便如此，仍然常常发生部署失败的状况。Docker的出现使得Docker得以打破过去「程序即应用」的观念。透过镜像(images)将作业系统核心除外，运作应用程式所需要的系统环境，由下而上打包，达到应用程式跨平台间的无缝接轨运作。</p>
<h3 id="1-1-2-Docker理念"><a href="#1-1-2-Docker理念" class="headerlink" title="1.1.2 Docker理念"></a>1.1.2 Docker理念</h3><p>Docker是基于Go语言实现的云开源项目。<br>Docker的主要目标是“Build，Ship and Run Any App,Anywhere”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或数据库应用等等）及其运行环境能够做到“一次镜像，处处运行”。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1657877364759-7c47dfbb-a80b-41cf-ae0c-b9845807a3b1.png#averageHue=%23c1d0d4&clientId=ub814d31d-eff7-4&from=paste&height=234&id=u8a8b0625&originHeight=293&originWidth=645&originalType=binary&ratio=1&rotation=0&showTitle=false&size=115356&status=done&style=none&taskId=u849ecefe-37df-4960-938e-81b8911e836&title=&width=516" alt="image.png"><br>Linux容器技术的出现就解决了这样一个问题，而 Docker 就是在它的基础上发展过来的。将应用打成镜像，通过镜像成为运行在Docker容器上面的实例，而 Docker容器在任何操作系统上都是一致的，这就实现了跨平台、跨服务器。只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作。</p>
<h3 id="1-1-3-一句话"><a href="#1-1-3-一句话" class="headerlink" title="1.1.3 一句话"></a>1.1.3 一句话</h3><p>解决了运行环境和配置问题的软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术。</p>
<h2 id="1-2-容器与虚拟机比较"><a href="#1-2-容器与虚拟机比较" class="headerlink" title="1.2 容器与虚拟机比较"></a>1.2 容器与虚拟机比较</h2><h3 id="1-2-2-传统虚拟机技术"><a href="#1-2-2-传统虚拟机技术" class="headerlink" title="1.2.2 传统虚拟机技术"></a>1.2.2 传统虚拟机技术</h3><p>虚拟机（virtual machine）就是带环境安装的一种解决方案。</p>
<p>虚拟机的缺点：<br>1    资源占用多               2    冗余步骤多                 3    启动慢</p>
<h3 id="1-2-3-容器虚拟化技术"><a href="#1-2-3-容器虚拟化技术" class="headerlink" title="1.2.3 容器虚拟化技术"></a>1.2.3 容器虚拟化技术</h3><p>由于前面虚拟机存在某些缺点，Linux发展出了另一种虚拟化技术：<br>Linux容器(Linux Containers，缩写为 LXC)<br>Linux容器是与系统其他部分隔离开的一系列进程，从另一个镜像运行，并由该镜像提供支持进程所需的全部文件。容器提供的镜像包含了应用的所有依赖项，因而在从开发到测试再到生产的整个过程中，它都具有可移植性和一致性。<br>Linux 容器不是模拟一个完整的操作系统而是对进程进行隔离。有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。容器与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1657880971689-4d2b0f1b-81e5-46f4-a049-eb3ab7388d99.png#averageHue=%23e7e2d4&clientId=u7cda38f5-6415-4&from=paste&height=368&id=ud9189c68&originHeight=460&originWidth=690&originalType=binary&ratio=1&rotation=0&showTitle=false&size=90015&status=done&style=none&taskId=u04b01b37-3c1a-4fb4-bdda-d38f09a2a8c&title=&width=552" alt="image.png"></p>
<h3 id="1-2-4-对比"><a href="#1-2-4-对比" class="headerlink" title="1.2.4 对比"></a>1.2.4 对比</h3><p>比较了 Docker 和传统虚拟化方式的不同之处：<br>*传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；<br>*容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p>
<ul>
<li>每个容器之间互相隔离，每个容器有自己的文件系统 ，容器之间进程不会相互影响，能区分计算资源。<br>对比：</li>
</ul>
<table>
<thead>
<tr>
<th>特性</th>
<th>容器</th>
<th>虚拟机</th>
</tr>
</thead>
<tbody><tr>
<td>启动</td>
<td>秒级</td>
<td>分钟级</td>
</tr>
<tr>
<td>大小</td>
<td>一般为Mb</td>
<td>一般为Gb</td>
</tr>
<tr>
<td>速度</td>
<td>接近原生</td>
<td>比较慢</td>
</tr>
<tr>
<td>系统支持数量</td>
<td>单机支持上千个容器</td>
<td>一般几十个</td>
</tr>
</tbody></table>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h2 id="1-4-去哪下"><a href="#1-4-去哪下" class="headerlink" title="1.4 去哪下"></a>1.4 去哪下</h2><h3 id="1-4-1-官网"><a href="#1-4-1-官网" class="headerlink" title="1.4.1 官网"></a>1.4.1 官网</h3><p>docker官网：<a href="http://www.docker.com/">http://www.docker.com</a></p>
<h3 id="1-4-2-仓库"><a href="#1-4-2-仓库" class="headerlink" title="1.4.2 仓库"></a>1.4.2 仓库</h3><p>Docker Hub官网: <a href="https://hub.docker.com/">https://hub.docker.com/</a></p>
<h1 id="2-Docker安装"><a href="#2-Docker安装" class="headerlink" title="2 Docker安装"></a>2 Docker安装</h1><h2 id="2-1-前提说明"><a href="#2-1-前提说明" class="headerlink" title="2.1 前提说明"></a>2.1 前提说明</h2><p>CentOS Docker 安装<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658125998124-ae2d8764-3a68-4259-b7df-a945e02505e3.png#averageHue=%23f8f5f4&clientId=u20d43783-d0ca-4&from=paste&height=333&id=u2e93c25a&originHeight=416&originWidth=871&originalType=binary&ratio=1&rotation=0&showTitle=false&size=45181&status=done&style=none&taskId=ub0a11a9c-bb9c-4937-9b6b-dc65cb25bc9&title=&width=696.8" alt="image.png"><br>前提条件<br>目前，CentOS 仅发行版本中的内核支持 Docker。Docker 运行在CentOS 7 (64-bit)上，<br>要求系统为64位、Linux系统内核版本为 3.8以上，这里选用Centos7.x<br>查看自己的内核<br>uname命令用于打印当前系统相关信息（内核版本号、硬件架构、主机名称和操作系统类型等）。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658126004570-975d10a1-54ff-444b-9ae6-6f2f6252221b.png#averageHue=%23fef8f8&clientId=u20d43783-d0ca-4&from=paste&height=134&id=uf5c4c8c9&originHeight=167&originWidth=587&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23415&status=done&style=none&taskId=u743ed56d-3727-4aeb-a7e0-6c252d462a6&title=&width=469.6" alt="image.png"></p>
<h2 id="2-2-Docker的基本组成"><a href="#2-2-Docker的基本组成" class="headerlink" title="2.2 Docker的基本组成"></a>2.2 Docker的基本组成</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658126239499-f71db64a-4246-4167-bd7c-eb71b2b606be.png#averageHue=%23e38f69&clientId=u20d43783-d0ca-4&from=paste&height=328&id=uf362ef61&originHeight=410&originWidth=742&originalType=binary&ratio=1&rotation=0&showTitle=false&size=88375&status=done&style=none&taskId=ua092ea4f-34cc-4c82-ac44-834cd89ed24&title=&width=593.6" alt="image.png"><br>Docker是一个Client-Server结构的系统，Docker守护进程运行在主机上， 然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。 容器，是一个运行时环境，就是我们前面说到的集装箱。可以对比mysql演示对比讲解<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658126258223-a333c821-0360-4ab7-a9f8-3d77f0f39b0d.png#averageHue=%23b2bed0&clientId=u20d43783-d0ca-4&from=paste&height=448&id=u86ce6b79&originHeight=560&originWidth=549&originalType=binary&ratio=1&rotation=0&showTitle=false&size=71978&status=done&style=none&taskId=u5af87b74-a770-4189-9077-c270e776719&title=&width=439.2" alt="image.png"></p>
<h3 id="2-2-1-镜像-image"><a href="#2-2-1-镜像-image" class="headerlink" title="2.2.1 镜像(image)"></a>2.2.1 镜像(image)</h3><p>Docker 镜像（Image）就是一个只读的模板。镜像可以用来创建 Docker 容器，一个镜像可以创建很多容器。<br>它也相当于是一个root文件系统。比如官方镜像 centos:7 就包含了完整的一套 centos:7 最小系统的 root 文件系统。<br>相当于容器的“源代码”，docker镜像文件类似于Java的类模板，而docker容器实例类似于java中new出来的实例对象。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658126091673-3fabd0d4-7dd4-4575-8d38-184787b9d236.png#averageHue=%23ececeb&clientId=u20d43783-d0ca-4&from=paste&height=130&id=u2f7e66db&originHeight=162&originWidth=562&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14160&status=done&style=none&taskId=u98edd089-7afe-44a1-b84d-a349ed0739c&title=&width=449.6" alt="image.png"></p>
<h3 id="2-2-2-容器-container"><a href="#2-2-2-容器-container" class="headerlink" title="2.2.2 容器(container)"></a>2.2.2 容器(container)</h3><p><strong>1 从面向对象角度</strong><br>Docker 利用容器（Container）独立运行的一个或一组应用，应用程序或服务运行在容器里面，容器就类似于一个虚拟化的运行环境，容器是用镜像创建的运行实例。就像是Java中的类和实例对象一样，镜像是静态的定义，容器是镜像运行时的实体。容器为镜像提供了一个标准的和隔离的运行环境，它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台<br><strong>2 从镜像容器角度</strong><br>可以把容器看做是一个简易版的 Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</p>
<h3 id="2-2-3-仓库-repository"><a href="#2-2-3-仓库-repository" class="headerlink" title="2.2.3 仓库(repository)"></a>2.2.3 仓库(repository)</h3><p>仓库（Repository）是集中存放镜像文件的场所。<br>类似于<br>Maven仓库，存放各种jar包的地方；<br>github仓库，存放各种git项目的地方；<br>Docker公司提供的官方registry被称为Docker Hub，存放各种镜像模板的地方。<br>仓库分为公开仓库（Public）和私有仓库（Private）两种形式。<br>最大的公开仓库是 Docker Hub(<a href="https://hub.docker.com/">https://hub.docker.com/)</a>)，<br>存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云 、网易云等。</p>
<h3 id="2-2-4-小总结"><a href="#2-2-4-小总结" class="headerlink" title="2.2.4 小总结"></a>2.2.4 小总结</h3><p>需要正确的理解仓库&#x2F;镜像&#x2F;容器这几个概念:<br>Docker 本身是一个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就是image镜像文件。只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来一个对象)。<br>image文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。<br>镜像文件</p>
<ul>
<li>image 文件生成的容器实例，本身也是一个文件，称为镜像文件。<br>容器实例</li>
<li>一个容器运行一种服务，当我们需要的时候，就可以通过docker客户端创建一个对应的运行实例，也就是我们的容器<br>仓库</li>
<li>就是放一堆镜像的地方，我们可以把镜像发布到仓库中，需要的时候再从仓库中拉下来就可以了。</li>
</ul>
<h2 id="2-3-Docker平台架构图解-架构版"><a href="#2-3-Docker平台架构图解-架构版" class="headerlink" title="2.3 Docker平台架构图解(架构版)"></a>2.3 Docker平台架构图解(架构版)</h2><p>Docker是一个 C&#x2F;S（Client-Server） 结构的系统，后端是一个松耦合架构，众多模块各司其职。</p>
<p>Docker守护进程运行在主机上，然后通过Socket连接从客户端访问，守护进程从容器接收命令并管理运行在主机上的容器。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/svg/12911942/1652093339897-20255a0a-e981-43e3-9e9e-654b8da3b2c8.svg#from=url&id=oQdyq&originHeight=527&originWidth=1009&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<p>Docker运行的基本流程为：<br>1用户是使用Docker Client 与 Docker Daemon 建立通信，并发送请求给后者<br>2Docker Daemon 作为 Docker 架构的主体部分，首先提供 Docker Server 的功能使其可以接收 Docker Client 的请求<br>3Docker Engine 执行 Docker 内部的一系列工作，每一项工作都是以一个 Job 的形式存在<br>4Job 的运行过程中，当需要容器镜像时，则从 Docker Registry 中下载镜像，并通过镜像管理驱动 Graph Driver 将下载镜像以 Graph 的形式存储<br>5当需要为 Docker 创建网络环境时，通过网络管理驱动 Network driver 创建并配置 Docker 容器网络环境<br>6当需要限制 Docker 容器运行资源或执行用户指令等操作时，则通过 Exec driver 来完成<br>7Libcontainer 是一项独立的容器管理包，Network driver 以及 Exec driver 都是通过 Libcontainer 来实现具体对容器进行的操作</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/12911942/1652093347909-4fcf65d1-da12-47cb-9a2f-0c4528d7e4c9.png?x-oss-process=image/resize,w_750,limit_0#averageHue=%23323432&from=url&id=gB0p1&originHeight=1036&originWidth=750&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<h2 id="2-4-安装步骤"><a href="#2-4-安装步骤" class="headerlink" title="2.4 安装步骤"></a>2.4 安装步骤</h2><p>CentOS7安装Docker：<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p>
<h3 id="2-4-1-确定你是CentOS7及以上版本"><a href="#2-4-1-确定你是CentOS7及以上版本" class="headerlink" title="2.4.1 确定你是CentOS7及以上版本"></a>2.4.1 确定你是CentOS7及以上版本</h3><p><code>cat /etc/redhat-release</code></p>
<h3 id="2-4-2-卸载旧版本"><a href="#2-4-2-卸载旧版本" class="headerlink" title="2.4.2 卸载旧版本"></a>2.4.2 卸载旧版本</h3><p><a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658126844192-45e71ac5-a5bf-46ca-8942-b668436b372a.png#averageHue=%23f1eecf&clientId=ucd061c59-bb21-4&from=paste&height=405&id=uc4e83fea&originHeight=506&originWidth=776&originalType=binary&ratio=1&rotation=0&showTitle=false&size=54913&status=done&style=none&taskId=uacd2b926-bda2-40fa-8cca-f9979b39802&title=&width=620.8" alt="image.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>

<blockquote>
<p>旧版本的Docker引擎包可能叫做：<code>docker</code>、<code>docker-engine</code>。</p>
<p>新版本的Docker引擎包叫做：<code>docker-ce</code></p>
</blockquote>
<h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2><h3 id="2-4-3-yum安装gcc相关"><a href="#2-4-3-yum安装gcc相关" class="headerlink" title="2.4.3 yum安装gcc相关"></a>2.4.3 yum安装gcc相关</h3><p>CentOS7能上外网<br><code>yum -y install gcc</code><br><code>yum -y install gcc-c++</code></p>
<h3 id="2-4-4-安装需要的软件包"><a href="#2-4-4-安装需要的软件包" class="headerlink" title="2.4.4 安装需要的软件包"></a>2.4.4 安装需要的软件包</h3><p>官网要求<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658126862915-d8d43523-c57c-466a-ba96-ee1a91932a13.png#averageHue=%23e0c397&clientId=ucd061c59-bb21-4&from=paste&height=415&id=uc1845a3e&originHeight=519&originWidth=783&originalType=binary&ratio=1&rotation=0&showTitle=false&size=79005&status=done&style=none&taskId=ua1582f22-e74c-4e4b-9f41-97b538a8664&title=&width=626.4" alt="image.png"><br>执行命令<br><code>yum install -y yum-utils</code></p>
<h3 id="2-4-5-设置stable镜像仓库"><a href="#2-4-5-设置stable镜像仓库" class="headerlink" title="2.4.5 设置stable镜像仓库"></a>2.4.5 设置stable镜像仓库</h3><p>❌<br><code>yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</code><br>如果上边不行，用下边这个v<br><code>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658126979708-37e95321-1241-4470-9052-7af819b752cd.png#averageHue=%23bad5be&clientId=ucd061c59-bb21-4&from=paste&height=130&id=u99f1ec0a&originHeight=163&originWidth=874&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11615&status=done&style=none&taskId=u149e1bf0-c07e-4bd2-8a13-1bf2cf45004&title=&width=699.2" alt="image.png"><br>:::danger<br>报错：<br>1   [Errno 14] curl#35 - TCP connection reset by peer<br>2   [Errno 12] curl#35 - Timeout<br>:::<br>✔️<br><code>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658127043948-db9cd0a7-402b-49d4-aab9-96048a5b9c19.png#averageHue=%23fef5f5&clientId=ucd061c59-bb21-4&from=paste&height=129&id=u05eb398f&originHeight=161&originWidth=1287&originalType=binary&ratio=1&rotation=0&showTitle=false&size=35490&status=done&style=none&taskId=ucabca1cc-c04f-4e92-9aaa-496e0030c1f&title=&width=1029.6" alt="image.png"></p>
<h3 id="2-4-6-更新yum软件包索引（创建缓存，可选"><a href="#2-4-6-更新yum软件包索引（创建缓存，可选" class="headerlink" title="2.4.6 更新yum软件包索引（创建缓存，可选	)"></a>2.4.6 更新yum软件包索引（创建缓存，可选	)</h3><p><code>yum makecache fast</code></p>
<h3 id="2-4-7-安装DOCKER-CE"><a href="#2-4-7-安装DOCKER-CE" class="headerlink" title="2.4.7 安装DOCKER CE"></a>2.4.7 安装DOCKER CE</h3><p>安装最新版本的Docker引擎、Docker客户端：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker-ce是Docker引擎，docker-ce-cli是客户端</span></span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure>

<p>此时，默认安装的docker引擎、客户端都是最新版本。</p>
<p>如果要安装指定版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询版本列表</span></span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定版本安装17.09.0.ce版</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io docker-compose-plugin</span></span><br><span class="line">sudo yum install docker-ce-17.09.0.ce docker-ce-cli-17.09.0.ce containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure>

<h2 id="-3"><a href="#-3" class="headerlink" title=""></a></h2><h3 id="2-4-8-启动docker"><a href="#2-4-8-启动docker" class="headerlink" title="2.4.8 启动docker"></a>2.4.8 启动docker</h3><p><code>systemctl start docker</code></p>
<h3 id="2-4-9-测试"><a href="#2-4-9-测试" class="headerlink" title="2.4.9 测试"></a>2.4.9 测试</h3><p><code>docker version</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658127110699-6b35fe5b-40dd-4b00-aa5a-edf410a551c9.png#averageHue=%23fefafa&clientId=ucd061c59-bb21-4&from=paste&height=388&id=ua89fdf1d&originHeight=485&originWidth=644&originalType=binary&ratio=1&rotation=0&showTitle=false&size=69480&status=done&style=none&taskId=ua5defdb7-66bd-4506-886a-a45c805d656&title=&width=515.2" alt="image.png"><br><code>docker run hello-world</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658127121361-38f89b48-1f6b-41db-a4e4-b5daa2033cd8.png#averageHue=%23fef6f6&clientId=ucd061c59-bb21-4&from=paste&height=254&id=ub5394df9&originHeight=317&originWidth=878&originalType=binary&ratio=1&rotation=0&showTitle=false&size=49368&status=done&style=none&taskId=ua6f2335b-4b82-4376-983f-97ad8a9b30c&title=&width=702.4" alt="image.png"></p>
<h3 id="2-4-10-卸载"><a href="#2-4-10-卸载" class="headerlink" title="2.4.10 卸载"></a>2.4.10 卸载</h3><p>卸载Docker步骤：</p>
<ol>
<li>关闭服务</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure>


<ol start="2">
<li>使用<code>yum</code>删除docker引擎</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>


<ol start="3">
<li>删除镜像、容器、卷、自定义配置等文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /var/lib/docker</span><br><span class="line">sudo rm -rf /var/lib/containerd</span><br></pre></td></tr></table></figure>

<h1 id="-4"><a href="#-4" class="headerlink" title=""></a></h1><h2 id="2-5-阿里云镜像加速"><a href="#2-5-阿里云镜像加速" class="headerlink" title="2.5 阿里云镜像加速"></a>2.5 阿里云镜像加速</h2><ol>
<li>是什么</li>
</ol>
<p><a href="https://promotion.aliyun.com/ntms/act/kubernetes.html">https://promotion.aliyun.com/ntms/act/kubernetes.html</a></p>
<ol start="2">
<li>注册一个属于自己的阿里云账户(可复用淘宝账号)</li>
<li>获得加速器地址连接<ol>
<li>登陆阿里云开发者平台</li>
</ol>
</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658127431916-8d79fe8c-71ce-4bc4-89a4-9ca421cc6806.png#averageHue=%2317818b&clientId=u64d03b79-337b-4&from=paste&height=437&id=ud3bd5390&originHeight=546&originWidth=1225&originalType=binary&ratio=1&rotation=0&showTitle=false&size=184608&status=done&style=none&taskId=uac2258ef-406a-4e02-a555-d279aef4742&title=&width=980" alt="image.png"></p>
<pre><code>  2. 点击控制台	
  3. 选择容器镜像服务
</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658127461505-e6f718dd-b5f3-423d-b893-b381a253efb0.png#averageHue=%23e7e4e3&clientId=u64d03b79-337b-4&from=paste&height=527&id=u6c9e6324&originHeight=659&originWidth=1348&originalType=binary&ratio=1&rotation=0&showTitle=false&size=157365&status=done&style=none&taskId=u005e0f88-3822-4edb-9e68-32252b537ef&title=&width=1078.4" alt="image.png"></p>
<pre><code>  4. 获取加速器地址
</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658127474673-4b4b8945-91f7-49b9-ad66-aec303c5e6c5.png#averageHue=%23faf6f4&clientId=u64d03b79-337b-4&from=paste&height=456&id=u571dbe68&originHeight=570&originWidth=846&originalType=binary&ratio=1&rotation=0&showTitle=false&size=40701&status=done&style=none&taskId=ufdbe9f4e-d779-4527-9e01-50de2a77f7a&title=&width=676.8" alt="image.png"></p>
<p>里面提供了一个加速器地址：<code>https://xxxxx.mirror.aliyuncs.com</code>，将该地址配置到docker中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初次进来时没有/etc/docker/daemon.json文件，直接创建该文件即可</span></span><br><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>

<p>在<code>daemon.json</code>中写入以下内容：（即加速器地址）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://xxxxx.mirror.aliyuncs.com&quot;</span><span class="punctuation">]</span>  </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>然后刷新配置、重启docker即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">centos6 的命令</span></span><br><span class="line">sudo chkconfig daemon-reload</span><br><span class="line">sudo service docker restart</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">centos7 的命令</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>


<h2 id="2-6-永远的HelloWorld"><a href="#2-6-永远的HelloWorld" class="headerlink" title="2.6 永远的HelloWorld"></a>2.6 永远的HelloWorld</h2><p>启动Docker后台容器(测试运行 hello-world)<br><code>docker run hello-world</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658127597827-3f44d88b-495b-4203-b88a-df12a5077bec.png#averageHue=%23f0e7e7&clientId=u64d03b79-337b-4&from=paste&height=398&id=uee044d54&originHeight=497&originWidth=857&originalType=binary&ratio=1&rotation=0&showTitle=false&size=72073&status=done&style=none&taskId=ubf5228e7-ed8f-4763-a699-37f063000ab&title=&width=685.6" alt="image.png"><br>输出这段提示以后，hello world就会停止运行，容器自动终止。<br>run干了什么？<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658127613575-33c2ea48-6218-48dc-936d-66b4c45d8165.png#averageHue=%23f9f9f9&clientId=u64d03b79-337b-4&from=paste&height=366&id=u614e6b58&originHeight=458&originWidth=938&originalType=binary&ratio=1&rotation=0&showTitle=false&size=37499&status=done&style=none&taskId=u213f1223-98b0-4889-9592-1b4ad1b1760&title=&width=750.4" alt="image.png"></p>
<h2 id="2-7-底层原理"><a href="#2-7-底层原理" class="headerlink" title="2.7 底层原理"></a>2.7 底层原理</h2><p>为什么Docker会比VM虚拟机快<br><strong>(1)docker有着比虚拟机更少的抽象层</strong><br>由于docker不需要Hypervisor(虚拟机)实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。<br><strong>(2)docker利用的是宿主机的内核,而不需要加载操作系统OS内核</strong><br>当新建一个容器时,docker不需要和虚拟机一样重新加载一个操作系统内核。进而避免引寻、加载操作系统内核返回等比较费时费资源的过程,当新建一个虚拟机时,虚拟机软件需要加载OS,返回新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统,则省略了返回过程,因此新建一个docker容器只需要几秒钟。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658127650958-09fa7db3-82a6-4422-82f2-1f199c5587e3.png#averageHue=%233b95bb&clientId=u64d03b79-337b-4&from=paste&height=250&id=u01e7341a&originHeight=313&originWidth=598&originalType=binary&ratio=1&rotation=0&showTitle=false&size=97456&status=done&style=none&taskId=u31c90309-8298-4ed7-acf9-38aa7b20393&title=&width=478.4" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658127674217-cece7c8f-55e1-404d-80b8-4ef145cab176.png#averageHue=%23eeefef&clientId=u64d03b79-337b-4&from=paste&height=166&id=uf75a1855&originHeight=207&originWidth=523&originalType=binary&ratio=1&rotation=0&showTitle=false&size=103877&status=done&style=none&taskId=uf3b01d5d-ee74-44e6-ac2a-1752d1c5df0&title=&width=418.4" alt="image.png"></p>
<h1 id="3-Docker常用命令"><a href="#3-Docker常用命令" class="headerlink" title="3 Docker常用命令"></a>3 Docker常用命令</h1><h2 id="3-1-帮助启动类命令"><a href="#3-1-帮助启动类命令" class="headerlink" title="3.1 帮助启动类命令"></a>3.1 帮助启动类命令</h2><ul>
<li>启动docker： <code>systemctl start docker</code></li>
<li>停止docker： <code>systemctl stop docker</code></li>
<li>重启docker： <code>systemctl restart docker</code></li>
<li>查看docker状态： <code>systemctl status docker</code></li>
<li>开机启动： <code>systemctl enable docker</code></li>
<li>查看docker概要信息： <code>docker info</code></li>
<li>查看docker总体帮助文档： <code>docker --help</code></li>
<li>查看docker命令帮助文档：<code> docker 具体命令 --help</code></li>
</ul>
<h2 id="3-2-镜像命令"><a href="#3-2-镜像命令" class="headerlink" title="3.2 镜像命令"></a>3.2 镜像命令</h2><h3 id="3-2-1docker-images"><a href="#3-2-1docker-images" class="headerlink" title="3.2.1docker images"></a>3.2.1<code>docker images</code></h3><p>列出本地主机上的镜像<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658128356068-5e3ff7a4-7f38-4a11-90e0-12bf83456dae.png#averageHue=%23f1e0e0&clientId=u64d03b79-337b-4&from=paste&height=66&id=ua04d39ab&originHeight=82&originWidth=1078&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14537&status=done&style=none&taskId=uc1ecac8d-62da-442d-a1ac-c383f40bb73&title=&width=862.4" alt="image.png"><br>:::info<br>各个选项说明:<br>REPOSITORY：表示镜像的仓库源<br>TAG：镜像的标签版本号<br>IMAGE ID：镜像ID<br>CREATED：镜像创建时间<br>SIZE：镜像大小<br>同一仓库源可以有多个 TAG版本，代表这个仓库源的不同个版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。<br>如果你不指定一个镜像的版本标签，例如你只使用 ubuntu，docker 将默认使用 ubuntu:latest 镜像<br>OPTIONS说明：<br>-a :列出本地所有的镜像（含历史映像层）<br>-q :只显示镜像ID。<br>:::</p>
<h3 id="3-2-2docker-search-某个XXX镜像名字"><a href="#3-2-2docker-search-某个XXX镜像名字" class="headerlink" title="3.2.2docker search 某个XXX镜像名字"></a>3.2.2<code>docker search 某个XXX镜像名字</code></h3><p>网站：<a href="https://hub.docker.com/">https://hub.docker.com</a><br>命令：<code>docker search [OPTIONS] 镜像名字</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658128663501-7a2ed748-1710-4a5b-a807-6d2f5904224e.png#averageHue=%23d7e1c0&clientId=u64d03b79-337b-4&from=paste&height=158&id=u2f64c1db&originHeight=198&originWidth=667&originalType=binary&ratio=1&rotation=0&showTitle=false&size=43309&status=done&style=none&taskId=u3e403860-5488-411a-bc13-3c69aa086d9&title=&width=533.6" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658128646788-0a2bb440-6da9-42de-ad89-9c7d8e758397.png#averageHue=%23fef9f9&clientId=u64d03b79-337b-4&from=paste&height=240&id=u0ad61e15&originHeight=300&originWidth=1348&originalType=binary&ratio=1&rotation=0&showTitle=false&size=61781&status=done&style=none&taskId=u656fc522-c15c-45e9-a4a7-8a2fc3e30ad&title=&width=1078.4" alt="image.png"><br>:::info<br>OPTIONS说明：<br>–limit : 只列出N个镜像，默认25个<br>docker search –limit 5 redis<br>:::</p>
<h3 id="3-2-3docker-pull-某个XXX镜像名字"><a href="#3-2-3docker-pull-某个XXX镜像名字" class="headerlink" title="3.2.3docker pull 某个XXX镜像名字"></a>3.2.3<code>docker pull 某个XXX镜像名字</code></h3><p>下载镜像<br><code>docker pull 镜像名字[:TAG]</code><br><code>docker pull 镜像名字</code><br>没有TAG就是最新版<br>等价于<br><code>docker pull 镜像名字:latest</code><br><code>docker pull ubuntu</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658128687848-01ba57aa-4730-4b81-88f0-62e356717c87.png#averageHue=%23fefbfb&clientId=u64d03b79-337b-4&from=paste&height=234&id=ucfdfa60c&originHeight=292&originWidth=911&originalType=binary&ratio=1&rotation=0&showTitle=false&size=58820&status=done&style=none&taskId=u5b912d72-4bd2-416c-a85c-a683d6132ba&title=&width=728.8" alt="image.png"></p>
<h3 id="3-2-4docker-system-df"><a href="#3-2-4docker-system-df" class="headerlink" title="3.2.4docker system df "></a>3.2.4<code>docker system df </code></h3><p>查看镜像&#x2F;容器&#x2F;数据卷所占的空间<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658128697120-12812d85-0d3d-419f-ac6f-767d8c470316.png#averageHue=%23fefbfb&clientId=u64d03b79-337b-4&from=paste&height=118&id=u10987a33&originHeight=147&originWidth=685&originalType=binary&ratio=1&rotation=0&showTitle=false&size=28295&status=done&style=none&taskId=u39ea12ad-f2a3-449b-856f-b679c1aa09b&title=&width=548" alt="image.png"></p>
<h3 id="3-2-5docker-rmi-某个XXX镜像名字ID"><a href="#3-2-5docker-rmi-某个XXX镜像名字ID" class="headerlink" title="3.2.5docker rmi 某个XXX镜像名字ID"></a>3.2.5<code>docker rmi 某个XXX镜像名字ID</code></h3><p>删除镜像<br>删除单个<br><code>docker rmi -f 镜像ID</code><br>删除多个<br><code>docker rmi -f 镜像名1:TAG 镜像名2:TAG </code><br>删除全部<br><code>docker rmi -f $(docker images -qa)</code></p>
<h3 id="3-2-6-面试题：谈谈docker虚悬镜像是什么？"><a href="#3-2-6-面试题：谈谈docker虚悬镜像是什么？" class="headerlink" title="3.2.6 面试题：谈谈docker虚悬镜像是什么？"></a>3.2.6 面试题：谈谈docker虚悬镜像是什么？</h3><p>是什么？<br>仓库名、标签都是<none>的镜像，俗称虚悬镜像dangling image<br>长什么样？<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658128731936-a1972083-d868-493b-b199-818efc071b0f.png#averageHue=%23fef4f4&clientId=u64d03b79-337b-4&from=paste&height=63&id=u94944399&originHeight=79&originWidth=740&originalType=binary&ratio=1&rotation=0&showTitle=false&size=31601&status=done&style=none&taskId=u6bc3ef2e-d1d2-4ca9-b4b4-a9dc47a0394&title=&width=592" alt="image.png"></p>
<h2 id="3-3-容器命令"><a href="#3-3-容器命令" class="headerlink" title="3.3 容器命令"></a>3.3 容器命令</h2><h3 id="3-3-1-有镜像才能创建容器，-这是根本前提-下载一个CentOS或者ubuntu镜像演示"><a href="#3-3-1-有镜像才能创建容器，-这是根本前提-下载一个CentOS或者ubuntu镜像演示" class="headerlink" title="3.3.1 有镜像才能创建容器， 这是根本前提(下载一个CentOS或者ubuntu镜像演示)"></a>3.3.1 有镜像才能创建容器， 这是根本前提(下载一个CentOS或者ubuntu镜像演示)</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658129060820-e3bbad90-56b9-44d7-971b-305557ab2ed9.png#averageHue=%23fcfcfb&clientId=u64d03b79-337b-4&from=paste&height=358&id=u93c157ff&originHeight=358&originWidth=891&originalType=binary&ratio=1&rotation=0&showTitle=false&size=79684&status=done&style=none&taskId=u4bc8500a-e1f4-45b7-a450-58c266db587&title=&width=891" alt="image.png"><br><code>docker pull centos</code><br><code>docker pull ubuntu</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658129093993-0b483619-b517-46b5-a248-887a445e78eb.png#averageHue=%23fefbfb&clientId=u64d03b79-337b-4&from=paste&height=292&id=uadc3724a&originHeight=292&originWidth=911&originalType=binary&ratio=1&rotation=0&showTitle=false&size=58820&status=done&style=none&taskId=u74ed7713-ec2b-4cd3-8326-8498078d817&title=&width=911" alt="image.png"></p>
<h3 id="3-3-2-新建-启动容器"><a href="#3-3-2-新建-启动容器" class="headerlink" title="3.3.2 新建+启动容器"></a>3.3.2 新建+启动容器</h3><p><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code><br>:::info<br>OPTIONS说明<br>OPTIONS说明（常用）：有些是一个减号，有些是两个减号<br>–name&#x3D;”容器新名字”       为容器指定一个名称；<br>-d: 后台运行容器并返回容器ID，也即启动守护式容器(后台运行)；<br>-i：以交互模式运行容器，通常与 -t 同时使用；<br>-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用；<br>也即启动交互式容器(前台有伪终端，等待交互)；<br>-P: 随机端口映射，大写P<br>-p: 指定端口映射，小写p<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658129219778-97778de9-d0a0-4824-93f7-14f42b329784.png#averageHue=%23d1dcb9&clientId=u64d03b79-337b-4&from=paste&height=269&id=leJ2n&originHeight=269&originWidth=836&originalType=binary&ratio=1&rotation=0&showTitle=false&size=115640&status=done&style=none&taskId=u8f16056c-27fa-410a-9f8f-700c36b2aff&title=&width=836" alt="image.png"><br>:::<br>启动交互式容器(前台命令行)<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658129248609-498afeab-bed1-4ff1-b3f4-4c6b55ef6aea.png#averageHue=%23f5f2f2&clientId=u64d03b79-337b-4&from=paste&height=273&id=uf66c906c&originHeight=273&originWidth=887&originalType=binary&ratio=1&rotation=0&showTitle=false&size=29690&status=done&style=none&taskId=u8302255a-ae3c-4794-9514-ef2d2a4cf29&title=&width=887" alt="image.png"><br>#使用镜像centos:latest以交互模式启动一个容器,在容器内执行&#x2F;bin&#x2F;bash命令。<br><code>docker run -it centos /bin/bash </code><br>:::info<br>参数说明：<br>-i: 交互式操作。<br>-t: 终端。<br>centos : centos 镜像。<br>&#x2F;bin&#x2F;bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 &#x2F;bin&#x2F;bash。<br>要退出终端，直接输入 exit:<br>:::</p>
<h3 id="3-3-3-列出当前所有正在运行的容器"><a href="#3-3-3-列出当前所有正在运行的容器" class="headerlink" title="3.3.3 列出当前所有正在运行的容器"></a>3.3.3 列出当前所有正在运行的容器</h3><p><code>docker ps [OPTIONS]</code><br>:::info<br>OPTIONS说明（常用）：<br>-a :列出当前所有正在运行的容器+历史上运行过的<br>-l :显示最近创建的容器。<br>-n：显示最近n个创建的容器。<br>-q :静默模式，只显示容器编号。<br>:::</p>
<h3 id="3-3-4-退出容器"><a href="#3-3-4-退出容器" class="headerlink" title="3.3.4 退出容器"></a>3.3.4 退出容器</h3><p>两种退出方式<br><code>exit</code><br>run进去容器，exit退出，容器停止<br><code>ctrl+p+q</code><br>run进去容器，ctrl+p+q退出，容器不停止</p>
<h3 id="3-3-5-启动已停止运行的容器"><a href="#3-3-5-启动已停止运行的容器" class="headerlink" title="3.3.5 启动已停止运行的容器"></a>3.3.5 启动已停止运行的容器</h3><p><code>docker start 容器ID或者容器名</code></p>
<h3 id="3-3-6-重启容器"><a href="#3-3-6-重启容器" class="headerlink" title="3.3.6 重启容器"></a>3.3.6 重启容器</h3><p><code>docker restart 容器ID或者容器名</code></p>
<h3 id="3-3-7-停止容器"><a href="#3-3-7-停止容器" class="headerlink" title="3.3.7 停止容器"></a>3.3.7 停止容器</h3><p><code>docker stop 容器ID或者容器名</code></p>
<h3 id="3-3-8-强制停止容器"><a href="#3-3-8-强制停止容器" class="headerlink" title="3.3.8 强制停止容器"></a>3.3.8 强制停止容器</h3><p><code>docker kill 容器ID或容器名</code></p>
<h3 id="3-3-9-删除已停止的容器"><a href="#3-3-9-删除已停止的容器" class="headerlink" title="3.3.9 删除已停止的容器"></a>3.3.9 删除已停止的容器</h3><p><code>docker rm 容器ID</code></p>
<blockquote>
<p>删除容器是 <code>docker rm</code>，删除镜像是 <code>docker rmi</code>，注意区分。</p>
</blockquote>
<p>一次性删除多个容器实例<br><code>docker rm -f $(docker ps -a -q)</code><br><code>docker ps -a -q | xargs docker rm</code></p>
<h3 id="3-3-10-重要"><a href="#3-3-10-重要" class="headerlink" title="3.3.10 重要"></a>3.3.10 重要</h3><ol>
<li><strong>有镜像才能创建容器，这是根本前提(下载一个Redis6.0.8镜像演示)</strong></li>
<li><strong>启动守护式容器(后台服务器)</strong></li>
</ol>
<p>在大部分的场景下，我们希望 docker 的服务是在后台运行的， 我们可以过 -d 指定容器的后台运行模式。<br><code>docker run -d 容器名</code><br>#使用镜像centos:latest以后台模式启动一个容器<br><code>docker run -d centos</code><br>问题：然后docker ps -a 进行查看, 会发现容器已经退出<br>很重要的要说明的一点: Docker容器后台运行,就必须有一个前台进程。<br>容器运行的命令如果不是那些一直挂起的命令（比如运行top，tail），就是会自动退出的。<br>这个是docker的机制问题,比如你的web容器,我们以nginx为例，正常情况下,我们配置启动服务只需要启动响应的service即可。例如service nginx start。但是,这样做,nginx为后台进程模式运行,就导致docker前台没有运行的应用，这样的容器后台启动后，会立即自杀因为他觉得他没事可做了。所以，最佳的解决方案是将你要运行的程序以前台进程的形式运行，常见就是命令行模式，表示我还有交互操作，别中断。<br>redis 前后台启动演示case<br>前台交互式启动<br><code>docker run -it redis:6.0.8</code><br>后台守护式启动<br><code>docker run -d redis:6.0.8</code></p>
<ol start="3">
<li><strong>查看容器日志</strong></li>
</ol>
<p><code>docker logs 容器ID</code></p>
<ol start="4">
<li><strong>查看容器内运行的进程</strong></li>
</ol>
<p><code>docker top 容器ID</code></p>
<ol start="5">
<li><strong>查看容器内部细节</strong></li>
</ol>
<p><code>docker inspect 容器ID</code></p>
<ol start="6">
<li><strong>进入正在运行的容器并以命令行交互</strong></li>
</ol>
<p><code>docker exec -it 容器ID bashShell</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658129562647-19bbffb5-a7ca-4d2f-a8ca-b01397829662.png#averageHue=%23f4f1f1&clientId=u64d03b79-337b-4&from=paste&height=180&id=u87c02fb1&originHeight=180&originWidth=1170&originalType=binary&ratio=1&rotation=0&showTitle=false&size=24961&status=done&style=none&taskId=uf416ee26-0648-46c9-9df1-e4a8e8987a5&title=&width=1170" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658129567142-bc7d765d-1b49-4fd0-b3d9-244c8b10ced9.png#averageHue=%23fefafa&clientId=u64d03b79-337b-4&from=paste&height=364&id=u30a92f19&originHeight=364&originWidth=895&originalType=binary&ratio=1&rotation=0&showTitle=false&size=61327&status=done&style=none&taskId=u19ff5e95-030f-45bb-a094-e8a5ef96250&title=&width=895" alt="image.png"><br>重新进入<code>docker attach 容器ID</code><br>上述两个区别？<br>attach 直接进入容器启动命令的终端，不会启动新的进程 用exit退出，会导致容器的停止。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658129646053-362cd580-f5d7-44f6-bc46-5ea6f147c32f.png#averageHue=%23fdfcfc&clientId=u64d03b79-337b-4&from=paste&height=291&id=ucff50566&originHeight=291&originWidth=1302&originalType=binary&ratio=1&rotation=0&showTitle=false&size=64741&status=done&style=none&taskId=u073dfd40-804a-4126-96d5-b0d986c95ae&title=&width=1302" alt="image.png"><br>exec 是在容器中打开新的终端，并且可以启动新的进程 用exit退出，不会导致容器的停止。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658129692386-311936c6-f387-4624-bdad-10036137c934.png#averageHue=%23fefbfb&clientId=u64d03b79-337b-4&from=paste&height=297&id=u40da9652&originHeight=297&originWidth=1301&originalType=binary&ratio=1&rotation=0&showTitle=false&size=75181&status=done&style=none&taskId=ue5d61d6e-4c17-49c6-b47b-b46c5e26168&title=&width=1301" alt="image.png"><br>推荐大家使用 docker exec 命令，因为退出容器终端，不会导致容器的停止。<br>用之前的redis容器实例进入试试<br>进入redis服务<br><code>docker exec -it 容器ID /bin/bash</code><br><code>docker exec -it 容器ID redis-cli</code><br>一般用-d后台启动的程序，再用exec进入对应容器实例</p>
<ol start="7">
<li><strong>从容器内拷贝文件到主机上</strong></li>
</ol>
<p>容器→主机<br><code>docker cp 容器ID:容器内路径 目的主机路径</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658129765070-038e032d-52d3-496a-b3a6-5e0cc96f9cfa.png#averageHue=%23f3eded&clientId=u64d03b79-337b-4&from=paste&height=207&id=u2b5ec99a&originHeight=207&originWidth=1154&originalType=binary&ratio=1&rotation=0&showTitle=false&size=36785&status=done&style=none&taskId=u0054edd7-d791-42da-b386-0fe962a830c&title=&width=1154" alt="image.png"></p>
<p>宿主机文件拷贝到容器中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp 主机路径 容器ID:容器内路径</span><br></pre></td></tr></table></figure>

<h1 id="导入和导出容器"><a href="#导入和导出容器" class="headerlink" title="导入和导出容器"></a>导入和导出容器</h1><ol start="8">
<li><strong>导入和导出容器</strong></li>
</ol>
<p><code>export </code>导出容器的内容留作为一个tar归档文件[对应import命令]<br><code>import </code>从tar包中的内容创建一个新的文件系统再导入为镜像[对应export]<br>案例<br><code>docker export 容器ID &gt; 文件名.tar</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658129809181-66670b9e-4977-40ab-8111-f18db9ef6da6.png#averageHue=%23fef9f9&clientId=u64d03b79-337b-4&from=paste&height=489&id=u8b3444f1&originHeight=489&originWidth=1070&originalType=binary&ratio=1&rotation=0&showTitle=false&size=120640&status=done&style=none&taskId=u949d3f0e-9965-4fc1-86ec-edfbb774a10&title=&width=1070" alt="image.png"></p>
<blockquote>
<p>导入</p>
</blockquote>
<p><code>cat 文件名.tar | docker import - 镜像用户/镜像名:镜像版本号</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658129845413-9942d9fa-3481-4211-b348-fdd0d4369dbf.png#averageHue=%23fefbfb&clientId=u64d03b79-337b-4&from=paste&height=488&id=ud00413b1&originHeight=488&originWidth=1070&originalType=binary&ratio=1&rotation=0&showTitle=false&size=127775&status=done&style=none&taskId=u8cb94c06-348e-48ab-ba36-f1a5a64f220&title=&width=1070" alt="image.png"></p>
<h1 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h1><p>卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过UnionFS，提供一些用于持续存储或共享数据。</p>
<p>特性：卷设计的目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷。</p>
<p>特点：</p>
<ul>
<li>数据卷可以在容器之间共享或重用数据</li>
<li>卷中的更改可以直接实施生效</li>
<li>数据卷中的更改不会包含在镜像的更新中</li>
<li>数据卷的生命周期一直持续到没有容器使用它为止</li>
</ul>
<p>运行一个带有容器卷存储功能的容器实例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --privileged=true -v 宿主机绝对路径目录:容器内目录[rw | ro] 镜像名</span><br></pre></td></tr></table></figure>

<p>可以使用<code>docker inspect</code>查看容器绑定的数据卷。</p>
<p>权限：</p>
<ul>
<li><code>rw</code>：读写</li>
<li><code>ro</code>：只读。如果宿主机写入内容，可以同步给容器内，容器内可以读取。</li>
</ul>
<p>容器卷的继承：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动一个容器</span></span><br><span class="line">docker run -it --privileged=true /tmp/test:/tmp/docker --name u1 ubuntu /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 --volumes-from 继承 u1的容器卷映射配置</span></span><br><span class="line">docker run -it --privileged=true --volumes-from u1 --name u2 ubuntu</span><br></pre></td></tr></table></figure>

<h1 id="-5"><a href="#-5" class="headerlink" title=""></a></h1><h2 id="3-4-小总结"><a href="#3-4-小总结" class="headerlink" title="3.4 小总结"></a>3.4 小总结</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658128808416-bc53f29a-c6b0-4b5f-966c-b6cb83a9e66b.png#averageHue=%232873a3&clientId=u64d03b79-337b-4&from=paste&height=510&id=u93914b80&originHeight=638&originWidth=900&originalType=binary&ratio=1&rotation=0&showTitle=false&size=134121&status=done&style=none&taskId=u008eeda6-839c-464d-9d67-71f9a49a7fe&title=&width=720" alt="image.png"><br>:::info<br>attach    Attach to a running container                 # 当前 shell 下 attach 连接指定运行镜像<br>build     Build an image from a Dockerfile              # 通过 Dockerfile 定制镜像<br>commit    Create a new image from a container changes   # 提交当前容器为新的镜像<br>cp        Copy files&#x2F;folders from the containers filesystem to the host path   #从容器中拷贝指定文件或者目录到宿主机中<br>create    Create a new container                        # 创建一个新的容器，同 run，但不启动容器<br>diff      Inspect changes on a container’s filesystem   # 查看 docker 容器变化<br>events    Get real time events from the server          # 从 docker 服务获取容器实时事件<br>exec      Run a command in an existing container        # 在已存在的容器上运行命令<br>export    Stream the contents of a container as a tar archive   # 导出容器的内容流作为一个 tar 归档文件[对应 import ]<br>history   Show the history of an image                  # 展示一个镜像形成历史<br>images    List images                                   # 列出系统当前镜像<br>import    Create a new filesystem image from the contents of a tarball # 从tar包中的内容创建一个新的文件系统映像[对应export]<br>info      Display system-wide information               # 显示系统相关信息<br>inspect   Return low-level information on a container   # 查看容器详细信息<br>kill      Kill a running container                      # kill 指定 docker 容器<br>load      Load an image from a tar archive              # 从一个 tar 包中加载一个镜像[对应 save]<br>login     Register or Login to the docker registry server    # 注册或者登陆一个 docker 源服务器<br>logout    Log out from a Docker registry server          # 从当前 Docker registry 退出<br>logs      Fetch the logs of a container                 # 输出当前容器日志信息<br>port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT    # 查看映射端口对应的容器内部源端口<br>pause     Pause all processes within a container        # 暂停容器<br>ps        List containers                               # 列出容器列表<br>pull      Pull an image or a repository from the docker registry server   # 从docker镜像源服务器拉取指定镜像或者库镜像<br>push      Push an image or a repository to the docker registry server    # 推送指定镜像或者库镜像至docker源服务器<br>restart   Restart a running container                   # 重启运行的容器<br>rm        Remove one or more containers                 # 移除一个或者多个容器<br>rmi       Remove one or more images       # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]<br>run       Run a command in a new container              # 创建一个新的容器并运行一个命令<br>save      Save an image to a tar archive                # 保存一个镜像为一个 tar 包[对应 load]<br>search    Search for an image on the Docker Hub         # 在 docker hub 中搜索镜像<br>start     Start a stopped containers                    # 启动容器<br>stop      Stop a running containers                     # 停止容器<br>tag       Tag an image into a repository                # 给源中镜像打标签<br>top       Lookup the running processes of a container   # 查看容器中运行的进程信息<br>unpause   Unpause a paused container                    # 取消暂停容器<br>version   Show the docker version information           # 查看 docker 版本号<br>wait      Block until a container stops, then print its exit code   # 截取容器停止时的退出状态值<br>:::</p>
<h1 id="4-Docker镜像"><a href="#4-Docker镜像" class="headerlink" title="4 Docker镜像"></a>4 Docker镜像</h1><h3 id="4-1-是什么"><a href="#4-1-是什么" class="headerlink" title="4.1 是什么"></a>4.1 是什么</h3><p>是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境(包括代码、运行时需要的库、环境变量和配置文件等)，这个打包好的运行环境就是image镜像文件。<br>只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来一个对象)。</p>
<h4 id="4-1-1-分层的镜像"><a href="#4-1-1-分层的镜像" class="headerlink" title="4.1.1 分层的镜像"></a>4.1.1 分层的镜像</h4><p>以我们的pull为例，在下载的过程中我们可以看到docker的镜像好像是在一层一层的在下载<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139351043-7a36850b-bd26-491a-9597-76535f2b0a1f.png#averageHue=%23f5f4f4&clientId=uc7bc2b35-0cbd-4&from=paste&height=391&id=u6680eff7&originHeight=391&originWidth=698&originalType=binary&ratio=1&rotation=0&showTitle=false&size=113408&status=done&style=none&taskId=u7a311554-4116-4b63-bc4f-225b77f45d4&title=&width=698" alt="image.png"></p>
<h4 id="4-1-2-UnionFS（联合文件系统）"><a href="#4-1-2-UnionFS（联合文件系统）" class="headerlink" title="4.1.2 UnionFS（联合文件系统）"></a>4.1.2 UnionFS（联合文件系统）</h4><p>UnionFS（联合文件系统）：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139366360-eee5b96b-2f64-4a11-a3ae-5aa027fc7d33.png#averageHue=%23c8b77b&clientId=uc7bc2b35-0cbd-4&from=paste&height=314&id=u4910c054&originHeight=314&originWidth=526&originalType=binary&ratio=1&rotation=0&showTitle=false&size=246350&status=done&style=none&taskId=u470c301e-dbe7-4190-9854-d2e54d826f0&title=&width=526" alt="image.png"><br>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p>
<h4 id="4-1-3-Docker镜像加载原理"><a href="#4-1-3-Docker镜像加载原理" class="headerlink" title="4.1.3 Docker镜像加载原理"></a>4.1.3 Docker镜像加载原理</h4><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。<br>bootfs(boot file system)主要包含bootloader和kernel, bootloader主要是引导加载kernel, Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是引导文件系统bootfs。这一层与我们典型的Linux&#x2F;Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。<br>rootfs (root file system) ，在bootfs之上。包含的就是典型 Linux 系统中的 &#x2F;dev, &#x2F;proc, &#x2F;bin, &#x2F;etc 等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139389739-dedef184-d920-4cb8-b046-6d74cd73a390.png#averageHue=%23a4a6a2&clientId=uc7bc2b35-0cbd-4&from=paste&height=440&id=uefc7eed4&originHeight=440&originWidth=631&originalType=binary&ratio=1&rotation=0&showTitle=false&size=288182&status=done&style=none&taskId=u935d61d5-3c6c-4472-91a7-ae66f2dd6d9&title=&width=631" alt="image.png"><br>平时我们安装进虚拟机的CentOS都是好几个G，为什么docker这里才200M？？<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139396091-72001717-33f4-4790-afbe-9d4e8198447a.png#averageHue=%23f4f0f0&clientId=uc7bc2b35-0cbd-4&from=paste&height=105&id=ua606fd7b&originHeight=105&originWidth=800&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11057&status=done&style=none&taskId=u61c6b335-5ca8-4aeb-856b-291f608643a&title=&width=800" alt="image.png"><br>对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供 rootfs 就行了。由此可见对于不同的linux发行版, bootfs基本是一致的, rootfs会有差别, 因此不同的发行版可以公用bootfs。</p>
<h4 id="4-1-4-为什么-Docker-镜像要采用这种分层结构呢"><a href="#4-1-4-为什么-Docker-镜像要采用这种分层结构呢" class="headerlink" title="4.1.4 为什么 Docker 镜像要采用这种分层结构呢"></a>4.1.4 为什么 Docker 镜像要采用这种分层结构呢</h4><p>镜像分层最大的一个好处就是共享资源，方便复制迁移，就是为了复用。<br>比如说有多个镜像都从相同的 base 镜像构建而来，那么 Docker Host 只需在磁盘上保存一份 base 镜像；<br>同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p>
<h3 id="4-2-重点理解"><a href="#4-2-重点理解" class="headerlink" title="4.2 重点理解"></a>4.2 重点理解</h3><p>Docker镜像层都是只读的，容器层是可写的。当容器启动时，一个新的可写层被加载到镜像的顶部。 这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。<br>所有对容器的改动 - 无论添加、删除、还是修改文件都只会发生在容器层中。只有容器层是可写的，容器层下面的所有镜像层都是只读的。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139462778-98182b2f-6e3d-4e23-96ca-04107d94efe9.png#averageHue=%234ba5bd&clientId=uc7bc2b35-0cbd-4&from=paste&height=454&id=u9dd4a381&originHeight=454&originWidth=539&originalType=binary&ratio=1&rotation=0&showTitle=false&size=219715&status=done&style=none&taskId=u29e119b4-6031-457d-aa55-a0471e5afe2&title=&width=539" alt="image.png"></p>
<h3 id="4-3-Docker镜像commit操作案例"><a href="#4-3-Docker镜像commit操作案例" class="headerlink" title="4.3 Docker镜像commit操作案例"></a>4.3 Docker镜像commit操作案例</h3><p>docker commit 提交容器副本使之成为一个新的镜像<br><code>docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器ID 要创建的目标镜像名:[标签名]</code></p>
<h4 id="4-3-1-案例演示ubuntu安装vim"><a href="#4-3-1-案例演示ubuntu安装vim" class="headerlink" title="4.3.1 案例演示ubuntu安装vim"></a>4.3.1 案例演示ubuntu安装vim</h4><ol>
<li><strong>从Hub上下载ubuntu镜像到本地并成功运行</strong></li>
<li><strong>原始的默认Ubuntu镜像是不带着vim命令的</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139528237-90855992-8e34-4d7b-bfb5-ce29b0ac411f.png#averageHue=%23fdfdfd&clientId=uc7bc2b35-0cbd-4&from=paste&height=231&id=u8b0dcfbb&originHeight=231&originWidth=717&originalType=binary&ratio=1&rotation=0&showTitle=false&size=48155&status=done&style=none&taskId=u9519bef2-6149-42df-8a91-b2c1f26902f&title=&width=717" alt="image.png"></p>
<ol start="3">
<li><strong>外网连通的情况下，安装vim</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139546512-e54ea2c6-cf8e-4782-915a-b0c59fb0c5dc.png#averageHue=%232e3444&clientId=uc7bc2b35-0cbd-4&from=paste&height=97&id=u89f9e8e3&originHeight=97&originWidth=234&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6701&status=done&style=none&taskId=uab385052-4fd5-4db7-acb7-592e8dde5f2&title=&width=234" alt="image.png"><br>docker容器内执行上述两条命令：<br><code>apt-get update</code><br><code>apt-get -y install vim</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139552106-4c75c757-2789-4b36-9162-d435e5278456.png#averageHue=%23fefafa&clientId=uc7bc2b35-0cbd-4&from=paste&height=359&id=u04d84326&originHeight=359&originWidth=1049&originalType=binary&ratio=1&rotation=0&showTitle=false&size=109988&status=done&style=none&taskId=u3319c99a-937f-46e8-b174-8c1a0800abd&title=&width=1049" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139557574-59af7f26-86c4-4af9-bba7-650897d6ff82.png#averageHue=%23fefcfc&clientId=uc7bc2b35-0cbd-4&from=paste&height=259&id=u67524e2e&originHeight=259&originWidth=1136&originalType=binary&ratio=1&rotation=0&showTitle=false&size=58336&status=done&style=none&taskId=ucdc32189-fd16-42ba-a9bb-e42b5faae7a&title=&width=1136" alt="image.png"></p>
<ol start="4">
<li><strong>安装完成后，commit我们自己的新镜像</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139596868-4312899d-c9dd-4a45-9b34-8a075d61116c.png#averageHue=%23fefcfc&clientId=uc7bc2b35-0cbd-4&from=paste&height=259&id=uf6d8b048&originHeight=259&originWidth=1136&originalType=binary&ratio=1&rotation=0&showTitle=false&size=58249&status=done&style=none&taskId=uef2a16f7-9067-4918-88ae-f507e13a011&title=&width=1136" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139602000-6bb1bb7f-a2f8-4bad-8d03-ff1f147da555.png#averageHue=%23fef9f9&clientId=uc7bc2b35-0cbd-4&from=paste&height=274&id=uec8656e1&originHeight=274&originWidth=1197&originalType=binary&ratio=1&rotation=0&showTitle=false&size=75309&status=done&style=none&taskId=u8d43390c-86e5-4c75-b1a3-62bdf5b7b9b&title=&width=1197" alt="image.png"></p>
<ol start="5">
<li><strong>启动我们的新镜像并和原来的对比</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139612305-4d9e9f72-1e44-4988-8ef3-255090cd1b82.png#averageHue=%23fdf9f9&clientId=uc7bc2b35-0cbd-4&from=paste&height=274&id=ubd738772&originHeight=274&originWidth=1197&originalType=binary&ratio=1&rotation=0&showTitle=false&size=75320&status=done&style=none&taskId=u9cb0e276-a453-4c71-82a9-b23a42b02f9&title=&width=1197" alt="image.png"></p>
<pre><code>  1. 官网是默认下载的Ubuntu没有vim命令
  2. 我们自己commit构建的镜像，新增加了vim功能，可以成功使用。
</code></pre>
<h4 id="4-3-2-小总结"><a href="#4-3-2-小总结" class="headerlink" title="4.3.2 小总结"></a>4.3.2 小总结</h4><p>Docker中的镜像分层，支持通过扩展现有镜像，创建新的镜像。类似Java继承于一个Base基础类，自己再按需扩展。<br>新镜像是从 base 镜像一层一层叠加生成的。每安装一个软件，就在现有镜像的基础上增加一层<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139701434-5322591f-b716-4232-8f3c-9420ba706072.png#averageHue=%23a6c5c3&clientId=uc7bc2b35-0cbd-4&from=paste&height=273&id=u61367ba6&originHeight=273&originWidth=836&originalType=binary&ratio=1&rotation=0&showTitle=false&size=195447&status=done&style=none&taskId=u117af23f-bc66-4141-992d-a76affa8636&title=&width=836" alt="image.png"></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue组件化-额外知识补充</title>
    <url>/2024/10/09/Vue%E7%BB%84%E4%BB%B6%E5%8C%96-%E9%A2%9D%E5%A4%96%E7%9F%A5%E8%AF%86%E8%A1%A5%E5%85%85/</url>
    <content><![CDATA[<h3 id="生命周期的流程"><a href="#生命周期的流程" class="headerlink" title="生命周期的流程"></a>生命周期的流程</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689316769336-bfb7b4ac-30d8-4a95-87e8-881ba3792f78.png"></p>
<h3 id="refs的使用"><a href="#refs的使用" class="headerlink" title="$refs的使用"></a>$refs的使用</h3><ul>
<li>某些情况下，我们在组件中想要<strong>直接获取到元素对象或者子组件实例</strong>：<ul>
<li>在Vue开发中我们是<font style="color:#DF2A3F;">不推荐进行DOM操作</font>的；</li>
<li>这个时候，我们可以<font style="color:#DF2A3F;">给元素或者组件绑定一个ref的attribute属性</font>；</li>
</ul>
</li>
<li><strong>组件实例有一个$refs属性：</strong><ul>
<li>它一个对象Object，持有注册过 ref attribute 的所有 DOM 元素和组件实例。</li>
</ul>
</li>
</ul>
<h3 id="parent和-root"><a href="#parent和-root" class="headerlink" title="$parent和$root"></a>$parent和$root</h3><ul>
<li>我们可以通过$parent来访问父元素。</li>
<li>HelloWorld.vue的实现：<ul>
<li>这里我们也可以通过$root来实现，因为App是我们的根组件；</li>
</ul>
</li>
<li>注意：在Vue3中已经移除了$children的属性，所以不可以使用了。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2 ref=&quot;title&quot; class=&quot;title&quot; :style=&quot;&#123; color: titleColor &#125;&quot;&gt;&#123;&#123; message &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button ref=&quot;btn&quot; @click=&quot;changeTitle&quot;&gt;修改title&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;banner ref=&quot;banner&quot;/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import Banner from &quot;./Banner.vue&quot;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">      Banner</span><br><span class="line">    &#125;,  </span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        message: &quot;Hello World&quot;,</span><br><span class="line">        titleColor: &quot;red&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      changeTitle() &#123;</span><br><span class="line">        // 1.不要主动的去获取DOM, 并且修改DOM内容</span><br><span class="line">        // this.message = &quot;你好啊, 李银河!&quot;</span><br><span class="line">        // this.titleColor = &quot;blue&quot;</span><br><span class="line"></span><br><span class="line">        // 2.获取h2/button元素</span><br><span class="line">        console.log(this.$refs.title)</span><br><span class="line">        console.log(this.$refs.btn)</span><br><span class="line"></span><br><span class="line">        // 3.获取banner组件: 组件实例</span><br><span class="line">        console.log(this.$refs.banner)</span><br><span class="line">        </span><br><span class="line">        // 3.1.在父组件中可以主动的调用子组件的对象方法</span><br><span class="line">        this.$refs.banner.bannerClick()</span><br><span class="line"></span><br><span class="line">        // 3.2.获取banner组件实例, 获取banner中的元素</span><br><span class="line">        console.log(this.$refs.banner.$el)</span><br><span class="line"></span><br><span class="line">        // 3.3.如果banner template是多个根, 拿到的是第一个node节点</span><br><span class="line">        // 注意: 开发中不推荐一个组件的template中有多个根元素</span><br><span class="line">        // console.log(this.$refs.banner.$el.nextElementSibling)</span><br><span class="line"></span><br><span class="line">        // 4.组件实例还有两个属性(了解):</span><br><span class="line">        console.log(this.$parent) // 获取父组件</span><br><span class="line">        console.log(this.$root) // 获取根组件 </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>





<h3 id="动态组件的实现"><a href="#动态组件的实现" class="headerlink" title="动态组件的实现"></a>动态组件的实现</h3><ul>
<li>动态组件是使用 <font style="color:#DF2A3F;">component 组件</font>，通过一个<font style="color:#DF2A3F;">特殊的attribute is </font>来实现：<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689317592046-053d5063-1db6-4c16-8715-5d76bcd56c4b.png"></li>
<li>这个currentTab的值需要是什么内容呢？<ul>
<li>全局注册：可以是通过component函数注册的组件；</li>
<li>局部注册：在一个组件对象的components对象中注册的组件；</li>
</ul>
</li>
</ul>
<h3 id="动态组件的传值"><a href="#动态组件的传值" class="headerlink" title="动态组件的传值"></a>动态组件的传值</h3><ul>
<li>如果是动态组件我们可以给它们传值和监听事件吗？<ul>
<li>也是一样的；</li>
<li>只是我们需要将属性和监听事件放到component上来使用；</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689317656620-e68f2e52-a696-4e3c-8a2d-d7006ddc1e47.png"></li>
</ul>
</li>
</ul>
<h3 id="切换组件案例"><a href="#切换组件案例" class="headerlink" title="切换组件案例"></a>切换组件案例</h3><ul>
<li>比如我们现在想要实现了一个功能：<ul>
<li>点击一个tab-bar，切换不同的组件显示；</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689317163026-9668d9ef-e2ab-4a88-8adb-081569c1f836.png"></li>
</ul>
</li>
<li>这个案例我们可以通过两种不同的实现思路来实现：<ul>
<li><font style="color:#DF2A3F;">方式一</font>：通过v-if来判断，显示不同的组件；</li>
<li><font style="color:#DF2A3F;">方式二</font>：动态组件的方式；</li>
</ul>
</li>
</ul>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;tabs&quot;&gt;</span><br><span class="line">      &lt;template v-for=&quot;(item, index) in tabs&quot; :key=&quot;item&quot;&gt;</span><br><span class="line">        &lt;button :class=&quot;&#123; active: currentTab === item &#125;&quot; </span><br><span class="line">                @click=&quot;itemClick(item)&quot;&gt;</span><br><span class="line">          &#123;&#123; item &#125;&#125;</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div class=&quot;view&quot;&gt;</span><br><span class="line">      &lt;!-- 1.第一种做法: v-if进行判断逻辑, 决定要显示哪一个组件 --&gt;</span><br><span class="line">      &lt;!-- &lt;template v-if=&quot;currentIndex === 0&quot;&gt;</span><br><span class="line">        &lt;home&gt;&lt;/home&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template v-else-if=&quot;currentIndex === 1&quot;&gt;</span><br><span class="line">        &lt;about&gt;&lt;/about&gt;</span><br><span class="line">      &lt;/template&gt;</span><br><span class="line">      &lt;template v-else-if=&quot;currentIndex === 2&quot;&gt;</span><br><span class="line">        &lt;category&gt;&lt;/category&gt;</span><br><span class="line">      &lt;/template&gt; --&gt;</span><br><span class="line"></span><br><span class="line">      &lt;!-- 2.第二种做法: 动态组件 component --&gt;</span><br><span class="line">      &lt;!-- is中的组件需要来自两个地方: 1.全局注册的组件 2.局部注册的组件 --&gt;</span><br><span class="line">      &lt;!-- &lt;component :is=&quot;tabs[currentIndex]&quot;&gt;&lt;/component&gt; --&gt;</span><br><span class="line">      &lt;component name=&quot;why&quot; </span><br><span class="line">                 :age=&quot;18&quot;</span><br><span class="line">                 @homeClick=&quot;homeClick&quot;</span><br><span class="line">                 :is=&quot;currentTab&quot;&gt;</span><br><span class="line">      &lt;/component&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import Home from &#x27;./views/Home.vue&#x27;</span><br><span class="line">  import About from &#x27;./views/About.vue&#x27;</span><br><span class="line">  import Category from &#x27;./views/Category.vue&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">      Home,</span><br><span class="line">      About,</span><br><span class="line">      Category</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">      return &#123;</span><br><span class="line">        tabs: [&quot;home&quot;, &quot;about&quot;, &quot;category&quot;],</span><br><span class="line">        // currentIndex: 0</span><br><span class="line">        currentTab: &quot;home&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      itemClick(tab) &#123;</span><br><span class="line">        this.currentTab = tab</span><br><span class="line">      &#125;,</span><br><span class="line">      homeClick(payload) &#123;</span><br><span class="line">        console.log(&quot;homeClick:&quot;, payload)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">  .active &#123;</span><br><span class="line">    color: red;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Home.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;Home组件: &#123;&#123; name &#125;&#125; - &#123;&#123; age &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;homeBtnClick&quot;&gt;homeBtn&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      name: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &quot;&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      age: &#123;</span><br><span class="line">        type: Number,</span><br><span class="line">        default: 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    emits: [&quot;homeClick&quot;],</span><br><span class="line">    methods: &#123;</span><br><span class="line">      homeBtnClick() &#123;</span><br><span class="line">        this.$emit(&quot;homeClick&quot;, &quot;home&quot;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="认识keep-alive"><a href="#认识keep-alive" class="headerlink" title="认识keep-alive"></a>认识keep-alive</h3><ul>
<li>我们先对之前的案例中About组件进行改造：<ul>
<li>在其中增加了一个按钮，点击可以递增的功能；</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689318440093-98b6027a-f4e0-4f84-876d-912ac4d49fad.png"></li>
</ul>
</li>
<li>比如我们将counter点到10，那么在切换到home再切换回来about时，状态是否可以保持呢？<ul>
<li>答案是否定的；</li>
<li>这是因为默认情况下，我们在<font style="color:#DF2A3F;">切换组件后，about组件会被销毁掉</font>，再次回来时<font style="color:#DF2A3F;">会重新创建组件</font>；</li>
</ul>
</li>
<li>但是，在开发中某些情况我们希望继续保持组件的状态，而不是销毁掉，这个时候我们就可以**使用一个内置组件：keep-alive。  **</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689318459836-d3fef1b6-69fb-4676-81bf-f681ef5ebedc.png"></li>
</ul>
<h3 id="keep-alive属性"><a href="#keep-alive属性" class="headerlink" title="keep-alive属性"></a>keep-alive属性</h3><ul>
<li>keep-alive有一些属性：<ul>
<li><font style="color:#DF2A3F;">include</font> - string | RegExp | Array。只有名称匹配的组件会被缓存；</li>
<li><font style="color:#DF2A3F;">exclude</font> - string | RegExp | Array。任何名称匹配的组件都不会被缓存；</li>
<li><font style="color:#DF2A3F;">max</font> - number | string。最多可以缓存多少组件实例，一旦达到这个数 字，那么缓存组件中最近没有被访问的实例会被销毁；</li>
</ul>
</li>
<li>include 和 exclude prop 允许组件有条件地缓存：<ul>
<li>二者都可以用逗号分隔字符串、正则表达式或一个数组来表示；</li>
<li>匹配首先检查组件自身的 name 选项；</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689318563515-fb87c682-f245-457f-9723-90404ee4dd09.png"></li>
</ul>
</li>
</ul>
<h3 id="缓存组件的生命周期"><a href="#缓存组件的生命周期" class="headerlink" title="缓存组件的生命周期"></a>缓存组件的生命周期</h3><ul>
<li>对于缓存的组件来说，再次进入时，我们是不会执行created或者mounted等生命周期函数的：<ul>
<li>但是有时候我们确实希望监听到何时重新进入到了组件，何时离开了组件；</li>
<li>这个时候我们可以使用<font style="color:#DF2A3F;">activated 和 deactivated</font> 这两个生命周期钩子函数来监听；</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689318617176-2aac41cb-16d4-45f7-a7da-16ff19434884.png"></li>
</ul>
</li>
</ul>
<h3 id="组件的v-model"><a href="#组件的v-model" class="headerlink" title="组件的v-model"></a>组件的v-model</h3><ul>
<li>前面我们在input中可以使用v-model来完成双向绑定：<ul>
<li>这个时候往往会非常方便，因为v-model默认帮助我们完成了两件事；</li>
<li>v-bind:value的数据绑定和@input的事件监听；</li>
</ul>
</li>
<li>如果我们现在封装了一个组件，其他地方在使用这个组件时，是否也可以使用v-model来同时完成这两个功能呢？<ul>
<li>也是可以的，vue也支持在组件上使用v-model；</li>
</ul>
</li>
<li>当我们在组件上使用的时候，等价于如下的操作：<ul>
<li>我们会发现和input元素不同的只是属性的名称和事件触发的名称而已；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689319106299-3f3e3ca6-c694-46a0-9125-0ccea2a7747a.png"></li>
</ul>
</li>
</ul>
<h3 id="组件v-model的实现"><a href="#组件v-model的实现" class="headerlink" title="组件v-model的实现"></a>组件v-model的实现</h3><ul>
<li>那么，为了我们的MyInput组件可以正常的工作，这个组件内的 <input> 必须：<ul>
<li>将其 value attribute 绑定到一个名叫 <font style="color:#DF2A3F;">modelValue 的 prop</font> 上；</li>
<li>在其 input 事件被触发时，将新的值通过自定义的 <font style="color:#DF2A3F;">update:modelValue </font>事件抛出；</li>
</ul>
</li>
</ul>
<h3 id="绑定多个属性"><a href="#绑定多个属性" class="headerlink" title="绑定多个属性"></a>绑定多个属性</h3><ul>
<li>我们现在通过v-model是直接绑定了一个属性，如果我们希望绑定多个属性呢？<ul>
<li>也就是我们希望在一个组件上使用多个v-model是否可以实现呢？</li>
<li>我们知道，<font style="color:#DF2A3F;">默认情况</font>下的v-model其实是<font style="color:#DF2A3F;">绑定了 modelValue 属</font>性和<font style="color:#DF2A3F;"> @update:modelValue的</font>事件；</li>
<li>如果我们希望绑定更多，可以给v-model传入一个参数，那么这个参数的名称就是我们绑定属性的名称；</li>
</ul>
</li>
<li>注意：这里我是绑定了两个属性的<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689319256489-6c0cf273-0f72-430e-a701-cb402036de28.png"></li>
<li>v-model:title相当于做了两件事：<ul>
<li>绑定了<font style="color:#DF2A3F;">title属性</font>；</li>
<li>监听了 <font style="color:#DF2A3F;">@update:title的事件</font>；</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689319263543-85337211-0a4c-4449-ac0f-8970ce7d00f1.png"></li>
</ul>
</li>
</ul>
<p>App.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;!-- 1.input v-model --&gt;</span><br><span class="line">    &lt;!-- &lt;input v-model=&quot;message&quot;&gt;</span><br><span class="line">    &lt;input :value=&quot;message&quot; @input=&quot;message = $event.target.value&quot;&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 2.组件的v-model: 默认modelValue （对应的是counter里面的modelValue） --&gt;</span><br><span class="line">    &lt;counter v-model=&quot;appCounter&quot;&gt;&lt;/counter&gt;</span><br><span class="line">    &lt;counter :modelValue=&quot;appCounter&quot; @update:modelValue=&quot;appCounter = $event&quot;&gt;&lt;/counter&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 3.组件的v-model: 自定义名称counter --&gt;</span><br><span class="line">    &lt;!-- &lt;counter2 v-model:counter=&quot;appCounter&quot; v-model:why=&quot;appWhy&quot;&gt;&lt;/counter2&gt; --&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Counter from &#x27;./Counter.vue&#x27;</span><br><span class="line">import Counter2 from &#x27;./Counter2.vue&#x27;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    Counter,</span><br><span class="line">    Counter2</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &quot;Hello World&quot;,</span><br><span class="line">      appCounter: 100,</span><br><span class="line">      appWhy: &quot;coderwhy&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Count.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;Counter: &#123;&#123; modelValue &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeCounter&quot;&gt;修改counter&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      modelValue: &#123;</span><br><span class="line">        type: Number,</span><br><span class="line">        default: 0</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    emits: [&quot;update:modelValue&quot;],</span><br><span class="line">    methods: &#123;</span><br><span class="line">      changeCounter() &#123;</span><br><span class="line">        this.$emit(&quot;update:modelValue&quot;, 999)</span><br><span class="line">      &#125; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>Count2.vue</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;h2&gt;Counter: &#123;&#123; counter &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeCounter&quot;&gt;修改counter&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- why绑定 --&gt;</span><br><span class="line">    &lt;hr&gt;</span><br><span class="line">    &lt;h2&gt;why: &#123;&#123; why &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeWhy&quot;&gt;修改why的值&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      counter: &#123;</span><br><span class="line">        type: Number,</span><br><span class="line">        default: 0</span><br><span class="line">      &#125;,</span><br><span class="line">      why: &#123;</span><br><span class="line">        type: String,</span><br><span class="line">        default: &quot;&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    emits: [&quot;update:counter&quot;, &quot;update:why&quot;],</span><br><span class="line">    methods: &#123;</span><br><span class="line">      changeCounter() &#123;</span><br><span class="line">        this.$emit(&quot;update:counter&quot;, 999)</span><br><span class="line">      &#125;,</span><br><span class="line">      changeWhy() &#123;</span><br><span class="line">        this.$emit(&quot;update:why&quot;, &quot;kobe&quot;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="认识Mixin"><a href="#认识Mixin" class="headerlink" title="认识Mixin"></a>认识Mixin</h3><ul>
<li>目前我们是使用组件化的方式在开发整个Vue的应用程序，但是组件和组件之间有时候会存在相同的代码逻辑，我们希望对相同 的代码逻辑进行抽取。</li>
<li>在Vue2和Vue3中都支持的一种方式就是使用Mixin来完成：  Mixin提供了一种非常灵活的方式，来分发Vue组件中的可复用功能；<ul>
<li>一个Mixin对象可以包含任何组件选项；</li>
<li>当组件使用Mixin对象时，所有Mixin对象的选项将被 混合 进入该组件本身的选项中；</li>
</ul>
</li>
</ul>
<h4 id="Mixin的基本使用"><a href="#Mixin的基本使用" class="headerlink" title="Mixin的基本使用"></a>Mixin的基本使用</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689319443182-1f578828-b82e-4714-aa72-f29967a29ff8.png"></p>
<h4 id="Mixin的合并规则"><a href="#Mixin的合并规则" class="headerlink" title="Mixin的合并规则"></a>Mixin的合并规则</h4><ul>
<li>如果Mixin对象中的选项和组件对象中的选项发生了冲突，那么Vue会如何操作呢？<ul>
<li>这里分成不同的情况来进行处理；</li>
</ul>
</li>
<li><strong>情况一：如果是data函数的返回值对象</strong><ul>
<li>返回值对象默认情况下会<font style="color:#DF2A3F;">进行合并</font>；</li>
<li>如果data返回值对象的属性发生了冲突，那么会<font style="color:#DF2A3F;">保留组件自身的数据</font>；</li>
</ul>
</li>
<li><strong>情况二：如何生命周期钩子函数</strong><ul>
<li>生命周期的钩子函数会<font style="color:#DF2A3F;">被合并到数组</font>中，都会被调用；</li>
</ul>
</li>
<li><strong>情况三：值为对象的选项，例如 methods、components 和 directives，将被合并为同一个对象。</strong><ul>
<li>比如都有<font style="color:#DF2A3F;">methods选项</font>，并且都定义了方法，那么<font style="color:#DF2A3F;">它们都会生效</font>；</li>
<li>但是如果<font style="color:#DF2A3F;">对象的key相同</font>，那么<font style="color:#DF2A3F;">会取组件对象的键值对</font>；</li>
</ul>
</li>
</ul>
<h4 id="全局混入Mixin"><a href="#全局混入Mixin" class="headerlink" title="全局混入Mixin"></a>全局混入Mixin</h4><ul>
<li>如果组件中的某些选项，是所有的组件都需要拥有的，那么这个时候我们可以使用全局的mixin：<ul>
<li>全局的Mixin可以使用 应用app的方法 mixin 来完成注册；</li>
<li>一旦注册，那么全局混入的选项将会影响每一个组件；</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689320270131-4520d938-4493-494e-951c-083bead9dd66.png"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue-vuex状态管理</title>
    <url>/2024/10/14/Vue-vuex%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h3 id="Vuex的使用"><a href="#Vuex的使用" class="headerlink" title="Vuex的使用"></a>Vuex的使用</h3><p>安装  npm install vuex</p>
<h4 id="创建Store"><a href="#创建Store" class="headerlink" title="创建Store"></a>创建Store</h4><ul>
<li>每一个Vuex应用的核心就是store（仓库）：<ul>
<li>store本质上是一个容器，它包含着你的应用中大部分的状态（state）</li>
</ul>
</li>
<li>Vuex和单纯的全局对象有什么区别呢？</li>
<li>第一：Vuex的状态存储是响应式的<ul>
<li>当Vue组件从store中读取状态的时候，若store中的状态发生变化，那么相应的组件也会被更新；</li>
</ul>
</li>
<li>第二：你不能直接改变store中的状态<ul>
<li>改变store中的状态的唯一途径就显示提交 (commit) mutation；</li>
<li>这样使得我们可以方便的跟踪每一个状态的变化，从而让我们能够通过一些工具帮助我们更好的管理应用的状态；</li>
</ul>
</li>
<li>使用步骤：<ul>
<li>创建Store对象；</li>
<li>在app中通过插件安装；</li>
</ul>
</li>
</ul>
<h4 id="组件中使用store"><a href="#组件中使用store" class="headerlink" title="组件中使用store"></a>组件中使用store</h4><ul>
<li>在组件中使用store，我们按照如下的方式：<ul>
<li>在模板中使用；</li>
<li>在options api中使用，比如computed；</li>
<li>在setup中使用；</li>
</ul>
</li>
</ul>
<h3 id="组件获取状态"><a href="#组件获取状态" class="headerlink" title="组件获取状态"></a>组件获取状态</h3><ul>
<li>在前面我们已经学习过如何在组件中获取状态了。</li>
<li>当然，如果觉得那种方式有点繁琐（表达式过长），我们可以使用计算属性：      <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689338191161-804b153b-9d8f-49b3-a53a-b7ad0818d1ca.png"></li>
<li>但是，如果我们有很多个状态都需要获取话，可以使用mapState的辅助函数：<ul>
<li>mapState的方式一：对象类型；</li>
<li>mapState的方式二：数组类型；</li>
<li>也可以使用展开运算符和来原有的computed混合在一起；</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;incrementLevel&quot;&gt;修改level&lt;/button&gt;</span><br><span class="line">    &lt;!-- 1.在模板中直接使用多个状态 --&gt;</span><br><span class="line">    &lt;h2&gt;name: &#123;&#123; $store.state.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;level: &#123;&#123; $store.state.level &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;avatar: &#123;&#123; $store.state.avatarURL &#125;&#125;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 2.计算属性(映射状态: 数组语法) --&gt;</span><br><span class="line">    &lt;!-- &lt;h2&gt;name: &#123;&#123; name() &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;level: &#123;&#123; level() &#125;&#125;&lt;/h2&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 3.计算属性(映射状态: 对象语法) --&gt;</span><br><span class="line">    &lt;!-- &lt;h2&gt;name: &#123;&#123; sName &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;level: &#123;&#123; sLevel &#125;&#125;&lt;/h2&gt; --&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 4.setup计算属性(映射状态: 对象语法) --&gt;</span><br><span class="line">    &lt;!-- &lt;h2&gt;name: &#123;&#123; cName &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;level: &#123;&#123; cLevel &#125;&#125;&lt;/h2&gt; --&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- 5.setup计算属性(映射状态: 对象语法) --&gt;</span><br><span class="line">    &lt;h2&gt;name: &#123;&#123; name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;level: &#123;&#123; level &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123; mapState &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    computed: &#123;</span><br><span class="line">      fullname() &#123;</span><br><span class="line">        return &quot;xxx&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      // name() &#123;</span><br><span class="line">      //   return this.$store.state.name</span><br><span class="line">      // &#125;,</span><br><span class="line">      ...mapState([&quot;name&quot;, &quot;level&quot;, &quot;avatarURL&quot;]),</span><br><span class="line">      ...mapState(&#123;</span><br><span class="line">        sName: state =&gt; state.name,</span><br><span class="line">        sLevel: state =&gt; state.level</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line">  import &#123; computed, toRefs &#125; from &#x27;vue&#x27;</span><br><span class="line">  import &#123; mapState, useStore &#125; from &#x27;vuex&#x27;</span><br><span class="line">  import useState from &quot;../hooks/useState&quot;</span><br><span class="line"></span><br><span class="line">  // 1.一步步完成</span><br><span class="line">  // const &#123; name, level &#125; = mapState([&quot;name&quot;, &quot;level&quot;])</span><br><span class="line">  // const store = useStore()</span><br><span class="line">  // const cName = computed(name.bind(&#123; $store: store &#125;))</span><br><span class="line">  // const cLevel = computed(level.bind(&#123; $store: store &#125;))</span><br><span class="line"></span><br><span class="line">  // 2.使用useState</span><br><span class="line">  // const &#123; name, level &#125; = useState([&quot;name&quot;, &quot;level&quot;])</span><br><span class="line"></span><br><span class="line">  // 3.直接对store.state进行解构(推荐)</span><br><span class="line">  const store = useStore()</span><br><span class="line">  const &#123; name, level &#125; = toRefs(store.state)</span><br><span class="line"></span><br><span class="line">  function incrementLevel() &#123;</span><br><span class="line">    store.state.level++</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="useState-js"><a href="#useState-js" class="headerlink" title="useState.js"></a>useState.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; computed &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; useStore, mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useState</span>(<span class="params">mapper</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> store = <span class="title function_">useStore</span>()</span><br><span class="line">  <span class="keyword">const</span> stateFnsObj = <span class="title function_">mapState</span>(mapper)</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">const</span> newState = &#123;&#125;</span><br><span class="line">  <span class="title class_">Object</span>.<span class="title function_">keys</span>(stateFnsObj).<span class="title function_">forEach</span>(<span class="function"><span class="params">key</span> =&gt;</span> &#123;</span><br><span class="line">    newState[key] = <span class="title function_">computed</span>(stateFnsObj[key].<span class="title function_">bind</span>(&#123; <span class="attr">$store</span>: store &#125;))</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> newState</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="getters的基本使用"><a href="#getters的基本使用" class="headerlink" title="getters的基本使用"></a>getters的基本使用</h3><p>某些属性我们可能需要经过变化后来使用，这个时候可以使用getters：  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689338708071-f6dd09c5-7558-408f-bdd8-ffe64bd62c2f.png"></p>
<h4 id="getters第二个参数-和返回函数"><a href="#getters第二个参数-和返回函数" class="headerlink" title="getters第二个参数 和返回函数"></a>getters第二个参数 和返回函数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">getters</span>: &#123;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// 2.在该getters属性中, 获取其他的getters</span></span><br><span class="line">  <span class="title function_">message</span>(<span class="params">state, getters</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`name:<span class="subst">$&#123;state.name&#125;</span> level:<span class="subst">$&#123;state.level&#125;</span> friendTotalAge:<span class="subst">$&#123;getters.totalAge&#125;</span>`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 3.getters是可以返回一个函数的, 调用这个函数可以传入参数(了解)</span></span><br><span class="line">  <span class="title function_">getFriendById</span>(<span class="params">state</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">id</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> friend = state.<span class="property">friends</span>.<span class="title function_">find</span>(<span class="function"><span class="params">item</span> =&gt;</span> item.<span class="property">id</span> === id)</span><br><span class="line">      <span class="keyword">return</span> friend</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;h2&gt;message: &#123;&#123; $store.getters.message &#125;&#125;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line"> &lt;!-- 根据id获取某一个朋友的信息 --&gt;</span><br><span class="line"> &lt;h2&gt;id-111的朋友信息: &#123;&#123; $store.getters.getFriendById(111) &#125;&#125;&lt;/h2&gt;</span><br></pre></td></tr></table></figure>

<h4 id="mapGetters的辅助函数"><a href="#mapGetters的辅助函数" class="headerlink" title="mapGetters的辅助函数"></a>mapGetters的辅助函数</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;changeAge&quot;&gt;修改name&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">    &lt;h2&gt;doubleCounter: &#123;&#123; doubleCounter &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;friendsTotalAge: &#123;&#123; totalAge &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;message: &#123;&#123; message &#125;&#125;&lt;/h2&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 根据id获取某一个朋友的信息 --&gt;</span><br><span class="line">    &lt;h2&gt;id-111的朋友信息: &#123;&#123; getFriendById(111) &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;id-112的朋友信息: &#123;&#123; getFriendById(112) &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123; mapGetters &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    computed: &#123;</span><br><span class="line">      ...mapGetters([&quot;doubleCounter&quot;, &quot;totalAge&quot;]),</span><br><span class="line">      ...mapGetters([&quot;getFriendById&quot;])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">  import &#123; computed, toRefs &#125; from &#x27;vue&#x27;;</span><br><span class="line">  import &#123; mapGetters, useStore &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">  const store = useStore()</span><br><span class="line"></span><br><span class="line">  // 1.使用mapGetters</span><br><span class="line">  // const &#123; message: messageFn &#125; = mapGetters([&quot;message&quot;])</span><br><span class="line">  // const message = computed(messageFn.bind(&#123; $store: store &#125;))</span><br><span class="line"></span><br><span class="line">  // 2.直接解构, 并且包裹成ref</span><br><span class="line">  // const &#123; message &#125; = toRefs(store.getters)</span><br><span class="line"></span><br><span class="line">  // 3.针对某一个getters属性使用computed</span><br><span class="line">  const message = computed(() =&gt; store.getters.message)</span><br><span class="line"></span><br><span class="line">  function changeAge() &#123;</span><br><span class="line">    store.state.name = &quot;kobe&quot;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>



<h3 id="Mutation基本使用"><a href="#Mutation基本使用" class="headerlink" title="Mutation基本使用"></a>Mutation基本使用</h3><p>更改 Vuex 的 store 中的状态的唯一方法是提交 mutation</p>
<ul>
<li>**Mutation携带数据  **<ul>
<li>很多时候我们在提交mutation的时候，会携带一些数据，这个时候我们可以使用参数：<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689339545098-c96c66c6-1f3a-4144-bc38-e67ada759140.png"></li>
<li>payload为对象类型<ul>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689339558620-33cecb22-167e-4d8f-bbfa-a726864c4e8a.png"></li>
</ul>
</li>
<li>对象风格的提交方式<ul>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689339569540-a7b92bcf-f46e-49f1-a2ab-d98d4a72b350.png"></li>
</ul>
</li>
</ul>
</li>
<li>**Mutation常量类型  **<ul>
<li>** 定义常量：mutation-type.js **<ul>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689339622403-775cf2c1-80c0-4343-aad6-b12d75a57ae6.png"></li>
</ul>
</li>
<li><strong>定义mutation</strong><ul>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689339633749-0d0142f3-fca0-4216-b902-8612de6739c4.png"></li>
</ul>
</li>
<li><strong>提交mutation</strong><ul>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689339639188-19679f61-ad63-43ac-bd54-dbfd815733a1.png"></li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName&quot;&gt;修改name&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;incrementLevel&quot;&gt;递增level&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeInfo&quot;&gt;修改info&lt;/button&gt;</span><br><span class="line">    &lt;h2&gt;Store Name: &#123;&#123; $store.state.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;Store Level: &#123;&#123; $store.state.level &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">  import &#123; CHANGE_INFO &#125; from &quot;@/store/mutation_types&quot;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    computed: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      changeName() &#123;</span><br><span class="line">        // this.$store.state.name = &quot;李银河&quot;</span><br><span class="line">        this.$store.commit(&quot;changeName&quot;, &quot;王小波&quot;)</span><br><span class="line">      &#125;,</span><br><span class="line">      incrementLevel() &#123;</span><br><span class="line">        this.$store.commit(&quot;incrementLevel&quot;)</span><br><span class="line">      &#125;,</span><br><span class="line">      changeInfo() &#123;</span><br><span class="line">        this.$store.commit(CHANGE_INFO, &#123;</span><br><span class="line">          name: &quot;王二&quot;,</span><br><span class="line">          level: 200</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">mutations</span>: &#123;</span><br><span class="line">  <span class="title function_">increment</span>(<span class="params">state</span>) &#123;</span><br><span class="line">    state.<span class="property">counter</span>++</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">changeName</span>(<span class="params">state, payload</span>) &#123;</span><br><span class="line">    state.<span class="property">name</span> = payload</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">incrementLevel</span>(<span class="params">state</span>) &#123;</span><br><span class="line">    state.<span class="property">level</span>++</span><br><span class="line">  &#125;,</span><br><span class="line">  [<span class="variable constant_">CHANGE_INFO</span>](state, newInfo) &#123;</span><br><span class="line">    state.<span class="property">level</span> = newInfo.<span class="property">level</span></span><br><span class="line">    state.<span class="property">name</span> = newInfo.<span class="property">name</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 重要的原则: 不要在mutation方法中执行异步操作</span></span><br><span class="line">    <span class="comment">// fetch(&quot;xxxx&quot;).then(res =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//   res.json().then(res =&gt; &#123;</span></span><br><span class="line">    <span class="comment">//     state.name = res.name</span></span><br><span class="line">    <span class="comment">//   &#125;)</span></span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<ul>
<li>**mapMutations辅助函数  **</li>
<li>** mutation重要原则  **<ul>
<li>一条重要的原则就是要记住 <strong>mutation 必须是同步函数</strong><ul>
<li>这是因为devtool工具会记录mutation的日记；</li>
<li>每一条mutation被记录，devtools都需要捕捉到前一状态和后一状态的快照；</li>
<li>但是在mutation中执行异步操作，就无法追踪到数据的变化；</li>
</ul>
</li>
<li>所以Vuex的重要原则中要求 mutation必须是同步函数；<ul>
<li>但是如果我们希望在Vuex中发送网络请求的话需要如何操作呢？</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;app&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;changeName(&#x27;王小波&#x27;)&quot;&gt;修改name&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;incrementLevel&quot;&gt;递增level&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;changeInfo(&#123; name: &#x27;王二&#x27;, level: 200 &#125;)&quot;&gt;修改info&lt;/button&gt;</span><br><span class="line">    &lt;h2&gt;Store Name: &#123;&#123; $store.state.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;h2&gt;Store Level: &#123;&#123; $store.state.level &#125;&#125;&lt;/h2&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123; mapMutations &#125; from &#x27;vuex&#x27;</span><br><span class="line">  import &#123; CHANGE_INFO &#125; from &quot;@/store/mutation_types&quot;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    computed: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      btnClick() &#123;</span><br><span class="line">        console.log(&quot;btnClick&quot;)</span><br><span class="line">      &#125;,</span><br><span class="line">      // ...mapMutations([&quot;changeName&quot;, &quot;incrementLevel&quot;, CHANGE_INFO])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">  import &#123; mapMutations, useStore &#125; from &#x27;vuex&#x27;</span><br><span class="line">  import &#123; CHANGE_INFO &#125; from &quot;@/store/mutation_types&quot;</span><br><span class="line"></span><br><span class="line">  const store = useStore()</span><br><span class="line"></span><br><span class="line">  // 1.手动的映射和绑定</span><br><span class="line">  const mutations = mapMutations([&quot;changeName&quot;, &quot;incrementLevel&quot;, CHANGE_INFO])</span><br><span class="line">  const newMutations = &#123;&#125;</span><br><span class="line">  Object.keys(mutations).forEach(key =&gt; &#123;</span><br><span class="line">    newMutations[key] = mutations[key].bind(&#123; $store: store &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">  const &#123; changeName, incrementLevel, changeInfo &#125; = newMutations</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="actions的基本使用"><a href="#actions的基本使用" class="headerlink" title="actions的基本使用"></a>actions的基本使用</h3><ul>
<li>Action类似于mutation，不同在于：<ul>
<li>Action提交的是mutation，而不是直接变更状态；</li>
<li>Action可以包含任意异步操作；</li>
</ul>
</li>
<li>这里有一个非常重要的参数context：<ul>
<li>context是一个和store实例均有相同方法和属性的context对象；</li>
<li>所以我们可以从其中获取到commit方法来提交一个mutation，或者通过 context.state 和 context.getters 来获取 state 和 getters；</li>
</ul>
</li>
<li>但是为什么它不是store对象呢？这个等到我们讲Modules时再具体来说；</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689340038979-07a2faec-5df3-4a81-b20e-0542417647c9.png"></li>
</ul>
<h4 id="actions的分发操作"><a href="#actions的分发操作" class="headerlink" title="actions的分发操作"></a>actions的分发操作</h4><ul>
<li>如何使用action呢？进行action的分发：<ul>
<li>分发使用的是 store 上的dispatch函数；<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689340091972-69e9d3f0-c877-40f0-935e-2605fed80f15.png"></li>
</ul>
</li>
<li>同样的，它也可以携带我们的参数<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689340192399-23eb00df-82f2-40fb-99ae-66ddd94d6394.png"></li>
<li>也可以以对象的形式进行分发：<ul>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689340210137-94a630d4-11a6-4c6b-bfc8-e942016c7aae.png"></li>
</ul>
</li>
</ul>
<h4 id="actions的辅助函数"><a href="#actions的辅助函数" class="headerlink" title="actions的辅助函数"></a>actions的辅助函数</h4><ul>
<li>action也有对应的辅助函数：<ul>
<li>对象类型的写法；</li>
<li>数组类型的写法；</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;home&quot;&gt;</span><br><span class="line">    &lt;h2&gt;当前计数: &#123;&#123; $store.state.counter &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;incrementAction&quot;&gt;发起action修改counter&lt;/button&gt;</span><br><span class="line">    &lt;button @click=&quot;increment&quot;&gt;递增counter&lt;/button&gt;</span><br><span class="line">    &lt;h2&gt;name: &#123;&#123; $store.state.name &#125;&#125;&lt;/h2&gt;</span><br><span class="line">    &lt;button @click=&quot;changeNameAction(&#x27;bbbb&#x27;)&quot;&gt;发起action修改name&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import &#123; mapActions &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">      // counterBtnClick() &#123;</span><br><span class="line">      //   this.$store.dispatch(&quot;incrementAction&quot;)</span><br><span class="line">      // &#125;,</span><br><span class="line">      // nameBtnClick() &#123;</span><br><span class="line">      //   this.$store.dispatch(&quot;changeNameAction&quot;, &quot;aaa&quot;)</span><br><span class="line">      // &#125;</span><br><span class="line">      // ...mapActions([&quot;incrementAction&quot;, &quot;changeNameAction&quot;])</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;script setup&gt;</span><br><span class="line"></span><br><span class="line">  import &#123; useStore, mapActions &#125; from &#x27;vuex&#x27;</span><br><span class="line"></span><br><span class="line">  const store = useStore()</span><br><span class="line"></span><br><span class="line">  // 1.在setup中使用mapActions辅助函数</span><br><span class="line">  // const actions = mapActions([&quot;incrementAction&quot;, &quot;changeNameAction&quot;])</span><br><span class="line">  // const newActions = &#123;&#125;</span><br><span class="line">  // Object.keys(actions).forEach(key =&gt; &#123;</span><br><span class="line">  //   newActions[key] = actions[key].bind(&#123; $store: store &#125;)</span><br><span class="line">  // &#125;)</span><br><span class="line">  // const &#123; incrementAction, changeNameAction &#125; = newActions</span><br><span class="line"></span><br><span class="line">  // 2.使用默认的做法</span><br><span class="line">  function increment() &#123;</span><br><span class="line">    store.dispatch(&quot;incrementAction&quot;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="actions的异步操作"><a href="#actions的异步操作" class="headerlink" title="actions的异步操作"></a>actions的异步操作</h4><ul>
<li>Action 通常是异步的，那么如何知道 action 什么时候结束呢？<ul>
<li>我们可以通过让action返回Promise，在Promise的then中来处理完成后的操作  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689340443163-d12c35e6-049b-42c2-8790-8b223f8750d8.png"></li>
</ul>
</li>
</ul>
<h3 id="module的基本使用"><a href="#module的基本使用" class="headerlink" title="module的基本使用"></a>module的基本使用</h3><ul>
<li>什么是Module？<ul>
<li>由于使用单一状态树，应用的所有状态会集中到一个比较大的对象，当应用变得非常复杂时，store 对象就有可能变得相当臃 肿；</li>
<li>为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）；</li>
<li>每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块；</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1689340799565-95779729-b639-4a2b-a35b-0f14c778958d.png"></li>
</ul>
</li>
</ul>
<h4 id="module的局部状态"><a href="#module的局部状态" class="headerlink" title="module的局部状态"></a>module的局部状态</h4><p>对于模块内部的 mutation 和 getter，接收的第一个参数是<strong>模块的局部状态对象</strong>：  </p>
]]></content>
      <categories>
        <category>Vue</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>docker网络_docker-compose</title>
    <url>/2024/04/29/docker%E7%BD%91%E7%BB%9C-dockercompose/</url>
    <content><![CDATA[<h1 id="3-Docker微服务实战"><a href="#3-Docker微服务实战" class="headerlink" title="3 Docker微服务实战"></a>3 Docker微服务实战</h1><h2 id="3-1-通过IDEA新建一个普通微服务模块"><a href="#3-1-通过IDEA新建一个普通微服务模块" class="headerlink" title="3.1 通过IDEA新建一个普通微服务模块"></a>3.1 通过IDEA新建一个普通微服务模块</h2><p><strong>建Module</strong><br>docker_boot<br><strong>改POM</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.atguigu.docker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>docker_boot<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">junit.version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">junit.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">log4j.version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">log4j.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">lombok.version</span>&gt;</span>1.16.18<span class="tag">&lt;/<span class="name">lombok.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">druid.version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">druid.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper.version</span>&gt;</span>4.1.5<span class="tag">&lt;/<span class="name">mapper.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis.spring.boot.version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">mybatis.spring.boot.version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--SpringBoot通用依赖模块--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--test--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>写YML</strong><br><code>server.port=6001</code><br><strong>主启动</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.docker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DockerBootApplication</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        SpringApplication.run(DockerBootApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>业务类</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.atguigu.docker.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@auther</span> zzyy</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span> 2021-10-25 17:43</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderController</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;server.port&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/order/docker&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">helloDocker</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello docker&quot;</span>+<span class="string">&quot;\t&quot;</span>+port+<span class="string">&quot;\t&quot;</span>+ UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value =&quot;/order/index&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;服务端口号: &quot;</span>+<span class="string">&quot;\t&quot;</span>+port+<span class="string">&quot;\t&quot;</span>+UUID.randomUUID().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="3-2-通过dockerfile发布微服务部署到docker容器"><a href="#3-2-通过dockerfile发布微服务部署到docker容器" class="headerlink" title="3.2 通过dockerfile发布微服务部署到docker容器"></a>3.2 通过dockerfile发布微服务部署到docker容器</h2><p><strong>IDEA工具里面搞定微服务jar包</strong><br>docker_boot-0.0.1-SNAPSHOT.jar<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660015228582-d53dce4a-89a7-4f66-bbc1-4efc307f24d3.png#averageHue=%23f8f5f4&clientId=uecdeb63f-2bb2-4&from=paste&height=573&id=u1e2ae127&originHeight=573&originWidth=1323&originalType=binary&ratio=1&rotation=0&showTitle=false&size=102951&status=done&style=none&taskId=u8e3a29b6-b5c1-4b95-9594-db7d7a05085&title=&width=1323" alt="image.png"><br><strong>编写Dockerfile</strong></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 基础镜像使用java</span></span><br><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="comment"># 作者</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> zzyy</span><br><span class="line"><span class="comment"># VOLUME 指定临时文件目录为/tmp，在主机/var/lib/docker目录下创建了一个临时文件并链接到容器的/tmp</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="language-bash"> /tmp</span></span><br><span class="line"><span class="comment"># 将jar包添加到容器中并更名为zzyy_docker.jar</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> docker_boot-0.0.1-SNAPSHOT.jar zzyy_docker.jar</span></span><br><span class="line"><span class="comment"># 运行jar包</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> bash -c <span class="string">&#x27;touch /zzyy_docker.jar&#x27;</span></span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/zzyy_docker.jar&quot;</span>]</span></span><br><span class="line"><span class="comment">#暴露6001端口作为微服务</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">6001</span></span><br></pre></td></tr></table></figure>

<p>:::info<br>将微服务jar包和Dockerfile文件上传到同一个目录下&#x2F;mydocker<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660015279664-11ace734-3cac-448d-acf2-415ff4618e8e.png#averageHue=%23fef7f7&clientId=uecdeb63f-2bb2-4&from=paste&height=214&id=doCCO&originHeight=214&originWidth=903&originalType=binary&ratio=1&rotation=0&showTitle=false&size=35792&status=done&style=none&taskId=u6fa4d93f-7179-4aaf-9f79-8ccd1eb2ee3&title=&width=903" alt="image.png"><br><code>docker build -t zzyy_docker:1.6 .</code><br>:::<br><strong>构建镜像</strong><br>:::info<br><code>docker build -t zzyy_docker:1.6 .</code><br>打包成镜像文件<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660015379854-488ba2d7-ee4a-4e28-8b07-9fa24f239263.png#averageHue=%23fdfcfc&clientId=uecdeb63f-2bb2-4&from=paste&height=471&id=u53efd84d&originHeight=471&originWidth=727&originalType=binary&ratio=1&rotation=0&showTitle=false&size=78148&status=done&style=none&taskId=uc0d78de2-71aa-4d37-93c4-100a336316d&title=&width=727" alt="image.png"><br>:::<br><strong>运行容器</strong><br><code> docker run -d -p 6001:6001 zzyy_docker:1.6</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660015407249-1b8e1153-a117-406c-bc76-f9688c909e0d.png#averageHue=%23fef6f6&clientId=uecdeb63f-2bb2-4&from=paste&height=444&id=u163b4d70&originHeight=444&originWidth=974&originalType=binary&ratio=1&rotation=0&showTitle=false&size=106131&status=done&style=none&taskId=u625e5f71-4b7d-4601-964a-fe0ce66b45e&title=&width=974" alt="image.png"><br><strong>访问测试</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660015422129-27734091-90d4-43cf-8725-27c4eef8548e.png#averageHue=%23fcfbf9&clientId=uecdeb63f-2bb2-4&from=paste&height=160&id=u3ae9929e&originHeight=160&originWidth=522&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10319&status=done&style=none&taskId=u36bb3ab2-9016-496f-989e-fea49328ee0&title=&width=522" alt="image.png"></p>
<h1 id="4-Docker网络"><a href="#4-Docker网络" class="headerlink" title="4 Docker网络"></a>4 Docker网络</h1><h2 id="是什么"><a href="#是什么" class="headerlink" title="是什么"></a>是什么</h2><p><strong>docker不启动，默认网络情况</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660016500199-9bfcce87-7c5d-4ac4-8d40-3e9e9491a0fd.png#averageHue=%23fefdfd&clientId=uda57e84d-26ab-4&from=paste&height=487&id=u660785c1&originHeight=487&originWidth=727&originalType=binary&ratio=1&rotation=0&showTitle=false&size=77747&status=done&style=none&taskId=uc0ab1c99-3c05-4bdf-9bf1-3ec3ca8e6cf&title=&width=727" alt="image.png"></p>
<p>在Docker服务启动前，使用 <code>ifconfig</code> 或 <code>ip addr</code> 查看网卡信息：</p>
<ul>
<li><code>ens33</code>或<code>eth0</code>：本机网卡</li>
<li><code>lo</code>：本机回环网络网卡</li>
<li>可能有<code>virbr0</code>（CentOS安装时如果选择的有相关虚拟化服务，就会多一个以网桥连接的私网地址的<code>virbr0</code>网卡，作用是为连接虚拟网卡提供NAT访问外网的功能。如果要移除该服务，可以使用 <code>yum remove libvirt-libs.x86_64</code>）</li>
</ul>
<p>使用 <code>systemctl start docker</code>启动Docker服务后，会多出一个 <code>docker0</code> 网卡。</p>
<p>作用：</p>
<ul>
<li>容器间的互联和通信以及端口映射</li>
<li>容器IP变动时候可以通过服务名直接网络通信而不受到影响</li>
</ul>
<p>Docker容器的网络隔离，是通过Linux内核特性 <code>namespace</code>和 <code>cgroup</code> 实现的。</p>
<p><strong>docker启动后，网络情况</strong><br>会产生一个名为docker0的虚拟网桥<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660016581784-bbd7401b-0304-40e5-b3d4-143e1b6adbcd.png#averageHue=%23fefefe&clientId=uda57e84d-26ab-4&from=paste&height=458&id=u6bbf60c3&originHeight=458&originWidth=733&originalType=binary&ratio=1&rotation=0&showTitle=false&size=76120&status=done&style=none&taskId=uc1421961-d7aa-4dd5-ba3a-c3737c2b013&title=&width=733" alt="image.png"><br>查看docker网络模式命令，默认创建3大网络模式。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660016611099-39c73410-3a1c-4576-b566-48234db9c1bc.png#averageHue=%23fefcfc&clientId=uda57e84d-26ab-4&from=paste&height=292&id=ud4f0c07a&originHeight=292&originWidth=698&originalType=binary&ratio=1&rotation=0&showTitle=false&size=45642&status=done&style=none&taskId=ud0b7b23f-d0ab-45a0-8f33-6f3a5904ff7&title=&width=698" alt="image.png"></p>
<h2 id="常用基本命令"><a href="#常用基本命令" class="headerlink" title="常用基本命令"></a>常用基本命令</h2><p><strong>All命令</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660020074503-4a28db4d-8a0f-4f21-ab74-0b999e579207.png#averageHue=%23fefefe&clientId=uda57e84d-26ab-4&from=paste&height=416&id=u54b37eca&originHeight=416&originWidth=751&originalType=binary&ratio=1&rotation=0&showTitle=false&size=45325&status=done&style=none&taskId=uf9c9f3f1-1c51-4260-9397-8c5d272b019&title=&width=751" alt="image.png"><br><strong>查看网络</strong><br><code>docker network ls</code></p>
<p>添加Docker网络：<br>docker network add xxx</p>
<p><strong>查看网络源数据</strong><br><code>docker network inspect XXX网络名字</code></p>
<p><strong>删除网络</strong><br><code>docker network rm XXX网络名字</code><br><strong>案例</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660020104133-dbc519f6-d0e1-4bec-af0c-40ec9db8d1e4.png#averageHue=%23fef8f8&clientId=uda57e84d-26ab-4&from=paste&height=397&id=u3e4f2ee4&originHeight=397&originWidth=596&originalType=binary&ratio=1&rotation=0&showTitle=false&size=59299&status=done&style=none&taskId=uc821e60c-8613-40b5-b8f8-579fd3bca1c&title=&width=596" alt="image.png"></p>
<h2 id="能干嘛"><a href="#能干嘛" class="headerlink" title="能干嘛"></a>能干嘛</h2><p>容器间的互联和通信以及端口映射<br>容器IP变动时候可以通过服务名直接网络通信而不受到影响</p>
<h2 id="网络模式"><a href="#网络模式" class="headerlink" title="网络模式"></a>网络模式</h2><p><strong>总体介绍</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660028923163-79ad77b4-a9ae-4dd6-8786-aacd45788733.png#averageHue=%23f6f5f5&clientId=uda57e84d-26ab-4&from=paste&height=574&id=u6221cbb8&originHeight=574&originWidth=1092&originalType=binary&ratio=1&rotation=0&showTitle=false&size=109408&status=done&style=none&taskId=u3efd6090-b7eb-4a41-b245-006de971547&title=&width=1092" alt="image.png"><br>:::info<br>bridge模式：使用–network bridge指定，默认使用docker0<br>host模式：使用–network host指定<br>none模式：使用–network none指定<br>container模式：使用–network container:NAME或者容器ID指定<br>:::<br><strong>容器实例内默认网络IP生产规则</strong><br>:::info</p>
<ol>
<li>先启动两个ubuntu容器实例</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660028984092-3cd2b316-73da-4072-b045-de7fbcb392a3.png#averageHue=%23fef7f7&clientId=uda57e84d-26ab-4&from=paste&height=252&id=NZXyG&originHeight=252&originWidth=877&originalType=binary&ratio=1&rotation=0&showTitle=false&size=47353&status=done&style=none&taskId=ufbb39cea-c8de-438f-8093-eced581b7d6&title=&width=877" alt="image.png"></p>
<ol start="2">
<li><p>docker inspect 容器ID or 容器名字</p>
</li>
<li><h1 id="通过inspect获取容器信息，最后20行即为容器的网络模式信息"><a href="#通过inspect获取容器信息，最后20行即为容器的网络模式信息" class="headerlink" title="通过inspect获取容器信息，最后20行即为容器的网络模式信息"></a>通过inspect获取容器信息，最后20行即为容器的网络模式信息</h1></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660028988258-aa1db7cd-2f6f-4e08-b991-875723ee24de.png#averageHue=%23fdfbfb&clientId=uda57e84d-26ab-4&from=paste&height=464&id=nwYwO&originHeight=464&originWidth=1203&originalType=binary&ratio=1&rotation=0&showTitle=false&size=153814&status=done&style=none&taskId=ub944a14a-6fce-465d-8be7-c954426350b&title=&width=1203" alt="image.png"></p>
<ol start="4">
<li>关闭u2实例，新建u3，查看ip变化</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660028995174-805d3a36-8f02-4c56-a753-0048a859cd73.png#averageHue=%23fefbfb&clientId=uda57e84d-26ab-4&from=paste&height=442&id=CM76X&originHeight=442&originWidth=1039&originalType=binary&ratio=1&rotation=0&showTitle=false&size=86158&status=done&style=none&taskId=ua988b494-7d0a-42a8-bce5-33493a81c1a&title=&width=1039" alt="image.png"><br>:::<br>结论<br>docker容器内部的ip是有可能会发生改变的</p>
<p><strong>docker0</strong></p>
<p>Docker 服务默认会创建一个<code>docker0</code>网桥（其上有一个<code>docker0</code>内部接口），该桥接网络的名称为 <code>docker0</code>，它在内核层连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到同一个物理网络。</p>
<p>Docker默认指定了<code>docker0</code>	接口的IP地址和子网掩码，让主机和容器之间可以通过网桥互相通信。</p>
<p>查看<code>bridge</code>网络的详细信息，并通过	<code>grep</code>获取名称：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">docker network inspect bridge | grep name</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>可以看到其名称为docker0。</p>
<p><strong>bridge模式</strong></p>
<p>Docker使用Linux桥接，在宿主机虚拟一个Docker容器网桥（docker0），Docker启动一个容器时会根据Docker网桥的网段分配给容器一个IP地址，称为Container-IP，同时Docker网桥是每个容器的默认网关。因为在同一个宿主机内的容器接入同一个网桥，这样容器之间就能够通过容器的Container-IP直接通信。</p>
<p><code>docker run</code>的时候，没有指定<code>--network</code>的话，默认使用的网桥模式就是<code>bridge</code>，使用的就是<code>docker0</code>。在宿主机ifconfig就苦役看到docker0和自己create的network。</p>
<p>网桥	<code>docker0</code>创建一对对等虚拟设备接口，一个叫<code>veth</code>，另一个叫<code>eth0</code>，成对匹配：</p>
<p>整个宿主机的网桥模式都是<code>docker0</code>，类似一个交换机有一堆接口，每个接口叫 <code>veth</code>，在本地主机和容器内分别创建一个虚拟接口，并让他们彼此联通（这样一对接口叫做 veth pair）。</p>
<p>每个容器实例内部也有一块网卡，容器内的网卡接口叫做eth0。</p>
<p>docker0上面的每个veth匹配某个容器实例内部的eth0，两两配对，一一匹配。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/webp/12911942/1652093671572-83d0901c-5052-482e-9dde-4a2804b35bc9.webp#averageHue=%237892b2&from=url&id=dvyv9&originHeight=540&originWidth=1087&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<p>例如：</p>
<p>启动tomcat容器，进入tomcat容器后，执行 ip addr，可以看到其网卡信息：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>: lo ..................</span><br><span class="line"></span><br><span class="line">容器内的网卡为 eth0</span><br><span class="line">@符号后面就是宿主机上对应的veth网卡的编号<span class="number">28</span></span><br><span class="line"><span class="number">27</span>: eth0<span class="meta">@if28</span> ...............................</span><br></pre></td></tr></table></figure>

<p>**<strong>host模式</strong></p>
<p>直接使用宿主机的 IP 地址与外界进行通信，不再需要额外进行 NAT 转换。</p>
<p>容器将不会获得一个独立的 Network Namespace，而是和宿主机共用一个 Network space。</p>
<p>容器将不会虚拟出自己的网卡，而是直接使用宿主机的 IP 和端口。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/webp/12911942/1652093680434-8180b11d-89f2-4bb6-a485-b3c22bd28688.webp#averageHue=%237992b2&from=url&id=AyJBK&originHeight=540&originWidth=1087&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<p>如果在 <code>docker run</code> 命令中同时使用了 <code>--network host</code> 和 <code>-p</code>端口映射，例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">docker run -p <span class="number">8082</span>:<span class="number">8080</span> --network host tomcat</span><br></pre></td></tr></table></figure>


<p>那么会出现一个警告：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WARNING: Published ports are discarded when using host network mode</span><br></pre></td></tr></table></figure>


<p>因为此时已经使用了host模式，本身就是直接使用的宿主机的IP和端口，此时的<code>-p</code>端口映射就没有了意义，也不会生效，端口号还是会以主机端口号为主。</p>
<p>正确做法是：不再进行<code>-p</code>端口映射，或者改用<code>bridge</code>模式</p>
<p><strong>none模式</strong></p>
<p>禁用网络功能。</p>
<p>在none模式下，并不为docker容器进行任何网络配置。进入容器内，使用 ip addr查看网卡信息，只能看到 <code>lo</code>（本地回环网络<code>127.0.0.1</code>网卡）。</p>
<p><strong>container模式</strong></p>
<p>新建的容器和已经存在的一个容器共享网络IP配置，而不是和宿主机共享。</p>
<p>新创建的容器不会创建自己的网卡、IP，而是和一个指定的容器共享IP、端口范围。两个容器除了网络共享，其他的如文件系统、进程列表依然是隔离的。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/webp/12911942/1652093688335-b6e6329d-5292-4901-ad0b-9e57bf46a1cf.webp#averageHue=%237d97b6&from=url&id=gLrBN&originHeight=579&originWidth=961&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">docker run -it --name alpine1 alpine /bin/sh</span><br><span class="line"></span><br><span class="line"># 指定和 alpine1 容器共享网络</span><br><span class="line">docker run -it --netrowk container:alpine1 --name alpine2 alpine /bin/sh</span><br></pre></td></tr></table></figure>


<p>此时使用 <code>ip addr</code>查看两台容器的网络，会发现两台容器的<code>eth0</code>网卡内的IP等信息完全相同。</p>
<p>如果关掉了<code>alpine1</code>容器，因为<code>alpine2</code>的网络使用的alpine1共享网络，所以关掉<code>alpin1</code>后，<code>alpine2</code>的eth0网卡也随之消失了。</p>
<h3 id="自定义网络（常用）"><a href="#自定义网络（常用）" class="headerlink" title="自定义网络（常用）"></a>自定义网络（常用）</h3><p>容器间的互联和通信以及端口映射。</p>
<p>容器 IP 变动时候可以通过服务名直接网络通信而不受影响。（类似Eureka，通过服务名直接互相通信，而不是写死IP地址）。</p>
<blockquote>
<p> docker中还有一个 <code>--link</code> 进行容器网络互联，但是已经被标记为过时的，可能会在将来的版本中移除这个功能。推荐使用自定义网络替换link。</p>
</blockquote>
<p><strong>自定义桥接网络（自定义网络默认使用的是桥接网络 bridge）：</strong></p>
<p>1 新建自定义网络</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker network create tomcat_network</span><br></pre></td></tr></table></figure>


<p>2 查看网络列表</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker network <span class="built_in">ls</span></span><br></pre></td></tr></table></figure>


<p>3 创建容器时，指定加入我们自定义的网络中</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">docker run <span class="literal">-d-p8081</span>:<span class="number">8080</span> <span class="literal">--network</span> tomcat_network <span class="literal">--name</span> tomcat1 tomcat:<span class="number">8.5</span><span class="literal">-jdk8-corretto</span></span><br><span class="line">docker run <span class="literal">-d-p8082</span>:<span class="number">8080</span> <span class="literal">--network</span> tomcat_network <span class="literal">--name</span> tomcat2 tomcat:<span class="number">8.5</span><span class="literal">-jdk8-corretto</span></span><br></pre></td></tr></table></figure>


<p>4 此时进入tomcat1中，使用ping命令测试连接tomcat2容器名，发现可以正常连通</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装ifconfig命令</span></span><br><span class="line">yum install <span class="literal">-y</span> net<span class="literal">-tools</span></span><br><span class="line"><span class="comment"># 安装ip addr命令</span></span><br><span class="line">yum install <span class="literal">-y</span> iproute</span><br><span class="line"><span class="comment"># 安装ping命令</span></span><br><span class="line">yum install <span class="literal">-y</span> iputils</span><br><span class="line"><span class="comment"># 直接ping容器名，不需要ping IP地址</span></span><br><span class="line">ping tomcat2</span><br></pre></td></tr></table></figure>



<p><strong>link连接</strong></p>
<p>示例：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 启动一台mysql容器</span></span><br><span class="line"><span class="comment"># --name 为容器指定一个别名</span></span><br><span class="line">docker run <span class="literal">--name</span> mysql<span class="literal">-matomo</span> <span class="literal">-p3308</span>:<span class="number">3306</span> <span class="literal">-eMYSQL_ROOT_PASSWORD</span>=root <span class="literal">-d</span> mysql:<span class="number">8.0</span>.<span class="number">28</span></span><br><span class="line"><span class="comment"># 启动另一个容器，通过--link连接到mysql容器</span></span><br><span class="line"><span class="comment"># --link 容器名称:本容器连接对方时的别名</span></span><br><span class="line">docker run <span class="literal">-d-p8888</span>:<span class="number">80</span> <span class="literal">--link</span> mysql<span class="literal">-matomo</span>:db <span class="literal">--name</span> matomo matomo:<span class="number">4.9</span>.<span class="number">0</span></span><br><span class="line"><span class="comment"># 此时，在matomo容器中，便可以通过 db 这个hostname连接到mysql-matomo容器，而无须再通过ip</span></span><br><span class="line"><span class="comment"># 连接地址：db:3306</span></span><br></pre></td></tr></table></figure>



<h2 id="Docker平台架构图解"><a href="#Docker平台架构图解" class="headerlink" title="Docker平台架构图解"></a>Docker平台架构图解</h2><p><strong>整体说明</strong><br>:::info<br>从其架构和运行流程来看，Docker 是一个 C&#x2F;S 模式的架构，后端是一个松耦合架构，众多模块各司其职。<br>Docker 运行的基本流程为：<br>1 用户是使用 Docker Client 与 Docker Daemon 建立通信，并发送请求给后者。<br>2 Docker Daemon 作为 Docker 架构中的主体部分，首先提供 Docker Server 的功能使其可以接受 Docker Client 的请求。<br>3 Docker Engine 执行 Docker 内部的一系列工作，每一项工作都是以一个 Job 的形式的存在。<br>4 Job 的运行过程中，当需要容器镜像时，则从 Docker Registry 中下载镜像，并通过镜像管理驱动 Graph driver将下载镜像以Graph的形式存储。<br>5 当需要为 Docker 创建网络环境时，通过网络管理驱动 Network driver 创建并配置 Docker 容器网络环境。<br>6 当需要限制 Docker 容器运行资源或执行用户指令等操作时，则通过 Execdriver 来完成。<br>7 Libcontainer是一项独立的容器管理包，Network driver以及Exec driver都是通过Libcontainer来实现具体对容器进行的操作。<br>:::<br><strong>整体架构</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660032915706-ca6ff6ae-5f12-4932-9a51-934cd86d5222.png#averageHue=%23dadddd&clientId=ue2704781-83b0-4&from=paste&height=1060&id=u0eae8e0f&originHeight=1060&originWidth=762&originalType=binary&ratio=1&rotation=0&showTitle=false&size=355056&status=done&style=none&taskId=uecc19a35-749b-4b6a-ae51-7ee237c9532&title=&width=762" alt="image.png"></p>
<h1 id="5-Docker-compose容器编排"><a href="#5-Docker-compose容器编排" class="headerlink" title="5 Docker-compose容器编排"></a>5 Docker-compose容器编排</h1><h1 id="Docker-compose"><a href="#Docker-compose" class="headerlink" title="Docker-compose"></a>Docker-compose</h1><p><code>Docker-Compose</code> 是 Docker 官方的开源项目，负责实现对Docker容器集群的快速编排。</p>
<p><code>Docker-Compose</code>可以管理多个Docker容器组成一个应用。需要定义一个yaml格式的配置文件 <code>docker-compose.yml</code>，配置好多个容器之间的调用关系，然后只需要一个命令就能同时启动&#x2F;关闭这些容器。</p>
<p>Docker建议我们每个容器中只运行一个服务，因为Docker容器本身占用资源极少，所以最好是将每个服务单独的分割开来。但是如果我们需要同时部署多个服务，每个服务单独构建镜像构建容器就会比较麻烦。所以 Docker 官方推出了 <code>docker-compose</code> 多服务部署的工具。</p>
<p>Compose允许用户通过一个单独的 <code>docker-compose.yml</code> 模板文件来定义一组相关联的应用容器为一个项目（<code>project</code>）。可以很容易的用一个配置文件定义一个多容器的应用，然后使用一条指令安装这个应用的所有依赖，完成构建。</p>
<p>核心概念：</p>
<ul>
<li>服务（<code>service</code>）：一个个应用容器实例</li>
<li>工程（<code>project</code>）：由一组关联的应用容器组成的一个完整业务单元，在<code>docker-compose.yml</code>中定义</li>
</ul>
<p>Compose使用的三个步骤：</p>
<ol>
<li>编写 Dockerfile 定义各个应用容器，并构建出对应的镜像文件</li>
<li>编写 <code>docker-compose.yml</code>，定义一个完整的业务单元，安排好整体应用中的各个容器服务</li>
<li>执行 <code>docker-compose up</code> 命令，其创建并运行整个应用程序，完成一键部署上线</li>
</ol>
<h1 id="安装Docker-Compose"><a href="#安装Docker-Compose" class="headerlink" title="安装Docker-Compose"></a>安装Docker-Compose</h1><p><code>Docker-Compose</code>的版本需要和Docker引擎版本对应，可以参照官网上的<a href="https://docs.docker.com/compose/compose-file/compose-file-v3/">对应关系</a>。</p>
<p>安装Compose：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">例如从github下载 2.5.0版本的docker-compose</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载下来的文件放到 /usr/local/bin目录下，命名为 docker-compose</span></span><br><span class="line">curl -L https://github.com/docker/compose/releases/download/v2.5.0/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">添加权限</span></span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证</span></span><br><span class="line">docker-compose version</span><br></pre></td></tr></table></figure>

<p>卸载Compose：直接删除 <code>usr/local/bin/docker-compose</code>文件即可</p>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><p>执行命令时，需要在对应的<code>docker-compose.yml</code>文件所在目录下执行。</p>
<p>查看帮助：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose -h</span><br></pre></td></tr></table></figure>

<p>创建并启动<code>docker-compose</code>服务：（类似 <code>docker run</code>）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose up</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">后台运行</span></span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<p>停止并删除容器、网络、卷、镜像：（类似 <code>docker stop</code> +  <code>docker rm</code>）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose down</span><br></pre></td></tr></table></figure>

<p>进入容器实例内部：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose exec &lt;yml里面的服务id&gt; /bin/bash</span><br></pre></td></tr></table></figure>

<p>展示当前<code>docker-compose</code>编排过的运行的所有容器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose ps</span><br></pre></td></tr></table></figure>

<p>展示当前<code>docker-compose</code>编排过的容器进程：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose top</span><br></pre></td></tr></table></figure>

<p>查看容器输出日志：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose log &lt;yml里面的服务id&gt;</span><br></pre></td></tr></table></figure>

<p>检查配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose config</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">有问题才输出</span></span><br><span class="line">docker-compose config -q</span><br></pre></td></tr></table></figure>

<p>重启服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose restart</span><br></pre></td></tr></table></figure>

<p>启动服务：（类似 <code>docker start</code>）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose start</span><br></pre></td></tr></table></figure>

<p>停止服务：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker-compose stop</span><br></pre></td></tr></table></figure>

<h1 id="compose编排实例"><a href="#compose编排实例" class="headerlink" title="compose编排实例"></a>compose编排实例</h1><p>示例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker-compose文件版本号</span></span><br><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置各个容器服务</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">microService:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">springboot_docker:1.0</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ms01</span>  <span class="comment"># 容器名称，如果不指定，会生成一个服务名加上前缀的容器名</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6001:6001&quot;</span></span><br><span class="line">      <span class="comment"># - 80 只写一个，表示容器内部，主机端口随机映射</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/app/microService:/data</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">springboot_network</span></span><br><span class="line">    <span class="attr">depends_on:</span>  <span class="comment"># 配置该容器服务所依赖的容器服务</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">redis</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">redis:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">redis:6.0.8</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;6379:6379&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/app/redis/redis.conf:/etc/redis/redis.conf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/app/redis/data:data</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">springboot_network</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">redis-server</span> <span class="string">/etc/redis/redis.conf</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mysql:5.7</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">MYSQL_ROOT_PASSWORD:</span> <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">      <span class="attr">MYSQL_ALLOW_EMPTY_PASSWORD:</span> <span class="string">&#x27;no&#x27;</span></span><br><span class="line">      <span class="attr">MYSQL_DATABASE:</span> <span class="string">&#x27;db_springboot&#x27;</span></span><br><span class="line">      <span class="attr">MYSQL_USER:</span> <span class="string">&#x27;springboot&#x27;</span></span><br><span class="line">      <span class="attr">MYSQL_PASSWORD:</span> <span class="string">&#x27;springboot&#x27;</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&quot;3306:3306&quot;</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/app/mysql/db:/var/lib/mysql</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/app/mysql/conf/my.cnf:/etc/my.cnf</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/app/mysql/init:/docker-entrypoint-initdb.d</span></span><br><span class="line">    <span class="attr">networks:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">springboot_network</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">--default-authentication-plugin=mysql_native_password</span> <span class="comment"># 解决外部无法访问</span></span><br><span class="line"></span><br><span class="line"><span class="attr">networks:</span></span><br><span class="line">  <span class="comment"># 创建 springboot_network 网桥网络</span></span><br><span class="line">  <span class="attr">springboot_network:</span></span><br></pre></td></tr></table></figure>

<p>编写完成<code>docker-compose.yml</code>后，进行语法检查：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进行语法检查</span></span><br><span class="line">docker-compose config -q</span><br></pre></td></tr></table></figure>

<p>如果语法检查没有任何问题，进行创建、启动：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h1 id="6-Docker轻量级可视化工具Portainer"><a href="#6-Docker轻量级可视化工具Portainer" class="headerlink" title="6 Docker轻量级可视化工具Portainer"></a>6 Docker轻量级可视化工具Portainer</h1><h2 id="是什么-1"><a href="#是什么-1" class="headerlink" title="是什么"></a>是什么</h2><p>Portainer 是一款轻量级的应用，它提供了图形化界面，用于方便地管理Docker环境，包括单机环境和集群环境。</p>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p><strong>官网</strong><br><a href="https://www.portainer.io/">https://www.portainer.io/</a><br><a href="https://docs.portainer.io/v/ce-2.9/start/install/server/docker/linux">https://docs.portainer.io/v/ce-2.9/start/install/server/docker/linux</a><br><strong>步骤</strong></p>
<ol>
<li><strong>docker命令安装</strong></li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8000:8000 -p 9000:9000 </span><br><span class="line">--name portainer </span><br><span class="line">--restart=always </span><br><span class="line">-v /var/run/docker.sock:/var/run/docker.sock </span><br><span class="line">-v portainer_data:/data </span><br><span class="line">portainer/portainer </span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p><strong>第一次登录需创建admin，访问地址：xxx.xxx.xxx.xxx:9000</strong><br>:::info<br>用户名，直接用默认admin<br>密码记得8位，随便你写<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660033430938-9526470c-089a-4cde-8ee9-5bd3328f32fb.png#averageHue=%23f9f9f9&clientId=ue2704781-83b0-4&from=paste&height=447&id=ufe805db0&originHeight=559&originWidth=874&originalType=binary&ratio=1&rotation=0&showTitle=false&size=32513&status=done&style=none&taskId=u5aaf1519-8716-4dc4-bf68-3f7530a4915&title=&width=699.2" alt="image.png"><br>:::</p>
</li>
<li><p><strong>设置admin用户和密码后首次登陆</strong></p>
</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660033444646-6696d6a3-ca9b-4546-88a4-89909eddf89d.png#averageHue=%23fbfafa&clientId=ue2704781-83b0-4&from=paste&height=390&id=u1e7a47ca&originHeight=487&originWidth=1099&originalType=binary&ratio=1&rotation=0&showTitle=false&size=57063&status=done&style=none&taskId=u6cea78b7-fb39-4734-996b-fb8400bbdf3&title=&width=879.2" alt="image.png"></p>
<ol start="4">
<li><strong>选择local选项卡后本地docker详细信息展示</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660033451033-300878aa-e6ba-42f1-9264-be57d65b87b3.png#averageHue=%23faf9f9&clientId=ue2704781-83b0-4&from=paste&height=474&id=uc77f6994&originHeight=593&originWidth=1076&originalType=binary&ratio=1&rotation=0&showTitle=false&size=47799&status=done&style=none&taskId=ua3cb4196-3a42-4461-9e01-2fc2f842237&title=&width=860.8" alt="image.png"></p>
<ol start="5">
<li><strong>上一步的图形展示，能想得起对应命令吗？</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660033457920-8e9618b2-6979-4d7c-8071-a2a098dc1128.png#averageHue=%23fefcfc&clientId=ue2704781-83b0-4&from=paste&height=156&id=u6d02ee74&originHeight=195&originWidth=664&originalType=binary&ratio=1&rotation=0&showTitle=false&size=29339&status=done&style=none&taskId=u5249049d-65c1-44a1-8f10-14a494d11bf&title=&width=531.2" alt="image.png"></p>
<h2 id="登陆并演示介绍常用操作case"><a href="#登陆并演示介绍常用操作case" class="headerlink" title="登陆并演示介绍常用操作case"></a>登陆并演示介绍常用操作case</h2><h1 id="7-Docker容器监控之-CAdvisor-InfluxDB-Granfana"><a href="#7-Docker容器监控之-CAdvisor-InfluxDB-Granfana" class="headerlink" title="7 Docker容器监控之 CAdvisor+InfluxDB+Granfana"></a>7 Docker容器监控之 CAdvisor+InfluxDB+Granfana</h1><h1 id="8-终章の总结"><a href="#8-终章の总结" class="headerlink" title="8 终章の总结"></a>8 终章の总结</h1><p>知识回顾简单串讲和总结<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660034195809-591c7f4b-dd7b-46a2-9865-7e2c01ae8239.png#averageHue=%23fefefe&clientId=u01389c9f-3321-4&from=paste&height=364&id=ue750b2df&originHeight=455&originWidth=1039&originalType=binary&ratio=1&rotation=0&showTitle=false&size=132290&status=done&style=none&taskId=uaa7453cb-7c4a-4eaa-a78c-377b4899f9a&title=&width=831.2" alt="image.png"><br>进阶篇：雷丰阳老师的K8S</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker_2</title>
    <url>/2024/04/27/docker-2/</url>
    <content><![CDATA[<h1 id="4-Docker镜像"><a href="#4-Docker镜像" class="headerlink" title="4 Docker镜像"></a>4 Docker镜像</h1><h3 id="4-1-是什么"><a href="#4-1-是什么" class="headerlink" title="4.1 是什么"></a>4.1 是什么</h3><p>是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境(包括代码、运行时需要的库、环境变量和配置文件等)，这个打包好的运行环境就是image镜像文件。<br>只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来一个对象)。</p>
<h4 id="4-1-1-分层的镜像"><a href="#4-1-1-分层的镜像" class="headerlink" title="4.1.1 分层的镜像"></a>4.1.1 分层的镜像</h4><p>以我们的pull为例，在下载的过程中我们可以看到docker的镜像好像是在一层一层的在下载<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139351043-7a36850b-bd26-491a-9597-76535f2b0a1f.png#averageHue=%23f5f4f4&clientId=uc7bc2b35-0cbd-4&from=paste&height=391&id=u6680eff7&originHeight=391&originWidth=698&originalType=binary&ratio=1&rotation=0&showTitle=false&size=113408&status=done&style=none&taskId=u7a311554-4116-4b63-bc4f-225b77f45d4&title=&width=698" alt="image.png"></p>
<h4 id="4-1-2-UnionFS（联合文件系统）"><a href="#4-1-2-UnionFS（联合文件系统）" class="headerlink" title="4.1.2 UnionFS（联合文件系统）"></a>4.1.2 UnionFS（联合文件系统）</h4><p>UnionFS（联合文件系统）：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139366360-eee5b96b-2f64-4a11-a3ae-5aa027fc7d33.png#averageHue=%23c8b77b&clientId=uc7bc2b35-0cbd-4&from=paste&height=314&id=u4910c054&originHeight=314&originWidth=526&originalType=binary&ratio=1&rotation=0&showTitle=false&size=246350&status=done&style=none&taskId=u470c301e-dbe7-4190-9854-d2e54d826f0&title=&width=526" alt="image.png"><br>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p>
<h4 id="4-1-3-Docker镜像加载原理"><a href="#4-1-3-Docker镜像加载原理" class="headerlink" title="4.1.3 Docker镜像加载原理"></a>4.1.3 Docker镜像加载原理</h4><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。<br>bootfs(boot file system)主要包含bootloader和kernel, bootloader主要是引导加载kernel, Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是引导文件系统bootfs。这一层与我们典型的Linux&#x2F;Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。<br>rootfs (root file system) ，在bootfs之上。包含的就是典型 Linux 系统中的 &#x2F;dev, &#x2F;proc, &#x2F;bin, &#x2F;etc 等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139389739-dedef184-d920-4cb8-b046-6d74cd73a390.png#averageHue=%23a4a6a2&clientId=uc7bc2b35-0cbd-4&from=paste&height=440&id=uefc7eed4&originHeight=440&originWidth=631&originalType=binary&ratio=1&rotation=0&showTitle=false&size=288182&status=done&style=none&taskId=u935d61d5-3c6c-4472-91a7-ae66f2dd6d9&title=&width=631" alt="image.png"><br>平时我们安装进虚拟机的CentOS都是好几个G，为什么docker这里才200M？？<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139396091-72001717-33f4-4790-afbe-9d4e8198447a.png#averageHue=%23f4f0f0&clientId=uc7bc2b35-0cbd-4&from=paste&height=105&id=ua606fd7b&originHeight=105&originWidth=800&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11057&status=done&style=none&taskId=u61c6b335-5ca8-4aeb-856b-291f608643a&title=&width=800" alt="image.png"><br>对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供 rootfs 就行了。由此可见对于不同的linux发行版, bootfs基本是一致的, rootfs会有差别, 因此不同的发行版可以公用bootfs。</p>
<h4 id="4-1-4-为什么-Docker-镜像要采用这种分层结构呢"><a href="#4-1-4-为什么-Docker-镜像要采用这种分层结构呢" class="headerlink" title="4.1.4 为什么 Docker 镜像要采用这种分层结构呢"></a>4.1.4 为什么 Docker 镜像要采用这种分层结构呢</h4><p>镜像分层最大的一个好处就是共享资源，方便复制迁移，就是为了复用。<br>比如说有多个镜像都从相同的 base 镜像构建而来，那么 Docker Host 只需在磁盘上保存一份 base 镜像；<br>同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p>
<h3 id="4-2-重点理解"><a href="#4-2-重点理解" class="headerlink" title="4.2 重点理解"></a>4.2 重点理解</h3><p>Docker镜像层都是只读的，容器层是可写的。当容器启动时，一个新的可写层被加载到镜像的顶部。 这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。<br>所有对容器的改动 - 无论添加、删除、还是修改文件都只会发生在容器层中。只有容器层是可写的，容器层下面的所有镜像层都是只读的。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139462778-98182b2f-6e3d-4e23-96ca-04107d94efe9.png#averageHue=%234ba5bd&clientId=uc7bc2b35-0cbd-4&from=paste&height=454&id=u9dd4a381&originHeight=454&originWidth=539&originalType=binary&ratio=1&rotation=0&showTitle=false&size=219715&status=done&style=none&taskId=u29e119b4-6031-457d-aa55-a0471e5afe2&title=&width=539" alt="image.png"></p>
<h3 id="4-3-Docker镜像commit操作案例"><a href="#4-3-Docker镜像commit操作案例" class="headerlink" title="4.3 Docker镜像commit操作案例"></a>4.3 Docker镜像commit操作案例</h3><p>docker commit 提交容器副本使之成为一个新的镜像<br><code>docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器ID 要创建的目标镜像名:[标签名]</code></p>
<h4 id="4-3-1-案例演示ubuntu安装vim"><a href="#4-3-1-案例演示ubuntu安装vim" class="headerlink" title="4.3.1 案例演示ubuntu安装vim"></a>4.3.1 案例演示ubuntu安装vim</h4><ol>
<li><strong>从Hub上下载ubuntu镜像到本地并成功运行</strong></li>
<li><strong>原始的默认Ubuntu镜像是不带着vim命令的</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139528237-90855992-8e34-4d7b-bfb5-ce29b0ac411f.png#averageHue=%23fdfdfd&clientId=uc7bc2b35-0cbd-4&from=paste&height=231&id=u8b0dcfbb&originHeight=231&originWidth=717&originalType=binary&ratio=1&rotation=0&showTitle=false&size=48155&status=done&style=none&taskId=u9519bef2-6149-42df-8a91-b2c1f26902f&title=&width=717" alt="image.png"></p>
<ol start="3">
<li><strong>外网连通的情况下，安装vim</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139546512-e54ea2c6-cf8e-4782-915a-b0c59fb0c5dc.png#averageHue=%232e3444&clientId=uc7bc2b35-0cbd-4&from=paste&height=97&id=u89f9e8e3&originHeight=97&originWidth=234&originalType=binary&ratio=1&rotation=0&showTitle=false&size=6701&status=done&style=none&taskId=uab385052-4fd5-4db7-acb7-592e8dde5f2&title=&width=234" alt="image.png"><br>docker容器内执行上述两条命令：<br><code>apt-get update</code><br><code>apt-get -y install vim</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139552106-4c75c757-2789-4b36-9162-d435e5278456.png#averageHue=%23fefafa&clientId=uc7bc2b35-0cbd-4&from=paste&height=359&id=u04d84326&originHeight=359&originWidth=1049&originalType=binary&ratio=1&rotation=0&showTitle=false&size=109988&status=done&style=none&taskId=u3319c99a-937f-46e8-b174-8c1a0800abd&title=&width=1049" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139557574-59af7f26-86c4-4af9-bba7-650897d6ff82.png#averageHue=%23fefcfc&clientId=uc7bc2b35-0cbd-4&from=paste&height=259&id=u67524e2e&originHeight=259&originWidth=1136&originalType=binary&ratio=1&rotation=0&showTitle=false&size=58336&status=done&style=none&taskId=ucdc32189-fd16-42ba-a9bb-e42b5faae7a&title=&width=1136" alt="image.png"></p>
<ol start="4">
<li><strong>安装完成后，commit我们自己的新镜像</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139596868-4312899d-c9dd-4a45-9b34-8a075d61116c.png#averageHue=%23fefcfc&clientId=uc7bc2b35-0cbd-4&from=paste&height=259&id=uf6d8b048&originHeight=259&originWidth=1136&originalType=binary&ratio=1&rotation=0&showTitle=false&size=58249&status=done&style=none&taskId=uef2a16f7-9067-4918-88ae-f507e13a011&title=&width=1136" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139602000-6bb1bb7f-a2f8-4bad-8d03-ff1f147da555.png#averageHue=%23fef9f9&clientId=uc7bc2b35-0cbd-4&from=paste&height=274&id=uec8656e1&originHeight=274&originWidth=1197&originalType=binary&ratio=1&rotation=0&showTitle=false&size=75309&status=done&style=none&taskId=u8d43390c-86e5-4c75-b1a3-62bdf5b7b9b&title=&width=1197" alt="image.png"></p>
<ol start="5">
<li><strong>启动我们的新镜像并和原来的对比</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139612305-4d9e9f72-1e44-4988-8ef3-255090cd1b82.png#averageHue=%23fdf9f9&clientId=uc7bc2b35-0cbd-4&from=paste&height=274&id=ubd738772&originHeight=274&originWidth=1197&originalType=binary&ratio=1&rotation=0&showTitle=false&size=75320&status=done&style=none&taskId=u9cb0e276-a453-4c71-82a9-b23a42b02f9&title=&width=1197" alt="image.png"></p>
<pre><code>  1. 官网是默认下载的Ubuntu没有vim命令
  2. 我们自己commit构建的镜像，新增加了vim功能，可以成功使用。
</code></pre>
<h4 id="4-3-2-小总结"><a href="#4-3-2-小总结" class="headerlink" title="4.3.2 小总结"></a>4.3.2 小总结</h4><p>Docker中的镜像分层，支持通过扩展现有镜像，创建新的镜像。类似Java继承于一个Base基础类，自己再按需扩展。<br>新镜像是从 base 镜像一层一层叠加生成的。每安装一个软件，就在现有镜像的基础上增加一层<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139701434-5322591f-b716-4232-8f3c-9420ba706072.png#averageHue=%23a6c5c3&clientId=uc7bc2b35-0cbd-4&from=paste&height=273&id=u61367ba6&originHeight=273&originWidth=836&originalType=binary&ratio=1&rotation=0&showTitle=false&size=195447&status=done&style=none&taskId=u117af23f-bc66-4141-992d-a76affa8636&title=&width=836" alt="image.png"></p>
<h1 id="5-本地镜像发布到阿里云"><a href="#5-本地镜像发布到阿里云" class="headerlink" title="5 本地镜像发布到阿里云"></a>5 本地镜像发布到阿里云</h1><h2 id="5-1-本地镜像发布到阿里云流程"><a href="#5-1-本地镜像发布到阿里云流程" class="headerlink" title="5.1 本地镜像发布到阿里云流程"></a>5.1 本地镜像发布到阿里云流程</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139786698-1f881901-f53d-482d-8198-5c71a779db6f.png#averageHue=%23f5f5f5&clientId=uc7bc2b35-0cbd-4&from=paste&height=571&id=u3b784860&originHeight=571&originWidth=642&originalType=binary&ratio=1&rotation=0&showTitle=false&size=105093&status=done&style=none&taskId=u6a546cfb-34a7-447b-a459-7e52bf1c344&title=&width=642" alt="image.png"></p>
<h2 id="5-2-镜像的生成方法"><a href="#5-2-镜像的生成方法" class="headerlink" title="5.2 镜像的生成方法"></a>5.2 镜像的生成方法</h2><p>基于当前容器创建一个新的镜像，新功能增强 <code>docker commit [OPTIONS] 容器ID [REPOSITORY[:TAG]]</code><br>:::info<br>OPTIONS说明：<br>-a :提交的镜像作者；<br>-m :提交时的说明文字；<br>:::<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139828870-7f14de5e-85a2-4409-b30d-1d833b6e014a.png#averageHue=%23f1eded&clientId=uc7bc2b35-0cbd-4&from=paste&height=369&id=uf085d4e9&originHeight=369&originWidth=918&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56417&status=done&style=none&taskId=ueeba4ba8-a708-45ed-b836-ef196fe452d&title=&width=918" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139835046-ce1ff5bb-96dc-46a8-92ac-9cc522f730ab.png#averageHue=%23fef5f5&clientId=uc7bc2b35-0cbd-4&from=paste&height=402&id=ufeae1849&originHeight=402&originWidth=819&originalType=binary&ratio=1&rotation=0&showTitle=false&size=81789&status=done&style=none&taskId=u5bcb61d1-ebb2-440f-a9b8-74a455a6d9d&title=&width=819" alt="image.png"></p>
<h2 id="5-3-将本地镜像推送到阿里云"><a href="#5-3-将本地镜像推送到阿里云" class="headerlink" title="5.3 将本地镜像推送到阿里云"></a>5.3 将本地镜像推送到阿里云</h2><p>本地镜像素材原型<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139862888-96cc93ff-c7a6-4f73-9268-c9a9fd06dad3.png#averageHue=%23eee1e0&clientId=uc7bc2b35-0cbd-4&from=paste&height=59&id=ucfe88ec4&originHeight=59&originWidth=863&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9921&status=done&style=none&taskId=u4d437ca3-e73d-4deb-985d-ced710feb67&title=&width=863" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139867564-59ac7072-d068-4d74-b012-de24e64f65b0.png#averageHue=%23fcf7f7&clientId=uc7bc2b35-0cbd-4&from=paste&height=72&id=ua81c7d0c&originHeight=72&originWidth=794&originalType=binary&ratio=1&rotation=0&showTitle=false&size=15108&status=done&style=none&taskId=u775dbc94-e8f1-4d38-92b3-0d22a71b9d4&title=&width=794" alt="image.png"><br>阿里云开发者平台<br><a href="https://promotion.aliyun.com/ntms/act/kubernetes.html">https://promotion.aliyun.com/ntms/act/kubernetes.html</a><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139877321-2fee875d-2343-460f-93ba-5eadd35c479b.png#averageHue=%23b3ccc5&clientId=uc7bc2b35-0cbd-4&from=paste&height=597&id=u1eca9d66&originHeight=597&originWidth=1351&originalType=binary&ratio=1&rotation=0&showTitle=false&size=286725&status=done&style=none&taskId=uc5335389-8ce6-47c1-b00a-f975f9c4c25&title=&width=1351" alt="image.png"></p>
<h3 id="5-3-1-创建仓库镜像"><a href="#5-3-1-创建仓库镜像" class="headerlink" title="5.3.1 创建仓库镜像"></a>5.3.1 创建仓库镜像</h3><ol>
<li><strong>选择控制台，进入容器镜像服务</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139928853-ccc16d88-bb05-4f73-82f3-429a883e6754.png#averageHue=%23fbf7f6&clientId=uc7bc2b35-0cbd-4&from=paste&height=605&id=udf761ace&originHeight=605&originWidth=789&originalType=binary&ratio=1&rotation=0&showTitle=false&size=69535&status=done&style=none&taskId=ue0a313b2-42e8-4667-b25d-6d3e2e51f5e&title=&width=789" alt="image.png"></p>
<ol start="2">
<li><strong>选择个人实例</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139936677-14362c3e-3c89-4af3-8ebf-233b303e59ce.png#averageHue=%23faf6f3&clientId=uc7bc2b35-0cbd-4&from=paste&height=432&id=u842ac95e&originHeight=432&originWidth=1002&originalType=binary&ratio=1&rotation=0&showTitle=false&size=48258&status=done&style=none&taskId=u9882bf43-4cd2-437e-a89f-e14e68bac44&title=&width=1002" alt="image.png"></p>
<ol start="3">
<li><strong>命名空间</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139942874-f2e3db26-3f56-46d1-b353-da6c80b4064e.png#averageHue=%23fcfbfa&clientId=uc7bc2b35-0cbd-4&from=paste&height=513&id=u9ada1370&originHeight=513&originWidth=1001&originalType=binary&ratio=1&rotation=0&showTitle=false&size=40866&status=done&style=none&taskId=uf9680671-be40-43ad-a00d-7c29b3d5229&title=&width=1001" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139948785-659bd67e-b21f-46ef-9b9c-4cff763f0c30.png#averageHue=%23adacab&clientId=uc7bc2b35-0cbd-4&from=paste&height=531&id=u50bb16e4&originHeight=531&originWidth=990&originalType=binary&ratio=1&rotation=0&showTitle=false&size=44672&status=done&style=none&taskId=u793b703e-2418-4a96-81a8-15628c29d7f&title=&width=990" alt="image.png"></p>
<ol start="4">
<li><strong>仓库名称</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139954429-530f3efa-c1cf-41ab-8ee3-4d0ed47a5423.png#averageHue=%23fcfaf9&clientId=uc7bc2b35-0cbd-4&from=paste&height=442&id=u91f22b4d&originHeight=442&originWidth=886&originalType=binary&ratio=1&rotation=0&showTitle=false&size=28680&status=done&style=none&taskId=u386a15a5-1dfb-46a8-a8f8-ab3c321de51&title=&width=886" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139962035-85aaed76-b131-4997-8ba6-aeafc9e45a45.png#averageHue=%23d9d6d6&clientId=uc7bc2b35-0cbd-4&from=paste&height=593&id=u53a9b5df&originHeight=593&originWidth=1088&originalType=binary&ratio=1&rotation=0&showTitle=false&size=53441&status=done&style=none&taskId=u82322608-7780-4b99-adab-bd6b131f8ac&title=&width=1088" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139971022-400de815-a008-4fbd-8ac3-16d2337d68a3.png#averageHue=%23c3c1c1&clientId=uc7bc2b35-0cbd-4&from=paste&height=513&id=u23abe084&originHeight=513&originWidth=1086&originalType=binary&ratio=1&rotation=0&showTitle=false&size=42840&status=done&style=none&taskId=u7a607c6b-0d41-498e-95ae-f24e96544a0&title=&width=1086" alt="image.png"></p>
<ol start="5">
<li><strong>进入管理界面获得脚本</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139979398-d997e648-e878-44bf-97a9-99a9b4cc182b.png#averageHue=%23fcfaf9&clientId=uc7bc2b35-0cbd-4&from=paste&height=390&id=u7cd885f8&originHeight=390&originWidth=1230&originalType=binary&ratio=1&rotation=0&showTitle=false&size=38220&status=done&style=none&taskId=u6ee6ab7b-37e6-4117-ad97-0f04e6b01f5&title=&width=1230" alt="image.png"></p>
<h3 id="5-3-2-将镜像推送到阿里云"><a href="#5-3-2-将镜像推送到阿里云" class="headerlink" title="5.3.2 将镜像推送到阿里云"></a>5.3.2 将镜像推送到阿里云</h3><ol>
<li><strong>管理界面脚本</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658140037335-a8e58945-9160-4db5-82d7-51bdce65a98f.png#averageHue=%23ddc1a9&clientId=uc7bc2b35-0cbd-4&from=paste&height=503&id=ub425a83c&originHeight=503&originWidth=761&originalType=binary&ratio=1&rotation=0&showTitle=false&size=123257&status=done&style=none&taskId=u19586877-9b92-4d1a-ab1b-a29bb0c4a12&title=&width=761" alt="image.png"></p>
<ol start="2">
<li><strong>脚本实例</strong></li>
</ol>
<p><code>docker login --username=zzyybuy registry.cn-hangzhou.aliyuncs.com</code><br><code>docker tag cea1bb40441c registry.cn-hangzhou.aliyuncs.com/atguiguwh/myubuntu:1.1</code><br><code>docker push registry.cn-hangzhou.aliyuncs.com/atguiguwh/myubuntu:1.1</code><br>上面命令是阳哥自己本地的，你自己酌情处理，不要粘贴我的。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658140061637-73ca4162-693e-4e3a-8431-b7b3f969d791.png#averageHue=%23fef7f7&clientId=uc7bc2b35-0cbd-4&from=paste&height=492&id=u3af2ee9f&originHeight=492&originWidth=1085&originalType=binary&ratio=1&rotation=0&showTitle=false&size=117028&status=done&style=none&taskId=uef1a803d-beb5-4612-b893-ffcc0f3b88d&title=&width=1085" alt="image.png"></p>
<h2 id="5-4-将阿里云上的镜像下载到本地"><a href="#5-4-将阿里云上的镜像下载到本地" class="headerlink" title="5.4 将阿里云上的镜像下载到本地"></a>5.4 将阿里云上的镜像下载到本地</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658140107483-05a4996e-cc38-4cc9-8ede-6b137c76d182.png#averageHue=%23fefbfb&clientId=uc7bc2b35-0cbd-4&from=paste&height=481&id=ub51a4007&originHeight=481&originWidth=1153&originalType=binary&ratio=1&rotation=0&showTitle=false&size=121303&status=done&style=none&taskId=uafb34e57-9dea-4505-a786-0bf121f1f48&title=&width=1153" alt="image.png"><br><code>docker pull registry.cn-hangzhou.aliyuncs.com/atguiguwh/myubuntu:1.1</code></p>
<h1 id="6-本地镜像发布到私有库"><a href="#6-本地镜像发布到私有库" class="headerlink" title="6 本地镜像发布到私有库"></a>6 本地镜像发布到私有库</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658140528137-0139f39f-85e8-4b9c-8b90-176cf342f638.png#averageHue=%23f6f6f6&clientId=uc7bc2b35-0cbd-4&from=paste&height=482&id=uc16bf9e5&originHeight=482&originWidth=541&originalType=binary&ratio=1&rotation=0&showTitle=false&size=74573&status=done&style=none&taskId=ubdcc20a8-8e48-4a97-aa79-c6b3b04ce65&title=&width=541" alt="image.png"></p>
<h2 id="6-1-是什么"><a href="#6-1-是什么" class="headerlink" title="6.1 是什么"></a>6.1 是什么</h2><p>1 官方Docker Hub地址：<a href="https://hub.docker.com/">https://hub.docker.com/</a>，中国大陆访问太慢了且准备被阿里云取代的趋势，不太主流。<br>2 Dockerhub、阿里云这样的公共镜像仓库可能不太方便，涉及机密的公司不可能提供镜像给公网，所以需要创建一个本地私人仓库供给团队使用，基于公司内部项目构建镜像。<br>Docker Registry是官方提供的工具，可以用于构建私有镜像仓库</p>
<h2 id="6-2-将本地镜像推送到私有库"><a href="#6-2-将本地镜像推送到私有库" class="headerlink" title="6.2 将本地镜像推送到私有库"></a>6.2 将本地镜像推送到私有库</h2><h2 id="Nexus私有仓库-详细步骤请看xmind笔记"><a href="#Nexus私有仓库-详细步骤请看xmind笔记" class="headerlink" title="Nexus私有仓库 详细步骤请看xmind笔记"></a>Nexus私有仓库 详细步骤请看xmind笔记</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">mkdir</span> <span class="string">nexus</span></span><br><span class="line"><span class="string">chmod</span> <span class="number">777</span> <span class="string">-R</span> <span class="string">nexus/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 nexus 容器</span></span><br><span class="line"><span class="string">docker</span> <span class="string">run</span> <span class="string">-d</span> <span class="string">--restart=always</span> <span class="string">-p</span> <span class="number">8868</span><span class="string">:8081</span> <span class="string">-p</span> <span class="number">5000</span><span class="string">:5000</span> <span class="string">-p</span> <span class="number">5001</span><span class="string">:5001</span> <span class="string">--name</span> <span class="string">nexus</span> <span class="string">-v</span> <span class="string">/opt/docker/nexus:/nexus-data</span> <span class="string">sonatype/nexus3</span></span><br></pre></td></tr></table></figure>


<h1 id="7-Docker容器数据卷"><a href="#7-Docker容器数据卷" class="headerlink" title="7 Docker容器数据卷"></a>7 Docker容器数据卷</h1><h2 id="7-1-坑：容器卷记得加入"><a href="#7-1-坑：容器卷记得加入" class="headerlink" title="7.1 坑：容器卷记得加入"></a>7.1 坑：容器卷记得加入</h2><p><code>--privileged=true</code><br>Docker挂载主机目录访问如果出现cannot open directory .: Permission denied<br><strong>解决办法：在挂载目录后多加一个–privileged&#x3D;true参数即可</strong><br>如果是CentOS7安全模块会比之前系统版本加强，不安全的会先禁止，所以目录挂载的情况被默认为不安全的行为，在SELinux里面挂载目录被禁止掉了，如果要开启，我们一般使用–privileged&#x3D;true命令，扩大容器的权限解决挂载目录没有权限的问题，也即使用该参数，container内的root拥有真正的root权限，否则，container内的root只是外部的一个普通用户权限。</p>
<h2 id="7-2-回顾下上一讲的知识点，参数V"><a href="#7-2-回顾下上一讲的知识点，参数V" class="headerlink" title="7.2 回顾下上一讲的知识点，参数V"></a>7.2 回顾下上一讲的知识点，参数V</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658193898005-66ac7a6e-7f2f-4f7b-899d-5114a1215fa0.png#averageHue=%23fdf7f6&clientId=uc73566a5-2b6f-4&from=paste&height=335&id=uf93fc416&originHeight=335&originWidth=1254&originalType=binary&ratio=1&rotation=0&showTitle=false&size=57602&status=done&style=none&taskId=u31c10274-10f1-4456-834d-11b5fd4c8c2&title=&width=1254" alt="image.png"></p>
<h2 id="7-3-是什么"><a href="#7-3-是什么" class="headerlink" title="7.3 是什么"></a>7.3 是什么</h2><p>卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过Union File System提供一些用于持续存储或共享数据的特性：卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷。<br><strong>一句话：有点类似我们Redis里面的rdb和aof文件。</strong><br>将docker容器内的数据保存进宿主机的磁盘中，运行一个带有容器卷存储功能的容器实例。<br><code> docker run -it --privileged=true -v /宿主机绝对路径目录:/容器内目录      镜像名</code></p>
<h2 id="7-4-能干嘛"><a href="#7-4-能干嘛" class="headerlink" title="7.4 能干嘛"></a>7.4 能干嘛</h2><p>将运用与运行的环境打包镜像，run后形成容器实例运行 ，但是我们对数据的要求希望是持久化的。<br>Docker容器产生的数据，如果不备份，那么当容器实例删除后，容器内的数据自然也就没有了。为了能保存数据在docker中我们使用卷。<br>特点：</p>
<ol>
<li><strong>数据卷可在容器之间共享或重用数据</strong></li>
<li><strong>卷中的更改可以直接实时生效，爽</strong></li>
<li><strong>数据卷中的更改不会包含在镜像的更新中</strong></li>
<li><strong>数据卷的生命周期一直持续到没有容器使用它为止</strong></li>
</ol>
<h2 id="7-5-数据卷案例"><a href="#7-5-数据卷案例" class="headerlink" title="7.5 数据卷案例"></a>7.5 数据卷案例</h2><h3 id="7-5-1-宿主vs容器之间映射添加容器卷"><a href="#7-5-1-宿主vs容器之间映射添加容器卷" class="headerlink" title="7.5.1 宿主vs容器之间映射添加容器卷"></a>7.5.1 宿主vs容器之间映射添加容器卷</h3><ol>
<li><code>直接命令添加</code></li>
</ol>
<p><code>docker run -it --privileged=true -v /宿主机绝对路径目录:/容器内目录 镜像名</code><br>公式：<code>docker run -it -v /宿主机目录:/容器内目录 ubuntu /bin/bash</code><br><code>docker run -it --name myu3 --privileged=true -v /tmp/myHostData:/tmp/myDockerData ubuntu /bin/bash</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658226408944-61a9764d-b3db-42f6-b8e6-10ed888287d9.png#averageHue=%23f9f2f2&clientId=u56dc0970-6681-4&from=paste&height=398&id=ucc12a350&originHeight=498&originWidth=832&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56148&status=done&style=none&taskId=u6dd32c7f-6d71-42cd-b0a0-e4c9835c52c&title=&width=665.6" alt="image.png"></p>
<ol start="2">
<li><strong>查看数据卷是否挂载成功</strong></li>
</ol>
<p><code>docker inspect 容器ID</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658226437704-b3a2cbb1-9110-4a67-b6d8-fcf33c3fae29.png#averageHue=%23fef9f9&clientId=u56dc0970-6681-4&from=paste&height=173&id=u4085ebd3&originHeight=216&originWidth=580&originalType=binary&ratio=1&rotation=0&showTitle=false&size=18077&status=done&style=none&taskId=ub7436ccd-8c74-4014-975d-5e2b69e646c&title=&width=464" alt="image.png"></p>
<ol start="3">
<li><strong>容器和宿主机之间数据共享</strong><ol>
<li>docker修改，主机同步获得 。</li>
<li>主机修改，docker同步获得。</li>
<li>docker容器stop，主机修改，docker容器重启看数据是否同步。</li>
</ol>
</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658226473979-b13500a4-0605-49d3-aa07-7e405342dd92.png#averageHue=%23fbf7f6&clientId=u56dc0970-6681-4&from=paste&height=353&id=ufbc07740&originHeight=441&originWidth=1358&originalType=binary&ratio=1&rotation=0&showTitle=false&size=103394&status=done&style=none&taskId=uc96d88ed-3384-4ee0-b3f5-8f1642c36f8&title=&width=1086.4" alt="image.png"></p>
<h3 id="7-5-2-读写规则映射添加说明"><a href="#7-5-2-读写规则映射添加说明" class="headerlink" title="7.5.2 读写规则映射添加说明"></a>7.5.2 读写规则映射添加说明</h3><p>读写(默认)<br><code>docker run -it --privileged=true -v /宿主机绝对路径目录:/容器内目录:rw 镜像名</code><br>默认同上案例，默认就是rw<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658226514729-c2112eaf-6ec8-47ee-94a0-35f8ea7c9beb.png#averageHue=%23fef7f7&clientId=u56dc0970-6681-4&from=paste&height=140&id=u5d443fb8&originHeight=175&originWidth=968&originalType=binary&ratio=1&rotation=0&showTitle=false&size=35575&status=done&style=none&taskId=u2be83f14-bb6a-4908-88b2-969d12c924a&title=&width=774.4" alt="image.png"><br>rw &#x3D; read + write<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658226520150-41d79186-a2ef-460f-80b6-dcb0bbee1ecb.png#averageHue=%23fefafa&clientId=u56dc0970-6681-4&from=paste&height=180&id=u9f620c96&originHeight=225&originWidth=464&originalType=binary&ratio=1&rotation=0&showTitle=false&size=14371&status=done&style=none&taskId=ub1e79ae3-37cb-4847-a973-e253299f432&title=&width=371.2" alt="image.png"><br>只读<br>容器实例内部被限制，只能读取不能写<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658226536605-315fd061-8879-4685-a4cd-345ff3fcd1d7.png#averageHue=%23fef8f8&clientId=u56dc0970-6681-4&from=paste&height=208&id=u5d9cdf2f&originHeight=260&originWidth=940&originalType=binary&ratio=1&rotation=0&showTitle=false&size=49462&status=done&style=none&taskId=u79008790-cb37-410f-bfc9-eb8d3e42e47&title=&width=752" alt="image.png"><br>&#x2F;容器目录:ro 镜像名               就能完成功能，此时容器自己只能读取不能写<br>ro &#x3D; read only<br>此时如果宿主机写入内容，可以同步给容器内，容器可以读取到。<br><code>docker run -it --privileged=true -v /宿主机绝对路径目录:/容器内目录:ro 镜像名</code></p>
<h3 id="7-5-3-卷的继承和共享"><a href="#7-5-3-卷的继承和共享" class="headerlink" title="7.5.3 卷的继承和共享"></a>7.5.3 卷的继承和共享</h3><p>容器1完成和宿主机的映射<br><code>docker run -it  --privileged=true -v /mydocker/u:/tmp --name u1 ubuntu</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658226567377-ed27036f-cba3-4e16-9d6a-b18e249e0464.png#averageHue=%23fef4f4&clientId=u56dc0970-6681-4&from=paste&height=145&id=ud9baaabc&originHeight=181&originWidth=948&originalType=binary&ratio=1&rotation=0&showTitle=false&size=34929&status=done&style=none&taskId=u2872324a-7312-4436-b74b-28e51572d0e&title=&width=758.4" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658226571771-a1484811-0dae-4ddb-bf4b-e3c69b001269.png#averageHue=%23fefbfb&clientId=u56dc0970-6681-4&from=paste&height=106&id=u09af9264&originHeight=133&originWidth=691&originalType=binary&ratio=1&rotation=0&showTitle=false&size=17836&status=done&style=none&taskId=u3fe583ea-4cb5-40d4-a0f8-7360d9338dd&title=&width=552.8" alt="image.png"><br>容器2继承容器1的卷规则<br><code>docker run -it  --privileged=true --volumes-from 父类  --name u2 ubuntu</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658226594280-b1d73980-163b-4bbb-bc46-823b22e432dd.png#averageHue=%23fefbfb&clientId=u56dc0970-6681-4&from=paste&height=206&id=u7a0a1b1d&originHeight=257&originWidth=897&originalType=binary&ratio=1&rotation=0&showTitle=false&size=52771&status=done&style=none&taskId=ub5977afc-368d-49e2-bb6f-4fdf64233b2&title=&width=717.6" alt="image.png"></p>
<h1 id="8-Docker常规安装简介"><a href="#8-Docker常规安装简介" class="headerlink" title="8 Docker常规安装简介"></a>8 Docker常规安装简介</h1><h2 id="8-1-总体步骤"><a href="#8-1-总体步骤" class="headerlink" title="8.1 总体步骤"></a>8.1 总体步骤</h2><ol>
<li>搜索镜像</li>
<li>拉取镜像</li>
<li>查看镜像</li>
<li>启动镜像 - 服务端口映射</li>
<li>停止容器</li>
<li>移除容器</li>
</ol>
<h2 id="8-2-安装tomcat"><a href="#8-2-安装tomcat" class="headerlink" title="8.2 安装tomcat"></a>8.2 安装tomcat</h2><ol>
<li><strong>docker hub上面查找tomcat镜像</strong></li>
</ol>
<p><code>docker search tomcat</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658227019564-3256fed5-8d29-4b9b-b63c-f9db6688647f.png#averageHue=%23f1f1f1&clientId=u56dc0970-6681-4&from=paste&height=410&id=u554bbd0b&originHeight=513&originWidth=1024&originalType=binary&ratio=1&rotation=0&showTitle=false&size=82047&status=done&style=none&taskId=ud6078fbc-4aef-4666-8ad5-7f3a8537af9&title=&width=819.2" alt="image.png"></p>
<ol start="2">
<li><strong>从docker hub上拉取tomcat镜像到本地</strong></li>
</ol>
<p><code>docker pull tomcat</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658227032736-fd32aed9-dbe6-4fdf-8323-37a9f764528a.png#averageHue=%23f5f4f4&clientId=u56dc0970-6681-4&from=paste&height=391&id=u838d475c&originHeight=489&originWidth=852&originalType=binary&ratio=1&rotation=0&showTitle=false&size=61294&status=done&style=none&taskId=u70291ca0-ea2b-4632-8376-90a0ccf0b7e&title=&width=681.6" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658227037231-8c821604-210e-432f-a311-552c51918845.png#averageHue=%23f2e6e6&clientId=u56dc0970-6681-4&from=paste&height=110&id=u43febf4e&originHeight=137&originWidth=806&originalType=binary&ratio=1&rotation=0&showTitle=false&size=16721&status=done&style=none&taskId=u70bc463e-c5ea-459f-971b-23541fe7c6f&title=&width=644.8" alt="image.png"></p>
<ol start="3">
<li><strong>docker images查看是否有拉取到的tomcat</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658227047824-ae101631-a620-4703-9dac-8af6d9b80fdc.png#averageHue=%23fefefe&clientId=u56dc0970-6681-4&from=paste&height=78&id=u7377cedd&originHeight=98&originWidth=612&originalType=binary&ratio=1&rotation=0&showTitle=false&size=17367&status=done&style=none&taskId=u7200d213-1933-4a92-963a-320e1d7912e&title=&width=489.6" alt="image.png"></p>
<ol start="4">
<li><strong>使用tomcat镜像创建容器实例(也叫运行镜像)</strong></li>
</ol>
<p><code>docker run -it -p 8080:8080 tomcat</code><br>:::info<br>-p 小写，主机端口:docker容器端口<br>-P 大写，随机分配端口<br>-i 交互<br>-t 终端<br>-d 后台<br>:::<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658227076652-dccf1356-5133-4dfd-ad51-31bdc8d905d5.png#averageHue=%23e5e1e0&clientId=u56dc0970-6681-4&from=paste&height=243&id=ub6ded449&originHeight=304&originWidth=1159&originalType=binary&ratio=1&rotation=0&showTitle=false&size=40565&status=done&style=none&taskId=ua29b87b2-ae98-48ed-90f4-22506ee724d&title=&width=927.2" alt="image.png"></p>
<ol start="5">
<li><strong>访问猫首页</strong></li>
</ol>
<p>问题<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658227151748-3f6e8cf0-c183-4a32-aec3-c17011ce7929.png#averageHue=%23fbfaf9&clientId=u56dc0970-6681-4&from=paste&height=226&id=ud21ac78b&originHeight=282&originWidth=811&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23924&status=done&style=none&taskId=u6bafa167-4b3b-473f-a727-9ff5638fe9d&title=&width=648.8" alt="image.png"><br>解决</p>
<pre><code>  1. 可能没有映射端口或者没有关闭防火墙
  2. 把webapps.dist目录换成webapps
</code></pre>
<p>先成功启动tomcat<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658227198315-f76f4e96-a574-4027-ab56-e8ec70855676.png#averageHue=%23fef7f7&clientId=u56dc0970-6681-4&from=paste&height=303&id=B3mU7&originHeight=379&originWidth=1315&originalType=binary&ratio=1&rotation=0&showTitle=false&size=97694&status=done&style=none&taskId=u144695de-151d-4082-810d-facfdc2af05&title=&width=1052" alt="image.png"><br>查看webapps 文件夹查看为空<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658227241415-7b7a562e-b601-45e1-982f-5cdaf482e1f9.png#averageHue=%23fef9f9&clientId=u56dc0970-6681-4&from=paste&height=386&id=u5fa9155e&originHeight=483&originWidth=772&originalType=binary&ratio=1&rotation=0&showTitle=false&size=121057&status=done&style=none&taskId=u0a60655d-c042-40c4-be7f-4a4dbcd01e3&title=&width=617.6" alt="image.png"></p>
<ol start="6">
<li><strong>免修改版说明</strong></li>
</ol>
<p><code>docker pull billygoo/tomcat8-jdk8</code><br><code>docker run -d -p 8080:8080 --name mytomcat8 billygoo/tomcat8-jdk8</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658227293652-4c38aded-e9e1-48bb-a40f-7642928172f4.png#averageHue=%23fefcfc&clientId=u56dc0970-6681-4&from=paste&height=298&id=u6ebfef4e&originHeight=373&originWidth=777&originalType=binary&ratio=1&rotation=0&showTitle=false&size=54742&status=done&style=none&taskId=u9016eb8a-55b3-43f7-8e77-303f743cd69&title=&width=621.6" alt="image.png"></p>
<h2 id="8-3-安装mysql"><a href="#8-3-安装mysql" class="headerlink" title="8.3 安装mysql"></a>8.3 安装mysql</h2><h3 id="8-3-1-docker-hub上面查找mysql镜像"><a href="#8-3-1-docker-hub上面查找mysql镜像" class="headerlink" title="8.3.1 docker hub上面查找mysql镜像"></a>8.3.1 docker hub上面查找mysql镜像</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658385582810-fcaff7bf-61c8-41b5-bf2f-ae0cf7a29e84.png#averageHue=%23f1eeee&clientId=uc440a240-4b2c-4&from=paste&height=310&id=u32bddd71&originHeight=310&originWidth=1243&originalType=binary&ratio=1&rotation=0&showTitle=false&size=71747&status=done&style=none&taskId=uac260379-592a-4dda-a7ce-d14fdd69be2&title=&width=1243" alt="image.png"></p>
<h3 id="8-3-2-从docker-hub上-阿里云加速器-拉取mysql镜像到本地标签为5-7"><a href="#8-3-2-从docker-hub上-阿里云加速器-拉取mysql镜像到本地标签为5-7" class="headerlink" title="8.3.2 从docker hub上(阿里云加速器)拉取mysql镜像到本地标签为5.7"></a>8.3.2 从docker hub上(阿里云加速器)拉取mysql镜像到本地标签为5.7</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658385588787-239d33e3-87ef-465a-9513-841f703dd972.png#averageHue=%23fefafa&clientId=uc440a240-4b2c-4&from=paste&height=395&id=ubc7fb198&originHeight=395&originWidth=895&originalType=binary&ratio=1&rotation=0&showTitle=false&size=84229&status=done&style=none&taskId=u9a833797-deb3-4684-9ba7-90e4b2abe9b&title=&width=895" alt="image.png"></p>
<h3 id="8-3-3-使用mysql5-7镜像创建容器-也叫运行镜像"><a href="#8-3-3-使用mysql5-7镜像创建容器-也叫运行镜像" class="headerlink" title="8.3.3 使用mysql5.7镜像创建容器(也叫运行镜像)"></a>8.3.3 使用mysql5.7镜像创建容器(也叫运行镜像)</h3><h4 id="8-3-3-1-命令出处，哪里来的？"><a href="#8-3-3-1-命令出处，哪里来的？" class="headerlink" title="8.3.3.1 命令出处，哪里来的？"></a>8.3.3.1 命令出处，哪里来的？</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658385610694-1b65bab9-3a5a-4cb6-a995-d715004a0c00.png#averageHue=%23eccea7&clientId=uc440a240-4b2c-4&from=paste&height=319&id=u55a29fbc&originHeight=319&originWidth=1249&originalType=binary&ratio=1&rotation=0&showTitle=false&size=35793&status=done&style=none&taskId=u3930e801-323a-4765-a27b-ece969b36b4&title=&width=1249" alt="image.png"></p>
<h4 id="8-3-3-2-简单版"><a href="#8-3-3-2-简单版" class="headerlink" title="8.3.3.2 简单版"></a>8.3.3.2 简单版</h4><p>使用mysql镜像<br><code>docker run -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</code><br><code>docker ps</code><br><code>docker exec -it 容器ID /bin/bash</code><br><code>mysql -uroot -p</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658385723966-fa2bc241-6f24-4faf-96a2-3098a16d1706.png#averageHue=%23fefafa&clientId=uc440a240-4b2c-4&from=paste&height=446&id=uc297b376&originHeight=446&originWidth=1350&originalType=binary&ratio=1&rotation=0&showTitle=false&size=99606&status=done&style=none&taskId=ufed2d980-226a-400a-a121-76f9b809104&title=&width=1350" alt="image.png"><br>建库建表插入数据<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658385758209-655c9da4-e2cc-481b-b714-7c62d93d7d0a.png#averageHue=%23fdf5f5&clientId=uc440a240-4b2c-4&from=paste&height=552&id=u375c9497&originHeight=552&originWidth=642&originalType=binary&ratio=1&rotation=0&showTitle=false&size=49380&status=done&style=none&taskId=u180d94a9-9947-429b-834c-0a664bdef5f&title=&width=642" alt="image.png"><br>外部Win10也来连接运行在dokcer上的mysql容器实例服务<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658385770994-f0843127-92ef-4299-94b6-3b641109d2cc.png#averageHue=%23ebe6e5&clientId=uc440a240-4b2c-4&from=paste&height=460&id=u26364316&originHeight=460&originWidth=625&originalType=binary&ratio=1&rotation=0&showTitle=false&size=70516&status=done&style=none&taskId=u7899d130-79af-4c69-825b-076de025f24&title=&width=625" alt="image.png"><br>问题<br>插入中文数据试试<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658385783102-bdbbdfe5-30f1-493c-bdc3-79c35c2bf8f5.png#averageHue=%23f9f4f1&clientId=uc440a240-4b2c-4&from=paste&height=397&id=u36a890b0&originHeight=397&originWidth=971&originalType=binary&ratio=1&rotation=0&showTitle=false&size=34047&status=done&style=none&taskId=u805306da-1dde-46cf-8aee-e9096a7a59b&title=&width=971" alt="image.png"><br>为什么报错?<br>docker上默认字符集编码隐患,docker里面的mysql容器实例查看，内容如下：<br><code>SHOW VARIABLES LIKE &#39;character%&#39;</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658385796114-e5691a9b-d302-4058-9467-90bd86a26944.png#averageHue=%23fefefe&clientId=uc440a240-4b2c-4&from=paste&height=349&id=ue9f8a73d&originHeight=349&originWidth=643&originalType=binary&ratio=1&rotation=0&showTitle=false&size=38415&status=done&style=none&taskId=ub9c5ae2e-483e-4d84-8638-2375789cb9c&title=&width=643" alt="image.png"><br>删除容器后，里面的mysql数据怎么办？</p>
<h4 id="8-3-3-3-实战版"><a href="#8-3-3-3-实战版" class="headerlink" title="8.3.3.3 实战版"></a>8.3.3.3 实战版</h4><p>新建mysql容器实例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 3306:3306 </span><br><span class="line">--privileged=true </span><br><span class="line">-v /zzyyuse/mysql/log:/var/log/mysql </span><br><span class="line">-v /zzyyuse/mysql/data:/var/lib/mysql </span><br><span class="line">-v /zzyyuse/mysql/conf:/etc/mysql/conf.d </span><br><span class="line">-eMYSQL_ROOT_PASSWORD=123456  </span><br><span class="line">--name mysql mysql:5.7</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658385958447-19a567d5-61af-409b-a8de-dcfe11006d3b.png#averageHue=%23fdf9f9&clientId=uc440a240-4b2c-4&from=paste&height=505&id=uba6ca174&originHeight=505&originWidth=1355&originalType=binary&ratio=1&rotation=0&showTitle=false&size=90797&status=done&style=none&taskId=ub7b7f445-b4a6-40b3-bda2-9743906f91d&title=&width=1355" alt="image.png"><br>新建my.cnf，通过容器卷同步给mysql容器实例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">default_character_set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">collation_server = utf8_general_ci</span><br><span class="line">character_set_server = utf8</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658385982627-5fe54dbd-eb94-4d5d-a7ea-354e1be76f35.png#averageHue=%23fefbfb&clientId=uc440a240-4b2c-4&from=paste&height=269&id=ud3c83c7e&originHeight=269&originWidth=756&originalType=binary&ratio=1&rotation=0&showTitle=false&size=31723&status=done&style=none&taskId=u7e2159ce-0592-4700-a9e0-2d3cb7c854e&title=&width=756" alt="image.png"><br>重新启动mysql容器实例再重新进入并查看字符编码<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658386018656-712d254c-d270-4f17-aa62-cf93b98577d3.png#averageHue=%23fef5f5&clientId=uc440a240-4b2c-4&from=paste&height=306&id=uc1353d22&originHeight=306&originWidth=668&originalType=binary&ratio=1&rotation=0&showTitle=false&size=52840&status=done&style=none&taskId=ubb0b2789-1f17-484d-87a1-7d7114d201f&title=&width=668" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658386026933-dee09e82-39a2-4699-bb63-3930d3e8ba6e.png#averageHue=%23fefefe&clientId=uc440a240-4b2c-4&from=paste&height=295&id=u6f78d5bd&originHeight=295&originWidth=662&originalType=binary&ratio=1&rotation=0&showTitle=false&size=36853&status=done&style=none&taskId=u3a521c11-a803-40a5-9ac2-d75a19ac594&title=&width=662" alt="image.png"><br>再新建库新建表再插入中文测试<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658386040814-18b11add-9638-4461-ab79-81799679f00c.png#averageHue=%23fef8f8&clientId=uc440a240-4b2c-4&from=paste&height=319&id=u4020a51a&originHeight=319&originWidth=741&originalType=binary&ratio=1&rotation=0&showTitle=false&size=26706&status=done&style=none&taskId=u0322b07f-99c6-4b1b-bed4-a6986a0e5a1&title=&width=741" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658386045922-c04af725-cacb-4b76-a885-4cdbb82b2cc7.png#averageHue=%23efd9a1&clientId=uc440a240-4b2c-4&from=paste&height=332&id=u73b81a6f&originHeight=332&originWidth=569&originalType=binary&ratio=1&rotation=0&showTitle=false&size=27215&status=done&style=none&taskId=u1e38a886-e3b4-44a2-b232-249cfdd2b1d&title=&width=569" alt="image.png"><br>结论<br>之前的DB  无效，修改字符集操作+重启mysql容器实例<br>之后的DB  有效，需要新建<br>结论：docker安装完MySQL并run出容器后，建议请先修改完字符集编码后再新建mysql库-表-插数据<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658386205878-9ade8aa5-cc6e-455a-b6d1-5b70344c05d9.png#averageHue=%23fef9f9&clientId=uc440a240-4b2c-4&from=paste&height=454&id=u90da3c99&originHeight=454&originWidth=649&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56729&status=done&style=none&taskId=u13727a7b-e8b4-4365-b668-2fd1ec80648&title=&width=649" alt="image.png"><br>假如将当前容器实例删除，再重新来一次，之前建的db01实例还有吗？try</p>
<h2 id="8-4-安装redis"><a href="#8-4-安装redis" class="headerlink" title="8.4 安装redis"></a>8.4 安装redis</h2><ol>
<li><strong>从docker hub上(阿里云加速器)拉取redis镜像到本地标签为6.0.8</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658386269314-4f582385-baa4-478e-8dbe-d8e3cea4b808.png#averageHue=%23fef9f9&clientId=uc440a240-4b2c-4&from=paste&height=390&id=u526e0c3a&originHeight=390&originWidth=1223&originalType=binary&ratio=1&rotation=0&showTitle=false&size=80570&status=done&style=none&taskId=uda683584-9d51-4618-99ab-f9f097725d7&title=&width=1223" alt="image.png"></p>
<ol start="2">
<li><strong>入门命令</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658386283541-4dd83134-4c11-46e9-b6ca-de55f10d25ec.png#averageHue=%23fefbfb&clientId=uc440a240-4b2c-4&from=paste&height=420&id=u4585dcc9&originHeight=420&originWidth=1350&originalType=binary&ratio=1&rotation=0&showTitle=false&size=77457&status=done&style=none&taskId=u2f41fc31-3b9a-417a-82cb-f9bc81631dc&title=&width=1350" alt="image.png"></p>
<ol start="3">
<li><strong>命令提醒：容器卷记得加入–privileged&#x3D;true</strong></li>
</ol>
<p>Docker挂载主机目录Docker访问出现cannot open directory .: Permission denied<br>解决办法：在挂载目录后多加一个–privileged&#x3D;true参数即可</p>
<ol start="4">
<li><strong>在CentOS宿主机下新建目录&#x2F;app&#x2F;redis</strong></li>
</ol>
<p><code>mkdir -p /app/redis</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658386476816-44e3daec-8880-48c2-9412-4997a1b0cd86.png#averageHue=%23fefafa&clientId=uc440a240-4b2c-4&from=paste&height=187&id=uefa5e9a8&originHeight=187&originWidth=527&originalType=binary&ratio=1&rotation=0&showTitle=false&size=23096&status=done&style=none&taskId=u9718fd14-c8c8-4e42-b0ea-d021340f003&title=&width=527" alt="image.png"></p>
<ol start="5">
<li><strong>将一个redis.conf文件模板拷贝进&#x2F;app&#x2F;redis目录下</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658386499130-3dfd0b28-9053-4a8a-8089-d02cfac2eabc.png#averageHue=%23fef7f7&clientId=uc440a240-4b2c-4&from=paste&height=311&id=u07be212b&originHeight=311&originWidth=665&originalType=binary&ratio=1&rotation=0&showTitle=false&size=39614&status=done&style=none&taskId=uaaca4be9-a0b1-4db7-ab23-062bac632b6&title=&width=665" alt="image.png"><br>将准备好的redis.conf文件放进&#x2F;app&#x2F;redis目录下</p>
<ol start="6">
<li><strong>&#x2F;app&#x2F;redis目录下修改redis.conf文件</strong></li>
</ol>
<p>默认出厂的原始redis.conf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Redis configuration file example.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Note that in order to read the configuration file, Redis must be</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">started with the file path as first argument:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># ./redis-server /path/to/redis.conf</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Note on units: when memory size is needed, it is possible to specify</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">it <span class="keyword">in</span> the usual form of 1k 5GB 4M and so forth:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># 1k =&gt; 1000 bytes</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1kb =&gt; 1024 bytes</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1m =&gt; 1000000 bytes</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1mb =&gt; 1024*1024 bytes</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1g =&gt; 1000000000 bytes</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1gb =&gt; 1024*1024*1024 bytes</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################# INCLUDES ###################################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Include one or more other config files here.  This is useful <span class="keyword">if</span> you</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">have a standard template that goes to all Redis servers but also need</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">to customize a few per-server settings.  Include files can include</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">other files, so use this wisely.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Notice option &quot;include&quot; won&#x27;t be rewritten by command &quot;CONFIG REWRITE&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">from admin or Redis Sentinel. Since Redis always uses the last processed</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">line as value of a configuration directive, you<span class="string">&#x27;d better put includes</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">at the beginning of this file to avoid overwriting config change at runtime.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># If instead you are interested in using includes to override configuration</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">options, it is better to use include as the last line.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># include /path/to/local.conf</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">include /path/to/other.conf</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">################################# MODULES #####################################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Load modules at startup. If the server is not able to load modules</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">it will abort. It is possible to use multiple loadmodule directives.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># loadmodule /path/to/my_module.so</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">loadmodule /path/to/other_module.so</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">################################# NETWORK #####################################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">By default, if no &quot;bind&quot; configuration directive is specified, Redis listens</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">for connections from all the network interfaces available on the server.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">It is possible to listen to just one or multiple selected interfaces using</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the &quot;bind&quot; configuration directive, followed by one or more IP addresses.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Examples:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># bind 192.168.1.100 10.0.0.1</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">bind 127.0.0.1 ::1</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">internet, binding to all the interfaces is dangerous and will expose the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">instance to everybody on the internet. So by default we uncomment the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">following bind directive, that will force Redis to listen only into</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the IPv4 loopback interface address (this means Redis will be able to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">accept connections only from clients running into the same computer it</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">is running).</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">JUST COMMENT THE FOLLOWING LINE.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">bind 127.0.0.1</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Protected mode is a layer of security protection, in order to avoid that</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Redis instances left open on the internet are accessed and exploited.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># When protected mode is on and if:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 1) The server is not binding explicitly to a set of addresses using the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   &quot;bind&quot; directive.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">2) No password is configured.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The server only accepts connections from clients connecting from the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">sockets.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># By default protected mode is enabled. You should disable it only if</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">you are sure you want clients from other hosts to connect to Redis</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">even if no authentication is configured, nor a specific set of interfaces</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">are explicitly listed using the &quot;bind&quot; directive.</span></span></span><br><span class="line">protected-mode no</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Accept connections on the specified port, default is 6379 (IANA #815344).</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">If port 0 is specified Redis will not listen on a TCP socket.</span></span></span><br><span class="line">port 6379</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">TCP listen() backlog.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># In high requests-per-second environments you need an high backlog in order</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">to avoid slow clients connections issues. Note that the Linux kernel</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">will silently truncate it to the value of /proc/sys/net/core/somaxconn so</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">make sure to raise both the value of somaxconn and tcp_max_syn_backlog</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">in order to get the desired effect.</span></span></span><br><span class="line">tcp-backlog 511</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Unix socket.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Specify the path for the Unix socket that will be used to listen for</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">incoming connections. There is no default, so Redis will not listen</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">on a unix socket when not specified.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># unixsocket /tmp/redis.sock</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">unixsocketperm 700</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Close the connection after a client is idle for N seconds (0 to disable)</span></span></span><br><span class="line">timeout 0</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">TCP keepalive.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">of communication. This is useful for two reasons:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 1) Detect dead peers.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">2) Take the connection alive from the point of view of network</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   equipment in the middle.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># On Linux, the specified value (in seconds) is the period used to send ACKs.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Note that to close the connection the double of the time is needed.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">On other kernels the period depends on the kernel configuration.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># A reasonable value for this option is 300 seconds, which is the new</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Redis default starting with Redis 3.2.1.</span></span></span><br><span class="line">tcp-keepalive 300</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">################################ GENERAL #####################################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">By default Redis does not run as a daemon. Use &#x27;</span><span class="built_in">yes</span><span class="string">&#x27; if you need it.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</span></span></span><br><span class="line">daemonize no</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">If you run Redis from upstart or systemd, Redis can interact with your</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">supervision tree. Options:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  supervised no      - no supervision interaction</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  supervised upstart - signal upstart by putting Redis into SIGSTOP mode</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  supervised auto    - detect upstart or systemd method based on</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">                       UPSTART_JOB or NOTIFY_SOCKET environment variables</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Note: these supervision methods only signal &quot;process is ready.&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">      They do not enable continuous liveness pings back to your supervisor.</span></span></span><br><span class="line">supervised no</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">If a pid file is specified, Redis writes it where specified at startup</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">and removes it at exit.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># When the server runs non daemonized, no pid file is created if none is</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">specified in the configuration. When the server is daemonized, the pid file</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">is used even if not specified, defaulting to &quot;/var/run/redis.pid&quot;.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Creating a pid file is best effort: if Redis is not able to create it</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">nothing bad happens, the server will start and run normally.</span></span></span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Specify the server verbosity level.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">This can be one of:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">debug (a lot of information, useful for development/testing)</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">verbose (many rarely useful info, but not a mess like the debug level)</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">notice (moderately verbose, what you want in production probably)</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">warning (only very important / critical messages are logged)</span></span></span><br><span class="line">loglevel notice</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Specify the log file name. Also the empty string can be used to force</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Redis to log on the standard output. Note that if you use standard</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">output for logging but daemonize, logs will be sent to /dev/null</span></span></span><br><span class="line">logfile &quot;&quot;</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">To enable logging to the system logger, just set &#x27;</span>syslog-enabled<span class="string">&#x27; to yes,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">and optionally update the other syslog parameters to suit your needs.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">syslog-enabled no</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Specify the syslog identity.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">syslog-ident redis</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">syslog-facility local0</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Set the number of databases. The default database is DB 0, you can select</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">a different one on a per-connection basis using SELECT &lt;dbid&gt; where</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">dbid is a number between 0 and &#x27;</span>databases<span class="string">&#x27;-1</span></span></span><br><span class="line">databases 16</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">By default Redis shows an ASCII art logo only when started to log to the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">standard output and if the standard output is a TTY. Basically this means</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">that normally a logo is displayed only in interactive sessions.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># However it is possible to force the pre-4.0 behavior and always show a</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">ASCII art logo in startup logs by setting the following option to yes.</span></span></span><br><span class="line">always-show-logo yes</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">############################### SNAPSHOTTING  ################################</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Save the DB on disk:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#   save &lt;seconds&gt; &lt;changes&gt;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#   Will save the DB if both the given number of seconds and the given</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  number of write operations against the DB occurred.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#   In the example below the behaviour will be to save:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  after 900 sec (15 min) if at least 1 key changed</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  after 300 sec (5 min) if at least 10 keys changed</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  after 60 sec if at least 10000 keys changed</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#   Note: you can disable saving completely by commenting out all &quot;save&quot; lines.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#   It is also possible to remove all the previously configured save</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  points by adding a save directive with a single empty string argument</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  like in the following example:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#   save &quot;&quot;</span></span></span><br><span class="line"> </span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">By default Redis will stop accepting writes if RDB snapshots are enabled</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">(at least one save point) and the latest background save failed.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">This will make the user aware (in a hard way) that data is not persisting</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">on disk properly, otherwise chances are that no one will notice and some</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">disaster will happen.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># If the background saving process will start working again Redis will</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">automatically allow writes again.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># However if you have setup your proper monitoring of the Redis server</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">and persistence, you may want to disable this feature so that Redis will</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">continue to work as usual even if there are problems with disk,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">permissions, and so forth.</span></span></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Compress string objects using LZF when dump .rdb databases?</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">For default that&#x27;</span>s <span class="built_in">set</span> to <span class="string">&#x27;yes&#x27;</span> as it<span class="string">&#x27;s almost always a win.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">If you want to save some CPU in the saving child set it to &#x27;</span>no<span class="string">&#x27; but</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the dataset will likely be bigger if you have compressible values or keys.</span></span></span><br><span class="line">rdbcompression yes</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Since version 5 of RDB a CRC64 checksum is placed at the end of the file.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">This makes the format more resistant to corruption but there is a performance</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">hit to pay (around 10%) when saving and loading RDB files, so you can disable it</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">for maximum performances.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># RDB files created with checksum disabled have a checksum of zero that will</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">tell the loading code to skip the check.</span></span></span><br><span class="line">rdbchecksum yes</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The filename where to dump the DB</span></span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The working directory.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The DB will be written inside this directory, with the filename specified</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">above using the &#x27;</span>dbfilename<span class="string">&#x27; configuration directive.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The Append Only File will also be created inside this directory.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Note that you must specify a directory here, not a file name.</span></span></span><br><span class="line">dir ./</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">################################ REPLICATION #################################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Master-Replica replication. Use replicaof to make a Redis instance a copy of</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">another Redis server. A few things to understand ASAP about Redis replication.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#   +------------------+      +---------------+</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  |      Master      | ---&gt; |    Replica    |</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  | (receive writes) |      |  (exact copy) |</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  +------------------+      +---------------+</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 1) Redis replication is asynchronous, but you can configure a master to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   stop accepting writes if it appears to be not connected with at least</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   a given number of replicas.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">2) Redis replicas are able to perform a partial resynchronization with the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   master if the replication link is lost for a relatively small amount of</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   time. You may want to configure the replication backlog size (see the next</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   sections of this file) with a sensible value depending on your needs.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">3) Replication is automatic and does not need user intervention. After a</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   network partition replicas automatically try to reconnect to masters</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   and resynchronize with them.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># replicaof &lt;masterip&gt; &lt;masterport&gt;</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">If the master is password protected (using the &quot;requirepass&quot; configuration</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">directive below) it is possible to tell the replica to authenticate before</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">starting the replication synchronization process, otherwise the master will</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">refuse the replica request.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># masterauth &lt;master-password&gt;</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">When a replica loses its connection with the master, or when the replication</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">is still in progress, the replica can act in two different ways:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 1) if replica-serve-stale-data is set to &#x27;</span><span class="built_in">yes</span><span class="string">&#x27; (the default) the replica will</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   still reply to client requests, possibly with out of date data, or the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   data set may just be empty if this is the first synchronization.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 2) if replica-serve-stale-data is set to &#x27;</span>no<span class="string">&#x27; the replica will reply with</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   an error &quot;SYNC with master in progress&quot; to all the kind of commands</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   but to INFO, replicaOF, AUTH, PING, SHUTDOWN, REPLCONF, ROLE, CONFIG,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   SUBSCRIBE, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   COMMAND, POST, HOST: and LATENCY.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">replica-serve-stale-data yes</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">You can configure a replica instance to accept writes or not. Writing against</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">a replica instance may be useful to store some ephemeral data (because data</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">written on a replica will be easily deleted after resync with the master) but</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">may also cause problems if clients are writing to it because of a</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">misconfiguration.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Since Redis 2.6 by default replicas are read-only.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Note: read only replicas are not designed to be exposed to untrusted clients</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">on the internet. It&#x27;</span>s just a protection layer against misuse of the instance.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Still a <span class="built_in">read</span> only replica exports by default all the administrative commands</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">such as CONFIG, DEBUG, and so forth. To a limited extent you can improve</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">security of <span class="built_in">read</span> only replicas using <span class="string">&#x27;rename-command&#x27;</span> to shadow all the</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">administrative / dangerous commands.</span></span><br><span class="line">replica-read-only yes</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replication SYNC strategy: disk or socket.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># -------------------------------------------------------</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-------------------------------------------------------</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># New replicas and reconnecting replicas that are not able to continue the replication</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">process just receiving differences, need to <span class="keyword">do</span> what is called a <span class="string">&quot;full</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">synchronization&quot;</span>. An RDB file is transmitted from the master to the replicas.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The transmission can happen <span class="keyword">in</span> two different ways:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># 1) Disk-backed: The Redis master creates a new process that writes the RDB</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                file on disk. Later the file is transferred by the parent</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                process to the replicas incrementally.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2) Diskless: The Redis master creates a new process that directly writes the</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">             RDB file to replica sockets, without touching the disk at all.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># With disk-backed replication, while the RDB file is generated, more replicas</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">can be queued and served with the RDB file as soon as the current child producing</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the RDB file finishes its work. With diskless replication instead once</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the transfer starts, new replicas arriving will be queued and a new transfer</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">will start when the current one terminates.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># When diskless replication is used, the master waits a configurable amount of</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">time (<span class="keyword">in</span> seconds) before starting the transfer <span class="keyword">in</span> the hope that multiple replicas</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">will arrive and the transfer can be parallelized.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># With slow disks and fast (large bandwidth) networks, diskless replication</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">works better.</span></span><br><span class="line">repl-diskless-sync no</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">When diskless replication is enabled, it is possible to configure the delay</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the server waits <span class="keyword">in</span> order to spawn the child that transfers the RDB via socket</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">to the replicas.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This is important since once the transfer starts, it is not possible to serve</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">new replicas arriving, that will be queued <span class="keyword">for</span> the next RDB transfer, so the server</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">waits a delay <span class="keyword">in</span> order to <span class="built_in">let</span> more replicas arrive.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># The delay is specified in seconds, and by default is 5 seconds. To disable</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">it entirely just <span class="built_in">set</span> it to 0 seconds and the transfer will start ASAP.</span></span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replicas send PINGs to server <span class="keyword">in</span> a predefined interval. It<span class="string">&#x27;s possible to change</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">this interval with the repl_ping_replica_period option. The default value is 10</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">seconds.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># repl-ping-replica-period 10</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The following option sets the replication timeout for:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 1) Bulk transfer I/O during SYNC, from the point of view of replica.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">2) Master timeout from the point of view of replicas (data, pings).</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">3) Replica timeout from the point of view of masters (REPLCONF ACK pings).</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># It is important to make sure that this value is greater than the value</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">specified for repl-ping-replica-period otherwise a timeout will be detected</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">every time there is low traffic between the master and the replica.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># repl-timeout 60</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Disable TCP_NODELAY on the replica socket after SYNC?</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># If you select &quot;yes&quot; Redis will use a smaller number of TCP packets and</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">less bandwidth to send data to replicas. But this can add a delay for</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the data to appear on the replica side, up to 40 milliseconds with</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Linux kernels using a default configuration.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># If you select &quot;no&quot; the delay for data to appear on the replica side will</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">be reduced but more bandwidth will be used for replication.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># By default we optimize for low latency, but in very high traffic conditions</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">or when the master and replicas are many hops away, turning this to &quot;yes&quot; may</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">be a good idea.</span></span></span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Set the replication backlog size. The backlog is a buffer that accumulates</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">replica data when replicas are disconnected for some time, so that when a replica</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">wants to reconnect again, often a full resync is not needed, but a partial</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">resync is enough, just passing the portion of data the replica missed while</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">disconnected.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The bigger the replication backlog, the longer the time the replica can be</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">disconnected and later be able to perform a partial resynchronization.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The backlog is only allocated once there is at least a replica connected.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># repl-backlog-size 1mb</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">After a master has no longer connected replicas for some time, the backlog</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">will be freed. The following option configures the amount of seconds that</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">need to elapse, starting from the time the last replica disconnected, for</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the backlog buffer to be freed.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Note that replicas never free the backlog for timeout, since they may be</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">promoted to masters later, and should be able to correctly &quot;partially</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">resynchronize&quot; with the replicas: hence they should always accumulate backlog.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># A value of 0 means to never release the backlog.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># repl-backlog-ttl 3600</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The replica priority is an integer number published by Redis in the INFO output.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">It is used by Redis Sentinel in order to select a replica to promote into a</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">master if the master is no longer working correctly.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># A replica with a low priority number is considered better for promotion, so</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">for instance if there are three replicas with priority 10, 100, 25 Sentinel will</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">pick the one with priority 10, that is the lowest.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># However a special priority of 0 marks the replica as not able to perform the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">role of master, so a replica with priority of 0 will never be selected by</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Redis Sentinel for promotion.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># By default the priority is 100.</span></span></span><br><span class="line">replica-priority 100</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">It is possible for a master to stop accepting writes if there are less than</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">N replicas connected, having a lag less or equal than M seconds.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The N replicas need to be in &quot;online&quot; state.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The lag in seconds, that must be &lt;= the specified value, is calculated from</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the last ping received from the replica, that is usually sent every second.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># This option does not GUARANTEE that N replicas will accept the write, but</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">will limit the window of exposure for lost writes in case not enough replicas</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">are available, to the specified number of seconds.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># For example to require at least 3 replicas with a lag &lt;= 10 seconds use:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># min-replicas-to-write 3</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">min-replicas-max-lag 10</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Setting one or the other to 0 disables the feature.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># By default min-replicas-to-write is set to 0 (feature disabled) and</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">min-replicas-max-lag is set to 10.</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">A Redis master is able to list the address and port of the attached</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">replicas in different ways. For example the &quot;INFO replication&quot; section</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">offers this information, which is used, among other tools, by</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Redis Sentinel in order to discover replica instances.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Another place where this info is available is in the output of the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;ROLE&quot; command of a master.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The listed IP and address normally reported by a replica is obtained</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">in the following way:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#   IP: The address is auto detected by checking the peer address</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  of the socket used by the replica to connect with the master.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#   Port: The port is communicated by the replica during the replication</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  handshake, and is normally the port that the replica is using to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  listen for connections.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># However when port forwarding or Network Address Translation (NAT) is</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">used, the replica may be actually reachable via different IP and port</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">pairs. The following two options can be used by a replica in order to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">report to its master a specific set of IP and port, so that both INFO</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">and ROLE will report those values.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># There is no need to use both the options if you need to override just</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the port or the IP address.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># replica-announce-ip 5.5.5.5</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">replica-announce-port 1234</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">################################# SECURITY ###################################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Require clients to issue AUTH &lt;PASSWORD&gt; before processing any other</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">commands.  This might be useful in environments in which you do not trust</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">others with access to the host running redis-server.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># This should stay commented out for backward compatibility and because most</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">people do not need auth (e.g. they run their own servers).</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Warning: since Redis is pretty fast an outside user can try up to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">150k passwords per second against a good box. This means that you should</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">use a very strong password otherwise it will be very easy to break.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># requirepass foobared</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Command renaming.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># It is possible to change the name of dangerous commands in a shared</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">environment. For instance the CONFIG command may be renamed into something</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">hard to guess so that it will still be available for internal-use tools</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">but not available for general clients.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Example:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># It is also possible to completely kill a command by renaming it into</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">an empty string:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># rename-command CONFIG &quot;&quot;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Please note that changing the name of commands that are logged into the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">AOF file or transmitted to replicas may cause problems.</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">################################## CLIENTS ####################################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Set the max number of connected clients at the same time. By default</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">this limit is set to 10000 clients, however if the Redis server is not</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">able to configure the process file limit to allow for the specified limit</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the max number of allowed clients is set to the current file limit</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">minus 32 (as Redis reserves a few file descriptors for internal uses).</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Once the limit is reached Redis will close all the new connections sending</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">an error &#x27;</span>max number of clients reached<span class="string">&#x27;.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># maxclients 10000</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">############################# MEMORY MANAGEMENT ################################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Set a memory usage limit to the specified amount of bytes.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">When the memory limit is reached Redis will try to remove keys</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">according to the eviction policy selected (see maxmemory-policy).</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># If Redis can&#x27;</span>t remove keys according to the policy, or <span class="keyword">if</span> the policy is</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">set</span> to <span class="string">&#x27;noeviction&#x27;</span>, Redis will start to reply with errors to commands</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">that would use more memory, like SET, LPUSH, and so on, and will <span class="built_in">continue</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">to reply to read-only commands like GET.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This option is usually useful when using Redis as an LRU or LFU cache, or to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">set</span> a hard memory <span class="built_in">limit</span> <span class="keyword">for</span> an instance (using the <span class="string">&#x27;noeviction&#x27;</span> policy).</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># WARNING: If you have replicas attached to an instance with maxmemory on,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the size of the output buffers needed to feed the replicas are subtracted</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">from the used memory count, so that network problems / resyncs will</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">not trigger a loop <span class="built_in">where</span> keys are evicted, and <span class="keyword">in</span> turn the output</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">buffer of replicas is full with DELs of keys evicted triggering the deletion</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">of more keys, and so forth <span class="keyword">until</span> the database is completely emptied.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># In short... if you have replicas attached it is suggested that you set a lower</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">limit</span> <span class="keyword">for</span> maxmemory so that there is some free RAM on the system <span class="keyword">for</span> replica</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">output buffers (but this is not needed <span class="keyword">if</span> the policy is <span class="string">&#x27;noeviction&#x27;</span>).</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># maxmemory &lt;bytes&gt;</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">MAXMEMORY POLICY: how Redis will <span class="keyword">select</span> what to remove when maxmemory</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">is reached. You can <span class="keyword">select</span> among five behaviors:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># volatile-lru -&gt; Evict using approximated LRU among the keys with an expire set.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">allkeys-lru -&gt; Evict any key using approximated LRU.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">volatile-lfu -&gt; Evict using approximated LFU among the keys with an expire <span class="built_in">set</span>.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">allkeys-lfu -&gt; Evict any key using approximated LFU.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">volatile-random -&gt; Remove a random key among the ones with an expire <span class="built_in">set</span>.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">allkeys-random -&gt; Remove a random key, any key.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">volatile-ttl -&gt; Remove the key with the nearest expire time (minor TTL)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">noeviction -&gt; Don<span class="string">&#x27;t evict anything, just return an error on write operations.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># LRU means Least Recently Used</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">LFU means Least Frequently Used</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Both LRU, LFU and volatile-ttl are implemented using approximated</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">randomized algorithms.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Note: with any of the above policies, Redis will return an error on write</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">      operations, when there are no suitable keys for eviction.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#       At the date of writing these commands are: set setnx setex append</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">      incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">      sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">      zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">      getset mset msetnx exec sort</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The default is:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># maxmemory-policy noeviction</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">LRU, LFU and minimal TTL algorithms are not precise algorithms but approximated</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">algorithms (in order to save memory), so you can tune it for speed or</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">accuracy. For default Redis will check five keys and pick the one that was</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">used less recently, you can change the sample size using the following</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">configuration directive.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The default of 5 produces good enough results. 10 Approximates very closely</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">true LRU but costs more CPU. 3 is faster but not very accurate.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># maxmemory-samples 5</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Starting from Redis 5, by default a replica will ignore its maxmemory setting</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">(unless it is promoted to master after a failover or manually). It means</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">that the eviction of keys will be just handled by the master, sending the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">DEL commands to the replica as keys evict in the master side.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># This behavior ensures that masters and replicas stay consistent, and is usually</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">what you want, however if your replica is writable, or you want the replica to have</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">a different memory setting, and you are sure all the writes performed to the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">replica are idempotent, then you may change this default (but be sure to understand</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">what you are doing).</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Note that since the replica by default does not evict, it may end using more</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">memory than the one set via maxmemory (there are certain buffers that may</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">be larger on the replica, or data structures may sometimes take more memory and so</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">forth). So make sure you monitor your replicas and make sure they have enough</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">memory to never hit a real out-of-memory condition before the master hits</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the configured maxmemory setting.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># replica-ignore-maxmemory yes</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">############################ LAZY FREEING ####################################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Redis has two primitives to delete keys. One is called DEL and is a blocking</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">deletion of the object. It means that the server stops processing new commands</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">in order to reclaim all the memory associated with an object in a synchronous</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">way. If the key deleted is associated with a small object, the time needed</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">in order to execute the DEL command is very small and comparable to most other</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">O(1) or O(log_N) commands in Redis. However if the key is associated with an</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">aggregated value containing millions of elements, the server can block for</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">a long time (even seconds) in order to complete the operation.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># For the above reasons Redis also offers non blocking deletion primitives</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">such as UNLINK (non blocking DEL) and the ASYNC option of FLUSHALL and</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">FLUSHDB commands, in order to reclaim memory in background. Those commands</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">are executed in constant time. Another thread will incrementally free the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">object in the background as fast as possible.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># DEL, UNLINK and ASYNC option of FLUSHALL and FLUSHDB are user-controlled.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">It&#x27;</span>s up to the design of the application to understand when it is a good</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">idea to use one or the other. However the Redis server sometimes has to</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">delete keys or flush the whole database as a side effect of other operations.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Specifically Redis deletes objects independently of a user call <span class="keyword">in</span> the</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">following scenarios:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># 1) On eviction, because of the maxmemory and maxmemory policy configurations,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   <span class="keyword">in</span> order to make room <span class="keyword">for</span> new data, without going over the specified</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   memory <span class="built_in">limit</span>.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2) Because of expire: when a key with an associated time to live (see the</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   EXPIRE <span class="built_in">command</span>) must be deleted from memory.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3) Because of a side effect of a <span class="built_in">command</span> that stores data on a key that may</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   already exist. For example the RENAME <span class="built_in">command</span> may delete the old key</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   content when it is replaced with another one. Similarly SUNIONSTORE</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   or SORT with STORE option may delete existing keys. The SET <span class="built_in">command</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   itself removes any old content of the specified key <span class="keyword">in</span> order to replace</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   it with the specified string.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4) During replication, when a replica performs a full resynchronization with</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   its master, the content of the whole database is removed <span class="keyword">in</span> order to</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   load the RDB file just transferred.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># In all the above cases the default is to delete objects in a blocking way,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">like <span class="keyword">if</span> DEL was called. However you can configure each <span class="keyword">case</span> specifically</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">in</span> order to instead release memory <span class="keyword">in</span> a non-blocking way like <span class="keyword">if</span> UNLINK</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">was called, using the following configuration directives:</span></span><br><span class="line"> </span><br><span class="line">lazyfree-lazy-eviction no</span><br><span class="line">lazyfree-lazy-expire no</span><br><span class="line">lazyfree-lazy-server-del no</span><br><span class="line">replica-lazy-flush no</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">############################# APPEND ONLY MODE ###############################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">By default Redis asynchronously dumps the dataset on disk. This mode is</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">good enough <span class="keyword">in</span> many applications, but an issue with the Redis process or</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">a power outage may result into a few minutes of writes lost (depending on</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the configured save points).</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># The Append Only File is an alternative persistence mode that provides</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">much better durability. For instance using the default data fsync policy</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(see later <span class="keyword">in</span> the config file) Redis can lose just one second of writes <span class="keyword">in</span> a</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dramatic event like a server power outage, or a single write <span class="keyword">if</span> something</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">wrong with the Redis process itself happens, but the operating system is</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">still running correctly.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># AOF and RDB persistence can be enabled at the same time without problems.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">If the AOF is enabled on startup Redis will load the AOF, that is the file</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">with the better durability guarantees.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Please check http://redis.io/topics/persistence for more information.</span></span></span><br><span class="line"> </span><br><span class="line">appendonly no</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The name of the append only file (default: <span class="string">&quot;appendonly.aof&quot;</span>)</span></span><br><span class="line"> </span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The fsync() call tells the Operating System to actually write data on disk</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">instead of waiting <span class="keyword">for</span> more data <span class="keyword">in</span> the output buffer. Some OS will really flush</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">data on disk, some other OS will just try to <span class="keyword">do</span> it ASAP.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Redis supports three different modes:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># no: don&#x27;t fsync, just let the OS flush the data when it wants. Faster.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">always: fsync after every write to the append only <span class="built_in">log</span>. Slow, Safest.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">everysec: fsync only one time every second. Compromise.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># The default is &quot;everysec&quot;, as that&#x27;s usually the right compromise between</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">speed and data safety. It<span class="string">&#x27;s up to you to understand if you can relax this to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;no&quot; that will let the operating system flush the output buffer when</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">it wants, for better performances (but if you can live with the idea of</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">some data loss consider the default persistence mode that&#x27;</span>s snapshotting),</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or on the contrary, use <span class="string">&quot;always&quot;</span> that<span class="string">&#x27;s very slow but a bit safer than</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">everysec.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># More details please check the following article:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">http://antirez.com/post/redis-persistence-demystified.html</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># If unsure, use &quot;everysec&quot;.</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">appendfsync always</span></span></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">appendfsync no</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">When the AOF fsync policy is set to always or everysec, and a background</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">saving process (a background save or AOF log background rewriting) is</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">performing a lot of I/O against the disk, in some Linux configurations</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Redis may block too long on the fsync() call. Note that there is no fix for</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">this currently, as even performing fsync in a different thread will block</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">our synchronous write(2) call.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># In order to mitigate this problem it&#x27;</span>s possible to use the following option</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">that will prevent fsync() from being called <span class="keyword">in</span> the main process <span class="keyword">while</span> a</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">BGSAVE or BGREWRITEAOF is <span class="keyword">in</span> progress.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This means that while another child is saving, the durability of Redis is</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the same as <span class="string">&quot;appendfsync none&quot;</span>. In practical terms, this means that it is</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">possible to lose up to 30 seconds of <span class="built_in">log</span> <span class="keyword">in</span> the worst scenario (with the</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">default Linux settings).</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># If you have latency problems turn this to &quot;yes&quot;. Otherwise leave it as</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;no&quot;</span> that is the safest pick from the point of view of durability.</span></span><br><span class="line"> </span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Automatic rewrite of the append only file.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Redis is able to automatically rewrite the <span class="built_in">log</span> file implicitly calling</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">BGREWRITEAOF when the AOF <span class="built_in">log</span> size grows by the specified percentage.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This is how it works: Redis remembers the size of the AOF file after the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">latest rewrite (<span class="keyword">if</span> no rewrite has happened since the restart, the size of</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the AOF at startup is used).</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This base size is compared to the current size. If the current size is</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">bigger than the specified percentage, the rewrite is triggered. Also</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">you need to specify a minimal size <span class="keyword">for</span> the AOF file to be rewritten, this</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">is useful to avoid rewriting the AOF file even <span class="keyword">if</span> the percentage increase</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">is reached but it is still pretty small.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Specify a percentage of zero in order to disable the automatic AOF</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rewrite feature.</span></span><br><span class="line"> </span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">An AOF file may be found to be truncated at the end during the Redis</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">startup process, when the AOF data gets loaded back into memory.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This may happen when the system <span class="built_in">where</span> Redis is running</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">crashes, especially when an ext4 filesystem is mounted without the</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">data=ordered option (however this can<span class="string">&#x27;t happen when Redis itself</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">crashes or aborts but the operating system still works correctly).</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Redis can either exit with an error when this happens, or load as much</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">data as possible (the default now) and start if the AOF file is found</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">to be truncated at the end. The following option controls this behavior.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># If aof-load-truncated is set to yes, a truncated AOF file is loaded and</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the Redis server starts emitting a log to inform the user of the event.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Otherwise if the option is set to no, the server aborts with an error</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">and refuses to start. When the option is set to no, the user requires</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">to fix the AOF file using the &quot;redis-check-aof&quot; utility before to restart</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the server.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Note that if the AOF file will be found to be corrupted in the middle</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the server will still exit with an error. This option only applies when</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Redis will try to read more data from the AOF file but not enough bytes</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">will be found.</span></span></span><br><span class="line">aof-load-truncated yes</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">When rewriting the AOF file, Redis is able to use an RDB preamble in the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">AOF file for faster rewrites and recoveries. When this option is turned</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">on the rewritten AOF file is composed of two different stanzas:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#   [RDB file][AOF tail]</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># When loading Redis recognizes that the AOF file starts with the &quot;REDIS&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">string and loads the prefixed RDB file, and continues loading the AOF</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">tail.</span></span></span><br><span class="line">aof-use-rdb-preamble yes</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">############################### LUA SCRIPTING  ###############################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Max execution time of a Lua script in milliseconds.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># If the maximum execution time is reached Redis will log that a script is</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">still in execution after the maximum allowed time and will start to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">reply to queries with an error.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># When a long running script exceeds the maximum execution time only the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">used to stop a script that did not yet called write commands. The second</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">is the only way to shut down the server in the case a write command was</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">already issued by the script but the user doesn&#x27;</span>t want to <span class="built_in">wait</span> <span class="keyword">for</span> the natural</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">termination of the script.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Set it to 0 or a negative value for unlimited execution without warnings.</span></span></span><br><span class="line">lua-time-limit 5000</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">############################### REDIS CLUSTER  ###############################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Normal Redis instances can<span class="string">&#x27;t be part of a Redis Cluster; only nodes that are</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">started as cluster nodes can. In order to start a Redis instance as a</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">cluster node enable the cluster support uncommenting the following:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># cluster-enabled yes</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Every cluster node has a cluster configuration file. This file is not</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">intended to be edited by hand. It is created and updated by Redis nodes.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Every Redis Cluster node requires a different cluster configuration file.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Make sure that instances running in the same system do not have</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">overlapping cluster configuration file names.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># cluster-config-file nodes-6379.conf</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Cluster node timeout is the amount of milliseconds a node must be unreachable</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">for it to be considered in failure state.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Most other internal time limits are multiple of the node timeout.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># cluster-node-timeout 15000</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">A replica of a failing master will avoid to start a failover if its data</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">looks too old.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># There is no simple way for a replica to actually have an exact measure of</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">its &quot;data age&quot;, so the following two checks are performed:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 1) If there are multiple replicas able to failover, they exchange messages</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   in order to try to give an advantage to the replica with the best</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   replication offset (more data from the master processed).</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   Replicas will try to get their rank by offset, and apply to the start</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   of the failover a delay proportional to their rank.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 2) Every single replica computes the time of the last interaction with</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   its master. This can be the last ping or command received (if the master</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   is still in the &quot;connected&quot; state), or the time that elapsed since the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   disconnection with the master (if the replication link is currently down).</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   If the last interaction is too old, the replica will not try to failover</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   at all.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The point &quot;2&quot; can be tuned by user. Specifically a replica will not perform</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the failover if, since the last interaction with the master, the time</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">elapsed is greater than:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#   (node-timeout * replica-validity-factor) + repl-ping-replica-period</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># So for example if node-timeout is 30 seconds, and the replica-validity-factor</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">is 10, and assuming a default repl-ping-replica-period of 10 seconds, the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">replica will not try to failover if it was not able to talk with the master</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">for longer than 310 seconds.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># A large replica-validity-factor may allow replicas with too old data to failover</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">a master, while a too small value may prevent the cluster from being able to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">elect a replica at all.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># For maximum availability, it is possible to set the replica-validity-factor</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">to a value of 0, which means, that replicas will always try to failover the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">master regardless of the last time they interacted with the master.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">(However they&#x27;</span>ll always try to apply a delay proportional to their</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">offset rank).</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Zero is the only value able to guarantee that when all the partitions heal</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the cluster will always be able to <span class="built_in">continue</span>.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># cluster-replica-validity-factor 10</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cluster replicas are able to migrate to orphaned masters, that are masters</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">that are left without working replicas. This improves the cluster ability</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">to resist to failures as otherwise an orphaned master can<span class="string">&#x27;t be failed over</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">in case of failure if it has no working replicas.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Replicas migrate to orphaned masters only if there are still at least a</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">given number of other working replicas for their old master. This number</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">is the &quot;migration barrier&quot;. A migration barrier of 1 means that a replica</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">will migrate only if there is at least 1 other working replica for its master</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">and so forth. It usually reflects the number of replicas you want for every</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">master in your cluster.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Default is 1 (replicas migrate only if their masters remain with at least</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">one replica). To disable migration just set it to a very large value.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">A value of 0 can be set but is useful only for debugging and dangerous</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">in production.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># cluster-migration-barrier 1</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">By default Redis Cluster nodes stop accepting queries if they detect there</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">is at least an hash slot uncovered (no available node is serving it).</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">This way if the cluster is partially down (for example a range of hash slots</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">are no longer covered) all the cluster becomes, eventually, unavailable.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">It automatically returns available as soon as all the slots are covered again.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># However sometimes you want the subset of the cluster which is working,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">to continue to accept queries for the part of the key space that is still</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">covered. In order to do so, just set the cluster-require-full-coverage</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">option to no.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># cluster-require-full-coverage yes</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">This option, when set to yes, prevents replicas from trying to failover its</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">master during master failures. However the master can still perform a</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">manual failover, if forced to do so.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># This is useful in different scenarios, especially in the case of multiple</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">data center operations, where we want one side to never be promoted if not</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">in the case of a total DC failure.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># cluster-replica-no-failover no</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">In order to setup your cluster make sure to read the documentation</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">available at http://redis.io web site.</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">######################### CLUSTER DOCKER/NAT support  ########################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">In certain deployments, Redis Cluster nodes address discovery fails, because</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">addresses are NAT-ted or because ports are forwarded (the typical case is</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Docker and other containers).</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># In order to make Redis Cluster working in such environments, a static</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">configuration where each node knows its public address is needed. The</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">following two options are used for this scope, and are:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># * cluster-announce-ip</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">* cluster-announce-port</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">* cluster-announce-bus-port</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Each instruct the node about its address, client port, and cluster message</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">bus port. The information is then published in the header of the bus packets</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">so that other nodes will be able to correctly map the address of the node</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">publishing the information.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># If the above options are not used, the normal Redis Cluster auto-detection</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">will be used instead.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Note that when remapped, the bus port may not be at the fixed offset of</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">clients port + 10000, so you can specify any port and bus-port depending</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">on how they get remapped. If the bus-port is not set, a fixed offset of</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">10000 will be used as usually.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Example:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># cluster-announce-ip 10.1.1.5</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">cluster-announce-port 6379</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">cluster-announce-bus-port 6380</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">################################# SLOW LOG ###################################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The Redis Slow Log is a system to log queries that exceeded a specified</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">execution time. The execution time does not include the I/O operations</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">like talking with the client, sending the reply and so forth,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">but just the time needed to actually execute the command (this is the only</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">stage of command execution where the thread is blocked and can not serve</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">other requests in the meantime).</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># You can configure the slow log with two parameters: one tells Redis</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">what is the execution time, in microseconds, to exceed in order for the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">command to get logged, and the other parameter is the length of the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">slow log. When a new command is logged the oldest one is removed from the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">queue of logged commands.</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The following time is expressed in microseconds, so 1000000 is equivalent</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">to one second. Note that a negative number disables the slow log, while</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">a value of zero forces the logging of every command.</span></span></span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">There is no limit to this length. Just be aware that it will consume memory.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">You can reclaim memory used by the slow log with SLOWLOG RESET.</span></span></span><br><span class="line">slowlog-max-len 128</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">############################### LATENCY MONITOR ##############################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The Redis latency monitoring subsystem samples different operations</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">at runtime in order to collect data related to possible sources of</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">latency of a Redis instance.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Via the LATENCY command this information is available to the user that can</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">print graphs and obtain reports.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The system only logs operations that were performed in a time equal or</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">greater than the amount of milliseconds specified via the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">latency-monitor-threshold configuration directive. When its value is set</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">to zero, the latency monitor is turned off.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># By default latency monitoring is disabled since it is mostly not needed</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">if you don&#x27;</span>t have latency issues, and collecting data has a performance</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">impact, that <span class="keyword">while</span> very small, can be measured under big load. Latency</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">monitoring can easily be enabled at runtime using the <span class="built_in">command</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;CONFIG SET latency-monitor-threshold &lt;milliseconds&gt;&quot;</span> <span class="keyword">if</span> needed.</span></span><br><span class="line">latency-monitor-threshold 0</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">############################ EVENT NOTIFICATION ##############################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Redis can notify Pub/Sub clients about events happening <span class="keyword">in</span> the key space.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This feature is documented at http://redis.io/topics/notifications</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># For instance if keyspace events notification is enabled, and a client</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">performs a DEL operation on key <span class="string">&quot;foo&quot;</span> stored <span class="keyword">in</span> the Database 0, two</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">messages will be published via Pub/Sub:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># PUBLISH __keyspace@0__:foo del</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PUBLISH __keyevent@0__:del foo</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># It is possible to select the events that Redis will notify among a set</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">of classes. Every class is identified by a single character:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#  K     Keyspace events, published with __keyspace@&lt;db&gt;__ prefix.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> E     Keyevent events, published with __keyevent@&lt;db&gt;__ prefix.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> $     String commands</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> l     List commands</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> s     Set commands</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> h     Hash commands</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> z     Sorted <span class="built_in">set</span> commands</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> x     Expired events (events generated every time a key expires)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> e     Evicted events (events generated when a key is evicted <span class="keyword">for</span> maxmemory)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> A     Alias <span class="keyword">for</span> g<span class="variable">$lshzxe</span>, so that the <span class="string">&quot;AKE&quot;</span> string means all the events.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#  The &quot;notify-keyspace-events&quot; takes as argument a string that is composed</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> of zero or multiple characters. The empty string means that notifications</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> are disabled.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#  Example: to enable list and generic events, from the point of view of the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">          event name, use:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#  notify-keyspace-events Elg</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#  Example 2: to get the stream of the expired keys subscribing to channel</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">            name __keyevent@0__:expired use:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">  notify-keyspace-events Ex</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#  By default all notifications are disabled because most users don&#x27;t need</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> this feature and the feature has some overhead. Note that <span class="keyword">if</span> you don<span class="string">&#x27;t</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string"> specify at least one of K or E, no events will be delivered.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">notify-keyspace-events &quot;&quot;</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">############################## ADVANCED CONFIG ###############################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Hashes are encoded using a memory efficient data structure when they have a</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">small number of entries, and the biggest entry does not exceed a given</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">threshold. These thresholds can be configured using the following directives.</span></span></span><br><span class="line">hash-max-ziplist-entries 512</span><br><span class="line">hash-max-ziplist-value 64</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Lists are also encoded in a special way to save a lot of space.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The number of entries allowed per internal list node can be specified</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">as a fixed maximum size or a maximum number of elements.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">For a fixed maximum size, use -5 through -1, meaning:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">-5: max size: 64 Kb  &lt;-- not recommended for normal workloads</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">-4: max size: 32 Kb  &lt;-- not recommended</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">-3: max size: 16 Kb  &lt;-- probably not recommended</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">-2: max size: 8 Kb   &lt;-- good</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">-1: max size: 4 Kb   &lt;-- good</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Positive numbers mean store up to _exactly_ that number of elements</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">per list node.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">but if your use case is unique, adjust the settings as necessary.</span></span></span><br><span class="line">list-max-ziplist-size -2</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Lists may also be compressed.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Compress depth is the number of quicklist ziplist nodes from *each* side of</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the list to *exclude* from compression.  The head and tail of the list</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">are always uncompressed for fast push/pop operations.  Settings are:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">0: disable all list compression</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">1: depth 1 means &quot;don&#x27;</span>t start compressing <span class="keyword">until</span> after 1 node into the list,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   going from either the <span class="built_in">head</span> or <span class="built_in">tail</span><span class="string">&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   So: [head]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[tail]</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   [head], [tail] will always be uncompressed; inner nodes will compress.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">2: [head]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[tail]</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   2 here means: don&#x27;t compress head or head-&gt;next or tail-&gt;prev or tail,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   but compress all nodes between them.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">3: [head]-&gt;[next]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[prev]-&gt;[tail]</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">etc.</span></span></span><br><span class="line">list-compress-depth 0</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Sets have a special encoding in just one case: when a set is composed</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">of just strings that happen to be integers in radix 10 in the range</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">of 64 bit signed integers.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The following configuration setting sets the limit in the size of the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">set in order to use this special memory saving encoding.</span></span></span><br><span class="line">set-max-intset-entries 512</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Similarly to hashes and lists, sorted sets are also specially encoded in</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">order to save a lot of space. This encoding is only used when the length and</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">elements of a sorted set are below the following limits:</span></span></span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">HyperLogLog sparse representation bytes limit. The limit includes the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">16 bytes header. When an HyperLogLog using the sparse representation crosses</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">this limit, it is converted into the dense representation.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># A value greater than 16000 is totally useless, since at that point the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">dense representation is more memory efficient.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The suggested value is ~ 3000 in order to have the benefits of</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the space efficient encoding without slowing down too much PFADD,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">which is O(N) with the sparse encoding. The value can be raised to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">~ 10000 when CPU is not a concern, but space is, and the data set is</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">composed of many HyperLogLogs with cardinality in the 0 - 15000 range.</span></span></span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Streams macro node max size / items. The stream data structure is a radix</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">tree of big nodes that encode multiple items inside. Using this configuration</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">it is possible to configure how big a single node can be in bytes, and the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">maximum number of items it may contain before switching to a new node when</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">appending new stream entries. If any of the following settings are set to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">zero, the limit is ignored, so for instance it is possible to set just a</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">max entires limit by setting max-bytes to 0 and max-entries to the desired</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">value.</span></span></span><br><span class="line">stream-node-max-bytes 4096</span><br><span class="line">stream-node-max-entries 100</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">order to help rehashing the main Redis hash table (the one mapping top-level</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">keys to values). The hash table implementation Redis uses (see dict.c)</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">performs a lazy rehashing: the more operation you run into a hash table</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">that is rehashing, the more rehashing &quot;</span>steps<span class="string">&quot; are performed, so if the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">server is idle the rehashing is never complete and some more memory is used</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">by the hash table.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The default is to use this millisecond 10 times every second in order to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">actively rehash the main dictionaries, freeing memory when possible.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># If unsure:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">use &quot;</span>activerehashing no<span class="string">&quot; if you have hard latency requirements and it is</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">not a good thing in your environment that Redis can reply from time to time</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">to queries with 2 milliseconds delay.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># use &quot;</span>activerehashing <span class="built_in">yes</span><span class="string">&quot; if you don&#x27;t have such hard requirements but</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">want to free memory asap when possible.</span></span></span><br><span class="line">activerehashing yes</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The client output buffer limits can be used to force disconnection of clients</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">that are not reading data from the server fast enough for some reason (a</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">common reason is that a Pub/Sub client can&#x27;t consume messages as fast as the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">publisher can produce them).</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The limit can be set differently for the three different classes of clients:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># normal -&gt; normal clients including MONITOR clients</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">replica  -&gt; replica clients</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">pubsub -&gt; clients subscribed to at least one pubsub channel or pattern</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The syntax of every client-output-buffer-limit directive is the following:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># client-output-buffer-limit &lt;class&gt; &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># A client is immediately disconnected once the hard limit is reached, or if</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the soft limit is reached and remains reached for the specified number of</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">seconds (continuously).</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">So for instance if the hard limit is 32 megabytes and the soft limit is</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">16 megabytes / 10 seconds, the client will get disconnected immediately</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">if the size of the output buffers reach 32 megabytes, but will also get</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">disconnected if the client reaches 16 megabytes and continuously overcomes</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the limit for 10 seconds.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># By default normal clients are not limited because they don&#x27;t receive data</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">without asking (in a push way), but just after a request, so only</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">asynchronous clients may create a scenario where data is requested faster</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">than it can read.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Instead there is a default limit for pubsub and replica clients, since</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">subscribers and replicas receive data in a push fashion.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Both the hard or the soft limit can be disabled by setting them to zero.</span></span></span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line">client-output-buffer-limit replica 256mb 64mb 60</span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Client query buffers accumulate new commands. They are limited to a fixed</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">amount by default in order to avoid that a protocol desynchronization (for</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">instance due to a bug in the client) will lead to unbound memory usage in</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the query buffer. However you can configure it here if you have very special</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">needs, such us huge multi/exec requests or alike.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># client-query-buffer-limit 1gb</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">In the Redis protocol, bulk requests, that are, elements representing single</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">strings, are normally limited ot 512 mb. However you can change this limit</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">here.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># proto-max-bulk-len 512mb</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Redis calls an internal function to perform many background tasks, like</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">closing connections of clients in timeout, purging expired keys that are</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">never requested, and so forth.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Not all tasks are performed with the same frequency, but Redis checks for</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">tasks to perform according to the specified &quot;</span>hz<span class="string">&quot; value.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># By default &quot;</span>hz<span class="string">&quot; is set to 10. Raising the value will use more CPU when</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Redis is idle, but at the same time will make Redis more responsive when</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">there are many keys expiring at the same time, and timeouts may be</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">handled with more precision.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The range is between 1 and 500, however a value over 100 is usually not</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">a good idea. Most users should use the default of 10 and raise this up to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">100 only in environments where very low latency is required.</span></span></span><br><span class="line">hz 10</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Normally it is useful to have an HZ value which is proportional to the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">number of clients connected. This is useful in order, for instance, to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">avoid too many clients are processed for each background task invocation</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">in order to avoid latency spikes.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Since the default HZ value by default is conservatively set to 10, Redis</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">offers, and enables by default, the ability to use an adaptive HZ value</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">which will temporary raise when there are many connected clients.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># When dynamic HZ is enabled, the actual configured HZ will be used as</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">as a baseline, but multiples of the configured HZ value will be actually</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">used as needed once more clients are connected. In this way an idle</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">instance will use very little CPU time while a busy instance will be</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">more responsive.</span></span></span><br><span class="line">dynamic-hz yes</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">When a child rewrites the AOF file, if the following option is enabled</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the file will be fsync-ed every 32 MB of data generated. This is useful</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">in order to commit the file to the disk more incrementally and avoid</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">big latency spikes.</span></span></span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">When redis saves RDB file, if the following option is enabled</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the file will be fsync-ed every 32 MB of data generated. This is useful</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">in order to commit the file to the disk more incrementally and avoid</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">big latency spikes.</span></span></span><br><span class="line">rdb-save-incremental-fsync yes</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Redis LFU eviction (see maxmemory setting) can be tuned. However it is a good</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">idea to start with the default settings and only change them after investigating</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">how to improve the performances and how the keys LFU change over time, which</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">is possible to inspect via the OBJECT FREQ command.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># There are two tunable parameters in the Redis LFU implementation: the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">counter logarithm factor and the counter decay time. It is important to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">understand what the two parameters mean before changing them.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The LFU counter is just 8 bits per key, it&#x27;s maximum value is 255, so Redis</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">uses a probabilistic increment with logarithmic behavior. Given the value</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">of the old counter, when a key is accessed, the counter is incremented in</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">this way:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 1. A random number R between 0 and 1 is extracted.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">2. A probability P is calculated as 1/(old_value*lfu_log_factor+1).</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">3. The counter is incremented only if R &lt; P.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The default lfu-log-factor is 10. This is a table of how the frequency</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">counter changes with a different number of accesses with different</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">logarithmic factors:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># +--------+------------+------------+------------+------------+------------+</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">| factor | 100 hits   | 1000 hits  | 100K hits  | 1M hits    | 10M hits   |</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">+--------+------------+------------+------------+------------+------------+</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">| 0      | 104        | 255        | 255        | 255        | 255        |</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">+--------+------------+------------+------------+------------+------------+</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">| 1      | 18         | 49         | 255        | 255        | 255        |</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">+--------+------------+------------+------------+------------+------------+</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">| 10     | 10         | 18         | 142        | 255        | 255        |</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">+--------+------------+------------+------------+------------+------------+</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">| 100    | 8          | 11         | 49         | 143        | 255        |</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">+--------+------------+------------+------------+------------+------------+</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># NOTE: The above table was obtained by running the following commands:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#   redis-benchmark -n 1000000 incr foo</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  redis-cli object freq foo</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># NOTE 2: The counter initial value is 5 in order to give new objects a chance</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">to accumulate hits.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The counter decay time is the time, in minutes, that must elapse in order</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">for the key counter to be divided by two (or decremented if it has a value</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">less &lt;= 10).</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The default value for the lfu-decay-time is 1. A Special value of 0 means to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">decay the counter every time it happens to be scanned.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># lfu-log-factor 10</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">lfu-decay-time 1</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">########################## ACTIVE DEFRAGMENTATION #######################</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># WARNING THIS FEATURE IS EXPERIMENTAL. However it was stress tested</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">even in production and manually tested by multiple engineers for some</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">time.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># What is active defragmentation?</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">-------------------------------</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Active (online) defragmentation allows a Redis server to compact the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">spaces left between small allocations and deallocations of data in memory,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">thus allowing to reclaim back memory.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Fragmentation is a natural process that happens with every allocator (but</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">less so with Jemalloc, fortunately) and certain workloads. Normally a server</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">restart is needed in order to lower the fragmentation, or at least to flush</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">away all the data and create it again. However thanks to this feature</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">implemented by Oran Agra for Redis 4.0 this process can happen at runtime</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">in an &quot;</span>hot<span class="string">&quot; way, while the server is running.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Basically when the fragmentation is over a certain level (see the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">configuration options below) Redis will start to create new copies of the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">values in contiguous memory regions by exploiting certain specific Jemalloc</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">features (in order to understand if an allocation is causing fragmentation</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">and to allocate it in a better place), and at the same time, will release the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">old copies of the data. This process, repeated incrementally for all the keys</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">will cause the fragmentation to drop back to normal values.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Important things to understand:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 1. This feature is disabled by default, and only works if you compiled Redis</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   to use the copy of Jemalloc we ship with the source code of Redis.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   This is the default with Linux builds.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 2. You never need to enable this feature if you don&#x27;t have fragmentation</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   issues.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 3. Once you experience fragmentation, you can enable this feature when</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   needed with the command &quot;</span>CONFIG SET activedefrag <span class="built_in">yes</span><span class="string">&quot;.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The configuration parameters are able to fine tune the behavior of the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">defragmentation process. If you are not sure about what they mean it is</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">a good idea to leave the defaults untouched.</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Enabled active defragmentation</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">activedefrag yes</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Minimum amount of fragmentation waste to start active defrag</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">active-defrag-ignore-bytes 100mb</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Minimum percentage of fragmentation to start active defrag</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">active-defrag-threshold-lower 10</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Maximum percentage of fragmentation at which we use maximum effort</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">active-defrag-threshold-upper 100</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Minimal effort for defrag in CPU percentage</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">active-defrag-cycle-min 5</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Maximal effort for defrag in CPU percentage</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">active-defrag-cycle-max 75</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Maximum number of set/hash/zset/list fields that will be processed from</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the main dictionary scan</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">active-defrag-max-scan-fields 1000</span></span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="7">
<li><strong>使用redis6.0.8镜像创建容器(也叫运行镜像)</strong></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run  </span><br><span class="line">-p 6379:6379 </span><br><span class="line">--name myr3 </span><br><span class="line">--privileged=true </span><br><span class="line">-v /app/redis/redis.conf:/etc/redis/redis.conf </span><br><span class="line">-v /app/redis/data:/data </span><br><span class="line">-d redis:6.0.8 redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658386630490-14317133-6f0e-44b1-a15a-21966767b766.png#averageHue=%23fefafa&clientId=uc440a240-4b2c-4&from=paste&height=218&id=u6d7a0235&originHeight=218&originWidth=1352&originalType=binary&ratio=1&rotation=0&showTitle=false&size=47575&status=done&style=none&taskId=ud3d79329-7bcc-451e-b125-b2edbf44818&title=&width=1352" alt="image.png"></p>
<ol start="8">
<li><strong>测试redis-cli连接上来</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658386639463-b2b6c0a5-2dcb-49f8-9751-208fa735fd0f.png#averageHue=%23fefcfc&clientId=uc440a240-4b2c-4&from=paste&height=382&id=uec24ec8a&originHeight=382&originWidth=1355&originalType=binary&ratio=1&rotation=0&showTitle=false&size=68950&status=done&style=none&taskId=u042d713d-fb33-4948-890e-57e48d844ce&title=&width=1355" alt="image.png"><br><code>docker exec -it 运行着Rediis服务的容器ID redis-cli</code></p>
<ol start="9">
<li><strong>请证明docker启动使用了我们自己指定的配置文件</strong></li>
</ol>
<p>修改前<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658386662346-efff690c-15ef-4246-af15-3ceef75e82c1.png#averageHue=%23fefbfb&clientId=uc440a240-4b2c-4&from=paste&height=297&id=u9e861bfc&originHeight=297&originWidth=652&originalType=binary&ratio=1&rotation=0&showTitle=false&size=40601&status=done&style=none&taskId=ub5b34dd5-df04-43d7-b318-b346bae42cb&title=&width=652" alt="image.png"><br>我们用的配置文件，数据库默认是16个<br>修改后<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658386674971-89bd06ec-8496-40c8-835a-81019dbec40b.png#averageHue=%23faf7f4&clientId=uc440a240-4b2c-4&from=paste&height=402&id=u7aed5c97&originHeight=402&originWidth=937&originalType=binary&ratio=1&rotation=0&showTitle=false&size=75193&status=done&style=none&taskId=ua70db74a-9684-4dfb-9b80-d799a1fbc08&title=&width=937" alt="image.png"><br>宿主机的修改会同步给docker容器里面的配置。记得重启服务</p>
<ol start="10">
<li><strong>测试redis-cli连接上来第2次</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658386695258-47156844-dae4-4919-9e77-fb9b215dff21.png#averageHue=%23fefcfc&clientId=uc440a240-4b2c-4&from=paste&height=410&id=ufe178d5c&originHeight=410&originWidth=1352&originalType=binary&ratio=1&rotation=0&showTitle=false&size=76878&status=done&style=none&taskId=u17c22d1f-2b91-47f9-be15-e60d6b8d211&title=&width=1352" alt="image.png"></p>
<h2 id="8-5-安装Nginx"><a href="#8-5-安装Nginx" class="headerlink" title="8.5 安装Nginx"></a>8.5 安装Nginx</h2><p>见高级篇Portainer</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>mybatis</title>
    <url>/2024/04/19/mybatis/</url>
    <content><![CDATA[<h2 id="Mybatis练习"><a href="#Mybatis练习" class="headerlink" title="Mybatis练习"></a>Mybatis练习</h2><p><strong>目标</strong></p>
<blockquote>
<ul>
<li>能够使用映射配置文件实现CRUD操作</li>
<li>能够使用注解实现CRUD操作</li>
</ul>
</blockquote>
<h2 id="1，配置文件实现CRUD"><a href="#1，配置文件实现CRUD" class="headerlink" title="1，配置文件实现CRUD"></a>1，配置文件实现CRUD</h2><p>数据的 <code>查询</code> 、<code>按条件查询</code>、<code>添加</code>、<code>删除</code>、<code>批量删除</code>、<code>修改</code> 等功能，而这些功能其实就是对数据库表中的数据进行CRUD操作。接下来我们就使用Mybatis完成品牌数据的增删改查操作。以下是我们要完成功能列表：</p>
<blockquote>
<ul>
<li>查询<ul>
<li>查询所有数据</li>
<li>查询详情</li>
<li>条件查询</li>
</ul>
</li>
<li>添加</li>
<li>修改<ul>
<li>修改全部字段</li>
<li>修改动态字段</li>
</ul>
</li>
<li>删除<ul>
<li>删除一个</li>
<li>批量删除</li>
</ul>
</li>
</ul>
</blockquote>
<p>我们先将必要的环境准备一下。</p>
<h3 id="1-1-环境准备"><a href="#1-1-环境准备" class="headerlink" title="1.1  环境准备"></a>1.1  环境准备</h3><ul>
<li>数据库表（tb_brand）及数据准备</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 删除tb_brand表</span></span><br><span class="line"><span class="keyword">drop</span> <span class="keyword">table</span> if <span class="keyword">exists</span> tb_brand;</span><br><span class="line"><span class="comment">-- 创建tb_brand表</span></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> tb_brand</span><br><span class="line">(</span><br><span class="line">    <span class="comment">-- id 主键</span></span><br><span class="line">    id           <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    <span class="comment">-- 品牌名称</span></span><br><span class="line">    brand_name   <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="comment">-- 企业名称</span></span><br><span class="line">    company_name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    <span class="comment">-- 排序字段</span></span><br><span class="line">    ordered      <span class="type">int</span>,</span><br><span class="line">    <span class="comment">-- 描述信息</span></span><br><span class="line">    description  <span class="type">varchar</span>(<span class="number">100</span>),</span><br><span class="line">    <span class="comment">-- 状态：0：禁用  1：启用</span></span><br><span class="line">    status       <span class="type">int</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加数据</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tb_brand (brand_name, company_name, ordered, description, status)</span><br><span class="line"><span class="keyword">values</span> (<span class="string">&#x27;三只松鼠&#x27;</span>, <span class="string">&#x27;三只松鼠股份有限公司&#x27;</span>, <span class="number">5</span>, <span class="string">&#x27;好吃不上火&#x27;</span>, <span class="number">0</span>),</span><br><span class="line">       (<span class="string">&#x27;华为&#x27;</span>, <span class="string">&#x27;华为技术有限公司&#x27;</span>, <span class="number">100</span>, <span class="string">&#x27;华为致力于把数字世界带入每个人、每个家庭、每个组织，构建万物互联的智能世界&#x27;</span>, <span class="number">1</span>),</span><br><span class="line">       (<span class="string">&#x27;小米&#x27;</span>, <span class="string">&#x27;小米科技有限公司&#x27;</span>, <span class="number">50</span>, <span class="string">&#x27;are you ok&#x27;</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>实体类 Brand<br>在 <code>com.itheima.pojo</code> 包下创建 Brand 实体类。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Brand</span> &#123;</span><br><span class="line">    <span class="comment">// id 主键</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="comment">// 品牌名称</span></span><br><span class="line">    <span class="keyword">private</span> String brandName;</span><br><span class="line">    <span class="comment">// 企业名称</span></span><br><span class="line">    <span class="keyword">private</span> String companyName;</span><br><span class="line">    <span class="comment">// 排序字段</span></span><br><span class="line">    <span class="keyword">private</span> Integer ordered;</span><br><span class="line">    <span class="comment">// 描述信息</span></span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="comment">// 状态：0：禁用  1：启用</span></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略 setter and getter。自己写时要补全这部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<ul>
<li>编写测试用例<br>测试代码需要在 <code>test/java</code> 目录下创建包及测试用例。项目结构如下： <img src="/assets/image-20210729112907106.png#id=jElES&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></li>
<li>安装 MyBatisX 插件<ul>
<li>MybatisX 是一款基于 IDEA 的快速开发插件，为效率而生。</li>
<li>主要功能<ul>
<li>XML映射配置文件 和 接口方法 间相互跳转</li>
<li>根据接口方法生成 statement</li>
</ul>
</li>
<li>安装方式<br>点击 <code>file</code> ，选择 <code>settings</code> ，就能看到如下图所示界面 <img src="/assets/image-20210729113304743.png#id=dH15L&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></li>
</ul>
</li>
</ul>
<blockquote>
<p>注意：安装完毕后需要重启IDEA</p>
</blockquote>
<ul>
<li>插件效果 <img src="/assets/image-20210729164450524.png#id=K8DZJ&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>红色头绳的表示映射配置文件，蓝色头绳的表示mapper接口。在mapper接口点击红色头绳的小鸟图标会自动跳转到对应的映射配置文件，在映射配置文件中点击蓝色头绳的小鸟图标会自动跳转到对应的mapper接口。也可以在mapper接口中定义方法，自动生成映射配置文件中的 <code>statement</code></li>
</ul>
<h3 id="1-2-查询所有数据"><a href="#1-2-查询所有数据" class="headerlink" title="1.2  查询所有数据"></a>1.2  查询所有数据</h3><p>数据需要从数据库进行查询。接下来我们就来讲查询所有数据功能，而实现该功能我们分以下步骤进行实现：</p>
<ul>
<li>编写接口方法：Mapper接口<ul>
<li>参数：无<br>查询所有数据功能是不需要根据任何条件进行查询的，所以此方法不需要参数。 <img src="/assets/image-20210729171208737.png#id=Hm1xg&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695868875977-87b460ce-30af-4610-b64f-9d605574a57e.png#averageHue=%23fdfce0&clientId=u54da6519-7702-4&from=paste&height=32&id=u7783fea9&originHeight=45&originWidth=479&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3305&status=done&style=none&taskId=u0dd16d07-0936-40f5-af43-4018fee748c&title=&width=341" alt="image-20210729171208737.png"></li>
<li>结果：List<br>我们会将查询出来的每一条数据封装成一个 <code>Brand</code> 对象，而多条数据封装多个 <code>Brand</code> 对象，需要将这些对象封装到List集合中返回。 <img src="/assets/image-20210729171146911.png#id=b3xv9&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695868920219-4edfc9b5-8076-4fe8-a23f-6ba7d3f6c4f0.png#averageHue=%23fefde1&clientId=u54da6519-7702-4&from=paste&height=105&id=u6e6dd255&originHeight=129&originWidth=479&originalType=binary&ratio=1&rotation=0&showTitle=false&size=8750&status=done&style=none&taskId=ucbde8c89-f88e-4b3a-a46c-990abeb738b&title=&width=390" alt="image-20210729171146911.png"></li>
<li>执行方法、测试</li>
</ul>
</li>
</ul>
<h4 id="1-2-1-编写接口方法"><a href="#1-2-1-编写接口方法" class="headerlink" title="1.2.1  编写接口方法"></a>1.2.1  编写接口方法</h4><p>在 <code>com.itheima.mapper</code> 包写创建名为 <code>BrandMapper</code> 的接口。并在该接口中定义 <code>List&lt;Brand&gt; selectAll()</code> 方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BrandMapper</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询所有</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    List&lt;Brand&gt; <span class="title function_">selectAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-2-编写SQL语句"><a href="#1-2-2-编写SQL语句" class="headerlink" title="1.2.2  编写SQL语句"></a>1.2.2  编写SQL语句</h4><p>在 <code>reources</code> 下创建 <code>com/itheima/mapper</code> 目录结构，并在该目录下创建名为 <code>BrandMapper.xml</code> 的映射配置文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span> ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="keyword">PUBLIC</span> <span class="string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.itheima.mapper.BrandMapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">        select *</span><br><span class="line">        from tb_brand;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-3-编写测试方法"><a href="#1-2-3-编写测试方法" class="headerlink" title="1.2.3  编写测试方法"></a>1.2.3  编写测试方法</h4><p>在 <code>MybatisTest</code> 类中编写测试查询所有的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectAll</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//1. 获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 获取SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 获取Mapper接口的代理对象</span></span><br><span class="line">    <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 执行方法</span></span><br><span class="line">    List&lt;Brand&gt; brands = brandMapper.selectAll();</span><br><span class="line">    System.out.println(brands);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. 释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：现在我们感觉测试这部分代码写起来特别麻烦，我们可以先忍忍。以后我们只会写上面的第3步的代码，其他的都不需要我们来完成。</p>
</blockquote>
<p>执行测试方法结果如下：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695868986094-6b5ef304-f303-4a27-a26e-22f25684b100.png#averageHue=%23dff1d7&clientId=u54da6519-7702-4&from=paste&height=371&id=u5faaa3de&originHeight=371&originWidth=1571&originalType=binary&ratio=1&rotation=0&showTitle=false&size=538651&status=done&style=none&taskId=u739a63cc-4e83-4eb5-bead-814e5de1cc9&title=&width=1571" alt="image-20210729172544230.png"></p>
<p>从上面结果我们看到了问题，有些数据封装成功了，而有些数据并没有封装成功。为什么这样呢？<br>这个问题可以通过两种方式进行解决：</p>
<ul>
<li>给字段起别名</li>
<li>使用resultMap定义字段和属性的映射关系</li>
</ul>
<h4 id="1-2-4-起别名解决上述问题"><a href="#1-2-4-起别名解决上述问题" class="headerlink" title="1.2.4  起别名解决上述问题"></a>1.2.4  起别名解决上述问题</h4><p>从上面结果可以看到 <code>brandName</code> 和 <code>companyName</code> 这两个属性的数据没有封装成功，查询 实体类 和 表中的字段 发现，在实体类中属性名是 <code>brandName</code> 和 <code>companyName</code> ，而表中的字段名为 <code>brand_name</code> 和 <code>company_name</code>，如下图所示 。那么我们只需要保持这两部分的名称一致这个问题就迎刃而解。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695869009632-29f05294-a81c-45b5-b049-736251f80e5f.png#averageHue=%23fbfbf9&clientId=u54da6519-7702-4&from=paste&height=316&id=uc7f5c726&originHeight=316&originWidth=1203&originalType=binary&ratio=1&rotation=0&showTitle=false&size=56341&status=done&style=none&taskId=u4f2a713a-a719-4226-b0fb-2c55c95cce7&title=&width=1203" alt="image-20210729173210433.png"><br><img src="/assets/image-20210729173210433.png#id=ZSXva&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>我们可以在写sql语句时给这两个字段起别名，将别名定义成和属性名一致即可。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    id, brand_name as brandName, company_name as companyName, ordered, description, status</span><br><span class="line">    from tb_brand;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>而上面的SQL语句中的字段列表书写麻烦，如果表中还有更多的字段，同时其他的功能也需要查询这些字段时就显得我们的代码不够精炼。Mybatis提供了<code>sql</code> 片段可以提高sql的复用性。</p>
<p><strong>SQL片段：</strong></p>
<ul>
<li>将需要复用的SQL片段抽取到 <code>sql</code> 标签中</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;brand_column&quot;</span>&gt;</span></span><br><span class="line">	id, brand_name as brandName, company_name as companyName, ordered, description, status</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>id属性值是唯一标识，引用时也是通过该值进行引用。</p>
<ul>
<li>在原sql语句中进行引用<br>使用 <code>include</code> 标签引用上述的 SQL 片段，而 <code>refid</code> 指定上述 SQL 片段的id值。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">    select</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;brand_column&quot;</span> /&gt;</span></span><br><span class="line">    from tb_brand;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-5-使用resultMap解决上述问题"><a href="#1-2-5-使用resultMap解决上述问题" class="headerlink" title="1.2.5  使用resultMap解决上述问题"></a>1.2.5  使用resultMap解决上述问题</h4><p>起别名 + sql片段的方式可以解决上述问题，但是它也存在问题。如果还有功能只需要查询部分字段，而不是查询所有字段，那么我们就需要再定义一个 SQL 片段，这就显得不是那么灵活。</p>
<p>那么我们也可以使用resultMap来定义字段和属性的映射关系的方式解决上述问题。</p>
<ul>
<li>在映射配置文件中使用resultMap定义 字段 和 属性 的映射关系</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;brandResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            id：完成主键字段的映射</span></span><br><span class="line"><span class="comment">                column：表的列名</span></span><br><span class="line"><span class="comment">                property：实体类的属性名</span></span><br><span class="line"><span class="comment">            result：完成一般字段的映射</span></span><br><span class="line"><span class="comment">                column：表的列名</span></span><br><span class="line"><span class="comment">                property：实体类的属性名</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;brand_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;brandName&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;company_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;companyName&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure>


<ul>
<li>SQL语句正常编写</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-6-小结"><a href="#1-2-6-小结" class="headerlink" title="1.2.6  小结"></a>1.2.6  小结</h4><p>实体类属性名 和 数据库表列名 不一致，不能自动封装数据</p>
<ul>
<li>起别名：在SQL语句中，对不一样的列名起别名，别名和实体类属性名一样<ul>
<li>可以定义<sql>片段，提升复用性</li>
</ul>
</li>
<li>resultMap：定义<resultMap> 完成不一致的属性名和列名的映射</li>
</ul>
<p>而我们最终选择使用 resultMap的方式。查询映射配置文件中查询所有的 statement 书写如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;brandResultMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;brand&quot;</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            id：完成主键字段的映射</span></span><br><span class="line"><span class="comment">                column：表的列名</span></span><br><span class="line"><span class="comment">                property：实体类的属性名</span></span><br><span class="line"><span class="comment">            result：完成一般字段的映射</span></span><br><span class="line"><span class="comment">                column：表的列名</span></span><br><span class="line"><span class="comment">                property：实体类的属性名</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;brand_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;brandName&quot;</span>/&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">&quot;company_name&quot;</span> <span class="attr">property</span>=<span class="string">&quot;companyName&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectAll&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="1-3-查询详情"><a href="#1-3-查询详情" class="headerlink" title="1.3  查询详情"></a>1.3  查询详情</h3><p>有些数据的属性比较多，在页面表格中无法全部实现，而只会显示部分，而其他属性数据的查询可以通过 <code>查看详情</code> 来进行查询，如上图所示。</p>
<p>查看详情功能实现步骤：</p>
<ul>
<li>编写接口方法：Mapper接口 <img src="/assets/image-20210729180604529.png#id=vFxp4&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695869304274-f71088eb-f89b-44d6-b532-f5ec9e311398.png#averageHue=%23fefde1&clientId=u54da6519-7702-4&from=paste&height=45&id=u74c9020f&originHeight=45&originWidth=653&originalType=binary&ratio=1&rotation=0&showTitle=false&size=3477&status=done&style=none&taskId=u57f77aff-4dcf-4033-aba8-348ff688b2d&title=&width=653" alt="image-20210729180604529.png"><ul>
<li>参数：id<br>查看详情就是查询某一行数据，所以需要根据id进行查询。而id以后是由页面传递过来。</li>
<li>结果：Brand<br>根据id查询出来的数据只要一条，而将一条数据封装成一个Brand对象即可</li>
</ul>
</li>
<li>编写SQL语句：SQL映射文件 <img src="/assets/image-20210729180709318.png#id=cBB2U&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695869320431-675b65dc-ec1e-4083-88d0-0760d5eb6871.png#averageHue=%23fefde1&clientId=u54da6519-7702-4&from=paste&height=129&id=ud12c8f58&originHeight=129&originWidth=653&originalType=binary&ratio=1&rotation=0&showTitle=false&size=11149&status=done&style=none&taskId=u5e41b86d-4a69-4073-a3a6-51865b8b16c&title=&width=653" alt="image-20210729180709318.png"></li>
<li>执行方法、进行测试</li>
</ul>
<h4 id="1-3-1-编写接口方法"><a href="#1-3-1-编写接口方法" class="headerlink" title="1.3.1  编写接口方法"></a>1.3.1  编写接口方法</h4><p>在 <code>BrandMapper</code> 接口中定义根据id查询数据的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 查看详情：根据Id查询</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">Brand <span class="title function_">selectById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="1-3-2-编写SQL语句"><a href="#1-3-2-编写SQL语句" class="headerlink" title="1.3.2  编写SQL语句"></a>1.3.2  编写SQL语句</h4><p>在 <code>BrandMapper.xml</code> 映射配置文件中编写 <code>statement</code>，使用 <code>resultMap</code> 而不是使用 <code>resultType</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span>  <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：上述SQL中的 #{id}先这样写，一会我们再详细讲解</p>
</blockquote>
<h4 id="1-3-3-编写测试方法"><a href="#1-3-3-编写测试方法" class="headerlink" title="1.3.3  编写测试方法"></a>1.3.3  编写测试方法</h4><p>在 <code>test/java</code> 下的 <code>com.itheima.mapper</code>  包下的 <code>MybatisTest类中</code> 定义测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectById</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//接收参数，该id以后需要传递过来</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2. 获取SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3. 获取Mapper接口的代理对象</span></span><br><span class="line">    <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 执行方法</span></span><br><span class="line">    <span class="type">Brand</span> <span class="variable">brand</span> <span class="operator">=</span> brandMapper.selectById(id);</span><br><span class="line">    System.out.println(brand);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. 释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="1-3-4-参数占位符"><a href="#1-3-4-参数占位符" class="headerlink" title="1.3.4  参数占位符"></a>1.3.4  参数占位符</h4><p>查询到的结果很好理解就是id为1的这行数据。而这里我们需要看控制台显示的SQL语句，能看到使用？进行占位。说明我们在映射配置文件中的写的 <code>#&#123;id&#125;</code> 最终会被？进行占位。接下来我们就聊聊映射配置文件中的参数占位符。<br>mybatis提供了两种参数占位符：</p>
<ul>
<li>#{} ：执行SQL时，会将 #{} 占位符替换为？，将来自动设置参数值。从上述例子可以看出使用#{} 底层使用的是 <code>PreparedStatement</code></li>
<li>${} ：拼接SQL。底层使用的是 <code>Statement</code>，会存在SQL注入问题。如下图将 映射配置文件中的 #{} 替换成 ${} 来看效果</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span>  <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand where id = $&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>重新运行查看结果如下： <img src="/assets/image-20210729184156019.png#id=KgnJv&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<blockquote>
<p>&#x3D;&#x3D;注意：&#x3D;&#x3D;从上面两个例子可以看出，以后开发我们使用 #{} 参数占位符。</p>
</blockquote>
<h4 id="1-3-5-parameterType使用"><a href="#1-3-5-parameterType使用" class="headerlink" title="1.3.5  parameterType使用"></a>1.3.5  parameterType使用</h4><p>对于有参数的mapper接口方法，我们在映射配置文件中应该配置 <code>ParameterType</code> 来指定参数类型。只不过该属性都可以省略。如下图：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand where id = $&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-3-6-SQL语句中特殊字段处理"><a href="#1-3-6-SQL语句中特殊字段处理" class="headerlink" title="1.3.6  SQL语句中特殊字段处理"></a>1.3.6  SQL语句中特殊字段处理</h4><p>以后肯定会在SQL语句中写一下特殊字符，比如某一个字段大于某个值，如下图<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695869411458-d1e37eb9-e712-423b-989c-6ef8ad6ffbce.png#averageHue=%23ebf8eb&clientId=u54da6519-7702-4&from=paste&height=115&id=u8a21c193&originHeight=144&originWidth=753&originalType=binary&ratio=1&rotation=0&showTitle=false&size=52740&status=done&style=none&taskId=ub1564465-7e3d-4379-987f-c8057e5e956&title=&width=599" alt="image-20210729184756094.png"></p>
<p>可以看出报错了，因为映射配置文件是xml类型的问题，而 &gt; &lt; 等这些字符在xml中有特殊含义，所以此时我们需要将这些符号进行转义，可以使用以下两种方式进行转义</p>
<ul>
<li>转义字符<br>下图的 <code>&amp;lt;</code> 就是 <code>&lt;</code> 的转义字符。 <img src="/assets/image-20210729185128686.png#id=CnPYT&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695869449314-884c6fa8-88ab-4359-b538-ed882e7eb475.png#averageHue=%23f5efd8&clientId=u54da6519-7702-4&from=paste&height=111&id=ue643ba1c&originHeight=168&originWidth=807&originalType=binary&ratio=1&rotation=0&showTitle=false&size=19374&status=done&style=none&taskId=ue1e89e7e-b4dd-4d02-bfe0-3faf510e965&title=&width=531" alt="image-20210729185128686.png"></li>
<li><img src="/assets/image-20210729185030318.png#id=ZafQb&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="> <![CDATA[内容]]></li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695869454019-a963ea3e-898c-4a34-a634-ce969ee4f76d.png#averageHue=%23f5ecce&clientId=u54da6519-7702-4&from=paste&height=220&id=u61cfa5af&originHeight=339&originWidth=836&originalType=binary&ratio=1&rotation=0&showTitle=false&size=25112&status=done&style=none&taskId=ua6ca837d-d409-49f7-ac4d-59538dc4644&title=&width=542" alt="image-20210729185030318.png"></p>
<h3 id="1-4-多条件查询"><a href="#1-4-多条件查询" class="headerlink" title="1.4  多条件查询"></a>1.4  多条件查询</h3><p>我们经常会遇到多条件查询，将多条件查询的结果展示在下方的数据列表中。而我们做这个功能需要分析最终的SQL语句应该是什么样，思考两个问题</p>
<ul>
<li>条件表达式</li>
<li>如何连接</li>
</ul>
<p>条件字段 <code>企业名称</code>  和 <code>品牌名称</code> 需要进行模糊查询，所以条件应该是：<br><img src="/assets/image-20210729204458815.png#id=zY3LG&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695869503159-6efbe954-65f9-4baa-ba50-abd4c1e1c390.png#averageHue=%23f9f9f9&clientId=u54da6519-7702-4&from=paste&height=151&id=ue9cf7351&originHeight=237&originWidth=1089&originalType=binary&ratio=1&rotation=0&showTitle=false&size=93253&status=done&style=none&taskId=u9b120f53-188f-4c48-8797-3ddb3198c75&title=&width=693" alt="image-20210729204458815.png"></p>
<p>简单的分析后，我们来看功能实现的步骤：</p>
<ul>
<li>编写接口方法<ul>
<li>参数：所有查询条件</li>
<li>结果：List<Brand></li>
</ul>
</li>
<li>在映射配置文件中编写SQL语句</li>
<li>编写测试方法并执行</li>
</ul>
<h4 id="1-4-1-编写接口方法"><a href="#1-4-1-编写接口方法" class="headerlink" title="1.4.1  编写接口方法"></a>1.4.1  编写接口方法</h4><p>在 <code>BrandMapper</code> 接口中定义多条件查询的方法。<br>而该功能有三个参数，我们就需要考虑定义接口时，参数应该如何定义。Mybatis针对多参数有多种实现</p>
<ul>
<li>使用 <code>@Param(&quot;参数名称&quot;)</code> 标记每一个参数，在映射配置文件中就需要使用 <code>#&#123;参数名称&#125;</code> 进行占位</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Brand&gt; <span class="title function_">selectByCondition</span><span class="params">(<span class="meta">@Param(&quot;status&quot;)</span> <span class="type">int</span> status, <span class="meta">@Param(&quot;companyName&quot;)</span> String companyName,<span class="meta">@Param(&quot;brandName&quot;)</span> String brandName)</span>;</span><br></pre></td></tr></table></figure>


<ul>
<li>将多个参数封装成一个 实体对象 ，将该实体对象作为接口的方法参数。该方式要求在映射配置文件的SQL中使用 <code>#&#123;内容&#125;</code> 时，里面的内容必须和实体类属性名保持一致。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;Brand&gt; <span class="title function_">selectByCondition</span><span class="params">(Brand brand)</span>;</span><br></pre></td></tr></table></figure>


<ul>
<li>将多个参数封装到map集合中，将map集合作为接口的方法参数。该方式要求在映射配置文件的SQL中使用 <code>#&#123;内容&#125;</code> 时，里面的内容必须和map集合中键的名称一致。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">List&lt;Brand&gt; selectByCondition(Map map);</span><br></pre></td></tr></table></figure>

<h4 id="1-4-2-编写SQL语句"><a href="#1-4-2-编写SQL语句" class="headerlink" title="1.4.2  编写SQL语句"></a>1.4.2  编写SQL语句</h4><p>在 <code>BrandMapper.xml</code> 映射配置文件中编写 <code>statement</code>，使用 <code>resultMap</code> 而不是使用 <code>resultType</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand</span><br><span class="line">    where status = #&#123;status&#125;</span><br><span class="line">    and company_name like #&#123;companyName&#125;</span><br><span class="line">    and brand_name like #&#123;brandName&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-4-3-编写测试方法"><a href="#1-4-3-编写测试方法" class="headerlink" title="1.4.3  编写测试方法"></a>1.4.3  编写测试方法</h4><p>在 <code>test/java</code> 下的 <code>com.itheima.mapper</code>  包下的 <code>MybatisTest类中</code> 定义测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByCondition</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//接收参数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">companyName</span> <span class="operator">=</span> <span class="string">&quot;华为&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> <span class="string">&quot;华为&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理参数</span></span><br><span class="line">    companyName = <span class="string">&quot;%&quot;</span> + companyName + <span class="string">&quot;%&quot;</span>;</span><br><span class="line">    brandName = <span class="string">&quot;%&quot;</span> + brandName + <span class="string">&quot;%&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">    <span class="comment">//2. 获取SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//3. 获取Mapper接口的代理对象</span></span><br><span class="line">    <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//4. 执行方法</span></span><br><span class="line">	<span class="comment">//方式一 ：接口方法参数使用 @Param 方式调用的方法</span></span><br><span class="line">    <span class="comment">//List&lt;Brand&gt; brands = brandMapper.selectByCondition(status, companyName, brandName);</span></span><br><span class="line">    <span class="comment">//方式二 ：接口方法参数是 实体类对象 方式调用的方法</span></span><br><span class="line">     <span class="comment">//封装对象</span></span><br><span class="line">    <span class="comment">/* Brand brand = new Brand();</span></span><br><span class="line"><span class="comment">        brand.setStatus(status);</span></span><br><span class="line"><span class="comment">        brand.setCompanyName(companyName);</span></span><br><span class="line"><span class="comment">        brand.setBrandName(brandName);*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//List&lt;Brand&gt; brands = brandMapper.selectByCondition(brand);</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//方式三 ：接口方法参数是 map集合对象 方式调用的方法</span></span><br><span class="line">    <span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line">    map.put(<span class="string">&quot;status&quot;</span> , status);</span><br><span class="line">    map.put(<span class="string">&quot;companyName&quot;</span>, companyName);</span><br><span class="line">    map.put(<span class="string">&quot;brandName&quot;</span> , brandName);</span><br><span class="line">    List&lt;Brand&gt; brands = brandMapper.selectByCondition(map);</span><br><span class="line">    System.out.println(brands);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. 释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-4-4-动态SQL"><a href="#1-4-4-动态SQL" class="headerlink" title="1.4.4  动态SQL"></a>1.4.4  动态SQL</h4><p>上述功能实现存在很大的问题。用户在输入条件时，肯定不会所有的条件都填写，这个时候我们的SQL语句就不能那样写的<br>例如用户只输入 当前状态 时，SQL语句就是</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_brand <span class="keyword">where</span> status <span class="operator">=</span> #&#123;status&#125;</span><br></pre></td></tr></table></figure>

<p>而用户如果只输入企业名称时，SQL语句就是</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_brand <span class="keyword">where</span> company_name <span class="keyword">like</span> #&#123;companName&#125;</span><br></pre></td></tr></table></figure>

<p>而用户如果输入了 <code>当前状态</code> 和 <code>企业名称</code> 时，SQL语句又不一样</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_brand <span class="keyword">where</span> status <span class="operator">=</span> #&#123;status&#125; <span class="keyword">and</span> company_name <span class="keyword">like</span> #&#123;companName&#125;</span><br></pre></td></tr></table></figure>

<p>针对上述的需要，Mybatis对动态SQL有很强大的支撑：</p>
<blockquote>
<ul>
<li>if</li>
<li>choose (when, otherwise)</li>
<li>trim (where, set)</li>
<li>foreach</li>
</ul>
</blockquote>
<p>我们先学习 if 标签和 where 标签：</p>
<ul>
<li>if 标签：条件判断<ul>
<li>test 属性：逻辑表达式</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand</span><br><span class="line">    where</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">            and status = #&#123;status&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;companyName != null and companyName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            and company_name like #&#123;companyName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brandName != null and brandName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            and brand_name like #&#123;brandName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>如上的这种SQL语句就会根据传递的参数值进行动态的拼接。如果此时status和companyName有值那么就会值拼接这两个条件。<br>执行结果如下：<br><img src="/assets/image-20210729212510291.png#id=O0K4U&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=">但是它也存在问题，如果此时给的参数值是</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Map</span> <span class="variable">map</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="comment">// map.put(&quot;status&quot; , status);</span></span><br><span class="line">map.put(<span class="string">&quot;companyName&quot;</span>, companyName);</span><br><span class="line">map.put(<span class="string">&quot;brandName&quot;</span> , brandName);</span><br></pre></td></tr></table></figure>

<p>拼接的SQL语句就变成了</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span> tb_brand <span class="keyword">where</span> <span class="keyword">and</span> company_name <span class="keyword">like</span> ? <span class="keyword">and</span> brand_name <span class="keyword">like</span> ?</span><br></pre></td></tr></table></figure>

<p>而上面的语句中 where 关键后直接跟 and 关键字，这就是一条错误的SQL语句。这个就可以使用 where 标签解决</p>
<ul>
<li>where 标签<ul>
<li>作用：<ul>
<li>替换where关键字</li>
<li>会动态的去掉第一个条件前的 and</li>
<li>如果所有的参数没有值则不加where关键字</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByCondition&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">            and status = #&#123;status&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;companyName != null and companyName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            and company_name like #&#123;companyName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brandName != null and brandName != &#x27;&#x27; &quot;</span>&gt;</span></span><br><span class="line">            and brand_name like #&#123;brandName&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：需要给每个条件前都加上 and 关键字。</p>
</blockquote>
<h3 id="1-5-单个条件（动态SQL）"><a href="#1-5-单个条件（动态SQL）" class="headerlink" title="1.5 单个条件（动态SQL）"></a>1.5 单个条件（动态SQL）</h3><p>在查询时只能选择 <code>品牌名称</code>、<code>当前状态</code>、<code>企业名称</code> 这三个条件中的一个，但是用户到底选择哪儿一个，我们并不能确定。这种就属于单个条件的动态SQL语句。</p>
<p>这种需求需要使用到  <code>choose（when，otherwise）标签</code>  实现，  而 <code>choose</code> 标签类似于Java 中的switch语句。</p>
<p>通过一个案例来使用这些标签</p>
<h4 id="1-5-1-编写接口方法"><a href="#1-5-1-编写接口方法" class="headerlink" title="1.5.1  编写接口方法"></a>1.5.1  编写接口方法</h4><p>在 <code>BrandMapper</code> 接口中定义单条件查询的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 单条件动态查询</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> brand</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">List&lt;Brand&gt; <span class="title function_">selectByConditionSingle</span><span class="params">(Brand brand)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="1-5-2-编写SQL语句"><a href="#1-5-2-编写SQL语句" class="headerlink" title="1.5.2  编写SQL语句"></a>1.5.2  编写SQL语句</h4><p>在 <code>BrandMapper.xml</code> 映射配置文件中编写 <code>statement</code>，使用 <code>resultMap</code> 而不是使用 <code>resultType</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByConditionSingle&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span></span><br><span class="line">    select *</span><br><span class="line">    from tb_brand</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">choose</span>&gt;</span><span class="comment">&lt;!--相当于switch--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span><span class="comment">&lt;!--相当于case--&gt;</span></span><br><span class="line">                status = #&#123;status&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;companyName != null and companyName != &#x27;&#x27; &quot;</span>&gt;</span><span class="comment">&lt;!--相当于case--&gt;</span></span><br><span class="line">                company_name like #&#123;companyName&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">when</span> <span class="attr">test</span>=<span class="string">&quot;brandName != null and brandName != &#x27;&#x27;&quot;</span>&gt;</span><span class="comment">&lt;!--相当于case--&gt;</span></span><br><span class="line">                brand_name like #&#123;brandName&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">when</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">choose</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-5-3-编写测试方法"><a href="#1-5-3-编写测试方法" class="headerlink" title="1.5.3  编写测试方法"></a>1.5.3  编写测试方法</h4><p>在 <code>test/java</code> 下的 <code>com.itheima.mapper</code>  包下的 <code>MybatisTest类中</code> 定义测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSelectByConditionSingle</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//接收参数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">companyName</span> <span class="operator">=</span> <span class="string">&quot;华为&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> <span class="string">&quot;华为&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 处理参数</span></span><br><span class="line">    companyName = <span class="string">&quot;%&quot;</span> + companyName + <span class="string">&quot;%&quot;</span>;</span><br><span class="line">    brandName = <span class="string">&quot;%&quot;</span> + brandName + <span class="string">&quot;%&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装对象</span></span><br><span class="line">    <span class="type">Brand</span> <span class="variable">brand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Brand</span>();</span><br><span class="line">    <span class="comment">//brand.setStatus(status);</span></span><br><span class="line">    brand.setCompanyName(companyName);</span><br><span class="line">    <span class="comment">//brand.setBrandName(brandName);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">    <span class="comment">//2. 获取SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//3. 获取Mapper接口的代理对象</span></span><br><span class="line">    <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">    <span class="comment">//4. 执行方法</span></span><br><span class="line">    List&lt;Brand&gt; brands = brandMapper.selectByConditionSingle(brand);</span><br><span class="line">    System.out.println(brands);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//5. 释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-6-添加数据"><a href="#1-6-添加数据" class="headerlink" title="1.6  添加数据"></a>1.6  添加数据</h3><p>我们在该页面输入想要的数据后添加 <code>提交</code> 按钮，就会将这些数据添加到数据库中。接下来我们就来实现添加数据的操作。</p>
<ul>
<li>编写接口方法 <img src="/assets/image-20210729215351651.png#id=C7cg5&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>参数：除了id之外的所有的数据。id对应的是表中主键值，而主键我们是 自动增长 生成的。</li>
<li>编写SQL语句 <img src="/assets/image-20210729215537167.png#id=WecIs&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></li>
<li>编写测试方法并执行</li>
</ul>
<p>明确了该功能实现的步骤后，接下来我们进行具体的操作。</p>
<h4 id="1-6-1-编写接口方法"><a href="#1-6-1-编写接口方法" class="headerlink" title="1.6.1  编写接口方法"></a>1.6.1  编写接口方法</h4><p>在 <code>BrandMapper</code> 接口中定义添加方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 添加</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">add</span><span class="params">(Brand brand)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="1-6-2-编写SQL语句"><a href="#1-6-2-编写SQL语句" class="headerlink" title="1.6.2  编写SQL语句"></a>1.6.2  编写SQL语句</h4><p>在 <code>BrandMapper.xml</code> 映射配置文件中编写添加数据的 <code>statement</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span>&gt;</span></span><br><span class="line">    insert into tb_brand (brand_name, company_name, ordered, description, status)</span><br><span class="line">    values (#&#123;brandName&#125;, #&#123;companyName&#125;, #&#123;ordered&#125;, #&#123;description&#125;, #&#123;status&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-6-3-编写测试方法"><a href="#1-6-3-编写测试方法" class="headerlink" title="1.6.3  编写测试方法"></a>1.6.3  编写测试方法</h4><p>在 <code>test/java</code> 下的 <code>com.itheima.mapper</code>  包下的 <code>MybatisTest类中</code> 定义测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testAdd</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//接收参数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">1</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">companyName</span> <span class="operator">=</span> <span class="string">&quot;波导手机&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> <span class="string">&quot;波导&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> <span class="string">&quot;手机中的战斗机&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ordered</span> <span class="operator">=</span> <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装对象</span></span><br><span class="line">    <span class="type">Brand</span> <span class="variable">brand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Brand</span>();</span><br><span class="line">    brand.setStatus(status);</span><br><span class="line">    brand.setCompanyName(companyName);</span><br><span class="line">    brand.setBrandName(brandName);</span><br><span class="line">    brand.setDescription(description);</span><br><span class="line">    brand.setOrdered(ordered);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">    <span class="comment">//2. 获取SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//SqlSession sqlSession = sqlSessionFactory.openSession(true); //设置自动提交事务，这种情况不需要手动提交事务了</span></span><br><span class="line">    <span class="comment">//3. 获取Mapper接口的代理对象</span></span><br><span class="line">    <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">    <span class="comment">//4. 执行方法</span></span><br><span class="line">    brandMapper.add(brand);</span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">//5. 释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="1-6-4-添加-主键返回"><a href="#1-6-4-添加-主键返回" class="headerlink" title="1.6.4  添加-主键返回"></a>1.6.4  添加-主键返回</h4><p>在数据添加成功后，有时候需要获取插入数据库数据的主键（主键是自增长）。<br>比如：添加订单和订单项，</p>
<p>订单数据存储在订单表中，订单项存储在订单项表中。</p>
<ul>
<li>添加订单数据 <img src="/assets/image-20210729221049462.png#id=oubyZ&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></li>
<li>添加订单项数据，订单项中需要设置所属订单的id <img src="/assets/image-20210729221058898.png#id=bFR7y&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></li>
</ul>
<p>明白了什么时候 <code>主键返回</code> 。接下来我们简单模拟一下，在添加完数据后打印id属性值，能打印出来说明已经获取到了。</p>
<p>我们将上面添加品牌数据的案例中映射配置文件里 <code>statement</code> 进行修改，如下</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">useGeneratedKeys</span>=<span class="string">&quot;true&quot;</span> <span class="attr">keyProperty</span>=<span class="string">&quot;id&quot;</span>&gt;</span></span><br><span class="line">    insert into tb_brand (brand_name, company_name, ordered, description, status)</span><br><span class="line">    values (#&#123;brandName&#125;, #&#123;companyName&#125;, #&#123;ordered&#125;, #&#123;description&#125;, #&#123;status&#125;);</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>在 insert 标签上添加如下属性：</p>
<ul>
<li>useGeneratedKeys：是够获取自动增长的主键值。true表示获取</li>
<li>keyProperty  ：指定将获取到的主键值封装到哪儿个属性里</li>
</ul>
</blockquote>
<h3 id="1-7-修改"><a href="#1-7-修改" class="headerlink" title="1.7  修改"></a>1.7  修改</h3><p><img src="/assets/image-20210729222642700.png#id=PlYIu&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>用户在该页面书写需要修改的数据，点击 <code>提交</code> 按钮，就会将数据库中对应的数据进行修改。注意一点，如果哪儿个输入框没有输入内容，我们是将表中数据对应字段值替换为空白还是保留字段之前的值？答案肯定是保留之前的数据。</p>
<p>接下来我们就具体来实现</p>
<h4 id="1-7-1-编写接口方法"><a href="#1-7-1-编写接口方法" class="headerlink" title="1.7.1  编写接口方法"></a>1.7.1  编写接口方法</h4><p>在 <code>BrandMapper</code> 接口中定义修改方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 修改</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Brand brand)</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>上述方法参数 Brand 就是封装了需要修改的数据，而id肯定是有数据的，这也是和添加方法的区别。</p>
</blockquote>
<h4 id="1-7-2-编写SQL语句"><a href="#1-7-2-编写SQL语句" class="headerlink" title="1.7.2  编写SQL语句"></a>1.7.2  编写SQL语句</h4><p>在 <code>BrandMapper.xml</code> 映射配置文件中编写修改数据的 <code>statement</code>。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">&quot;update&quot;</span>&gt;</span></span><br><span class="line">    update tb_brand</span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;brandName != null and brandName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            brand_name = #&#123;brandName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;companyName != null and companyName != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            company_name = #&#123;companyName&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;ordered != null&quot;</span>&gt;</span></span><br><span class="line">            ordered = #&#123;ordered&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;description != null and description != &#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            description = #&#123;description&#125;,</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;status != null&quot;</span>&gt;</span></span><br><span class="line">            status = #&#123;status&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line">    where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p><em>set</em> 标签可以用于动态包含需要更新的列，忽略其它不更新的列。</p>
</blockquote>
<h4 id="1-7-3-编写测试方法"><a href="#1-7-3-编写测试方法" class="headerlink" title="1.7.3  编写测试方法"></a>1.7.3  编写测试方法</h4><p>在 <code>test/java</code> 下的 <code>com.itheima.mapper</code>  包下的 <code>MybatisTest类中</code> 定义测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testUpdate</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//接收参数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">status</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">companyName</span> <span class="operator">=</span> <span class="string">&quot;波导手机&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">brandName</span> <span class="operator">=</span> <span class="string">&quot;波导&quot;</span>;</span><br><span class="line">    <span class="type">String</span> <span class="variable">description</span> <span class="operator">=</span> <span class="string">&quot;波导手机,手机中的战斗机&quot;</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ordered</span> <span class="operator">=</span> <span class="number">200</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//封装对象</span></span><br><span class="line">    <span class="type">Brand</span> <span class="variable">brand</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Brand</span>();</span><br><span class="line">    brand.setStatus(status);</span><br><span class="line">    <span class="comment">//        brand.setCompanyName(companyName);</span></span><br><span class="line">    <span class="comment">//        brand.setBrandName(brandName);</span></span><br><span class="line">    <span class="comment">//        brand.setDescription(description);</span></span><br><span class="line">    <span class="comment">//        brand.setOrdered(ordered);</span></span><br><span class="line">    brand.setId(id);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">    <span class="comment">//2. 获取SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//SqlSession sqlSession = sqlSessionFactory.openSession(true);</span></span><br><span class="line">    <span class="comment">//3. 获取Mapper接口的代理对象</span></span><br><span class="line">    <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">    <span class="comment">//4. 执行方法</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> brandMapper.update(brand);</span><br><span class="line">    System.out.println(count);</span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">//5. 释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<p>从结果中SQL语句可以看出，只修改了 <code>status</code>  字段值，因为我们给的数据中只给Brand实体对象的 <code>status</code> 属性设置值了。这就是 <code>set</code> 标签的作用。</p>
<h3 id="1-8-删除一行数据"><a href="#1-8-删除一行数据" class="headerlink" title="1.8  删除一行数据"></a>1.8  删除一行数据</h3><p>每行数据后面都有一个 <code>删除</code> 按钮，当用户点击了该按钮，就会将改行数据删除掉。那我们就需要思考，这种删除是根据什么进行删除呢？是通过主键id删除，因为id是表中数据的唯一标识。</p>
<p>接下来就来实现该功能。</p>
<h4 id="1-8-1-编写接口方法"><a href="#1-8-1-编写接口方法" class="headerlink" title="1.8.1  编写接口方法"></a>1.8.1  编写接口方法</h4><p>在 <code>BrandMapper</code> 接口中定义根据id删除方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 根据id删除</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="1-8-2-编写SQL语句"><a href="#1-8-2-编写SQL语句" class="headerlink" title="1.8.2  编写SQL语句"></a>1.8.2  编写SQL语句</h4><p>在 <code>BrandMapper.xml</code> 映射配置文件中编写删除一行数据的 <code>statement</code></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteById&quot;</span>&gt;</span></span><br><span class="line">    delete from tb_brand where id = #&#123;id&#125;;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="1-8-3-编写测试方法"><a href="#1-8-3-编写测试方法" class="headerlink" title="1.8.3  编写测试方法"></a>1.8.3  编写测试方法</h4><p>在 <code>test/java</code> 下的 <code>com.itheima.mapper</code>  包下的 <code>MybatisTest类中</code> 定义测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteById</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//接收参数</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">id</span> <span class="operator">=</span> <span class="number">6</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">    <span class="comment">//2. 获取SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//SqlSession sqlSession = sqlSessionFactory.openSession(true);</span></span><br><span class="line">    <span class="comment">//3. 获取Mapper接口的代理对象</span></span><br><span class="line">    <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">    <span class="comment">//4. 执行方法</span></span><br><span class="line">    brandMapper.deleteById(id);</span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">//5. 释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行过程只要没报错，直接到数据库查询数据是否还存在。</p>
<h3 id="1-9-批量删除"><a href="#1-9-批量删除" class="headerlink" title="1.9  批量删除"></a>1.9  批量删除</h3><p>用户可以选择多条数据，然后点击上面的 <code>删除</code> 按钮，就会删除数据库中对应的多行数据。</p>
<h4 id="1-9-1-编写接口方法"><a href="#1-9-1-编写接口方法" class="headerlink" title="1.9.1  编写接口方法"></a>1.9.1  编写接口方法</h4><p>在 <code>BrandMapper</code> 接口中定义删除多行数据的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 批量删除</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">deleteByIds</span><span class="params">(<span class="type">int</span>[] ids)</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>参数是一个数组，数组中存储的是多条数据的id</p>
</blockquote>
<h4 id="1-9-2-编写SQL语句"><a href="#1-9-2-编写SQL语句" class="headerlink" title="1.9.2  编写SQL语句"></a>1.9.2  编写SQL语句</h4><p>在 <code>BrandMapper.xml</code> 映射配置文件中编写删除多条数据的 <code>statement</code>。</p>
<p>编写SQL时需要遍历数组来拼接SQL语句。Mybatis 提供了 <code>foreach</code> 标签供我们使用</p>
<p><strong>foreach 标签</strong></p>
<p>用来迭代任何可迭代的对象（如数组，集合）。</p>
<ul>
<li>collection 属性：<ul>
<li>mybatis会将数组参数，封装为一个Map集合。<ul>
<li>默认：array &#x3D; 数组</li>
<li>使用@Param注解改变map集合的默认key的名称</li>
</ul>
</li>
</ul>
</li>
<li>item 属性：本次迭代获取到的元素。</li>
<li>separator 属性：集合项迭代之间的分隔符。<code>foreach</code> 标签不会错误地添加多余的分隔符。也就是最后一次迭代不会加分隔符。</li>
<li>open 属性：该属性值是在拼接SQL语句之前拼接的语句，只会拼接一次</li>
<li>close 属性：该属性值是在拼接SQL语句拼接后拼接的语句，只会拼接一次</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">delete</span> <span class="attr">id</span>=<span class="string">&quot;deleteByIds&quot;</span>&gt;</span></span><br><span class="line">    delete from tb_brand where id</span><br><span class="line">    in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;array&quot;</span> <span class="attr">item</span>=<span class="string">&quot;id&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span>&gt;</span></span><br><span class="line">        #&#123;id&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    ;</span><br><span class="line"><span class="tag">&lt;/<span class="name">delete</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>假如数组中的id数据是{1,2,3}，那么拼接后的sql语句就是：</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> tb_brand <span class="keyword">where</span> id <span class="keyword">in</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br></pre></td></tr></table></figure>

<h4 id="1-9-3-编写测试方法"><a href="#1-9-3-编写测试方法" class="headerlink" title="1.9.3  编写测试方法"></a>1.9.3  编写测试方法</h4><p>在 <code>test/java</code> 下的 <code>com.itheima.mapper</code>  包下的 <code>MybatisTest类中</code> 定义测试方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testDeleteByIds</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//接收参数</span></span><br><span class="line">    <span class="type">int</span>[] ids = &#123;<span class="number">5</span>,<span class="number">7</span>,<span class="number">8</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1. 获取SqlSessionFactory</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line">    <span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line">    <span class="comment">//2. 获取SqlSession对象</span></span><br><span class="line">    <span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line">    <span class="comment">//SqlSession sqlSession = sqlSessionFactory.openSession(true);</span></span><br><span class="line">    <span class="comment">//3. 获取Mapper接口的代理对象</span></span><br><span class="line">    <span class="type">BrandMapper</span> <span class="variable">brandMapper</span> <span class="operator">=</span> sqlSession.getMapper(BrandMapper.class);</span><br><span class="line">    <span class="comment">//4. 执行方法</span></span><br><span class="line">    brandMapper.deleteByIds(ids);</span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    sqlSession.commit();</span><br><span class="line">    <span class="comment">//5. 释放资源</span></span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="1-10-Mybatis参数传递"><a href="#1-10-Mybatis参数传递" class="headerlink" title="1.10  Mybatis参数传递"></a>1.10  Mybatis参数传递</h3><p>Mybatis 接口方法中可以接收各种各样的参数，如下：</p>
<ul>
<li>多个参数</li>
<li>单个参数：单个参数又可以是如下类型<ul>
<li>POJO 类型</li>
<li>Map 集合类型</li>
<li>Collection 集合类型</li>
<li>List 集合类型</li>
<li>Array 类型</li>
<li>其他类型</li>
</ul>
</li>
</ul>
<h4 id="1-10-1-多个参数"><a href="#1-10-1-多个参数" class="headerlink" title="1.10.1  多个参数"></a>1.10.1  多个参数</h4><p>如下面的代码，就是接收两个参数，而接收多个参数需要使用 <code>@Param</code> 注解，那么为什么要加该注解呢？这个问题要弄明白就必须来研究Mybatis 底层对于这些参数是如何处理的。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User <span class="title function_">select</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username,<span class="meta">@Param(&quot;password&quot;)</span> String password)</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">	select *</span><br><span class="line">    from tb_user</span><br><span class="line">    where </span><br><span class="line">    	username=#&#123;username&#125;</span><br><span class="line">    	and password=#&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们在接口方法中定义多个参数，Mybatis 会将这些参数封装成 Map 集合对象，值就是参数值，而键在没有使用 <code>@Param</code> 注解时有以下命名规则：</p>
<ul>
<li>以 arg 开头  ：第一个参数就叫 arg0，第二个参数就叫 arg1，以此类推。如：</li>
</ul>
<blockquote>
<p>map.put(“arg0”，参数值1);</p>
<p>map.put(“arg1”，参数值2);</p>
</blockquote>
<ul>
<li>以 param 开头 ： 第一个参数就叫 param1，第二个参数就叫 param2，依次类推。如：</li>
</ul>
<blockquote>
<p>map.put(“param1”，参数值1);</p>
<p>map.put(“param2”，参数值2);</p>
</blockquote>
<p><strong>代码验证：</strong></p>
<ul>
<li>在 <code>UserMapper</code> 接口中定义如下方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User <span class="title function_">select</span><span class="params">(String username,String password)</span>;</span><br></pre></td></tr></table></figure>


<ul>
<li>在 <code>UserMapper.xml</code> 映射配置文件中定义SQL</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">	select *</span><br><span class="line">    from tb_user</span><br><span class="line">    where </span><br><span class="line">    	username=#&#123;arg0&#125;</span><br><span class="line">    	and password=#&#123;arg1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>或者</p>
<ul>
<li>运行代码结果如下 <img src="/assets/image-20210805230303461.png#id=ON8P4&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>在映射配合文件的SQL语句中使用用 <code>arg</code> 开头的和 <code>param</code> 书写，代码的可读性会变的特别差，此时可以使用 <code>@Param</code> 注解。</li>
</ul>
<p>在接口方法参数上使用 <code>@Param</code> 注解，Mybatis 会将 <code>arg</code> 开头的键名替换为对应注解的属性值。</p>
<p><strong>代码验证：</strong></p>
<ul>
<li>在 <code>UserMapper</code> 接口中定义如下方法，在 <code>username</code> 参数前加上 <code>@Param</code> 注解</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">User <span class="title function_">select</span><span class="params">(<span class="meta">@Param(&quot;username&quot;)</span> String username, String password)</span>;</span><br></pre></td></tr></table></figure>

<p>Mybatis 在封装 Map 集合时，键名就会变成如下：</p>
<ul>
<li>在 <code>UserMapper.xml</code> 映射配置文件中定义SQL</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">	select *</span><br><span class="line">    from tb_user</span><br><span class="line">    where </span><br><span class="line">    	username=#&#123;username&#125;</span><br><span class="line">    	and password=#&#123;param2&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>


<ul>
<li>运行程序结果没有报错。而如果将 <code>#&#123;&#125;</code> 中的 <code>username</code> 还是写成  <code>arg0</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line">	select *</span><br><span class="line">    from tb_user</span><br><span class="line">    where </span><br><span class="line">    	username=#&#123;arg0&#125;</span><br><span class="line">    	and password=#&#123;param2&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>


<ul>
<li>运行程序则可以看到错误<br><img src="/assets/image-20210805231727206.png#id=x3e96&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></li>
</ul>
<p>结论：以后接口参数是多个时，在每个参数上都使用 <code>@Param</code> 注解。这样代码的可读性更高。</p>
<h4 id="1-10-2-单个参数"><a href="#1-10-2-单个参数" class="headerlink" title="1.10.2  单个参数"></a>1.10.2  单个参数</h4><ul>
<li>POJO 类型<br>直接使用。要求 <code>属性名</code> 和 <code>参数占位符名称</code> 一致</li>
<li>Map 集合类型<br>直接使用。要求 <code>map集合的键名</code> 和 <code>参数占位符名称</code> 一致</li>
<li>Collection 集合类型<br>Mybatis 会将集合封装到 map 集合中，如下：</li>
</ul>
<blockquote>
<p>map.put(“arg0”，collection集合);</p>
<p>map.put(“collection”，collection集合;</p>
</blockquote>
<p>可以使用 <code>@Param</code> 注解替换map集合中默认的 arg 键名。</p>
<ul>
<li>List 集合类型<br>Mybatis 会将集合封装到 map 集合中，如下：</li>
</ul>
<blockquote>
<p>map.put(“arg0”，list集合);</p>
<p>map.put(“collection”，list集合);</p>
<p>map.put(“list”，list集合);</p>
</blockquote>
<p>可以使用 <code>@Param</code> 注解替换map集合中默认的 arg 键名。</p>
<ul>
<li>Array 类型<br>Mybatis 会将集合封装到 map 集合中，如下：</li>
</ul>
<blockquote>
<p>map.put(“arg0”，数组);</p>
<p>map.put(“array”，数组);</p>
</blockquote>
<p>可以使用 <code>@Param</code> 注解替换map集合中默认的 arg 键名。</p>
<ul>
<li>其他类型<br>比如int类型，<code>参数占位符名称</code> 叫什么都可以。尽量做到见名知意</li>
</ul>
<h2 id="2，注解实现CRUD"><a href="#2，注解实现CRUD" class="headerlink" title="2，注解实现CRUD"></a>2，注解实现CRUD</h2><p>使用注解开发会比配置文件开发更加方便。如下就是使用注解进行开发</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Select(value = &quot;select * from tb_user where id = #&#123;id&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">select</span><span class="params">(<span class="type">int</span> id)</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：</p>
<ul>
<li>注解是用来替换映射配置文件方式配置的，所以使用了注解，就不需要再映射配置文件中书写对应的 <code>statement</code></li>
</ul>
</blockquote>
<p>Mybatis 针对 CURD 操作都提供了对应的注解，已经做到见名知意。如下：</p>
<ul>
<li>查询 ：<a href="/Select">@Select </a></li>
<li>添加 ：<a href="/Insert">@Insert </a></li>
<li>修改 ：<a href="/Update">@Update </a></li>
<li>删除 ：<a href="/Delete">@Delete </a></li>
</ul>
<p>接下来我们做一个案例来使用 Mybatis 的注解开发</p>
<p><strong>代码实现：</strong></p>
<ul>
<li>将之前案例中 <code>UserMapper.xml</code> 中的 根据id查询数据 的 <code>statement</code> 注释掉 <img src="/assets/image-20210805235229938.png#id=neyxZ&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></li>
<li>在 <code>UserMapper</code> 接口的 <code>selectById</code> 方法上添加注解 <img src="/assets/image-20210805235405070.png#id=d5Wxd&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></li>
<li>运行测试程序也能正常查询到数据</li>
</ul>
<p>我们课程上只演示这一个查询的注解开发，其他的同学们下来可以自己实现，都是比较简单。</p>
<p>&#x3D;&#x3D;注意：&#x3D;&#x3D;在官方文档中 <code>入门</code> 中有这样的一段话：</p>
<p><img src="/assets/image-20210805234302849.png#id=ob3Jx&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<p>所以，注解完成简单功能，配置文件完成复杂功能。</p>
<p>而我们之前写的动态 SQL 就是复杂的功能，如果用注解使用的话，就需要使用到 Mybatis 提供的SQL构建器来完成，而对应的代码如下：</p>
<p><img src="/assets/image-20210805234842497.png#id=KYtg8&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<p>上述代码将java代码和SQL语句融到了一块，使得代码的可读性大幅度降低。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>docker_3</title>
    <url>/2024/04/28/docker-3/</url>
    <content><![CDATA[<h1 id="1-Docker复杂安装详说"><a href="#1-Docker复杂安装详说" class="headerlink" title="1 Docker复杂安装详说"></a>1 Docker复杂安装详说</h1><h2 id="1-1-安装MySQL主从复制"><a href="#1-1-安装MySQL主从复制" class="headerlink" title="1.1 安装MySQL主从复制"></a>1.1 安装MySQL主从复制</h2><h3 id="1-1-1-主从复制原理"><a href="#1-1-1-主从复制原理" class="headerlink" title="1.1.1 主从复制原理"></a>1.1.1 主从复制原理</h3><p><a href="https://blog.csdn.net/Guzarish/article/details/123244487">MySQL主从复制原理_牛奔的博客-CSDN博客</a></p>
<h3 id="1-1-2-主从搭建步骤"><a href="#1-1-2-主从搭建步骤" class="headerlink" title="1.1.2 主从搭建步骤"></a>1.1.2 主从搭建步骤</h3><ol>
<li>新建主服务器容器实例3307</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 3307:3306 --name mysql-master \</span><br><span class="line">-v /mydata/mysql-master/log:/var/log/mysql \</span><br><span class="line">-v /mydata/mysql-master/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql-master/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root  \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>进入&#x2F;mydata&#x2F;mysql-master&#x2F;conf目录下新建my.cnf</li>
</ol>
<p><code>vim my.cnf</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 设置server_id，同一局域网中需要唯一</span></span></span><br><span class="line">server_id=101 </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 指定不需要同步的数据库名称</span></span></span><br><span class="line">binlog-ignore-db=mysql  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 开启二进制日志功能</span></span></span><br><span class="line">log-bin=mall-mysql-bin  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 设置二进制日志使用内存大小（事务）</span></span></span><br><span class="line">binlog_cache_size=1M  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 设置使用的二进制日志格式（mixed,statement,row）</span></span></span><br><span class="line">binlog_format=mixed  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 二进制日志过期清理时间。默认值为0，表示不自动清理。</span></span></span><br><span class="line">expire_logs_days=7  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span></span><br><span class="line">slave_skip_errors=1062</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>修改完配置后重启master实例</li>
</ol>
<p><code>docker restart mysql-master</code></p>
<ol start="4">
<li>进入mysql-master容器</li>
</ol>
<p><code>docker exec -it mysql-master /bin/bash</code><br><code>mysql -uroot -proot</code></p>
<ol start="5">
<li>master容器实例内创建数据同步用户</li>
</ol>
<p><code>CREATE USER &#39;slave&#39;@&#39;%&#39; IDENTIFIED BY &#39;123456&#39;;</code><br><code>GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &#39;slave&#39;@&#39;%&#39;;</code></p>
<ol start="6">
<li>新建从服务器容器实例3308</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -p 3308:3306 --name mysql-slave \</span><br><span class="line">-v /mydata/mysql-slave/log:/var/log/mysql \</span><br><span class="line">-v /mydata/mysql-slave/data:/var/lib/mysql \</span><br><span class="line">-v /mydata/mysql-slave/conf:/etc/mysql \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=root  \</span><br><span class="line">-d mysql:5.7</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>进入&#x2F;mydata&#x2F;mysql-slave&#x2F;conf目录下新建my.cnf</li>
</ol>
<p><code>vim my.cnf</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 设置server_id，同一局域网中需要唯一</span></span></span><br><span class="line">server_id=102</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 指定不需要同步的数据库名称</span></span></span><br><span class="line">binlog-ignore-db=mysql  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 开启二进制日志功能，以备Slave作为其它数据库实例的Master时使用</span></span></span><br><span class="line">log-bin=mall-mysql-slave1-bin  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 设置二进制日志使用内存大小（事务）</span></span></span><br><span class="line">binlog_cache_size=1M  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 设置使用的二进制日志格式（mixed,statement,row）</span></span></span><br><span class="line">binlog_format=mixed  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 二进制日志过期清理时间。默认值为0，表示不自动清理。</span></span></span><br><span class="line">expire_logs_days=7  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致</span></span></span><br><span class="line">slave_skip_errors=1062  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># relay_log配置中继日志</span></span></span><br><span class="line">relay_log=mall-mysql-relay-bin  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># log_slave_updates表示slave将复制事件写进自己的二进制日志</span></span></span><br><span class="line">log_slave_updates=1  </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># slave设置为只读（具有super权限的用户除外）</span></span></span><br><span class="line">read_only=1</span><br></pre></td></tr></table></figure>

<ol start="8">
<li>修改完配置后重启slave实例</li>
</ol>
<p><code>docker restart mysql-slave</code></p>
<ol start="9">
<li>在主数据库中查看主从同步状态</li>
</ol>
<p><code>show master status;</code></p>
<ol start="10">
<li>进入mysql-slave容器</li>
</ol>
<p><code>docker exec -it mysql-slave /bin/bash</code><br><code>mysql -uroot -proot</code></p>
<ol start="11">
<li>在从数据库中配置主从复制</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">change master to master_host=<span class="string">&#x27;宿主机ip&#x27;</span>, master_user=<span class="string">&#x27;slave&#x27;</span>, master_password=<span class="string">&#x27;123456&#x27;</span>, </span><br><span class="line">master_port=3307, master_log_file=<span class="string">&#x27;mall-mysql-bin.000001&#x27;</span>, master_log_pos=617, master_connect_retry=30;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658995661799-39e995e2-73e0-4e7d-bc9d-59c1fa0b8e3c.png#averageHue=%23fef9f9&clientId=u7522598d-4755-4&from=paste&height=384&id=u1b666ed1&originHeight=384&originWidth=1348&originalType=binary&ratio=1&rotation=0&showTitle=false&size=74465&status=done&style=none&taskId=u90f3664d-86e3-48f6-9a21-d7ee6222409&title=&width=1348" alt="image.png"><br>主从复制命令参数说明<br>:::info<br>master_host：主数据库的IP地址；<br>master_port：主数据库的运行端口；<br>master_user：在主数据库创建的用于同步数据的用户账号；<br>master_password：在主数据库创建的用于同步数据的用户密码；<br>master_log_file：指定从数据库要复制数据的日志文件，通过查看主数据的状态，获取File参数；<br>master_log_pos：指定从数据库从哪个位置开始复制数据，通过查看主数据的状态，获取Position参数；<br>master_connect_retry：连接失败重试的时间间隔，单位为秒。<br>:::</p>
<ol start="12">
<li>在从数据库中查看主从同步状态</li>
</ol>
<p><code>show slave status \G;</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658995728716-90fc0143-7a4d-465e-83c1-a17bad83823e.png#averageHue=%23fefdfd&clientId=u7522598d-4755-4&from=paste&height=333&id=Jj7wg&originHeight=333&originWidth=1084&originalType=binary&ratio=1&rotation=0&showTitle=false&size=144319&status=done&style=none&taskId=uebb0a947-b1af-4dcd-92d4-141799dd800&title=&width=1084" alt="image.png"></p>
<ol start="13">
<li>在从数据库中开启主从同步</li>
</ol>
<p><code>start slave;</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658995798230-fbe9f08c-af5d-4e83-915d-62302a5ad1a1.png#averageHue=%23fef4f4&clientId=u7522598d-4755-4&from=paste&height=100&id=u605c7e49&originHeight=100&originWidth=502&originalType=binary&ratio=1&rotation=0&showTitle=false&size=22248&status=done&style=none&taskId=u9c9266b6-dd25-4d70-8183-62cd8906e9d&title=&width=502" alt="image.png"></p>
<ol start="14">
<li>查看从数据库状态发现已经同步</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658995805394-60a39a9a-8be4-43b7-9489-84afd4ef0310.png#averageHue=%23fefcfc&clientId=u7522598d-4755-4&from=paste&height=472&id=u514b0ec6&originHeight=472&originWidth=679&originalType=binary&ratio=1&rotation=0&showTitle=false&size=74820&status=done&style=none&taskId=u57401596-8685-4acd-ad19-68718c30921&title=&width=679" alt="image.png"></p>
<ol start="15">
<li>主从复制测试</li>
<li>主机新建库-使用库-新建表-插入数据，ok</li>
<li>从机使用库-查看记录，ok</li>
</ol>
<h2 id="1-2-安装redis集群-大厂面试题第4季-分布式存储案例真题"><a href="#1-2-安装redis集群-大厂面试题第4季-分布式存储案例真题" class="headerlink" title="1.2 安装redis集群(大厂面试题第4季-分布式存储案例真题)"></a>1.2 安装redis集群(大厂面试题第4季-分布式存储案例真题)</h2><p>cluster(集群)模式-docker版<br>哈希槽分区进行亿级数据存储</p>
<h3 id="1-2-1-面试题"><a href="#1-2-1-面试题" class="headerlink" title="1.2.1 面试题"></a>1.2.1 面试题</h3><p>1<del>2亿条数据需要缓存，请问如何设计这个存储案例？<br>回答：单机单台100%不可能，肯定是分布式存储，用redis如何落地？<br>上述问题阿里P6</del>P7工程案例和场景设计类必考题目， 一般业界有3种解决方案</p>
<ol>
<li>哈希取余分区</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658996785793-2ca8867b-2254-45ee-8bc7-8f566d737db2.png#averageHue=%23f6f0f0&clientId=u7522598d-4755-4&from=paste&height=323&id=u0b0a85cc&originHeight=323&originWidth=406&originalType=binary&ratio=1&rotation=0&showTitle=false&size=37813&status=done&style=none&taskId=u883d413c-599c-41ab-a09e-54ec1fae540&title=&width=406" alt="image.png"><br>:::info<br>2亿条记录就是2亿个k,v，我们单机不行必须要分布式多机，假设有3台机器构成一个集群，用户每次读写操作都是根据公式：<br>hash(key) % N个机器台数，计算出哈希值，用来决定数据映射到哪一个节点上。<br>优点：<br>简单粗暴，直接有效，只需要预估好数据规划好节点，例如3台、8台、10台，就能保证一段时间的数据支撑。使用Hash算法让固定的一部分请求落到同一台服务器上，这样每台服务器固定处理一部分请求（并维护这些请求的信息），起到负载均衡+分而治之的作用。<br>缺点：<br>原来规划好的节点，进行扩容或者缩容就比较麻烦了额，不管扩缩，每次数据变动导致节点有变动，映射关系需要重新进行计算，在服务器个数固定不变时没有问题，如果需要弹性扩容或故障停机的情况下，原来的取模公式就会发生变化：Hash(key)&#x2F;3会变成Hash(key) &#x2F;?。此时地址经过取余运算的结果将发生很大变化，根据公式获取的服务器也会变得不可控。<br>某个redis机器宕机了，由于台数数量变化，会导致hash取余全部数据重新洗牌。<br>:::</p>
<ol start="2">
<li>一致性哈希算法分区<ol>
<li><p>是什么<br>:::info<br>一致性Hash算法背景<br>一致性哈希算法在1997年由麻省理工学院中提出的，设计目标是为了解决分布式缓存数据变动和映射问题，某个机器宕机了，分母数量改变了，自然取余数不OK了。<br>:::</p>
</li>
<li><p>能干嘛</p>
</li>
</ol>
</li>
</ol>
<p>提出一致性Hash解决方案。 目的是当服务器个数发生变动时， 尽量减少影响客户端到服务器的映射关系</p>
<pre><code>  3. 3大步骤
     1. 算法构建一致性哈希环
        :::info
        一致性哈希环
          一致性哈希算法必然有个hash函数并按照算法产生hash值，这个算法的所有可能哈希值会构成一个全量集，这个集合可以成为一个hash空间[0,2^32-1]，这个是一个线性空间，但是在算法中，我们通过适当的逻辑控制将它首尾相连(0 = 2^32),这样让它逻辑上形成了一个环形空间。
          它也是按照使用取模的方法，前面笔记介绍的节点取模法是对节点（服务器）的数量进行取模。而一致性Hash算法是对2^32取模，简单来说，一致性Hash算法将整个哈希值空间组织成一个虚拟的圆环，如假设某哈希函数H的值空间为0-2^32-1（即哈希值是一个32位无符号整形），整个哈希环如下图：整个空间按顺时针方向组织，圆环的正上方的点代表0，0点右侧的第一个点代表1，以此类推，2、3、4、……直到2^32-1，也就是说0点左侧的第一个点代表2^32-1， 0和2^32-1在零点中方向重合，我们把这个由2^32个点组成的圆环称为Hash环。
        ![image.png](https://cdn.nlark.com/yuque/0/2022/png/27791237/1658999862145-25f18b54-2e15-47f3-a873-a5d44a16f866.png#averageHue=%23d0e5e4&amp;clientId=u7522598d-4755-4&amp;from=paste&amp;height=467&amp;id=u33594d6f&amp;originHeight=467&amp;originWidth=447&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=50985&amp;status=done&amp;style=none&amp;taskId=u56d8b604-908e-433d-96b0-32c3fe0d48a&amp;title=&amp;width=447)
        :::

     2. 服务器IP节点映射
        :::info
        节点映射
        将集群中各个IP节点映射到环上的某一个位置。
        将各个服务器使用Hash进行一个哈希，具体可以选择服务器的IP或主机名作为关键字进行哈希，这样每台机器就能确定其在哈希环上的位置。假如4个节点NodeA、B、C、D，经过IP地址的哈希函数计算(hash(ip))，使用IP地址哈希后在环空间的位置如下：  
        ![image.png](https://cdn.nlark.com/yuque/0/2022/png/27791237/1658999891472-39767eb6-5396-4b43-9cfb-71103e0758ec.png#averageHue=%23f1f2eb&amp;clientId=u7522598d-4755-4&amp;from=paste&amp;height=578&amp;id=u3d0840bc&amp;originHeight=578&amp;originWidth=565&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=106203&amp;status=done&amp;style=none&amp;taskId=u7aeacdc7-5e79-42ec-9faf-a8f11197140&amp;title=&amp;width=565)
        :::

     3. key落到服务器的落键规则
        :::info
        当我们需要存储一个kv键值对时，首先计算key的hash值，hash(key)，将这个key使用相同的函数Hash计算出哈希值并确定此数据在环上的位置，从此位置沿环顺时针“行走”，第一台遇到的服务器就是其应该定位到的服务器，并将该键值对存储在该节点上。
        如我们有Object A、Object B、Object C、Object D四个数据对象，经过哈希计算后，在环空间上的位置如下：根据一致性Hash算法，数据A会被定为到Node A上，B被定为到Node B上，C被定为到Node C上，D被定为到Node D上。
        ![image.png](https://cdn.nlark.com/yuque/0/2022/png/27791237/1658999908647-d6826cc9-9435-4701-8e42-9aaf09cee0be.png#averageHue=%23ecf0e8&amp;clientId=u7522598d-4755-4&amp;from=paste&amp;height=573&amp;id=u826399e8&amp;originHeight=573&amp;originWidth=567&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=158013&amp;status=done&amp;style=none&amp;taskId=u5e8a649d-a15f-4396-ba77-06b38a5f713&amp;title=&amp;width=567)
        :::

  4. 优点
     1. 一致性哈希算法的容错性
        :::info
        容错性
        假设Node C宕机，可以看到此时对象A、B、D不会受到影响，只有C对象被重定位到Node D。一般的，在一致性Hash算法中，如果一台服务器不可用，则受影响的数据仅仅是此服务器到其环空间中前一台服务器（即沿着逆时针方向行走遇到的第一台服务器）之间数据，其它不会受到影响。简单说，就是C挂了，受到影响的只是B、C之间的数据，并且这些数据会转移到D进行存储。
        ![image.png](https://cdn.nlark.com/yuque/0/2022/png/27791237/1658999941543-94276993-0b80-4c0d-8804-662831456bc2.png#averageHue=%23ebf0e7&amp;clientId=u7522598d-4755-4&amp;from=paste&amp;height=571&amp;id=u3c112a0d&amp;originHeight=571&amp;originWidth=563&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=161978&amp;status=done&amp;style=none&amp;taskId=u09f7be39-92ba-4496-b5d7-0ff60f9924f&amp;title=&amp;width=563)
        :::

     2. 一致性哈希算法的扩展性
        :::info
        数据量增加了，需要增加一台节点NodeX，X的位置在A和B之间，那收到影响的也就是A到X之间的数据，重新把A到X的数据录入到X上即可，
        不会导致hash取余全部数据重新洗牌。
        ![image.png](https://cdn.nlark.com/yuque/0/2022/png/27791237/1659000035920-385ef89f-50cc-497a-9954-b91df3b4e84a.png#averageHue=%23eaf0e5&amp;clientId=u7522598d-4755-4&amp;from=paste&amp;height=571&amp;id=u966a44c0&amp;originHeight=571&amp;originWidth=563&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=false&amp;size=174230&amp;status=done&amp;style=none&amp;taskId=u02e9c338-697d-421a-a4b8-d222c5003a3&amp;title=&amp;width=563)
        :::

  5. 缺点
</code></pre>
<p>一致性哈希算法的数据倾斜问题<br>:::info<br>Hash环的数据倾斜问题<br>一致性Hash算法在服务节点太少时，容易因为节点分布不均匀而造成数据倾斜（被缓存的对象大部分集中缓存在某一台服务器上）问题，<br>例如系统中只有两台服务器：<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1659000055531-fe1191aa-34b3-46d8-9981-b7ff2ad7f2a7.png#averageHue=%23aacaa2&clientId=u7522598d-4755-4&from=paste&height=366&id=u47cee6a4&originHeight=366&originWidth=354&originalType=binary&ratio=1&rotation=0&showTitle=false&size=37916&status=done&style=none&taskId=ub50eae90-1b60-412d-bb6f-aee3762664e&title=&width=354" alt="image.png"><br>:::</p>
<pre><code>  6. 小总结
     :::info
     为了在节点数目发生改变时尽可能少的迁移数据
     将所有的存储节点排列在收尾相接的Hash环上，每个key在计算Hash后会顺时针找到临近的存储节点存放。
     而当有节点加入或退出时仅影响该节点在Hash环上顺时针相邻的后续节点。  
     优点
     加入和删除节点只影响哈希环中顺时针方向的相邻的节点，对其他节点无影响。
     缺点 
     数据的分布和节点的位置有关，因为这些节点不是均匀的分布在哈希环上的，所以数据在进行存储时达不到均匀分布的效果。
     :::
</code></pre>
<ol start="7">
<li>哈希槽分区<ol>
<li><p>是什么<br>:::info<br>1 为什么出现<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1659000479815-61ec964c-ad1b-4a75-a379-a5aa680199f1.png#averageHue=%23b8ab9d&clientId=u7522598d-4755-4&from=paste&height=78&id=u0bb96f9b&originHeight=78&originWidth=505&originalType=binary&ratio=1&rotation=0&showTitle=false&size=10751&status=done&style=none&taskId=u55bde246-7ce5-4740-af3c-006ee57ee3a&title=&width=505" alt="image.png"><br>哈希槽实质就是一个数组，数组[0,2^14 -1]形成hash slot空间。<br>2 能干什么<br>解决均匀分配的问题，在数据和节点之间又加入了一层，把这层称为哈希槽（slot），用于管理数据和节点之间的关系，现在就相当于节点上放的是槽，槽里放的是数据。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1659000487455-b7174e19-35ee-472e-8884-2fad95f1edbc.png#averageHue=%23f5ece9&clientId=u7522598d-4755-4&from=paste&height=148&id=u07316ff5&originHeight=148&originWidth=484&originalType=binary&ratio=1&rotation=0&showTitle=false&size=12083&status=done&style=none&taskId=u10cf15a3-9899-43cd-97f9-7197617f3b2&title=&width=484" alt="image.png"><br>槽解决的是粒度问题，相当于把粒度变大了，这样便于数据移动。<br>哈希解决的是映射问题，使用key的哈希值来计算所在的槽，便于数据分配。<br>3 多少个hash槽<br>一个集群只能有16384个槽，编号0-16383（0-2^14-1）。这些槽会分配给集群中的所有主节点，分配策略没有要求。可以指定哪些编号的槽分配给哪个主节点。集群会记录节点和槽的对应关系。解决了节点和槽的关系后，接下来就需要对key求哈希值，然后对16384取余，余数是几key就落入对应的槽里。slot &#x3D; CRC16(key) % 16384。以槽为单位移动数据，因为槽的数目是固定的，处理起来比较容易，这样数据移动问题就解决了。<br>:::</p>
</li>
<li><p>哈希槽计算<br>:::info<br>Redis 集群中内置了 16384 个哈希槽，redis 会根据节点数量大致均等的将哈希槽映射到不同的节点。当需要在 Redis 集群中放置一个 key-value时，redis 先对 key 使用 crc16 算法算出一个结果，然后把结果对 16384 求余数，这样每个 key 都会对应一个编号在 0-16383 之间的哈希槽，也就是映射到某个节点上。如下代码，key之A 、B在Node2， key之C落在Node3上<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1659000531546-75739be6-1aee-4165-9dfb-6ac727deddf6.png#averageHue=%23f2ebea&clientId=u7522598d-4755-4&from=paste&height=280&id=u3fcdc2f2&originHeight=280&originWidth=402&originalType=binary&ratio=1&rotation=0&showTitle=false&size=44211&status=done&style=none&taskId=u76a967e4-d098-4e4e-9d6c-d1b99b826d2&title=&width=402" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1659000521473-2a5a3350-1bd4-4394-b4dd-496f4e024034.png#averageHue=%23faf8f6&clientId=u7522598d-4755-4&from=paste&height=220&id=ua57f8a40&originHeight=220&originWidth=661&originalType=binary&ratio=1&rotation=0&showTitle=false&size=24854&status=done&style=none&taskId=uf3ee8862-3580-474f-9600-49a37a088de&title=&width=661" alt="image.png"><br>:::</p>
</li>
</ol>
</li>
</ol>
<h3 id="1-2-2-3主3从redis集群扩缩容配置案例架构说明"><a href="#1-2-2-3主3从redis集群扩缩容配置案例架构说明" class="headerlink" title="1.2.2 3主3从redis集群扩缩容配置案例架构说明"></a>1.2.2 3主3从redis集群扩缩容配置案例架构说明</h3><p>见自己的processon笔记</p>
<h3 id="1-2-3-开打步骤"><a href="#1-2-3-开打步骤" class="headerlink" title="1.2.3 开打步骤"></a>1.2.3 开打步骤</h3><p>&#x2F;todo<br>3主3从redis集群配置<br>关闭防火墙+启动docker后台服务<br>systemctl start docker<br>新建6个docker容器redis实例<br>命令分步解释<br>docker run<br>创建并运行docker容器实例<br>–name redis-node-6<br>容器名字<br>–net host<br>使用宿主机的IP和端口，默认<br>–privileged&#x3D;true<br>获取宿主机root用户权限<br>-v &#x2F;data&#x2F;redis&#x2F;share&#x2F;redis-node-6:&#x2F;data<br>容器卷，宿主机地址:docker内部地址<br>redis:6.0.8<br>redis镜像和版本号<br>–cluster-enabled yes<br>开启redis集群<br>–appendonly yes<br>开启持久化<br>–port 6386<br>redis端口号<br>进入容器redis-node-1并为6台机器构建集群关系<br>进入容器<br>docker exec -it redis-node-1 &#x2F;bin&#x2F;bash<br>构建主从关系<br>一切OK的话，3主3从搞定<br>链接进入6381作为切入点，查看集群状态<br>链接进入6381作为切入点，查看节点状态<br>cluster info<br>cluster nodes<br>主从容错切换迁移案例<br>数据读写存储<br>启动6机构成的集群并通过exec进入<br>对6381新增两个key<br>防止路由失效加参数-c并新增两个key<br>查看集群信息<br>容错切换迁移<br>主6381和从机切换，先停止主机6381<br>6381主机停了，对应的真实从机上位<br>6381作为1号主机分配的从机以实际情况为准，具体是几号机器就是几号<br>再次查看集群信息<br>先还原之前的3主3从<br>先启6381<br>docker start redis-node-1<br>再停6385<br>docker stop redis-node-5<br>再启6385<br>docker start redis-node-5<br>主从机器分配情况以实际情况为准<br>查看集群状态<br>redis-cli –cluster check 自己IP:6381<br>主从扩容案例<br>新建6387、6388两个节点+新建后启动+查看是否8节点<br>进入6387容器实例内部<br>docker exec -it redis-node-7 &#x2F;bin&#x2F;bash<br>将新增的6387节点(空槽号)作为master节点加入原集群<br>检查集群情况第1次<br>重新分派槽号<br>检查集群情况第2次<br>槽号分派说明<br>为主节点6387分配从节点6388<br>检查集群情况第3次<br>主从缩容案例<br>目的：6387和6388下线<br>检查集群情况1获得6388的节点ID<br>将6388删除 从集群中将4号从节点6388删除<br>将6387的槽号清空，重新分配，本例将清出来的槽号都给6381<br>检查集群情况第二次<br>将6387删除<br>检查集群情况第三次</p>
<h1 id="2-DockerFile解析"><a href="#2-DockerFile解析" class="headerlink" title="2 DockerFile解析"></a>2 DockerFile解析</h1><h2 id="2-1-是什么"><a href="#2-1-是什么" class="headerlink" title="2.1 是什么"></a>2.1 是什么</h2><p>Dockerfile是用来构建Docker镜像的文本文件，是由一条条构建镜像所需的指令和参数构成的脚本。<br><strong>概述</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660012864805-18937b87-0167-4c81-9d75-f485a61c5304.png#averageHue=%23e7e7e7&clientId=uecdeb63f-2bb2-4&from=paste&height=588&id=ub7136e0c&originHeight=588&originWidth=714&originalType=binary&ratio=1&rotation=0&showTitle=false&size=266947&status=done&style=none&taskId=u3f94e7d3-6f6d-4dcb-aacc-e6bcf371714&title=&width=714" alt="image.png"><br><strong>官网</strong><br><a href="https://docs.docker.com/engine/reference/builder/">https://docs.docker.com/engine/reference/builder/</a><br><strong>构建三步骤</strong></p>
<ol>
<li>编写Dockerfile文件</li>
<li>docker build 命令构建镜像</li>
<li>docker run 镜像 运行容器实例</li>
</ol>
<h2 id="2-2-DockerFile构建过程解析"><a href="#2-2-DockerFile构建过程解析" class="headerlink" title="2.2 DockerFile构建过程解析"></a>2.2 DockerFile构建过程解析</h2><h3 id="2-2-1-Dockerfile内容基础知识"><a href="#2-2-1-Dockerfile内容基础知识" class="headerlink" title="2.2.1 Dockerfile内容基础知识"></a>2.2.1 Dockerfile内容基础知识</h3><ol>
<li>每条保留字指令都必须为大写字母且后面要跟随至少一个参数</li>
<li>指令按照从上到下，顺序执行</li>
<li>#表示注释</li>
<li>每条指令都会创建一个新的镜像层并对镜像进行提交</li>
</ol>
<h3 id="2-2-2-Docker执行Dockerfile的大致流程"><a href="#2-2-2-Docker执行Dockerfile的大致流程" class="headerlink" title="2.2.2 Docker执行Dockerfile的大致流程"></a>2.2.2 Docker执行Dockerfile的大致流程</h3><ol>
<li>docker从基础镜像运行一个容器</li>
<li>执行一条指令并对容器作出修改</li>
<li>执行类似docker commit的操作提交一个新的镜像层</li>
<li>docker再基于刚提交的镜像运行一个新容器</li>
<li>执行dockerfile中的下一条指令直到所有指令都执行完成</li>
</ol>
<h3 id="2-2-3-小总结"><a href="#2-2-3-小总结" class="headerlink" title="2.2.3 小总结"></a>2.2.3 小总结</h3><p>:::info<br>从应用软件的角度来看，Dockerfile、Docker镜像与Docker容器分别代表软件的三个不同阶段，</p>
<ul>
<li>Dockerfile是软件的原材料</li>
<li>Docker镜像是软件的交付品</li>
<li>Docker容器则可以认为是软件镜像的运行态，也即依照镜像运行的容器实例</li>
</ul>
<p>Dockerfile面向开发，Docker镜像成为交付标准，Docker容器则涉及部署与运维，三者缺一不可，合力充当Docker体系的基石。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660013094449-a1af09f8-c696-4f09-a5de-6ee1844fb424.png#averageHue=%239dc3e3&clientId=uecdeb63f-2bb2-4&from=paste&height=265&id=ua777348d&originHeight=265&originWidth=622&originalType=binary&ratio=1&rotation=0&showTitle=false&size=87764&status=done&style=none&taskId=udfd725c2-21ca-44f3-9622-71a7a86a049&title=&width=622" alt="image.png"></p>
<ol>
<li>Dockerfile，需要定义一个Dockerfile，Dockerfile定义了进程需要的一切东西。Dockerfile涉及的内容包括执行代码或者是文件、环境变量、依赖包、运行时环境、动态链接库、操作系统的发行版、服务进程和内核进程(当应用进程需要和系统服务和内核进程打交道，这时需要考虑如何设计namespace的权限控制)等等;</li>
<li>Docker镜像，在用Dockerfile定义一个文件之后，docker build时会产生一个Docker镜像，当运行 Docker镜像时会真正开始提供服务;</li>
<li>Docker容器，容器是直接提供服务的。<br>:::</li>
</ol>
<h2 id="2-3-DockerFile常用保留字指令"><a href="#2-3-DockerFile常用保留字指令" class="headerlink" title="2.3 DockerFile常用保留字指令"></a>2.3 DockerFile常用保留字指令</h2><p><strong>参考tomcat8的dockerfile入门</strong><br><a href="https://github.com/docker-library/tomcat">https://github.com/docker-library/tomcat</a><br><strong>FROM</strong><br>基础镜像，当前新镜像是基于哪个镜像的，指定一个已经存在的镜像作为模板，第一条必须是from</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># FROM 镜像名</span></span><br><span class="line">FROM hub.c.<span class="number">163</span>.com/library/tomcat</span><br></pre></td></tr></table></figure>

<p><strong>MAINTAINER</strong><br>镜像维护者的姓名和邮箱地址</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 非必须</span></span><br><span class="line">MAINTAINER ZhangSan zs@<span class="number">163</span>.com</span><br></pre></td></tr></table></figure>

<p><strong>RUN</strong><br>容器构建时需要运行的命令<br>两种格式<br>:::info</p>
<ol>
<li>shell格式</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660013238837-86e640c5-49ef-424a-81d0-bc702f35389b.png#averageHue=%23f4f0f0&clientId=uecdeb63f-2bb2-4&from=paste&height=82&id=FhAfL&originHeight=82&originWidth=487&originalType=binary&ratio=1&rotation=0&showTitle=false&size=2900&status=done&style=none&taskId=u6b6c7841-417b-4761-a3a3-1ab54d39244&title=&width=487" alt="image.png"><br><code>RUN yum -y install vim</code></p>
<ol start="2">
<li>exec格式</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660013257101-5b63a752-99eb-4678-b2de-a527717ccbcc.png#averageHue=%23f5f3f3&clientId=uecdeb63f-2bb2-4&from=paste&height=108&id=okgom&originHeight=108&originWidth=688&originalType=binary&ratio=1&rotation=0&showTitle=false&size=5642&status=done&style=none&taskId=ube7008f1-7674-4c0a-96e5-e9e2f0262bd&title=&width=688" alt="image.png"><br>:::<br>RUN是在 docker build时运行<br><strong>EXPOSE</strong><br>当前容器对外暴露出的端口</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># EXPOSE 要暴露的端口</span></span><br><span class="line"><span class="comment"># EXPOSE &lt;port&gt;[/&lt;protocol] ....</span></span><br><span class="line">EXPOSE <span class="number">3306</span> <span class="number">33060</span></span><br></pre></td></tr></table></figure>

<p><strong>WORKDIR</strong><br>指定在创建容器后，终端默认登陆的进来工作目录，一个落脚点</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">ENV CATALINA_HOME /usr/local/tomcat</span><br><span class="line">WORKDIR <span class="variable">$CATALINA_HOME</span></span><br></pre></td></tr></table></figure>

<p><strong>USER</strong><br>指定该镜像以什么样的用户去执行，如果都不指定，默认是root</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># USER &lt;user&gt;[:&lt;group&gt;]</span></span><br><span class="line">USER patrick</span><br></pre></td></tr></table></figure>

<p><strong>ENV</strong><br>用来在构建镜像过程中设置环境变量<br>:::info</p>
<h1 id="格式-ENV-环境变量名-环境变量值"><a href="#格式-ENV-环境变量名-环境变量值" class="headerlink" title="格式 ENV 环境变量名 环境变量值"></a>格式 ENV 环境变量名 环境变量值</h1><h1 id="或者-ENV-环境变量名-值"><a href="#或者-ENV-环境变量名-值" class="headerlink" title="或者 ENV 环境变量名&#x3D;值"></a>或者 ENV 环境变量名&#x3D;值</h1><p><code>ENV MY_PATH /usr/mytest</code><br>这个环境变量可以在后续的任何RUN指令中使用，这就如同在命令前面指定了环境变量前缀一样；<br>也可以在其它指令中直接使用这些环境变量。<br>比如：<code>WORKDIR $MY_PATH</code><br>:::<br><strong>ADD</strong><br>将宿主机目录下的文件拷贝进镜像且会自动处理URL和解压tar压缩包<br><strong>COPY</strong><br>类似ADD，拷贝文件和目录到镜像中。<br>将从构建上下文目录中 &lt;源路径&gt; 的文件&#x2F;目录复制到新的一层的镜像内的 &lt;目标路径&gt; 位置<br>:::info<br><code>COPY src dest</code><br><code>COPY [&quot;src&quot;, &quot;dest&quot;]</code><br>&lt;src源路径&gt;：源文件或者源目录<br>&lt;dest目标路径&gt;：容器内的指定路径，该路径不用事先建好，路径不存在的话，会自动创建。<br>:::<br><strong>VOLUME</strong><br>容器数据卷，用于数据保存和持久化工作.类似于 <code>docker run</code> 的<code>-v</code>参数。</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># VOLUME 挂载点</span></span><br><span class="line"><span class="comment"># 挂载点可以是一个路径，也可以是数组（数组中的每一项必须用双引号）</span></span><br><span class="line">VOLUME /var/lib/mysql</span><br></pre></td></tr></table></figure>

<p><strong>CMD</strong></p>
<p>指定容器启动后要干的事情。<br>有两种格式：</p>
<ul>
<li>shell格式</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CMD &lt;命令&gt;</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;hello world&quot;</span></span></span><br></pre></td></tr></table></figure>


<ul>
<li>exec格式</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CMD [&quot;可执行文件&quot;, &quot;参数1&quot;, &quot;参数2&quot; ...]</span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;catalina.sh&quot;</span>, <span class="string">&quot;run&quot;</span>]</span></span><br></pre></td></tr></table></figure>


<ul>
<li>参数列表格式</li>
</ul>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># CMD [&quot;参数1&quot;, &quot;参数2&quot; ....]，与ENTRYPOINT指令配合使用</span></span><br></pre></td></tr></table></figure>

<p>Dockerfile中如果出现多个<code>CMD</code>指令，只有最后一个生效。<code>CMD</code>会被<code>docker run</code>之后的参数替换。</p>
<p>例如，对于tomcat镜像，执行以下命令会有不同的效果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">因为tomcat的Dockerfile中指定了 CMD [<span class="string">&quot;catalina.sh&quot;</span>, <span class="string">&quot;run&quot;</span>]</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">所以直接docker run 时，容器启动后会自动执行 catalina.sh run</span></span><br><span class="line">docker run -it -p 8080:8080 tomcat</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定容器启动后执行 /bin/bash</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此时指定的/bin/bash会覆盖掉Dockerfile中指定的 CMD [<span class="string">&quot;catalina.sh&quot;</span>, <span class="string">&quot;run&quot;</span>]</span></span><br><span class="line">docker run -it -p 8080:8080 tomcat /bin/bash</span><br></pre></td></tr></table></figure>

<p><code>CMD</code>是在<code>docker run</code>时运行，而 <code>RUN</code>是在<code>docker build</code>时运行。</p>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><p><strong>ENTRYPOINT</strong><br>用来指定一个容器启动时要运行的命令。</p>
<p>类似于<code>CMD</code>命令，但是<code>ENTRYPOINT</code>不会被<code>docker run</code>后面的命令覆盖，这些命令参数会被当做参数送给<code>ENTRYPOINT</code>指令指定的程序。</p>
<p><code>ENTRYPOINT</code>可以和<code>CMD</code>一起用，一般是可变参数才会使用<code>CMD</code>，这里的<code>CMD</code>等于是在给<code>ENTRYPOINT</code>传参。</p>
<p>当指定了<code>ENTRYPOINT</code>后，<code>CMD</code>的含义就发生了变化，不再是直接运行期命令，而是将<code>CMD</code>的内容作为参数传递给<code>ENTRYPOINT</code>指令，它们两个组合会变成 <code>&lt;ENTRYPOINT&gt; &quot;&lt;CMD&gt;&quot;</code>。</p>
<p>例如：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> nginx</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="language-bash"> [<span class="string">&quot;nginx&quot;</span>, <span class="string">&quot;-c&quot;</span>]  <span class="comment"># 定参</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> [<span class="string">&quot;/etc/nginx/nginx.conf&quot;</span>] <span class="comment"># 变参</span></span></span><br></pre></td></tr></table></figure>

<p>:::info<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660013973533-8d49c0c9-0ea4-45a0-b2e3-14d3f28a33a0.png#averageHue=%23f1eeec&clientId=uecdeb63f-2bb2-4&from=paste&height=149&id=aAeFw&originHeight=149&originWidth=584&originalType=binary&ratio=1&rotation=0&showTitle=false&size=52126&status=done&style=none&taskId=u29df7d1a-03e1-410c-bab9-36983e741d8&title=&width=584" alt="image.png"><br>:::<br>对于此Dockerfile，构建成镜像 <code>nginx:test</code>后，如果执行；</p>
<ul>
<li><code>docker run nginx test</code>，则容器启动后，会执行 <code>nginx -c /etc/nginx/nginx.conf</code></li>
<li><code>docker run nginx:test /app/nginx/new.conf</code>，则容器启动后，会执行 <code>nginx -c /app/nginx/new.conf</code></li>
</ul>
<p>优点：在执行docker run的时候可以指定 ENTRYPOINT 运行所需的参数。<br>注意：如果 Dockerfile 中如果存在多个 ENTRYPOINT 指令，仅最后一个生效。</p>
<p><strong>扩展指令</strong></p>
<p>**ARG:**设置变量，在镜像中定义一个变量，当使用 docker build 命令构建镜像时，带上 –build-arg <name>&#x3D;<value> 来指定参数值，如果该变量名在 Dockerfile 中不存在则会抛出一个警告<br>语法：<br>ARG <name>[&#x3D;<default value>]</p>
<p><strong>ONBUILD</strong>:表示在构建镜像时做某操作，不过不对当前 Dockerfile 的镜像生效，而是对以当前 Dockerfile 镜像作为基础镜像的子镜像生效</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line">语法：</span><br><span class="line"><span class="keyword">ONBUILD</span> [INSTRUCTION]</span><br><span class="line"></span><br><span class="line">例：</span><br><span class="line">当前镜像为 A，设置了如下指令 </span><br><span class="line"><span class="keyword">ONBUILD</span> <span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">ls</span> -al</span></span><br><span class="line"></span><br><span class="line">镜像 B：</span><br><span class="line"><span class="keyword">FROM</span> 镜像A</span><br></pre></td></tr></table></figure>

<p><strong>小总结</strong><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660013999567-eea06f1d-f9ac-425e-a851-c5dda92b5ce5.png#averageHue=%23101010&clientId=uecdeb63f-2bb2-4&from=paste&height=465&id=ub146be77&originHeight=465&originWidth=676&originalType=binary&ratio=1&rotation=0&showTitle=false&size=59099&status=done&style=none&taskId=ufa6f83e7-cad6-45cf-aecc-10067ecea96&title=&width=676" alt="image.png"></p>
<h2 id="-1"><a href="#-1" class="headerlink" title=""></a></h2><h1 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h1><p>创建名称为<code>Dockerfile</code>的文件，示例：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"></span><br><span class="line"><span class="comment"># 描述镜像的作者，及联系方式（可选）</span></span><br><span class="line"><span class="keyword">MAINTAINER</span> lee&lt;lee@xxx.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 镜像的标签信息（可选）</span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> version=<span class="string">&quot;1.0&quot;</span></span></span><br><span class="line"><span class="keyword">LABEL</span><span class="language-bash"> description=<span class="string">&quot;这是我的Dockerfile&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install net-tools</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;install ifconfig cmd into ubuntu success .....&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> /bin/bash</span></span><br></pre></td></tr></table></figure>

<p>编写完成之后，将其构建成docker镜像。<br>命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">注意：定义的TAG后面有个空格，空格后面有个点</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker build -t 新镜像名字:TAG .</span></span><br><span class="line">docker build -t ubuntu:1.0.1 .</span><br></pre></td></tr></table></figure>

<h3 id="springboot项目镜像构建"><a href="#springboot项目镜像构建" class="headerlink" title="springboot项目镜像构建"></a>springboot项目镜像构建</h3><figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> opnejdk:<span class="number">8</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="虚悬镜像"><a href="#虚悬镜像" class="headerlink" title="虚悬镜像"></a>虚悬镜像</h1><p>虚悬镜像：仓库名、标签名都是 <code>&lt;none&gt;</code>的镜像，称为 dangling images（虚悬镜像）。<br>在构建或者删除镜像时可能由于一些错误导致出现虚悬镜像。</p>
<p>例如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">构建时候没有镜像名、tag</span></span><br><span class="line">docker build .</span><br></pre></td></tr></table></figure>

<p>列出docker中的虚悬镜像：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker image ls -f dangling=true</span><br></pre></td></tr></table></figure>

<p>虚悬镜像一般是因为一些错误而出现的，没有存在价值，可以删除：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 删除所有的虚悬镜像</span></span><br><span class="line">docker image prune</span><br></pre></td></tr></table></figure>

<h2 id="2-4-案例"><a href="#2-4-案例" class="headerlink" title="2.4 案例"></a>2.4 案例</h2><h3 id="2-4-1-自定义镜像mycentosjava8"><a href="#2-4-1-自定义镜像mycentosjava8" class="headerlink" title="2.4.1 自定义镜像mycentosjava8"></a>2.4.1 自定义镜像mycentosjava8</h3><p><strong>要求</strong><br>Centos7镜像具备vim+ifconfig+jdk8<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660014531015-748a0daa-758a-44ea-9496-34d5e34810e0.png#clientId=uecdeb63f-2bb2-4&from=paste&height=227&id=u341e5a6e&originHeight=227&originWidth=877&originalType=binary&ratio=1&rotation=0&showTitle=false&size=30417&status=done&style=none&taskId=u8a4e5af5-4c8c-4f5f-a648-ce53094414e&title=&width=877" alt="image.png"><br>JDK的下载镜像地址：<a href="https://www.oracle.com/java/technologies/downloads/#java8">https://www.oracle.com/java/technologies/downloads/#java8</a><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660014469696-1c74ba76-2119-4031-8337-4ab9880aec14.png#clientId=uecdeb63f-2bb2-4&from=paste&height=422&id=uf7fbc99a&originHeight=422&originWidth=1225&originalType=binary&ratio=1&rotation=0&showTitle=false&size=68048&status=done&style=none&taskId=u48ea17e9-0d97-4143-90e3-e282cabe913&title=&width=1225" alt="image.png"><br><a href="https://mirrors.yangxingzhen.com/jdk/">https://mirrors.yangxingzhen.com/jdk/</a><br><strong>编写</strong><br>准备编写Dockerfile文件</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> centos</span><br><span class="line"><span class="keyword">MAINTAINER</span> zzyy&lt;zzyybs@<span class="number">126</span>.com&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">#安装vim编辑器</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum -y install vim</span></span><br><span class="line"><span class="comment">#安装ifconfig命令查看网络IP</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum -y install net-tools</span></span><br><span class="line"><span class="comment">#安装java8及lib库</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> yum -y install glibc.i686</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> <span class="built_in">mkdir</span> /usr/local/java</span></span><br><span class="line"><span class="comment">#ADD 是相对路径jar,把jdk-8u171-linux-x64.tar.gz添加到容器中,安装包必须要和Dockerfile文件在同一位置</span></span><br><span class="line"><span class="keyword">ADD</span><span class="language-bash"> jdk-8u171-linux-x64.tar.gz /usr/local/java/</span></span><br><span class="line"><span class="comment">#配置java环境变量</span></span><br><span class="line"><span class="keyword">ENV</span> JAVA_HOME /usr/local/java/jdk1.<span class="number">8.0</span>_171</span><br><span class="line"><span class="keyword">ENV</span> JRE_HOME $JAVA_HOME/jre</span><br><span class="line"><span class="keyword">ENV</span> CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line"><span class="keyword">ENV</span> PATH $JAVA_HOME/bin:$PATH</span><br><span class="line"></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;success--------------ok&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> /bin/bash</span></span><br></pre></td></tr></table></figure>

<p>大写字母D<br><strong>构建</strong><br>docker build -t 新镜像名字:TAG .<br><code>docker build -t centosjava8:1.5 .</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660014597535-9bd29a0a-3a5e-4e51-bad4-df136dd6c0fd.png#clientId=uecdeb63f-2bb2-4&from=paste&height=470&id=u5e9ac419&originHeight=470&originWidth=655&originalType=binary&ratio=1&rotation=0&showTitle=false&size=85342&status=done&style=none&taskId=ua5070006-02f9-44aa-a7a8-0126e1cbc23&title=&width=655" alt="image.png"><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660014603485-ae9f7bae-798e-4538-9a35-05ddd6226cc5.png#clientId=uecdeb63f-2bb2-4&from=paste&height=425&id=ud57137f0&originHeight=425&originWidth=577&originalType=binary&ratio=1&rotation=0&showTitle=false&size=78362&status=done&style=none&taskId=u70d2d325-7a65-4acd-ba8d-13f877bdfa5&title=&width=577" alt="image.png"><br>注意，上面TAG后面有个空格，有个点<br><strong>运行</strong><br>docker run -it 新镜像名字:TAG<br><code>docker run -it centosjava8:1.5 /bin/bash</code><br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660014631293-415ef8b0-d5c7-4107-9c47-19b58f568931.png#clientId=uecdeb63f-2bb2-4&from=paste&height=492&id=ueb67b89d&originHeight=492&originWidth=886&originalType=binary&ratio=1&rotation=0&showTitle=false&size=110766&status=done&style=none&taskId=u26412c08-2aa5-43cf-8a67-301b22b25e6&title=&width=886" alt="image.png"><br><strong>再体会下UnionFS（联合文件系统）</strong><br>:::info<br>UnionFS（联合文件系统）：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660014653132-0f14d9d0-133d-436f-93ec-4a4dc6625ff4.png#clientId=uecdeb63f-2bb2-4&from=paste&height=314&id=u96a71337&originHeight=314&originWidth=526&originalType=binary&ratio=1&rotation=0&showTitle=false&size=246350&status=done&style=none&taskId=u68db3563-c336-43f5-81c3-e7832477f3c&title=&width=526" alt="image.png"><br>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录<br>:::</p>
<h3 id="2-4-2-虚悬镜像"><a href="#2-4-2-虚悬镜像" class="headerlink" title="2.4.2 虚悬镜像"></a>2.4.2 虚悬镜像</h3><p><strong>是什么</strong><br>仓库名、标签都是<none>的镜像，俗称dangling image<br>Dockerfile写一个</p>
<ol>
<li><code>vim Dockerfile</code></li>
</ol>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ubuntu</span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&#x27;action is success&#x27;</span></span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><code>docker build .</code></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660014736138-8bb82a47-f06e-458d-b445-24077db9bdcd.png#averageHue=%23fef4f4&clientId=uecdeb63f-2bb2-4&from=paste&height=88&id=u4e7f17d5&originHeight=88&originWidth=932&originalType=binary&ratio=1&rotation=0&showTitle=false&size=20888&status=done&style=none&taskId=uce7fde95-9177-4fc0-a268-99ab383229d&title=&width=932" alt="image.png"><br><strong>查看</strong><br><code>docker image ls -f dangling=true</code><br>命令结果<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660014743652-1ed51439-61d8-4641-b75d-529e8bc74eb6.png#averageHue=%23fdf0f0&clientId=uecdeb63f-2bb2-4&from=paste&height=105&id=u1b06cae5&originHeight=105&originWidth=775&originalType=binary&ratio=1&rotation=0&showTitle=false&size=18879&status=done&style=none&taskId=u970b039b-ea17-48cf-80be-c5e081c1d64&title=&width=775" alt="image.png"><br><strong>删除</strong><br><code>docker image prune</code><br>虚悬镜像已经失去存在价值，可以删除<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660014763642-61295eb3-d313-4f8b-873c-ca674dff3b4d.png#averageHue=%23fef9f9&clientId=uecdeb63f-2bb2-4&from=paste&height=308&id=u6ec8ee00&originHeight=308&originWidth=886&originalType=binary&ratio=1&rotation=0&showTitle=false&size=59960&status=done&style=none&taskId=u6c8cf1f1-4acd-4476-92ef-6d896cf258f&title=&width=886" alt="image.png"></p>
<h3 id="2-4-3-家庭作业-自定义镜像myubuntu"><a href="#2-4-3-家庭作业-自定义镜像myubuntu" class="headerlink" title="2.4.3 家庭作业-自定义镜像myubuntu"></a>2.4.3 家庭作业-自定义镜像myubuntu</h3><p><strong>编写</strong><br>准备编写DockerFile文件<br><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660014788578-6dfe4fa8-d48d-402a-8c88-0ec91503aa7a.png#averageHue=%23f3e6e6&clientId=uecdeb63f-2bb2-4&from=paste&height=98&id=ua61d1e8a&originHeight=98&originWidth=533&originalType=binary&ratio=1&rotation=0&showTitle=false&size=7916&status=done&style=none&taskId=u9c7619e0-f815-4480-9c47-7a19dcce72b&title=&width=533" alt="image.png"></p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> ubuntu</span><br><span class="line"><span class="keyword">MAINTAINER</span> zzyy&lt;zzyybs@<span class="number">126</span>.com&gt;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">ENV</span> MYPATH /usr/local</span><br><span class="line"><span class="keyword">WORKDIR</span><span class="language-bash"> <span class="variable">$MYPATH</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get update</span></span><br><span class="line"><span class="keyword">RUN</span><span class="language-bash"> apt-get install net-tools</span></span><br><span class="line"><span class="comment">#RUN apt-get install -y iproute2</span></span><br><span class="line"><span class="comment">#RUN apt-get install -y inetutils-ping</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">80</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="variable">$MYPATH</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> <span class="built_in">echo</span> <span class="string">&quot;install inconfig cmd into ubuntu success--------------ok&quot;</span></span></span><br><span class="line"><span class="keyword">CMD</span><span class="language-bash"> /bin/bash</span></span><br></pre></td></tr></table></figure>

<p><strong>构建</strong><br><code>docker build -t 新镜像名字:TAG .</code><br><strong>运行</strong><br><code>docker run -it 新镜像名字:TAG</code></p>
<h2 id="2-5-小总结"><a href="#2-5-小总结" class="headerlink" title="2.5 小总结"></a>2.5 小总结</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1660014827592-6677a045-601e-40ae-b864-752c300a67ec.png#averageHue=%23e7e7e7&clientId=uecdeb63f-2bb2-4&from=paste&height=588&id=u1e55d397&originHeight=588&originWidth=714&originalType=binary&ratio=1&rotation=0&showTitle=false&size=266947&status=done&style=none&taskId=u6d063671-b38d-4182-8539-5221cfed4f1&title=&width=714" alt="image.png"></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>node_模块化导入</title>
    <url>/2024/09/19/node-%E6%A8%A1%E5%9D%97%E5%8C%96%E5%AF%BC%E5%85%A5/</url>
    <content><![CDATA[<h3 id="特殊的全局对象"><a href="#特殊的全局对象" class="headerlink" title="特殊的全局对象"></a><strong><font style="color:#404040;">特殊的全局对象</font></strong></h3><ul>
<li><font style="color:#404040;">__dirname：获取</font><font style="color:red;">当前文件所在的路径</font><font style="color:#404040;">：</font><ul>
<li><font style="color:#404040;">注意：不包括后面的文件名</font></li>
</ul>
</li>
<li><font style="color:#404040;">__filename：获取</font><font style="color:red;">当前文件所在的路径和文件名称</font><font style="color:#404040;">：</font><ul>
<li><font style="color:#404040;">注意：包括后面的文件名称</font></li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688474985339-9122a722-5571-4525-b5cb-81814c4bde05.png"></li>
</ul>
</li>
</ul>
<h3 id="模块化导入导出"><a href="#模块化导入导出" class="headerlink" title="模块化导入导出"></a>模块化导入导出</h3><ul>
<li><font style="color:red;">exports和module.exports</font><font style="color:#404040;">可以负责</font><font style="color:red;">对模块中的内容进行导出</font><font style="color:#404040;">；</font></li>
<li><font style="color:red;">require函数</font><font style="color:#404040;">可以帮助我们</font><font style="color:red;">导入其他模块（自定义模块、系统模块、第三方库模块）中的内容</font><font style="color:#404040;">；</font></li>
</ul>
<h3 id="exports导出"><a href="#exports导出" class="headerlink" title="exports导出"></a><strong><font style="color:#404040;">exports导出</font></strong></h3><ul>
<li><font style="color:#404040;">注意：exports是一个对象，我们可以在这个对象中添加很多个属性，添加的属性会导出；</font><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688475238136-de9cccc5-b9a2-4e31-9e03-6f2b02089387.png"></li>
<li><font style="color:#404040;">另外一个文件中可以导入：</font></li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688475245553-450c6339-f4a4-48f5-ba74-dc40c43273de.png"></li>
<li><font style="color:#404040;">上面这行完成了什么操作呢？理解下面这句话，Node中的模块化一目了然</font><ul>
<li><font style="color:#404040;">意味着main中的</font><font style="color:red;">bar变量等于exports对象</font><font style="color:#404040;">；</font></li>
<li><font style="color:#404040;">也就是require通过各种查找方式，最终找到了exports这个对象；</font></li>
<li><font style="color:#404040;">并且将这个</font><font style="color:red;">exports对象赋值给了bar变量</font><font style="color:#404040;">；</font></li>
<li><font style="color:red;">bar变量就是exports对象</font><font style="color:#404040;">了；</font></li>
</ul>
</li>
</ul>
<h3 id="module-exports导出"><a href="#module-exports导出" class="headerlink" title="module.exports导出"></a><strong><font style="color:#404040;">module.exports导出</font></strong></h3><ul>
<li><font style="color:#404040;">但是Node中我们经常导出东西的时候，又是通过module.exports导出的：</font><ul>
<li><font style="color:red;">module.exports和exports有什么关系或者区别呢？</font></li>
</ul>
</li>
<li><font style="color:#404040;">我们追根溯源，通过维基百科中对CommonJS规范的解析：</font><ul>
<li><font style="color:#404040;">CommonJS中是没有</font><font style="color:red;">module.exports</font><font style="color:#404040;">的概念的；</font></li>
<li><font style="color:#404040;">但是为了实现模块的导出，Node中使用的是</font><font style="color:red;">Module的类</font><font style="color:#404040;">，</font><font style="color:red;">每一个模块都是Module的一个实例，也就是module</font><font style="color:#404040;">；</font></li>
<li><font style="color:#404040;">所以在Node中真正用于导出的其实</font><font style="color:red;">根本不是exports</font><font style="color:#404040;">，而是</font><font style="color:red;">module.exports</font><font style="color:#404040;">；</font></li>
<li><font style="color:#404040;">因为</font><font style="color:red;">module才是导出的真正实现者</font><font style="color:#404040;">；</font></li>
</ul>
</li>
<li><font style="color:#404040;">但是，为什么exports也可以导出呢？</font><ul>
<li><font style="color:#404040;">这是因为</font><font style="color:red;">module对象的exports属性是exports对象的一个引用</font><font style="color:#404040;">；</font></li>
<li><font style="color:#404040;">也就是说 </font><font style="color:red;">module.exports &#x3D; exports &#x3D; main中的bar</font><font style="color:#404040;">；</font></li>
</ul>
</li>
</ul>
<h3 id="require细节"><a href="#require细节" class="headerlink" title="require细节"></a><strong><font style="color:#404040;">require细节</font></strong></h3><ul>
<li><font style="color:#404040;">我们现在已经知道，</font><font style="color:red;">require是一个函数</font><font style="color:#404040;">，可以帮助我们引入一个文件（模块）中导出的对象。</font></li>
<li><font style="color:#404040;">那么，require的查找规则是怎么样的呢？</font><ul>
<li><font style="color:#404040;">这里我总结比较常见的查找规则：</font></li>
<li><font style="color:#404040;">导入格式如下：require(X)</font></li>
</ul>
</li>
<li><font style="color:#404040;">情况一：X是一个Node核心模块，比如path、http</font><ul>
<li><font style="color:#404040;">直接返回核心模块，并且停止查找</font></li>
</ul>
</li>
<li><font style="color:#404040;">情况二：X是以 .&#x2F; 或 ..&#x2F; 或 &#x2F;（根目录）开头的</font><ul>
<li><font style="color:red;">第一步：将X当做一个文件在对应的目录下查找；</font><ul>
<li><font style="color:#404040;">1.如果有后缀名，按照后缀名的格式查找对应的文件</font></li>
<li><font style="color:#404040;">2.如果没有后缀名，会按照如下顺序：</font><ul>
<li><font style="color:#404040;">1&gt; 直接查找文件X</font></li>
<li><font style="color:#404040;">2&gt; 查找X.js文件</font></li>
<li><font style="color:#404040;">3&gt; 查找X.json文件</font></li>
<li><font style="color:#404040;">4&gt; 查找X.node文件</font></li>
</ul>
</li>
</ul>
</li>
<li><font style="color:red;">第二步：没有找到对应的文件，将X作为一个目录</font><ul>
<li><font style="color:#404040;">查找目录下面的index文件</font><ul>
<li><font style="color:#404040;">1&gt; 查找X&#x2F;index.js文件</font></li>
<li><font style="color:#404040;">2&gt; 查找X&#x2F;index.json文件</font></li>
<li><font style="color:#404040;">3&gt; 查找X&#x2F;index.node文件</font></li>
</ul>
</li>
<li><font style="color:red;">如果没有找到，那么报错：not found</font></li>
</ul>
</li>
</ul>
</li>
<li><font style="color:#404040;">情况三：直接是一个X（没有路径），并且X不是一个核心模块</font><ul>
<li><font style="color:#404040;">&#x2F;Users&#x2F;coderwhy&#x2F;Desktop&#x2F;Node&#x2F;TestCode&#x2F;04_learn_node&#x2F;05_javascript-module&#x2F;02_commonjs&#x2F;main.js中编写 require(‘why’)</font></li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688476624218-6d54db57-fdda-42dc-a378-dac15b760173.png"></p>
<pre><code>- &lt;font style=&quot;color:#404040;&quot;&gt;如果上面的路径中都没有找到，那么报错：not found&lt;/font&gt;
</code></pre>
<h3 id="模块的加载过程"><a href="#模块的加载过程" class="headerlink" title="模块的加载过程"></a><strong><font style="color:#404040;">模块的加载过程</font></strong></h3><ul>
<li><font style="color:#404040;">结论一：模块在被第一次引入时，模块中的js代码会被运行一次</font></li>
<li><font style="color:#404040;">结论二：模块被多次引入时，会缓存，最终只加载（运行）一次</font><ul>
<li><font style="color:#404040;">为什么只会加载运行一次呢？</font></li>
<li><font style="color:#404040;">这是因为每个模块对象module都有一个属性：loaded。</font></li>
<li><font style="color:#404040;">为false表示还没有加载，为true表示已经加载；</font></li>
</ul>
</li>
<li><font style="color:#404040;">结论三：如果有循环引入，那么加载顺序是什么？</font></li>
<li><font style="color:#404040;">如果出现右图模块的引用关系，那么加载顺序是什么呢？</font><ul>
<li><font style="color:#404040;">这个其实是一种数据结构：图结构；</font></li>
<li><font style="color:#404040;">图结构在遍历的过程中，有深度优先搜索（DFS, depth first search）和广度优先搜索（BFS, breadth first search）；</font></li>
<li><font style="color:#404040;">Node采用的是深度优先算法：main -&gt; aaa -&gt; ccc -&gt; ddd -&gt; eee -&gt;bbb</font></li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688476734423-b52f0ba6-9746-4476-b081-60b485e78cb1.png"></p>
<h3 id="ESModule-exports关键字"><a href="#ESModule-exports关键字" class="headerlink" title="ESModule-exports关键字"></a><strong><font style="color:#404040;">ESModule-exports关键字</font></strong></h3><ul>
<li><font style="color:#404040;">export关键字将一个模块中的变量、函数、类等导出；</font></li>
<li><font style="color:#404040;">我们希望将其他中内容全部导出，它可以有如下的方式：</font></li>
<li><font style="color:red;">方式一</font><font style="color:#404040;">：在语句声明的前面直接加上export关键字</font></li>
<li><font style="color:red;">方式二</font><font style="color:#404040;">：将所有需要导出的标识符，放到export后面的 {}中</font><ul>
<li><font style="color:#404040;">注意：这里的 {}里面不是ES6的对象字面量的增强写法，{}也不是表示一个对象的；</font></li>
<li><font style="color:#404040;">所以： export {name: name}，是错误的写法；</font></li>
</ul>
</li>
<li><font style="color:red;">方式三</font><font style="color:#404040;">：导出时给标识符起一个别名</font><ul>
<li><font style="color:#404040;">通过as关键字起别名</font></li>
</ul>
</li>
</ul>
<h3 id="ESModule-import关键字"><a href="#ESModule-import关键字" class="headerlink" title="ESModule-import关键字"></a><strong><font style="color:#404040;">ESModule-import关键字</font></strong></h3><ul>
<li><font style="color:#404040;">import关键字负责从另外一个模块中导入内容</font></li>
<li><font style="color:#404040;">导入内容的方式也有多种：</font></li>
<li><font style="color:red;">方式一</font><font style="color:#404040;">：import {标识符列表} from ‘模块’；</font><ul>
<li><font style="color:#404040;">注意：这里的{}也不是一个对象，里面只是存放导入的标识符列表内容；</font></li>
</ul>
</li>
<li><font style="color:red;">方式二</font><font style="color:#404040;">：导入时给标识符起别名</font><ul>
<li><font style="color:#404040;">通过as关键字起别名</font></li>
</ul>
</li>
<li><font style="color:red;">方式三</font><font style="color:#404040;">：通过 * 将模块功能放到一个模块功能对象（a module object）上</font></li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 注意事项一: 在浏览器中直接使用esmodule时, 必须在文件后加上后缀名.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; name, age, sayHello &#125; <span class="keyword">from</span> <span class="string">&quot;./foo.js&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.导入方式一: </span></span><br><span class="line"><span class="comment">// import &#123; name, age, sayHello &#125; from &quot;./foo.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.导入方式二: 导入时给标识符起别名</span></span><br><span class="line"><span class="comment">// import &#123; name as fname, age, sayHello &#125; from &quot;./foo.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.导入时可以给整个模块起别名</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> foo <span class="keyword">from</span> <span class="string">&quot;./foo.js&quot;</span></span><br></pre></td></tr></table></figure>

<h3 id="ESModule-export和import结合使用"><a href="#ESModule-export和import结合使用" class="headerlink" title="ESModule-export和import结合使用"></a><strong><font style="color:#404040;">ESModule-export和import结合使用</font></strong></h3><ul>
<li><font style="color:#404040;">补充：export和import可以结合使用</font></li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688477036896-8528bec8-5ce9-4961-bc16-2aa33b40c8f9.png"></p>
<ul>
<li><font style="color:#404040;">为什么要这样做呢？</font><ul>
<li><font style="color:#404040;">在开发和封装一个功能库时，通常我们希望将暴露的所有接口放到一个文件中；</font></li>
<li><font style="color:#404040;">这样方便指定统一的接口规范，也方便阅读；</font></li>
<li><font style="color:#404040;">这个时候，我们就可以使用export和import结合使用；</font></li>
</ul>
</li>
</ul>
<h3 id="ESModule-default用法"><a href="#ESModule-default用法" class="headerlink" title="ESModule-default用法"></a><strong><font style="color:#404040;">ESModule-default用法</font></strong></h3><ul>
<li><font style="color:#404040;">前面我们学习的导出功能都是</font><font style="color:red;">有名字的导出（named exports）</font><font style="color:#404040;">：</font><ul>
<li><font style="color:#404040;">在导出export时指定了名字；</font></li>
<li><font style="color:#404040;">在导入import时需要知道具体的名字；</font></li>
</ul>
</li>
<li><font style="color:#404040;">还有一种导出叫做</font><font style="color:red;">默认导出（default export）</font><ul>
<li><font style="color:#404040;">默认导出export时可以</font><font style="color:red;">不需要指定名字</font><font style="color:#404040;">；</font></li>
<li><font style="color:#404040;">在</font><font style="color:red;">导入时不需要使用 {}</font><font style="color:#404040;">，并且</font><font style="color:red;">可以自己来指定名字</font><font style="color:#404040;">；</font></li>
<li><font style="color:#404040;">它也方便我们和现有的CommonJS等规范相互操作；</font></li>
</ul>
</li>
<li><font style="color:#404040;">注意：在一个模块中，</font><font style="color:red;">只能有一个默认导出</font><font style="color:#404040;">（default export）；</font></li>
</ul>
<p><font style="color:#404040;">a.js</font></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> [<span class="string">&quot;新歌词&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">&quot;./a.js&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">a</span>())<span class="comment">// [&quot;新歌词&quot;]</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>前端工程化基础</category>
      </categories>
      <tags>
        <tag>前端工程化基础</tag>
      </tags>
  </entry>
  <entry>
    <title>spring_2</title>
    <url>/2024/04/21/spring-2/</url>
    <content><![CDATA[<h2 id="今日目标"><a href="#今日目标" class="headerlink" title="今日目标"></a>今日目标</h2><ul>
<li><input disabled="" type="checkbox"> 能够掌握注解开发定义Bean对象</li>
<li><input disabled="" type="checkbox"> 能够掌握纯注解开发模式</li>
<li><input disabled="" type="checkbox"> 能够配置注解开发依赖注入</li>
<li><input disabled="" type="checkbox"> 能够配置注解开发管理第三方Bean</li>
<li><input disabled="" type="checkbox"> 能够配置注解开发为第三方Bean注入资源</li>
<li><input disabled="" type="checkbox"> 能够使用Spring整合Mybatis</li>
<li><input disabled="" type="checkbox"> 能够使用Spring整合Junit</li>
</ul>
<h2 id="一、第三方资源配置管理"><a href="#一、第三方资源配置管理" class="headerlink" title="一、第三方资源配置管理"></a>一、第三方资源配置管理</h2><blockquote>
<p>说明：以管理DataSource连接池对象为例讲解第三方资源配置管理</p>
</blockquote>
<h3 id="1-管理DataSource连接池对象"><a href="#1-管理DataSource连接池对象" class="headerlink" title="1 管理DataSource连接池对象"></a>1 管理DataSource连接池对象</h3><h4 id="问题导入"><a href="#问题导入" class="headerlink" title="问题导入"></a>问题导入</h4><p>配置数据库连接参数时，注入驱动类名是用driverClassName还是driver？</p>
<h4 id="1-1-管理Druid连接池【重点】"><a href="#1-1-管理Druid连接池【重点】" class="headerlink" title="1.1 管理Druid连接池【重点】"></a>1.1 管理Druid连接池【重点】</h4><p><strong>数据库准备</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> database if <span class="keyword">not</span> <span class="keyword">exists</span> spring_db <span class="type">character</span> <span class="keyword">set</span> utf8;</span><br><span class="line">use spring_db;</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> if <span class="keyword">not</span> <span class="keyword">exists</span> tbl_account(</span><br><span class="line">    id <span class="type">int</span> <span class="keyword">primary</span> key auto_increment,</span><br><span class="line">    name <span class="type">varchar</span>(<span class="number">20</span>),</span><br><span class="line">    money <span class="keyword">double</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tbl_account <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;Tom&#x27;</span>,<span class="number">1000</span>);</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> tbl_account <span class="keyword">values</span>(<span class="keyword">null</span>,<span class="string">&#x27;Jerry&#x27;</span>,<span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p><strong>【第一步】添加Druid连接池依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：除了添加以上两个依赖之外，别忘了添加spring-context依赖。</p>
</blockquote>
<p><strong>【第二步】配置DruidDataSource连接池Bean对象</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>【第三步】在测试类中从IOC容器中获取连接池对象并打印</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> (DataSource) ctx.getBean(<span class="string">&quot;dataSource&quot;</span>);</span><br><span class="line">        System.out.println(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-2-管理c3p0连接池"><a href="#1-2-管理c3p0连接池" class="headerlink" title="1.2 管理c3p0连接池"></a>1.2 管理c3p0连接池</h4><p><strong>【第一步】添加c3p0连接池依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>c3p0<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.9.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>【第二步】配置c3p0连接池Bean对象</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;dataSource&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.mchange.v2.c3p0.ComboPooledDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClass&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;jdbcUrl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;maxPoolSize&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1000&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：同一个Spring容器中不能有两个id&#x3D;”dataSource”的连接池。</p>
</blockquote>
<p><strong>【第三步】在测试类中从IOC容器中获取连接池对象并打印</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">DataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> (DataSource) ctx.getBean(<span class="string">&quot;dataSource&quot;</span>);</span><br><span class="line">        System.out.println(dataSource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-加载properties属性文件【重点】"><a href="#2-加载properties属性文件【重点】" class="headerlink" title="2 加载properties属性文件【重点】"></a>2 加载properties属性文件【重点】</h3><blockquote>
<p>目的：将数据库的连接参数抽取到一个单独的文件中，与Spring配置文件解耦。</p>
</blockquote>
<h4 id="问题导入-1"><a href="#问题导入-1" class="headerlink" title="问题导入"></a>问题导入</h4><p>问题1：如何解决使用EL表达式读取属性文件中的值结果读取到了系统属性问题？<br>问题2：加载properties文件写法标准写法该怎么写？</p>
<h4 id="2-1-基本用法"><a href="#2-1-基本用法" class="headerlink" title="2.1 基本用法"></a>2.1 基本用法</h4><p><strong>【第一步】编写jdbc.properties属性文件</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://127.0.0.1:3306/spring_db</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<p><strong>【第二步】在applicationContext.xml中开启开启context命名空间，加载jdbc.properties属性文件</strong><br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695892940473-681b5ca8-f9d5-4fd6-ad9b-0151f943c9a9.png#averageHue=%23fdfde1&clientId=ud3923ca5-0db2-4&from=paste&height=612&id=u8ef61419&originHeight=612&originWidth=1974&originalType=binary&ratio=1&rotation=0&showTitle=false&size=183648&status=done&style=none&taskId=u44de9643-d094-477e-b697-851bffbfeed&title=&width=1974" alt="image-20210730101826913.png"><br><img src="/assets/image-20210730101826913.png#id=NnvJe&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br><strong>小技巧：如果同学们觉得上述复制粘贴方式不好改或者容易改错，其实idea是有提示功能的，注意不要选错就行了。有些版本的idea没有这个提示，那么就按照上面复制粘贴的方式改，改完之后可以做成live template模板，后期直接用。</strong><br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695892968496-cbd31431-fc2e-4da0-974b-82dfa8ad7a92.png#averageHue=%23f0eeec&clientId=ud3923ca5-0db2-4&from=paste&height=175&id=u98467433&originHeight=459&originWidth=1658&originalType=binary&ratio=1&rotation=0&showTitle=false&size=116172&status=done&style=none&taskId=ucfa86352-83f7-4c22-8820-6db16d36c2f&title=&width=631" alt="image-20210730102053281.png"><br><img src="/assets/image-20210730102053281.png#id=kEHrg&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>【第三步】在配置连接池Bean的地方使用EL表达式获取jdbc.properties属性文件中的值</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;com.alibaba.druid.pool.DruidDataSource&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driverClassName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>配置完成之后，运行之前的获取Druid连接池代码，可以获取到连接池对象就表示配置成功。</p>
</blockquote>
<h4 id="2-2-配置不加载系统属性"><a href="#2-2-配置不加载系统属性" class="headerlink" title="2.2 配置不加载系统属性"></a>2.2 配置不加载系统属性</h4><p><strong>问题</strong><br>如果属性文件中配置的不是jdbc.username，而是username&#x3D;root666，那么使用${username}获取到的不是root666，而是计算机的名称。</p>
<p><strong>原因</strong><br>系统属性的优先级比我们属性文件中的高，替换了我们的username&#x3D;root666。</p>
<p><strong>解决</strong><br>解决1：换一个名称，例如不叫username，叫jdbc.username。<br>解决2：使用system-properties-mode&#x3D;”NEVER”属性表示不使用系统属性。</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">&lt;context</span>:<span class="string">property-placeholder location=&quot;jdbc.properties&quot; system-properties-mode=&quot;NEVER&quot;/&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-3-加载properties文件写法"><a href="#2-3-加载properties文件写法" class="headerlink" title="2.3 加载properties文件写法"></a>2.3 加载properties文件写法</h4><ul>
<li>不加载系统属性</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties&quot;</span> <span class="attr">system-properties-mode</span>=<span class="string">&quot;NEVER&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>加载多个properties文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;jdbc.properties,msg.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>加载所有properties文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;*.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>加载properties文件<strong>标准格式</strong></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath:*.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>加载properties文件标准格式</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">&quot;classpath*:*.properties&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="二、Spring容器"><a href="#二、Spring容器" class="headerlink" title="二、Spring容器"></a>二、Spring容器</h2><h3 id="1-Spring核心容器介绍"><a href="#1-Spring核心容器介绍" class="headerlink" title="1 Spring核心容器介绍"></a>1 Spring核心容器介绍</h3><h4 id="问题导入-2"><a href="#问题导入-2" class="headerlink" title="问题导入"></a>问题导入</h4><p>问题：按照Bean名称获取Bean有什么弊端，按照Bean类型获取Bean有什么弊端？</p>
<h4 id="1-1-创建容器"><a href="#1-1-创建容器" class="headerlink" title="1.1 创建容器"></a>1.1 创建容器</h4><ul>
<li>方式一：类路径加载配置文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>方式二：文件路径加载配置文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileSystemXmlApplicationContext</span>(<span class="string">&quot;D:\\applicationContext.xml&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>加载多个配置文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;bean1.xml&quot;</span>, <span class="string">&quot;bean2.xml&quot;</span>);</span><br></pre></td></tr></table></figure>

<h4 id="1-2-获取bean对象"><a href="#1-2-获取bean对象" class="headerlink" title="1.2 获取bean对象"></a>1.2 获取bean对象</h4><ul>
<li>方式一：使用bean名称获取</li>
</ul>
<blockquote>
<p>弊端：需要自己强制类型转换</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>方式二：使用bean名称获取并指定类型</strong></li>
</ul>
<blockquote>
<p>弊端：推荐使用</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> ctx.getBean(<span class="string">&quot;bookDao&quot;</span>, BookDao.class);</span><br></pre></td></tr></table></figure>

<ul>
<li>方式三：使用bean类型获取</li>
</ul>
<blockquote>
<p>弊端：如果IOC容器中同类型的Bean对象有多个，此处获取会报错</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> ctx.getBean(BookDao.class);</span><br></pre></td></tr></table></figure>

<h4 id="1-3-容器类层次结构"><a href="#1-3-容器类层次结构" class="headerlink" title="1.3 容器类层次结构"></a>1.3 容器类层次结构</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695893181571-facad188-85b4-4a2d-aede-f89546486e26.png#averageHue=%23f9f7da&clientId=ud3923ca5-0db2-4&from=paste&height=678&id=u32ecdda1&originHeight=678&originWidth=2033&originalType=binary&ratio=1&rotation=0&showTitle=false&size=670377&status=done&style=none&taskId=u88625c3d-a02c-4a8f-9997-10f57d933cd&title=&width=2033" alt="image-20210730102842030.png"></p>
<h4 id="1-4-BeanFactory"><a href="#1-4-BeanFactory" class="headerlink" title="1.4 BeanFactory"></a>1.4 BeanFactory</h4><ul>
<li>类路径加载配置文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Resource</span> <span class="variable">resources</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathResource</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="type">BeanFactory</span> <span class="variable">bf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">XmlBeanFactory</span>(resources);</span><br><span class="line"><span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> bf.getBean(<span class="string">&quot;bookDao&quot;</span>, BookDao.class);</span><br><span class="line">bookDao.save();</span><br></pre></td></tr></table></figure>

<ul>
<li>BeanFactory创建完毕后，所有的Bean均为延迟加载，也就是说我们调用getBean()方法获取Bean对象时才创建Bean对象并返回给我们</li>
</ul>
<h3 id="2-Spring核心容器总结"><a href="#2-Spring核心容器总结" class="headerlink" title="2 Spring核心容器总结"></a>2 Spring核心容器总结</h3><h4 id="2-1-容器相关"><a href="#2-1-容器相关" class="headerlink" title="2.1 容器相关"></a>2.1 容器相关</h4><ul>
<li>BeanFactory是IoC容器的顶层接口，初始化BeanFactory对象时，加载的bean延迟加载</li>
<li>ApplicationContext接口是Spring容器的核心接口，初始化时bean立即加载</li>
<li>ApplicationContext接口提供基础的bean操作相关方法，通过其他接口扩展其功能</li>
<li>ApplicationContext接口常用初始化类<ul>
<li><strong>ClassPathXmlApplicationContext(常用)</strong></li>
<li>FileSystemXmlApplicationContext</li>
</ul>
</li>
</ul>
<h4 id="2-2-bean相关"><a href="#2-2-bean相关" class="headerlink" title="2.2 bean相关"></a>2.2 bean相关</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695893224260-dbf180fd-aeee-4ac6-9035-26e8a531e7ea.png#averageHue=%23fefee2&clientId=ud3923ca5-0db2-4&from=paste&height=832&id=u0e75e2d6&originHeight=832&originWidth=1978&originalType=binary&ratio=1&rotation=0&showTitle=false&size=199784&status=done&style=none&taskId=u5104eae4-5ff5-4442-9c5f-216e9b96112&title=&width=1978" alt="image-20210730103438742.png"></p>
<h4 id="2-3-依赖注入相关"><a href="#2-3-依赖注入相关" class="headerlink" title="2.3 依赖注入相关"></a>2.3 依赖注入相关</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695893252776-fd7a6598-8b36-437e-92eb-31f05f7f81e1.png#averageHue=%23fefde2&clientId=ud3923ca5-0db2-4&from=paste&height=1041&id=u66abe33a&originHeight=1041&originWidth=1984&originalType=binary&ratio=1&rotation=0&showTitle=false&size=280477&status=done&style=none&taskId=uce7cc3c5-b0c7-434e-952d-456a4ddb68b&title=&width=1984" alt="image-20210730103701525.png"></p>
<h2 id="三、Spring注解开发"><a href="#三、Spring注解开发" class="headerlink" title="三、Spring注解开发"></a>三、Spring注解开发</h2><h3 id="1-注解开发定义Bean对象【重点】"><a href="#1-注解开发定义Bean对象【重点】" class="headerlink" title="1 注解开发定义Bean对象【重点】"></a>1 注解开发定义Bean对象【重点】</h3><blockquote>
<p>目的：xml配置Bean对象有些繁琐，使用注解简化Bean对象的定义</p>
</blockquote>
<h4 id="问题导入-3"><a href="#问题导入-3" class="headerlink" title="问题导入"></a>问题导入</h4><p>问题1：使用什么标签进行Spring注解包扫描？<br>问题2：@Component注解和@Controller、@Service、@Repository三个衍生注解有什么区别？</p>
<h4 id="1-1-基本使用"><a href="#1-1-基本使用" class="headerlink" title="1.1 基本使用"></a>1.1 基本使用</h4><p><strong>【第一步】在applicationContext.xml中开启Spring注解包扫描</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd</span></span></span><br><span class="line"><span class="string"><span class="tag">        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd&quot;</span>&gt;</span></span><br><span class="line">	 <span class="comment">&lt;!--扫描com.itheima包及其子包下的类中注解--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.itheima&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>【第二步】在类上使用@Component注解定义Bean。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//@Component定义bean</span></span><br><span class="line"><span class="meta">@Component(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>补充说明：如果@Component注解没有使用参数指定Bean的名称，那么类名首字母小写就是Bean在IOC容器中的默认名称。例如：BookServiceImpl对象在IOC容器中的名称是bookServiceImpl。</p>
</blockquote>
<p><strong>【第三步】在测试类中获取Bean对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForAnnotation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        System.out.println(bookDao);</span><br><span class="line">        <span class="comment">//按类型获取bean</span></span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> ctx.getBean(BookService.class);</span><br><span class="line">        System.out.println(bookService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：在测试类中不要调用bookService的save方法，因为还没有给BookServiceImpl中的bookDao赋值，调用bookService的save方法会出现空指针异常。</p>
</blockquote>
<p><strong>运行结果</strong><br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695893379427-44963f1f-0ebd-4f07-8c6d-c12a42976933.png#averageHue=%23f3f2f1&clientId=ud3923ca5-0db2-4&from=paste&height=215&id=u6fc12bc6&originHeight=215&originWidth=1962&originalType=binary&ratio=1&rotation=0&showTitle=false&size=68047&status=done&style=none&taskId=ua69bdbc4-9672-4230-8371-5f3dba23992&title=&width=1962" alt="image-20210730104835746.png"></p>
<h4 id="1-2-Component三个衍生注解"><a href="#1-2-Component三个衍生注解" class="headerlink" title="1.2 @Component三个衍生注解"></a>1.2 @Component三个衍生注解</h4><blockquote>
<p>说明：加粗的注解为常用注解</p>
</blockquote>
<ul>
<li>Spring提供<code>**@Component**</code>注解的三个衍生注解<ul>
<li><code>**@Controller**</code>：用于表现层bean定义</li>
<li><code>**@Service**</code>：用于业务层bean定义</li>
<li><code>@Repository</code>：用于数据层bean定义</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-纯注解开发模式【重点】"><a href="#2-纯注解开发模式【重点】" class="headerlink" title="2 纯注解开发模式【重点】"></a>2 纯注解开发模式【重点】</h3><h4 id="问题导入-4"><a href="#问题导入-4" class="headerlink" title="问题导入"></a>问题导入</h4><p>问题1：配置类上使用什么注解表示该类是一个配置类？<br>问题2：配置类上使用什么注解进行Spring注解包扫描？</p>
<h4 id="2-1-纯注解开发模式介绍"><a href="#2-1-纯注解开发模式介绍" class="headerlink" title="2.1 纯注解开发模式介绍"></a>2.1 纯注解开发模式介绍</h4><ul>
<li>Spring3.0开启了纯注解开发模式，使用Java类替代配置文件，开启了Spring快速开发赛道</li>
<li>Java类代替Spring核心配置文件</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695893415947-b49b535b-f885-4f8c-99d5-98694fdd57fa.png#averageHue=%23fbfae7&clientId=ud3923ca5-0db2-4&from=paste&height=573&id=u538c7cd0&originHeight=573&originWidth=2000&originalType=binary&ratio=1&rotation=0&showTitle=false&size=147985&status=done&style=none&taskId=u84c0b183-7af4-4143-af61-d81c1be0bd0&title=&width=2000" alt="image-20210803192052811.png"></p>
<ul>
<li>@Configuration注解用于设定当前类为配置类</li>
<li>@ComponentScan注解用于设定扫描路径，此注解只能添加一次，多个数据请用数组格式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ComponentScan(&#123;com.itheima.service&quot;,&quot;com.itheima.dao&quot;&#125;)</span></span><br></pre></td></tr></table></figure>

<ul>
<li>读取Spring核心配置文件初始化容器对象切换为读取Java配置类初始化容器对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载配置文件初始化容器</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"><span class="comment">//加载配置类初始化容器</span></span><br><span class="line"><span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br></pre></td></tr></table></figure>

<h4 id="2-2-代码演示"><a href="#2-2-代码演示" class="headerlink" title="2.2 代码演示"></a>2.2 代码演示</h4><p><strong>【第一步】定义配置类代替配置文件</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明当前类为Spring配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="comment">//Spring注解扫描，相当于&lt;context:component-scan base-package=&quot;com.itheima&quot;/&gt;</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="comment">//设置bean扫描路径，多个路径书写为字符串数组格式</span></span><br><span class="line"><span class="comment">//@ComponentScan(&#123;&quot;com.itheima.service&quot;,&quot;com.itheima.dao&quot;&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>【第二步】在测试类中加载配置类，获取Bean对象并使用</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForAnnotation</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//AnnotationConfigApplicationContext加载Spring配置类初始化Spring容器</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        System.out.println(bookDao);</span><br><span class="line">        <span class="comment">//按类型获取bean</span></span><br><span class="line">        <span class="type">BookService</span> <span class="variable">bookService</span> <span class="operator">=</span> ctx.getBean(BookService.class);</span><br><span class="line">        System.out.println(bookService);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-注解开发Bean作用范围和生命周期管理"><a href="#3-注解开发Bean作用范围和生命周期管理" class="headerlink" title="3 注解开发Bean作用范围和生命周期管理"></a>3 注解开发Bean作用范围和生命周期管理</h3><h4 id="问题导入-5"><a href="#问题导入-5" class="headerlink" title="问题导入"></a>问题导入</h4><p>在类上使用什么注解定义Bean的作用范围？</p>
<h4 id="3-1-bean作用范围注解配置"><a href="#3-1-bean作用范围注解配置" class="headerlink" title="3.1 bean作用范围注解配置"></a>3.1 bean作用范围注解配置</h4><ul>
<li>使用@Scope定义bean作用范围</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-bean生命周期注解配置"><a href="#3-2-bean生命周期注解配置" class="headerlink" title="3.2 bean生命周期注解配置"></a>3.2 bean生命周期注解配置</h4><ul>
<li>使用@PostConstruct、@PreDestroy定义bean生命周期</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="meta">@Scope(&quot;singleton&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookDaoImpl</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao constructor ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book init ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PreDestroy</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book destory ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：@PostConstruct和@PreDestroy注解是jdk中提供的注解，从jdk9开始，jdk中的javax.annotation包被移除了，也就是说这两个注解就用不了了，可以额外导入一下依赖解决这个问题。</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.annotation<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.annotation-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-注解开发依赖注入【重点】"><a href="#4-注解开发依赖注入【重点】" class="headerlink" title="4 注解开发依赖注入【重点】"></a>4 注解开发依赖注入【重点】</h3><h4 id="问题导入-6"><a href="#问题导入-6" class="headerlink" title="问题导入"></a>问题导入</h4><p>问题1：请描述@Autowired注解是如何进行自动装配的？<br>问题2：请描述@Qualifier注解的作用</p>
<h4 id="4-1-使用-Autowired注解开启自动装配模式（按类型）"><a href="#4-1-使用-Autowired注解开启自动装配模式（按类型）" class="headerlink" title="4.1 使用@Autowired注解开启自动装配模式（按类型）"></a>4.1 使用@Autowired注解开启自动装配模式（按类型）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="comment">//@Autowired：注入引用类型，自动装配模式，默认按类型装配</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：不管是使用配置文件还是配置类，都必须进行对应的Spring注解包扫描才可以使用。@Autowired默认按照类型自动装配，如果IOC容器中同类的Bean有多个，那么默认按照变量名和Bean的名称匹配，建议使用@Qualifier注解指定要装配的bean名称</p>
</blockquote>
<p>注意：自动装配基于反射设计创建对象并暴力反射对应属性为私有属性初始化数据，因此无需提供setter方法。</p>
<h4 id="4-2-使用-Qualifier注解指定要装配的bean名称"><a href="#4-2-使用-Qualifier注解指定要装配的bean名称" class="headerlink" title="4.2 使用@Qualifier注解指定要装配的bean名称"></a>4.2 使用@Qualifier注解指定要装配的bean名称</h4><blockquote>
<p>目的：解决IOC容器中同类型Bean有多个装配哪一个的问题</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="comment">//@Autowired：注入引用类型，自动装配模式，默认按类型装配</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="comment">//@Qualifier：自动装配bean时按bean名称装配</span></span><br><span class="line">    <span class="meta">@Qualifier(&quot;bookDao&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：@Qualifier注解无法单独使用，必须配合@Autowired注解使用</p>
<h4 id="4-3-使用-Value实现简单类型注入"><a href="#4-3-使用-Value实现简单类型注入" class="headerlink" title="4.3 使用@Value实现简单类型注入"></a>4.3 使用@Value实现简单类型注入</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Repository(&quot;bookDao&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="comment">//@Value：注入简单类型（无需提供set方法）</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上@Value注解中使用${name}从属性文件中读取name值，那么就需要在配置类或者配置文件中加载属性文件。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="comment">//@PropertySource加载properties配置文件</span></span><br><span class="line"><span class="meta">@PropertySource(&#123;&quot;classpath:jdbc.properties&quot;&#125;)</span> <span class="comment">//&#123;&#125;可以省略不写</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意：@PropertySource()中加载多文件请使用数组格式配置，不允许使用通配符*</p>
<h3 id="5-注解开发管理第三方Bean【重点】"><a href="#5-注解开发管理第三方Bean【重点】" class="headerlink" title="5 注解开发管理第三方Bean【重点】"></a>5 注解开发管理第三方Bean【重点】</h3><h4 id="问题导入-7"><a href="#问题导入-7" class="headerlink" title="问题导入"></a>问题导入</h4><p>导入自己定义的配置类有几种方式？</p>
<h4 id="【第一步】单独定义配置类"><a href="#【第一步】单独定义配置类" class="headerlink" title="【第一步】单独定义配置类"></a><strong>【第一步】单独定义配置类</strong></h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="comment">//@Bean：表示当前方法的返回值是一个bean对象，添加到IOC容器中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        ds.setUrl(<span class="string">&quot;jdbc:mysql://localhost:3306/spring_db&quot;</span>);</span><br><span class="line">        ds.setUsername(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        ds.setPassword(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="【第二步】将独立的配置类加入核心配置"><a href="#【第二步】将独立的配置类加入核心配置" class="headerlink" title="【第二步】将独立的配置类加入核心配置"></a><strong>【第二步】将独立的配置类加入核心配置</strong></h4><h5 id="方式1：-Import注解导入式"><a href="#方式1：-Import注解导入式" class="headerlink" title="方式1：@Import注解导入式"></a>方式1：@Import注解导入式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="comment">//@Import:导入配置信息</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="方式2：-ComponentScan扫描式"><a href="#方式2：-ComponentScan扫描式" class="headerlink" title="方式2：@ComponentScan扫描式"></a>方式2：@ComponentScan扫描式</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima.config&quot;,&quot;com.itheima.service&quot;,&quot;com.itheima.dao&quot;&#125;)</span>  <span class="comment">//只要com.itheima.config包扫到了就行，三个包可以合并写成com.itheima</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="6-注解开发为第三方Bean注入资源【重点】"><a href="#6-注解开发为第三方Bean注入资源【重点】" class="headerlink" title="6 注解开发为第三方Bean注入资源【重点】"></a>6 注解开发为第三方Bean注入资源【重点】</h3><h4 id="问题导入-8"><a href="#问题导入-8" class="headerlink" title="问题导入"></a>问题导入</h4><p>配置类中如何注入简单类型数据，如何注入引用类型数据？</p>
<h4 id="6-1-简单类型依赖注入"><a href="#6-1-简单类型依赖注入" class="headerlink" title="6.1 简单类型依赖注入"></a>6.1 简单类型依赖注入</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="comment">//1.定义一个方法获得要管理的对象</span></span><br><span class="line">    <span class="meta">@Value(&quot;com.mysql.jdbc.Driver&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;jdbc:mysql://localhost:3306/spring_db&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;root&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;root&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="comment">//2.@Bean：表示当前方法的返回值是一个bean对象，添加到IOC容器中</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：如果@Value()中使用了EL表达式读取properties属性文件中的内容，那么就需要加载properties属性文件。</p>
</blockquote>
<h4 id="6-2-引用类型依赖注入"><a href="#6-2-引用类型依赖注入" class="headerlink" title="6.2 引用类型依赖注入"></a>6.2 引用类型依赖注入</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Spring会自动从IOC容器中找到BookDao对象赋值给参数bookDao变量，如果没有就会报错。</span></span><br><span class="line"><span class="meta">@Bean</span> </span><br><span class="line"><span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">(BookDao bookDao)</span>&#123;</span><br><span class="line">    System.out.println(bookDao);</span><br><span class="line">    <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">    ds.setDriverClassName(driver);</span><br><span class="line">    ds.setUrl(url);</span><br><span class="line">    ds.setUsername(userName);</span><br><span class="line">    ds.setPassword(password);</span><br><span class="line">    <span class="keyword">return</span> ds;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：引用类型注入只需要为bean定义方法设置形参即可，容器会根据类型自动装配对象</p>
</blockquote>
<h3 id="7-注解开发总结"><a href="#7-注解开发总结" class="headerlink" title="7 注解开发总结"></a>7 注解开发总结</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695893776532-e94fe8f2-f92d-413d-bf1f-6e95529818fd.png#averageHue=%23e6cdcd&clientId=ud3923ca5-0db2-4&from=paste&height=894&id=u57e277eb&originHeight=894&originWidth=1999&originalType=binary&ratio=1&rotation=0&showTitle=false&size=205208&status=done&style=none&taskId=u1435ba53-e683-4e26-bbee-2fd0279a447&title=&width=1999" alt="image-20210730113548708.png"></p>
<h2 id="四、Spring整合其他技术【重点】"><a href="#四、Spring整合其他技术【重点】" class="headerlink" title="四、Spring整合其他技术【重点】"></a>四、Spring整合其他技术【重点】</h2><h3 id="1-Spring整合mybatis【重点】"><a href="#1-Spring整合mybatis【重点】" class="headerlink" title="1 Spring整合mybatis【重点】"></a>1 Spring整合mybatis【重点】</h3><h4 id="1-1-思路分析"><a href="#1-1-思路分析" class="headerlink" title="1.1 思路分析"></a>1.1 思路分析</h4><h5 id="问题导入-9"><a href="#问题导入-9" class="headerlink" title="问题导入"></a>问题导入</h5><p>mybatis进行数据层操作的核心对象是谁？</p>
<h4 id="1-2-代码实现"><a href="#1-2-代码实现" class="headerlink" title="1.2 代码实现"></a>1.2 代码实现</h4><h5 id="问题导入-10"><a href="#问题导入-10" class="headerlink" title="问题导入"></a>问题导入</h5><p>问题1：Spring整合mybatis的依赖叫什么？<br>问题2：Spring整合mybatis需要管理配置哪两个Bean，这两个Bean作用分别是什么？</p>
<h5 id="【前置工作】"><a href="#【前置工作】" class="headerlink" title="【前置工作】"></a>【前置工作】</h5><ol>
<li>在pom.xml中添加spring-context、druid、mybatis、mysql-connector-java等基础依赖。</li>
<li>准备service和dao层基础代码</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    Account <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span> &#123;</span><br><span class="line">        accountDao.save(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Account account)</span>&#123;</span><br><span class="line">        accountDao.update(account);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        accountDao.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Account <span class="title function_">findById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> accountDao.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tbl_account(name,money)values(#&#123;name&#125;,#&#123;money&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from tbl_account where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tbl_account set name = #&#123;name&#125; , money = #&#123;money&#125; where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">update</span><span class="params">(Account account)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_account&quot;)</span></span><br><span class="line">    List&lt;Account&gt; <span class="title function_">findAll</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_account where id = #&#123;id&#125; &quot;)</span></span><br><span class="line">    Account <span class="title function_">findById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="【第一步】导入Spring整合Mybatis依赖"><a href="#【第一步】导入Spring整合Mybatis依赖" class="headerlink" title="【第一步】导入Spring整合Mybatis依赖"></a><strong>【第一步】导入Spring整合Mybatis依赖</strong></h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="【第二步】创建JdbcConfig配置DataSource数据源"><a href="#【第二步】创建JdbcConfig配置DataSource数据源" class="headerlink" title="【第二步】创建JdbcConfig配置DataSource数据源"></a><strong>【第二步】创建JdbcConfig配置DataSource数据源</strong></h5><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring_db?useSSL=false</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="【第三步】创建MybatisConfig整合mybatis"><a href="#【第三步】创建MybatisConfig整合mybatis" class="headerlink" title="【第三步】创建MybatisConfig整合mybatis"></a><strong>【第三步】创建MybatisConfig整合mybatis</strong></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MybatisConfig</span> &#123;</span><br><span class="line">    <span class="comment">//定义bean，SqlSessionFactoryBean，用于产生SqlSessionFactory对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">ssfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        ssfb.setTypeAliasesPackage(<span class="string">&quot;com.itheima.domain&quot;</span>);</span><br><span class="line">        ssfb.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> ssfb;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义bean，返回MapperScannerConfigurer对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;com.itheima.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="【第四步】创建SpringConfig主配置类进行包扫描和加载其他配置类"><a href="#【第四步】创建SpringConfig主配置类进行包扫描和加载其他配置类" class="headerlink" title="【第四步】创建SpringConfig主配置类进行包扫描和加载其他配置类"></a><strong>【第四步】创建SpringConfig主配置类进行包扫描和加载其他配置类</strong></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="comment">//@PropertySource：加载类路径jdbc.properties文件</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class,MybatisConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="【第五步】定义测试类进行测试"><a href="#【第五步】定义测试类进行测试" class="headerlink" title="【第五步】定义测试类进行测试"></a><strong>【第五步】定义测试类进行测试</strong></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">AccountService</span> <span class="variable">accountService</span> <span class="operator">=</span> ctx.getBean(AccountService.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">Account</span> <span class="variable">ac</span> <span class="operator">=</span> accountService.findById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(ac);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-Spring整合Junit单元测试【重点】"><a href="#2-Spring整合Junit单元测试【重点】" class="headerlink" title="2 Spring整合Junit单元测试【重点】"></a>2 Spring整合Junit单元测试【重点】</h3><h4 id="问题导入-11"><a href="#问题导入-11" class="headerlink" title="问题导入"></a>问题导入</h4><p>Spring整合Junit的两个注解作用分别是什么？</p>
<h4 id="【第一步】导入整合的依赖坐标spring-test"><a href="#【第一步】导入整合的依赖坐标spring-test" class="headerlink" title="【第一步】导入整合的依赖坐标spring-test"></a>【第一步】导入整合的依赖坐标spring-test</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--junit--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--spring整合junit--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="【第二步】使用Spring整合Junit专用的类加载器"><a href="#【第二步】使用Spring整合Junit专用的类加载器" class="headerlink" title="【第二步】使用Spring整合Junit专用的类加载器"></a>【第二步】使用Spring整合Junit专用的类加载器</h4><h4 id="【第三步】加载配置文件或者配置类"><a href="#【第三步】加载配置文件或者配置类" class="headerlink" title="【第三步】加载配置文件或者配置类"></a>【第三步】加载配置文件或者配置类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//【第二步】使用Spring整合Junit专用的类加载器</span></span><br><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="comment">//【第三步】加载配置文件或者配置类</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = &#123;SpringConfiguration.class&#125;)</span> <span class="comment">//加载配置类</span></span><br><span class="line"><span class="comment">//@ContextConfiguration(locations=&#123;&quot;classpath:applicationContext.xml&quot;&#125;)//加载配置文件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceTest</span> &#123;</span><br><span class="line">    <span class="comment">//支持自动装配注入bean</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindById</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(accountService.findById(<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(accountService.findAll());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：junit的依赖至少要是4.12版本,可以是4.13等版本,否则出现如下异常：</strong></p>
<p><img src="/assets/image-20200831155517797.png#id=l1pCm&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695894081344-46583abe-d9a7-4bde-8734-4beadd42d80f.png#averageHue=%23f5e8e8&clientId=ud3923ca5-0db2-4&from=paste&height=206&id=u32c45cc0&originHeight=206&originWidth=2532&originalType=binary&ratio=1&rotation=0&showTitle=false&size=84333&status=done&style=none&taskId=ud05d54eb-8a8b-486b-958a-631f17ad3fc&title=&width=2532" alt="image-20200831155517797.png"></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>spring</title>
    <url>/2024/04/20/spring/</url>
    <content><![CDATA[<h2 id="二、IOC-和-DI-入门案例【重点】"><a href="#二、IOC-和-DI-入门案例【重点】" class="headerlink" title="二、IOC 和 DI 入门案例【重点】"></a>二、IOC 和 DI 入门案例【重点】</h2><h3 id="1-IOC-入门案例【重点】"><a href="#1-IOC-入门案例【重点】" class="headerlink" title="1 IOC 入门案例【重点】"></a>1 IOC 入门案例【重点】</h3><h4 id="问题导入"><a href="#问题导入" class="headerlink" title="问题导入"></a>问题导入</h4><p><bean>标签中 id 属性和 class 属性的作用是什么？</p>
<h4 id="1-1-门案例思路分析"><a href="#1-1-门案例思路分析" class="headerlink" title="1.1 门案例思路分析"></a>1.1 门案例思路分析</h4><ol>
<li>管理什么？(Service 与 Dao)</li>
<li>如何将被管理的对象告知 IOC 容器？(配置文件)</li>
<li>被管理的对象交给 IOC 容器，如何获取到 IoC 容器？(接口)</li>
<li>IOC 容器得到后，如何从容器中获取 bean？(接口方法)</li>
<li>使用 Spring 导入哪些坐标？(pom.xml)</li>
</ol>
<h4 id="1-2-实现步骤"><a href="#1-2-实现步骤" class="headerlink" title="1.2 实现步骤"></a>1.2 实现步骤</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【第一步】导入Spring坐标</span><br><span class="line">【第二步】定义Spring管理的类（接口）</span><br><span class="line">【第三步】创建Spring配置文件，配置对应类作为Spring管理的bean对象</span><br><span class="line">【第四步】初始化IOC容器（Spring核心容器/Spring容器），通过容器获取bean对象</span><br></pre></td></tr></table></figure>

<h4 id="1-3-实现代码"><a href="#1-3-实现代码" class="headerlink" title="1.3 实现代码"></a>1.3 实现代码</h4><p><strong>【第一步】导入 Spring 坐标</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--导入spring的坐标spring-context，对应版本是5.2.10.RELEASE--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>【第二步】定义 Spring 管理的类（接口）</strong></p>
<ul>
<li>BookDao 接口和 BookDaoImpl 实现类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>BookService 接口和 BookServiceImpl 实现类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BookDaoImpl</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>【第三步】创建 Spring 配置文件，配置对应类作为 Spring 管理的 bean 对象</strong></p>
<ul>
<li>定义 applicationContext.xml 配置文件并配置 BookServiceImpl</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">		bean标签：表示配置bean</span></span><br><span class="line"><span class="comment">    	id属性：表示给bean起名字</span></span><br><span class="line"><span class="comment">    	class属性：表示给bean定义类型</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意事项：bean 定义时 id 属性在同一个上下文中(IOC 容器中)不能重复</strong></p>
<p><strong>【第四步】初始化 IOC 容器（Spring 核心容器&#x2F;Spring 容器），通过容器获取 Bean 对象</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//1.创建IoC容器对象，加载spring核心配置文件</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="comment">//2 从IOC容器中获取Bean对象(BookService对象)</span></span><br><span class="line">        BookService bookService= (BookService)ctx.getBean(<span class="string">&quot;bookService&quot;</span>);</span><br><span class="line">        <span class="comment">//3 调用Bean对象(BookService对象)的方法</span></span><br><span class="line">        bookService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="1-4-运行结果"><a href="#1-4-运行结果" class="headerlink" title="1.4 运行结果"></a>1.4 运行结果</h4><p><img src="/assets/image-20210729184337603.png#id=qXq7C&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695890876875-015c1243-476a-4d75-b174-a78bb5c77037.png#averageHue=%23f9f9f8&clientId=u49bb88d8-b0fa-4&from=paste&height=170&id=ub2981688&originHeight=170&originWidth=1738&originalType=binary&ratio=1&rotation=0&showTitle=false&size=28835&status=done&style=none&taskId=u2dfa4faa-bb23-4707-83fe-83119ae1c79&title=&width=1738" alt="image-20210729184337603.png"></p>
<h3 id="2-DI-入门案例【重点】"><a href="#2-DI-入门案例【重点】" class="headerlink" title="2 DI 入门案例【重点】"></a>2 DI 入门案例【重点】</h3><h4 id="问题导入-1"><a href="#问题导入-1" class="headerlink" title="问题导入"></a>问题导入</h4><p><property>标签中 name 属性和 ref 属性的作用是什么？</p>
<h4 id="2-1-DI-入门案例思路分析"><a href="#2-1-DI-入门案例思路分析" class="headerlink" title="2.1 DI 入门案例思路分析"></a>2.1 DI 入门案例思路分析</h4><ol>
<li>基于 IOC 管理 bean</li>
<li>Service 中使用 new 形式创建的 Dao 对象是否保留？(否)</li>
<li>Service 中需要的 Dao 对象如何进入到 Service 中？(提供方法)</li>
<li>Service 与 Dao 间的关系如何描述？(配置)</li>
</ol>
<h4 id="2-2-实现步骤"><a href="#2-2-实现步骤" class="headerlink" title="2.2 实现步骤"></a>2.2 实现步骤</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【第一步】删除使用new的形式创建对象的代码</span><br><span class="line">【第二步】提供依赖对象对应的setter方法</span><br><span class="line">【第三步】配置service与dao之间的关系</span><br></pre></td></tr></table></figure>

<h4 id="2-3-实现代码"><a href="#2-3-实现代码" class="headerlink" title="2.3 实现代码"></a>2.3 实现代码</h4><p><strong>【第一步】删除使用 new 的形式创建对象的代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;  <span class="comment">//【第一步】删除使用new的形式创建对象的代码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>【第二步】提供依赖对象对应的 setter 方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//【第二步】提供依赖对象对应的setter方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>【第三步】配置 service 与 dao 之间的关系</strong></p>
<blockquote>
<p>在 applicationContext.xml 中配置</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">		bean标签：表示配置bean</span></span><br><span class="line"><span class="comment">    	id属性：表示给bean起名字</span></span><br><span class="line"><span class="comment">    	class属性：表示给bean定义类型</span></span><br><span class="line"><span class="comment">	--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--配置server与dao的关系</span></span><br><span class="line"><span class="comment">			property标签：表示配置当前bean的属性</span></span><br><span class="line"><span class="comment">        	name属性：表示配置哪一个具体的属性</span></span><br><span class="line"><span class="comment">        	ref属性：表示参照哪一个bean</span></span><br><span class="line"><span class="comment">		--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;bookDao&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-4-图解演示"><a href="#2-4-图解演示" class="headerlink" title="2.4 图解演示"></a>2.4 图解演示</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695891239537-ad0bb950-7539-4e2d-936e-29ee7ab42ee8.png#averageHue=%23fefce0&clientId=u49bb88d8-b0fa-4&from=paste&height=787&id=u7b9c45ff&originHeight=787&originWidth=2062&originalType=binary&ratio=1&rotation=0&showTitle=false&size=230019&status=done&style=none&taskId=u546d8129-d9c2-4612-ae51-3b1c8339bd3&title=&width=2062" alt="image-20210729183104748.png"><br><img src="/assets/image-20210729183104748.png#id=q4giO&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<h2 id="三、Bean-的基础配置"><a href="#三、Bean-的基础配置" class="headerlink" title="三、Bean 的基础配置"></a>三、Bean 的基础配置</h2><h3 id="问题导入-2"><a href="#问题导入-2" class="headerlink" title="问题导入"></a>问题导入</h3><p>问题 1：在<bean>标签上如何配置别名？<br>问题 2：Bean 的默认作用范围是什么？如何修改？</p>
<h3 id="1-Bean-基础配置【重点】"><a href="#1-Bean-基础配置【重点】" class="headerlink" title="1 Bean 基础配置【重点】"></a>1 Bean 基础配置【重点】</h3><h4 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695891280257-7b3d6d30-71d8-4aeb-b02b-ee52695e36dc.png#averageHue=%23f1e1d6&clientId=u49bb88d8-b0fa-4&from=paste&height=305&id=u9524aa55&originHeight=871&originWidth=1967&originalType=binary&ratio=1&rotation=0&showTitle=false&size=145503&status=done&style=none&taskId=uf77ed4b5-a6e2-437e-af67-a5768688111&title=&width=689" alt="image-20210729183500978.png"></p>
<h4 id="代码演示"><a href="#代码演示" class="headerlink" title="代码演示"></a>代码演示</h4><blockquote>
<p>见《IOC 入门案例》applicationContext.xml 配置</p>
</blockquote>
<h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><blockquote>
<p>见《IOC 入门案例》运行结果</p>
</blockquote>
<h3 id="2-Bean-别名配置"><a href="#2-Bean-别名配置" class="headerlink" title="2 Bean 别名配置"></a>2 Bean 别名配置</h3><h4 id="配置说明-1"><a href="#配置说明-1" class="headerlink" title="配置说明"></a>配置说明</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695891313196-2ba0e1c2-d688-4a72-9b50-1f38231b3c20.png#averageHue=%23f1dedd&clientId=u49bb88d8-b0fa-4&from=paste&height=837&id=u5d81c543&originHeight=837&originWidth=2034&originalType=binary&ratio=1&rotation=0&showTitle=false&size=151763&status=done&style=none&taskId=u7930a0a7-fb4f-429e-ad9f-d1027d4559c&title=&width=2034" alt="image-20210729183558051.png"></p>
<h4 id="代码演示-1"><a href="#代码演示-1" class="headerlink" title="代码演示"></a>代码演示</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695891372793-498808f2-90f7-4608-88fb-5328760b6b6e.png#averageHue=%23fcfcfb&clientId=u49bb88d8-b0fa-4&from=paste&height=933&id=u42098799&originHeight=933&originWidth=2254&originalType=binary&ratio=1&rotation=0&showTitle=false&size=170260&status=done&style=none&taskId=u7b8f0d83-0a6e-433e-aeea-a84f2d3c2f4&title=&width=2254" alt="image-20210729191924626.png"></p>
<h4 id="打印结果"><a href="#打印结果" class="headerlink" title="打印结果"></a>打印结果</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695891453185-1bd7d220-d40a-4105-a257-d98bf51d42e2.png#averageHue=%23f7f6f5&clientId=u49bb88d8-b0fa-4&from=paste&height=210&id=u981f9822&originHeight=210&originWidth=1709&originalType=binary&ratio=1&rotation=0&showTitle=false&size=32567&status=done&style=none&taskId=ua694a60f-ba33-4a7a-b33c-e4fd3bbf0de&title=&width=1709" alt="image-20210729191954870.png"></p>
<h3 id="3-Bean-作用范围配置【重点】"><a href="#3-Bean-作用范围配置【重点】" class="headerlink" title="3 Bean 作用范围配置【重点】"></a>3 Bean 作用范围配置【重点】</h3><h4 id="配置说明-2"><a href="#配置说明-2" class="headerlink" title="配置说明"></a>配置说明</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695891467759-2f961bb6-0342-434f-b61a-e75b2092839c.png#averageHue=%23ebd1d1&clientId=u49bb88d8-b0fa-4&from=paste&height=574&id=u16d03b65&originHeight=574&originWidth=1990&originalType=binary&ratio=1&rotation=0&showTitle=false&size=79599&status=done&style=none&taskId=u5cfd15b5-12e5-4ab0-aaf1-347092fb815&title=&width=1990" alt="image-20210729183628138.png"><br><img src="/assets/image-20210729183628138.png#id=ysxGZ&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<blockquote>
<p>扩展：scope 的取值不仅仅只有 singleton 和 prototype，还有 request、session、application、 websocket ，表示创建出的对象放置在 web 容器(tomcat)对应的位置。比如：request 表示保存到 request 域中。</p>
</blockquote>
<h4 id="代码演示-2"><a href="#代码演示-2" class="headerlink" title="代码演示"></a>代码演示</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695891497466-4fadf0d1-f900-485d-af88-7903febb1cd6.png#averageHue=%23fcfbfb&clientId=u49bb88d8-b0fa-4&from=paste&height=957&id=uac5f0dbd&originHeight=957&originWidth=2271&originalType=binary&ratio=1&rotation=0&showTitle=false&size=201924&status=done&style=none&taskId=uc84dca72-3f69-4b9a-aa63-a3906963120&title=&width=2271" alt="image-20210729192420048.png"></p>
<h4 id="打印结果-1"><a href="#打印结果-1" class="headerlink" title="打印结果"></a>打印结果</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695891532243-64590ab3-562f-4a44-8845-cbbf1f4bbc72.png#averageHue=%23f4f3f2&clientId=u49bb88d8-b0fa-4&from=paste&height=235&id=u8c38f807&originHeight=235&originWidth=1880&originalType=binary&ratio=1&rotation=0&showTitle=false&size=79315&status=done&style=none&taskId=u4247df51-2532-4eed-a65f-ca0d0e2d5ed&title=&width=1880" alt="image-20210729192730871.png"></p>
<blockquote>
<p>最后给大家说明一下：在我们的实际开发当中，绝大部分的 Bean 是单例的，也就是说绝大部分 Bean 不需要配置 scope 属性。</p>
</blockquote>
<h2 id="四、Bean-的实例化"><a href="#四、Bean-的实例化" class="headerlink" title="四、Bean 的实例化"></a>四、Bean 的实例化</h2><h3 id="问题导入-3"><a href="#问题导入-3" class="headerlink" title="问题导入"></a>问题导入</h3><p>Bean 的实例化方式有几种？</p>
<h3 id="1-Bean-是如何创建的【理解】"><a href="#1-Bean-是如何创建的【理解】" class="headerlink" title="1 Bean 是如何创建的【理解】"></a>1 Bean 是如何创建的【理解】</h3><p>bean 本质上就是对象，创建 bean 使用构造方法完成</p>
<h3 id="2-实例化-Bean-的三种方式"><a href="#2-实例化-Bean-的三种方式" class="headerlink" title="2 实例化 Bean 的三种方式"></a>2 实例化 Bean 的三种方式</h3><h4 id="2-1-构造方法方式【重点】"><a href="#2-1-构造方法方式【重点】" class="headerlink" title="2.1 构造方法方式【重点】"></a>2.1 构造方法方式【重点】</h4><ul>
<li>BookDaoImpl 实现类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BookDaoImpl</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao constructor is running ....&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>applicationContext.xml 配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式一：构造方法实例化bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>AppForInstanceBook 测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForInstanceBook</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line"></span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>运行结果</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695891665639-9350f0b2-0477-4ae9-9b6c-60550ccd4795.png#averageHue=%23f5f4f3&clientId=u49bb88d8-b0fa-4&from=paste&height=224&id=u0d7923d4&originHeight=224&originWidth=1718&originalType=binary&ratio=1&rotation=0&showTitle=false&size=51729&status=done&style=none&taskId=uc94f052c-17c0-49fe-b68c-a295e8550a7&title=&width=1718" alt="image-20210729194137151.png"><br><img src="/assets/image-20210729194137151.png#id=Qcebn&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>注意：无参构造方法如果不存在，将抛出异常<code>BeanCreationException</code></p>
<h4 id="2-2-静态工厂方式"><a href="#2-2-静态工厂方式" class="headerlink" title="2.2 静态工厂方式"></a>2.2 静态工厂方式</h4><ul>
<li>OrderDao 接口和 OrderDaoImpl 实现类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">OrderDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">OrderDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;order dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>OrderDaoFatory 工厂类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态工厂创建对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">OrderDaoFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> OrderDao <span class="title function_">getOrderDao</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;factory setup....&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OrderDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>applicationContext.xml 配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式二：使用静态工厂实例化bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;orderDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.OrderDaoFactory&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getOrderDao&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695891722482-918195a7-9040-44f2-b0fe-29e0b033d567.png#averageHue=%23fcfcfc&clientId=u49bb88d8-b0fa-4&from=paste&height=646&id=u3f31bd9e&originHeight=646&originWidth=1967&originalType=binary&ratio=1&rotation=0&showTitle=false&size=119046&status=done&style=none&taskId=u44ff30d0-7ae9-45e1-8f09-9d7be6eefe0&title=&width=1967" alt="image-20210729195248948.png"><br><img src="/assets/image-20210729195248948.png#id=Z38XI&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<ul>
<li>AppForInstanceOrder 测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForInstanceOrder</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">OrderDao</span> <span class="variable">orderDao</span> <span class="operator">=</span> (OrderDao) ctx.getBean(<span class="string">&quot;orderDao&quot;</span>);</span><br><span class="line"></span><br><span class="line">        orderDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>运行结果</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695891743836-4cef0df7-a9c9-48e8-93c0-52efd6ae0e73.png#averageHue=%23f6f6f5&clientId=u49bb88d8-b0fa-4&from=paste&height=221&id=u64923c62&originHeight=221&originWidth=1814&originalType=binary&ratio=1&rotation=0&showTitle=false&size=44625&status=done&style=none&taskId=ud7981bc0-2e24-4eb0-850f-f8452fbffb7&title=&width=1814" alt="image-20210729195009198.png"></p>
<h4 id="2-3-实例工厂方式"><a href="#2-3-实例工厂方式" class="headerlink" title="2.3 实例工厂方式"></a>2.3 实例工厂方式</h4><ul>
<li>UserDao 接口和 UserDaoImpl 实现类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>UserDaoFactory 工厂类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实例工厂创建对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> UserDao <span class="title function_">getUserDao</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>applicationContext.xml 配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式三：使用实例工厂实例化bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userFactory&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.UserDaoFactory&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">factory-method</span>=<span class="string">&quot;getUserDao&quot;</span> <span class="attr">factory-bean</span>=<span class="string">&quot;userFactory&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695891815405-5d8abcc2-9415-4523-8eec-777e816c21c7.png#averageHue=%23bc9f7c&clientId=u49bb88d8-b0fa-4&from=paste&height=624&id=uaa954236&originHeight=624&originWidth=1682&originalType=binary&ratio=1&rotation=0&showTitle=false&size=119281&status=done&style=none&taskId=u95e1301f-3650-4746-93b8-7c94c0506a2&title=&width=1682" alt="image-20210729200203249.png"></p>
<ul>
<li>AppForInstanceUser 测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForInstanceUser</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//        //创建实例工厂对象</span></span><br><span class="line">        <span class="comment">//        UserDaoFactory userDaoFactory = new UserDaoFactory();</span></span><br><span class="line">        <span class="comment">//        //通过实例工厂对象创建对象</span></span><br><span class="line">        <span class="comment">//        UserDao userDao = userDaoFactory.getUserDao();</span></span><br><span class="line">        <span class="comment">//        userDao.save();</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">UserDao</span> <span class="variable">userDao</span> <span class="operator">=</span> (UserDao) ctx.getBean(<span class="string">&quot;userDao&quot;</span>);</span><br><span class="line">        userDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>运行结果</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695891840479-c8825416-486c-4e7a-851b-6711ae37ef12.png#averageHue=%23f6f5f5&clientId=u49bb88d8-b0fa-4&from=paste&height=173&id=u9e5493a5&originHeight=173&originWidth=1690&originalType=binary&ratio=1&rotation=0&showTitle=false&size=26427&status=done&style=none&taskId=ue48c6a91-8eb3-4d98-b676-08cb1b39f7f&title=&width=1690" alt="image-20210729200240820.png"><br><img src="/assets/image-20210729200240820.png#id=y5OkX&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<h4 id="2-4-实现-FactoryBean方式【扩展-了解】"><a href="#2-4-实现-FactoryBean方式【扩展-了解】" class="headerlink" title="2.4 实现 FactoryBean方式【扩展,了解】"></a>2.4 实现 FactoryBean<T>方式【扩展,了解】</h4><ul>
<li>定义 UserDaoFactoryBean 实现 FactoryBean<UserDao></li>
</ul>
<blockquote>
<p>UserDaoFactoryBean 中实例化什么类型的对象泛型就是该类型。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//FactoryBean创建对象</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserDaoFactoryBean</span> <span class="keyword">implements</span> <span class="title class_">FactoryBean</span>&lt;UserDao&gt; &#123;</span><br><span class="line">    <span class="comment">//代替原始实例工厂中创建对象的方法</span></span><br><span class="line">    <span class="keyword">public</span> UserDao <span class="title function_">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">UserDaoImpl</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> UserDao.class;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>applicationContext.xml 配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式四：使用FactoryBean实例化bean--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;userDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.factory.UserDaoFactoryBean&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用之前的 AppForInstanceUser 测试类去运行看结果就行了。注意配置文件中 id&#x3D;”userDao”是否重复。</p>
</blockquote>
<h2 id="五、Bean-的生命周期【了解】"><a href="#五、Bean-的生命周期【了解】" class="headerlink" title="五、Bean 的生命周期【了解】"></a>五、Bean 的生命周期【了解】</h2><h3 id="问题导入-4"><a href="#问题导入-4" class="headerlink" title="问题导入"></a>问题导入</h3><p>问题 1：多例的 Bean 能够配置并执行销毁的方法？<br>问题 2：如何做才执行 Bean 销毁的方法？</p>
<h3 id="1-生命周期相关概念介绍"><a href="#1-生命周期相关概念介绍" class="headerlink" title="1 生命周期相关概念介绍"></a>1 生命周期相关概念介绍</h3><ul>
<li>生命周期：从创建到消亡的完整过程</li>
<li>bean 生命周期：bean 从创建到销毁的整体过程</li>
<li>bean 生命周期控制：在 bean 创建后到销毁前做一些事情</li>
</ul>
<h3 id="2-代码演示"><a href="#2-代码演示" class="headerlink" title="2 代码演示"></a>2 代码演示</h3><h4 id="2-1-Bean-生命周期控制"><a href="#2-1-Bean-生命周期控制" class="headerlink" title="2.1 Bean 生命周期控制"></a>2.1 Bean 生命周期控制</h4><ul>
<li>提供生命周期控制方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//表示bean初始化对应的操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">init</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;init...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//表示bean销毁前对应的操作</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destory</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;destory...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>applicationContext.xml 配置</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--init-method：设置bean初始化生命周期回调函数,此处填写init方法名--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--destroy-method：设置bean销毁生命周期回调函数，仅适用于单例对象，此处填写destory方法名--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span> <span class="attr">destroy-method</span>=<span class="string">&quot;destory&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>测试类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForLifeCycle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> &#123;</span><br><span class="line">        <span class="comment">//此处需要使用实现类类型，接口类型没有close方法</span></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">        <span class="comment">//关闭容器，执行销毁的方法</span></span><br><span class="line">        ctx.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-Bean-生命周期控制"><a href="#2-2-Bean-生命周期控制" class="headerlink" title="2.2 Bean 生命周期控制"></a>2.2 Bean 生命周期控制</h4><ul>
<li>实现 InitializingBean, DisposableBean 接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span>, InitializingBean, DisposableBean &#123;</span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setBookDao</span><span class="params">(BookDao bookDao)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;set .....&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.bookDao = bookDao;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book service save ...&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">destroy</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service destroy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;service init&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>测试类代码同《3.2.1 Bean 生命周期控制》中的测试代码</p>
</blockquote>
<h3 id="3-Bean-销毁时机"><a href="#3-Bean-销毁时机" class="headerlink" title="3 Bean 销毁时机"></a>3 Bean 销毁时机</h3><ul>
<li>容器关闭前触发 bean 的销毁</li>
<li>关闭容器方式：<ul>
<li>手工关闭容器<br><code>ConfigurableApplicationContext</code>接口<code>close()</code>操作</li>
<li>注册关闭钩子，在虚拟机退出前先关闭容器再退出虚拟机<br><code>ConfigurableApplicationContext</code>接口<code>registerShutdownHook()</code>操作</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppForLifeCycle</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">( String[] args )</span> &#123;</span><br><span class="line">        <span class="comment">//此处需要使用实现类类型，接口类型没有close方法</span></span><br><span class="line">        <span class="type">ClassPathXmlApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;applicationContext.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> (BookDao) ctx.getBean(<span class="string">&quot;bookDao&quot;</span>);</span><br><span class="line">        bookDao.save();</span><br><span class="line">        <span class="comment">//注册关闭钩子函数，在虚拟机退出之前回调此函数，关闭容器</span></span><br><span class="line">        ctx.registerShutdownHook();</span><br><span class="line">        <span class="comment">//关闭容器</span></span><br><span class="line">        <span class="comment">//ctx.close();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="六、依赖注入-DI-配置"><a href="#六、依赖注入-DI-配置" class="headerlink" title="六、依赖注入(DI 配置)"></a>六、依赖注入(DI 配置)</h2><h3 id="1-依赖注入方式【重点】"><a href="#1-依赖注入方式【重点】" class="headerlink" title="1 依赖注入方式【重点】"></a>1 依赖注入方式【重点】</h3><h4 id="问题导入-5"><a href="#问题导入-5" class="headerlink" title="问题导入"></a>问题导入</h4><p>依赖注入有几种方式？</p>
<h4 id="1-1-依赖注入的两种方式"><a href="#1-1-依赖注入的两种方式" class="headerlink" title="1.1 依赖注入的两种方式"></a>1.1 依赖注入的两种方式</h4><ul>
<li>setter 注入<br>简单类型<br><strong>引用类型(很常用)</strong></li>
<li>构造器注入<br>简单类型<br>引用类型</li>
</ul>
<h4 id="1-2-setter-方式注入"><a href="#1-2-setter-方式注入" class="headerlink" title="1.2 setter 方式注入"></a>1.2 setter 方式注入</h4><h5 id="问题导入-6"><a href="#问题导入-6" class="headerlink" title="问题导入"></a>问题导入</h5><p>setter 方式注入使用什么子标签？</p>
<h5 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h5><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695891953265-ea04b8e3-5f01-430b-9f33-4627be62068c.png#averageHue=%23fefce1&clientId=u49bb88d8-b0fa-4&from=paste&height=812&id=uee160f31&originHeight=812&originWidth=2006&originalType=binary&ratio=1&rotation=0&showTitle=false&size=169776&status=done&style=none&taskId=u096b0757-5147-4942-9365-aeecfe4e6be&title=&width=2006" alt="image-20210729203626540.png"><br><img src="/assets/image-20210729203626540.png#id=FN1Cg&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title=">这里蓝线和红线错了，property 中 ref 应该指向<bean id="xxx"> ，name 指向 BookServiceImpl 类中的 setBookDao</p>
<h5 id="简单类型"><a href="#简单类型" class="headerlink" title="简单类型"></a>简单类型</h5><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695892414703-65710982-8d10-4048-9bc5-7ef9ef126e3b.png#averageHue=%23fefbe0&clientId=u49bb88d8-b0fa-4&from=paste&height=742&id=ufe3d56e5&originHeight=742&originWidth=2007&originalType=binary&ratio=1&rotation=0&showTitle=false&size=145684&status=done&style=none&taskId=u75746ce9-4d8d-4d2f-a0d9-85407228954&title=&width=2007" alt="image-20210729203728173.png"></p>
<h4 id="1-3-构造方式注入"><a href="#1-3-构造方式注入" class="headerlink" title="1.3 构造方式注入"></a>1.3 构造方式注入</h4><h5 id="问题导入-7"><a href="#问题导入-7" class="headerlink" title="问题导入"></a>问题导入</h5><p>构造方式注入使用什么子标签？</p>
<h5 id="引用类型-1"><a href="#引用类型-1" class="headerlink" title="引用类型"></a>引用类型</h5><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695892433985-842cbd8b-3cfc-48c0-8bf1-2aa8d4388bd6.png#averageHue=%23fefce1&clientId=u49bb88d8-b0fa-4&from=paste&height=814&id=u534c2a46&originHeight=814&originWidth=2022&originalType=binary&ratio=1&rotation=0&showTitle=false&size=183941&status=done&style=none&taskId=u0a229d18-a58d-4247-afb8-762518280af&title=&width=2022" alt="image-20210729203859855.png"></p>
<h5 id="简单类型-1"><a href="#简单类型-1" class="headerlink" title="简单类型"></a>简单类型</h5><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695892443091-0ffe0c11-8d76-4063-a8bf-7eeabe29e43d.png#averageHue=%23fdfadf&clientId=u49bb88d8-b0fa-4&from=paste&height=757&id=u2877d6e2&originHeight=757&originWidth=2001&originalType=binary&ratio=1&rotation=0&showTitle=false&size=163385&status=done&style=none&taskId=ufead0c90-fcd7-4f7d-a918-d9e62972cf7&title=&width=2001" alt="image-20210729204006542.png"></p>
<h5 id="参数适配【了解】"><a href="#参数适配【了解】" class="headerlink" title="参数适配【了解】"></a>参数适配【了解】</h5><p><img src="/assets/image-20210729204117697.png#id=aNXwl&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695892479512-cc251c3d-3b71-4c9e-8180-d74cba47759c.png#averageHue=%23fcfbe9&clientId=u49bb88d8-b0fa-4&from=paste&height=720&id=u9d722b21&originHeight=720&originWidth=2020&originalType=binary&ratio=1&rotation=0&showTitle=false&size=154553&status=done&style=none&taskId=u013e323d-b8a5-4239-ba38-6b0bbfb3d7b&title=&width=2020" alt="image-20210729204117697.png"></p>
<h4 id="1-4-依赖注入方式选择"><a href="#1-4-依赖注入方式选择" class="headerlink" title="1.4 依赖注入方式选择"></a>1.4 依赖注入方式选择</h4><ol>
<li>强制依赖使用构造器进行，使用 setter 注入有概率不进行注入导致 null 对象出现</li>
<li>可选依赖使用 setter 注入进行，灵活性强</li>
<li>Spring 框架倡导使用构造器，第三方框架内部大多数采用构造器注入的形式进行数据初始化，相对严谨</li>
<li>如果有必要可以两者同时使用，使用构造器注入完成强制依赖的注入，使用 setter 注入完成可选依赖的注入</li>
<li>实际开发过程中还要根据实际情况分析，如果受控对象没有提供 setter 方法就必须使用构造器注入</li>
<li><strong>自己开发的模块推荐使用 setter 注入</strong></li>
</ol>
<h3 id="2-依赖自动装配【理解】"><a href="#2-依赖自动装配【理解】" class="headerlink" title="2 依赖自动装配【理解】"></a>2 依赖自动装配【理解】</h3><h4 id="问题导入-8"><a href="#问题导入-8" class="headerlink" title="问题导入"></a>问题导入</h4><p>如何配置按照类型自动装配？</p>
<h4 id="2-1-自动装配概念"><a href="#2-1-自动装配概念" class="headerlink" title="2.1 自动装配概念"></a>2.1 自动装配概念</h4><ul>
<li>IoC 容器根据 bean 所依赖的资源在容器中自动查找并注入到 bean 中的过程称为自动装配</li>
<li>自动装配方式<br>按类型（常用）<br>按名称<br>按构造方法<br>不启用自动装配</li>
</ul>
<h4 id="2-2-自动装配类型"><a href="#2-2-自动装配类型" class="headerlink" title="2.2 自动装配类型"></a>2.2 自动装配类型</h4><h5 id="依赖自动装配"><a href="#依赖自动装配" class="headerlink" title="依赖自动装配"></a>依赖自动装配</h5><blockquote>
<p>配置中使用 bean 标签 autowire 属性设置自动装配的类型</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookDao&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.dao.impl.BookDaoImpl&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;bookService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.itheima.service.impl.BookServiceImpl&quot;</span> <span class="attr">autowire</span>=<span class="string">&quot;byType&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="依赖自动装配特征"><a href="#依赖自动装配特征" class="headerlink" title="依赖自动装配特征"></a>依赖自动装配特征</h5><ol>
<li>自动装配用于引用类型依赖注入，不能对简单类型进行操作</li>
<li>使用按类型装配时（byType）必须保障容器中相同类型的 bean 唯一，推荐使用</li>
<li>使用按名称装配时（byName）必须保障容器中具有指定名称的 bean，因变量名与配置耦合，不推荐使用</li>
<li>自动装配优先级低于 setter 注入与构造器注入，同时出现时自动装配配置失效</li>
</ol>
<h3 id="3-集合注入"><a href="#3-集合注入" class="headerlink" title="3 集合注入"></a>3 集合注入</h3><h4 id="3-1-注入数组类型数据"><a href="#3-1-注入数组类型数据" class="headerlink" title="3.1 注入数组类型数据"></a>3.1 注入数组类型数据</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;array&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">array</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>100<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>200<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>300<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">array</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-注入-List-类型数据"><a href="#3-2-注入-List-类型数据" class="headerlink" title="3.2 注入 List 类型数据"></a>3.2 注入 List 类型数据</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;list&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>itcast<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>itheima<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>boxuegu<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>chuanzhihui<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-注入-Set-类型数据"><a href="#3-3-注入-Set-类型数据" class="headerlink" title="3.3 注入 Set 类型数据"></a>3.3 注入 Set 类型数据</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;set&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">set</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>itcast<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>itheima<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>boxuegu<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>boxuegu<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">set</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-4-注入-Map-类型数据"><a href="#3-4-注入-Map-类型数据" class="headerlink" title="3.4 注入 Map 类型数据"></a>3.4 注入 Map 类型数据</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;map&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;country&quot;</span> <span class="attr">value</span>=<span class="string">&quot;china&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;province&quot;</span> <span class="attr">value</span>=<span class="string">&quot;henan&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">entry</span> <span class="attr">key</span>=<span class="string">&quot;city&quot;</span> <span class="attr">value</span>=<span class="string">&quot;kaifeng&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-5-注入-Properties-类型数据"><a href="#3-5-注入-Properties-类型数据" class="headerlink" title="3.5 注入 Properties 类型数据"></a>3.5 注入 Properties 类型数据</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;properties&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;country&quot;</span>&gt;</span>china<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;province&quot;</span>&gt;</span>henan<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">&quot;city&quot;</span>&gt;</span>kaifeng<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>说明：property 标签表示 setter 方式注入，构造方式注入 constructor-arg 标签内部也可以写<array>、<list>、<set>、<map>、<props>标签</p>
</blockquote>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>spring_aop、事务</title>
    <url>/2024/04/22/spring-aop%E3%80%81%E4%BA%8B%E5%8A%A1/</url>
    <content><![CDATA[<h2 id="今日目标"><a href="#今日目标" class="headerlink" title="今日目标"></a>今日目标</h2><ul>
<li><input disabled="" type="checkbox"> 能够理解AOP的作用</li>
<li><input disabled="" type="checkbox"> 能够完成AOP的入门案例</li>
<li><input disabled="" type="checkbox"> 能够理解AOP的工作流程</li>
<li><input disabled="" type="checkbox"> 能够说出AOP的五种通知类型</li>
<li><input disabled="" type="checkbox"> 能够完成”测量业务层接口万次执行效率”案例</li>
<li><input disabled="" type="checkbox"> 能够掌握Spring事务配置</li>
</ul>
<h2 id="一、AOP"><a href="#一、AOP" class="headerlink" title="一、AOP"></a>一、AOP</h2><h3 id="1-AOP简介"><a href="#1-AOP简介" class="headerlink" title="1 AOP简介"></a>1 AOP简介</h3><h4 id="问题导入"><a href="#问题导入" class="headerlink" title="问题导入"></a>问题导入</h4><p>问题1：AOP的作用是什么？<br>问题2：连接点和切入点有什么区别，二者谁的范围大？<br>问题3：请描述什么是切面？</p>
<h4 id="1-1-AOP简介和作用【理解】"><a href="#1-1-AOP简介和作用【理解】" class="headerlink" title="1.1 AOP简介和作用【理解】"></a>1.1 AOP简介和作用【理解】</h4><ul>
<li>AOP(Aspect Oriented Programming)面向切面编程，一种编程范式，指导开发者如何组织程序结构<ul>
<li>OOP(Object Oriented Programming)面向对象编程</li>
</ul>
</li>
<li>作用：在不惊动原始设计的基础上为其进行功能增强。简单的说就是在不改变方法源代码的基础上对方法进行功能增强。</li>
<li>Spring理念：无入侵式&#x2F;无侵入式</li>
</ul>
<h4 id="1-2-AOP中的核心概念【理解】"><a href="#1-2-AOP中的核心概念【理解】" class="headerlink" title="1.2 AOP中的核心概念【理解】"></a>1.2 AOP中的核心概念【理解】</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695894239453-98503ddc-1c07-4770-87d7-7e08e91e9f58.png#averageHue=%23fefde2&clientId=u458f7ce2-b5d6-4&from=paste&height=956&id=u745d05be&originHeight=956&originWidth=2168&originalType=binary&ratio=1&rotation=0&showTitle=false&size=325564&status=done&style=none&taskId=u62a63f7a-57e7-49dc-a26a-18038b01d4d&title=&width=2168" alt="image-20210730144903209.png"></p>
<ul>
<li>连接点（JoinPoint）：正在执行的方法，例如：update()、delete()、select()等都是连接点。</li>
<li>切入点（Pointcut）：进行功能增强了的方法，例如:update()、delete()方法，select()方法没有被增强所以不是切入点，但是是连接点。<ul>
<li>在SpringAOP中，一个切入点可以只描述一个具体方法，也可以匹配多个方法<ul>
<li>一个具体方法：com.itheima.dao包下的BookDao接口中的无形参无返回值的save方法</li>
<li>匹配多个方法：所有的save方法，所有的get开头的方法，所有以Dao结尾的接口中的任意方法，所有带有一个参数的方法</li>
</ul>
</li>
</ul>
</li>
<li>通知（Advice）：在切入点前后执行的操作，也就是增强的共性功能<ul>
<li>在SpringAOP中，功能最终以方法的形式呈现</li>
</ul>
</li>
<li>通知类：通知方法所在的类叫做通知类</li>
<li>切面（Aspect）：描述通知与切入点的对应关系，也就是哪些通知方法对应哪些切入点方法。</li>
</ul>
<h3 id="2-AOP入门案例【重点】"><a href="#2-AOP入门案例【重点】" class="headerlink" title="2 AOP入门案例【重点】"></a>2 AOP入门案例【重点】</h3><h4 id="问题导入-1"><a href="#问题导入-1" class="headerlink" title="问题导入"></a>问题导入</h4><p>问题1：在通知方法中如何定义切入点表达式？<br>问题2：如何配置切面？<br>问题3：在配置类上如何开启AOP注解功能？</p>
<h4 id="2-1-AOP入门案例思路分析"><a href="#2-1-AOP入门案例思路分析" class="headerlink" title="2.1 AOP入门案例思路分析"></a>2.1 AOP入门案例思路分析</h4><ul>
<li>案例设定：测定接口执行效率</li>
<li>简化设定：在接口执行前输出当前系统时间</li>
<li>开发模式：XML or <strong>注解</strong></li>
<li>思路分析：<ol>
<li>导入坐标（pom.xml）</li>
<li>制作连接点方法（原始操作，dao接口与实现类）</li>
<li>制作共性功能（通知类与通知）</li>
<li>定义切入点</li>
<li>绑定切入点与通知关系（切面）</li>
</ol>
</li>
</ul>
<h4 id="2-2-AOP入门案例实现"><a href="#2-2-AOP入门案例实现" class="headerlink" title="2.2 AOP入门案例实现"></a>2.2 AOP入门案例实现</h4><h5 id="【第一步】导入aop相关坐标"><a href="#【第一步】导入aop相关坐标" class="headerlink" title="【第一步】导入aop相关坐标"></a>【第一步】导入aop相关坐标</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--spring核心依赖，会将spring-aop传递进来--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--切入点表达式依赖，目的是找到切入点方法，也就是找到要增强的方法--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695895694680-0b518430-a826-48e3-9455-6f1544d33f0c.png#clientId=u458f7ce2-b5d6-4&from=paste&height=331&id=MED42&originHeight=331&originWidth=1873&originalType=binary&ratio=1&rotation=0&showTitle=false&size=185491&status=done&style=none&taskId=u66bd0cfa-87fa-4c4b-b7c2-b704eea244b&title=&width=1873" alt="image-20210730150138448.png"></p>
<h5 id="【第二步】定义dao接口与实现类"><a href="#【第二步】定义dao接口与实现类" class="headerlink" title="【第二步】定义dao接口与实现类"></a>【第二步】定义dao接口与实现类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao save ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">update</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book dao update ...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="【第三步】定义通知类，制作通知方法"><a href="#【第三步】定义通知类，制作通知方法" class="headerlink" title="【第三步】定义通知类，制作通知方法"></a>【第三步】定义通知类，制作通知方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通知类必须配置成Spring管理的bean</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="【第四步】定义切入点表达式、配置切面-绑定切入点与通知关系"><a href="#【第四步】定义切入点表达式、配置切面-绑定切入点与通知关系" class="headerlink" title="【第四步】定义切入点表达式、配置切面(绑定切入点与通知关系)"></a>【第四步】定义切入点表达式、配置切面(绑定切入点与通知关系)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通知类必须配置成Spring管理的bean</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="comment">//设置当前类为切面类类</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//设置切入点，@Pointcut注解要求配置在方法上方</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(void com.itheima.dao.BookDao.update())&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">pt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置在切入点pt()的前面运行当前操作(前置通知)</span></span><br><span class="line">    <span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">method</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695895755812-40878ce7-b312-49c7-9d66-759e28dd5a57.png#averageHue=%23faf9f6&clientId=u458f7ce2-b5d6-4&from=paste&height=482&id=u1a1462af&originHeight=482&originWidth=1574&originalType=binary&ratio=1&rotation=0&showTitle=false&size=97806&status=done&style=none&taskId=ue61b29f2-76d9-4d66-8066-7aa645578c1&title=&width=1574" alt="image-20210730154740528.png"><img src="/assets/image-20210730154740528.png#id=QNnyp&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<h5 id="【第五步】在配置类中进行Spring注解包扫描和开启AOP功能"><a href="#【第五步】在配置类中进行Spring注解包扫描和开启AOP功能" class="headerlink" title="【第五步】在配置类中进行Spring注解包扫描和开启AOP功能"></a>【第五步】在配置类中进行Spring注解包扫描和开启AOP功能</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="comment">//开启注解开发AOP功能</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="测试类和运行结果"><a href="#测试类和运行结果" class="headerlink" title="测试类和运行结果"></a>测试类和运行结果</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> ctx.getBean(BookDao.class);</span><br><span class="line">        bookDao.update();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695895788032-f6b262b2-e58f-4765-a4e6-93e7521d8d7f.png#averageHue=%23f6f6f5&clientId=u458f7ce2-b5d6-4&from=paste&height=220&id=ucedbf678&originHeight=220&originWidth=1744&originalType=binary&ratio=1&rotation=0&showTitle=false&size=58865&status=done&style=none&taskId=u66176440-4edf-4f1c-985a-7c38223695f&title=&width=1744" alt="image-20210730151347354.png"></p>
<h3 id="3-AOP工作流程【理解】"><a href="#3-AOP工作流程【理解】" class="headerlink" title="3 AOP工作流程【理解】"></a>3 AOP工作流程【理解】</h3><h4 id="问题导入-2"><a href="#问题导入-2" class="headerlink" title="问题导入"></a>问题导入</h4><p>什么是目标对象？什么是代理对象？</p>
<h4 id="3-1-AOP工作流程"><a href="#3-1-AOP工作流程" class="headerlink" title="3.1 AOP工作流程"></a>3.1 AOP工作流程</h4><ol>
<li>Spring容器启动</li>
<li>读取所有切面配置中的切入点</li>
<li>初始化bean，判定bean对应的类中的方法是否匹配到任意切入点<ul>
<li>匹配失败，创建原始对象</li>
<li>匹配成功，创建原始对象（目标对象）的代理对象</li>
</ul>
</li>
<li>获取bean执行方法<ul>
<li>获取的bean是原始对象时，调用方法并执行，完成操作</li>
<li>获取的bean是代理对象时，根据代理对象的运行模式运行原始方法与增强的内容，完成操作</li>
</ul>
</li>
</ol>
<h4 id="3-2-AOP核心概念"><a href="#3-2-AOP核心概念" class="headerlink" title="3.2 AOP核心概念"></a>3.2 AOP核心概念</h4><p>目标对象（Target）：被代理的对象，也叫原始对象，该对象中的方法没有任何功能增强。<br>代理对象（Proxy）：代理后生成的对象，由Spring帮我们创建代理对象。</p>
<h4 id="3-3-在测试类中验证代理对象"><a href="#3-3-在测试类中验证代理对象" class="headerlink" title="3.3 在测试类中验证代理对象"></a>3.3 在测试类中验证代理对象</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">BookDao</span> <span class="variable">bookDao</span> <span class="operator">=</span> ctx.getBean(BookDao.class);</span><br><span class="line">        bookDao.update();</span><br><span class="line">		<span class="comment">//打印对象的类名</span></span><br><span class="line">        System.out.println(bookDao.getClass());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695895830813-7dcd8b6b-4f6b-4eb0-8170-8b7e5e5b61ea.png#averageHue=%23f7f7f6&clientId=u458f7ce2-b5d6-4&from=paste&height=285&id=u4f21fa30&originHeight=285&originWidth=1894&originalType=binary&ratio=1&rotation=0&showTitle=false&size=53240&status=done&style=none&taskId=u18ca732b-97e6-4457-904f-0b81cf91c80&title=&width=1894" alt="image-20210730152631741.png"><br><img src="/assets/image-20210730152631741.png#id=qIQcn&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<h3 id="4-AOP切入点表达式"><a href="#4-AOP切入点表达式" class="headerlink" title="4 AOP切入点表达式"></a>4 AOP切入点表达式</h3><h4 id="问题导入-3"><a href="#问题导入-3" class="headerlink" title="问题导入"></a>问题导入</h4><p>在切入点表达式中如何简化包名和参数类型书写？</p>
<h4 id="4-1-语法格式"><a href="#4-1-语法格式" class="headerlink" title="4.1 语法格式"></a>4.1 语法格式</h4><ul>
<li>切入点：要进行增强的方法</li>
<li>切入点表达式：要进行增强的方法的描述方式<ul>
<li>描述方式一：执行com.itheima.dao包下的BookDao接口中的无参数update方法</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">execution(<span class="keyword">void</span> com.itheima.dao.BookDao.update())</span><br></pre></td></tr></table></figure>

<ul>
<li>描述方式二：执行com.itheima.dao.impl包下的BookDaoImpl类中的无参数update方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">execution(<span class="keyword">void</span> com.itheima.dao.impl.BookDaoImpl.update())</span><br></pre></td></tr></table></figure>

<ul>
<li>切入点表达式标准格式：动作关键字(访问修饰符  返回值  包名.类&#x2F;接口名.方法名(参数) 异常名）</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">execution(public User com.itheima.service.UserService.findById(int))</span><br></pre></td></tr></table></figure>


<ul>
<li>动作关键字：描述切入点的行为动作，例如execution表示执行到指定切入点</li>
<li>访问修饰符：public，private等，可以省略</li>
<li>返回值：写返回值类型</li>
<li>包名：多级包使用点连接</li>
<li>类&#x2F;接口名：</li>
<li>方法名：</li>
<li>参数：直接写参数的类型，多个类型用逗号隔开</li>
<li>异常名：方法定义中抛出指定异常，可以省略</li>
</ul>
<h4 id="4-2-通配符"><a href="#4-2-通配符" class="headerlink" title="4.2 通配符"></a>4.2 通配符</h4><blockquote>
<p>目的：可以使用通配符描述切入点，快速描述。</p>
</blockquote>
<ul>
<li>：单个独立的任意符号，可以独立出现，也可以作为前缀或者后缀的匹配符出现</li>
</ul>
<blockquote>
<p>匹配com.itheima包下的任意包中的UserService类或接口中所有find开头的带有一个参数的方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">execution（<span class="keyword">public</span> * com.itheima.*.UserService.find*(*))</span><br></pre></td></tr></table></figure>

<ul>
<li>.. ：多个连续的任意符号，可以独立出现，常用于简化包名与参数的书写</li>
</ul>
<blockquote>
<p>匹配com包下的任意包中的UserService类或接口中所有名称为findById的方法</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">execution（<span class="keyword">public</span> User com..UserService.findById(..))</span><br></pre></td></tr></table></figure>

<ul>
<li>+：专用于匹配子类类型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">execution(* *..*Service+.*(..))</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20210730153824117.png#id=jCfxc&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<h4 id="4-3-书写技巧"><a href="#4-3-书写技巧" class="headerlink" title="4.3 书写技巧"></a>4.3 书写技巧</h4><ul>
<li>所有代码按照标准规范开发，否则以下技巧全部失效</li>
<li>描述切入点通<strong>常描述接口</strong>，而不描述实现类</li>
<li>访问控制修饰符针对接口开发均采用public描述（<strong>可省略访问控制修饰符描述</strong>）</li>
<li>返回值类型对于增删改类使用精准类型加速匹配，对于查询类使用*通配快速描述</li>
<li><strong>包名</strong>书写<strong>尽量不使用..匹配</strong>，效率过低，常用*做单个包描述匹配，或精准匹配</li>
<li><strong>接口名&#x2F;类名</strong>书写名称与模块相关的<strong>采用*匹配</strong>，例如UserService书写成*Service，绑定业务层接口名</li>
<li><strong>方法名</strong>书写以<strong>动词</strong>进行<strong>精准匹配</strong>，名词采用_匹配，例如getById书写成getBy_,selectAll书写成selectAll</li>
<li>参数规则较为复杂，根据业务方法灵活调整</li>
<li>通常<strong>不使用异常</strong>作为<strong>匹配</strong>规则</li>
</ul>
<h3 id="5-AOP通知类型【重点】"><a href="#5-AOP通知类型【重点】" class="headerlink" title="5 AOP通知类型【重点】"></a>5 AOP通知类型【重点】</h3><h4 id="问题导入-4"><a href="#问题导入-4" class="headerlink" title="问题导入"></a>问题导入</h4><p>请描述一下如何定义环绕通知方法？</p>
<h4 id="5-1-AOP通知分类"><a href="#5-1-AOP通知分类" class="headerlink" title="5.1 AOP通知分类"></a>5.1 AOP通知分类</h4><ul>
<li>AOP通知描述了抽取的共性功能，根据共性功能抽取的位置不同，最终运行代码时要将其加入到合理的位置</li>
<li>AOP通知共分为5种类型<ul>
<li>前置通知：在切入点方法执行之前执行</li>
<li>后置通知：在切入点方法执行之后执行，无论切入点方法内部是否出现异常，后置通知都会执行。</li>
<li><strong>环绕通知(重点)：</strong>手动调用切入点方法并对其进行增强的通知方式。</li>
<li>返回后通知(了解)：在切入点方法执行之后执行，如果切入点方法内部出现异常将不会执行。</li>
<li>抛出异常后通知(了解)：在切入点方法执行之后执行，只有当切入点方法内部出现异常之后才执行。</li>
</ul>
</li>
</ul>
<h4 id="5-2-AOP通知详解"><a href="#5-2-AOP通知详解" class="headerlink" title="5.2 AOP通知详解"></a>5.2 AOP通知详解</h4><h5 id="5-2-1-前置通知"><a href="#5-2-1-前置通知" class="headerlink" title="5.2.1 前置通知"></a>5.2.1 前置通知</h5><ul>
<li>名称：<a href="/Before">@Before </a></li>
<li>类型：<strong>方法注解</strong></li>
<li>位置：通知方法定义上方</li>
<li>作用：设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法前运行</li>
<li>范例：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;before advice ...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-2-2-后置通知"><a href="#5-2-2-后置通知" class="headerlink" title="5.2.2 后置通知"></a>5.2.2 后置通知</h5><ul>
<li>名称：<a href="/After">@After </a></li>
<li>类型：<strong>方法注解</strong></li>
<li>位置：通知方法定义上方</li>
<li>作用：设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法后运行</li>
<li>范例：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@After(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">after</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;after advice ...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-2-3-返回后通知"><a href="#5-2-3-返回后通知" class="headerlink" title="5.2.3 返回后通知"></a>5.2.3 返回后通知</h5><ul>
<li>名称：@AfterReturning（了解）</li>
<li>类型：<strong>方法注解</strong></li>
<li>位置：通知方法定义上方</li>
<li>作用：设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法正常执行完毕后运行</li>
<li>范例：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterReturning(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;afterReturning advice ...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-2-4-抛出异常后通知"><a href="#5-2-4-抛出异常后通知" class="headerlink" title="5.2.4 抛出异常后通知"></a>5.2.4 抛出异常后通知</h5><ul>
<li>名称：@AfterThrowing（了解）</li>
<li>类型：<strong>方法注解</strong></li>
<li>位置：通知方法定义上方</li>
<li>作用：设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法运行抛出异常后执行</li>
<li>范例：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;afterThrowing advice ...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="5-2-5-环绕通知"><a href="#5-2-5-环绕通知" class="headerlink" title="5.2.5 环绕通知"></a>5.2.5 环绕通知</h5><ul>
<li>名称：@Around（重点，常用）</li>
<li>类型：<strong>方法注解</strong></li>
<li>位置：通知方法定义上方</li>
<li>作用：设置当前通知方法与切入点之间的绑定关系，当前通知方法在原始切入点方法前后运行</li>
<li>范例：：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;around before advice ...&quot;</span>);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">    System.out.println(<span class="string">&quot;around after advice ...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>环绕通知注意事项</strong></p>
<ol>
<li>环绕通知方法形参必须是ProceedingJoinPoint，表示正在执行的连接点，使用该对象的proceed()方法表示对原始对象方法进行调用，返回值为原始对象方法的返回值。</li>
<li>环绕通知方法的返回值建议写成Object类型，用于将原始对象方法的返回值进行返回，哪里使用代理对象就返回到哪里。</li>
</ol>
<h2 id="二、AOP案例"><a href="#二、AOP案例" class="headerlink" title="二、AOP案例"></a>二、AOP案例</h2><h3 id="1-案例-测量业务层接口万次执行效率"><a href="#1-案例-测量业务层接口万次执行效率" class="headerlink" title="1 案例-测量业务层接口万次执行效率"></a>1 案例-测量业务层接口万次执行效率</h3><h4 id="问题导入-5"><a href="#问题导入-5" class="headerlink" title="问题导入"></a>问题导入</h4><p>能不能描述一下环绕通知里面的实现步骤？</p>
<h4 id="1-1-需求和分析"><a href="#1-1-需求和分析" class="headerlink" title="1.1 需求和分析"></a>1.1 需求和分析</h4><p>需求：任意业务层接口执行均可显示其执行效率（执行时长）<br>分析：<br>①：业务功能：业务层接口执行前后分别记录时间，求差值得到执行效率<br>②：通知类型选择前后均可以增强的类型——环绕通知</p>
<h4 id="1-2-代码实现"><a href="#1-2-代码实现" class="headerlink" title="1.2 代码实现"></a>1.2 代码实现</h4><h5 id="【前置工作】环境准备"><a href="#【前置工作】环境准备" class="headerlink" title="【前置工作】环境准备"></a>【前置工作】环境准备</h5><ol>
<li>Spring整合mybatis对spring_db数据库中的Account进行CRUD操作</li>
<li>Spring整合Junit测试CRUD是否OK。</li>
<li>在pom.xml中添加aspectjweaver切入点表达式依赖</li>
<li>… …</li>
</ol>
<h5 id="【第一步】编写通知类"><a href="#【第一步】编写通知类" class="headerlink" title="【第一步】编写通知类"></a>【第一步】编写通知类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//匹配业务层的所有方法</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(* com.itheima.service.*Service.*(..))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">servicePt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置环绕通知，在原始操作的运行前后记录执行时间</span></span><br><span class="line">    <span class="meta">@Around(&quot;ProjectAdvice.servicePt()&quot;)</span> <span class="comment">//本类类名可以省略不写</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">runSpeed</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="comment">//获取执行的签名对象</span></span><br><span class="line">        <span class="type">Signature</span> <span class="variable">signature</span> <span class="operator">=</span> pjp.getSignature();</span><br><span class="line">        <span class="comment">//获取接口/类全限定名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> signature.getDeclaringTypeName();</span><br><span class="line">        <span class="comment">//获取方法名</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">methodName</span> <span class="operator">=</span> signature.getName();</span><br><span class="line">        <span class="comment">//记录开始时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//执行万次操作</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++) &#123;</span><br><span class="line">           pjp.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//记录结束时间</span></span><br><span class="line">        <span class="type">long</span> <span class="variable">end</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//打印执行结果</span></span><br><span class="line">        System.out.println(<span class="string">&quot;万次执行：&quot;</span>+ className+<span class="string">&quot;.&quot;</span>+methodName+<span class="string">&quot;----&gt;&quot;</span> +(end-start) + <span class="string">&quot;ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="【第二步】在SpringConfig配置类上开启AOP注解功能"><a href="#【第二步】在SpringConfig配置类上开启AOP注解功能" class="headerlink" title="【第二步】在SpringConfig配置类上开启AOP注解功能"></a>【第二步】在SpringConfig配置类上开启AOP注解功能</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class,MybatisConfig.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span> <span class="comment">//开启AOP注解功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="【第三步】运行测试类，查看结果"><a href="#【第三步】运行测试类，查看结果" class="headerlink" title="【第三步】运行测试类，查看结果"></a>【第三步】运行测试类，查看结果</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceTestCase</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindById</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Account</span> <span class="variable">account</span> <span class="operator">=</span> accountService.findById(<span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testFindAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Account&gt; list = accountService.findAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/assets/image-20210730164219555.png#id=EXNOD&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<h3 id="2-AOP切入点数据获取"><a href="#2-AOP切入点数据获取" class="headerlink" title="2 AOP切入点数据获取"></a>2 AOP切入点数据获取</h3><h4 id="问题导入-6"><a href="#问题导入-6" class="headerlink" title="问题导入"></a>问题导入</h4><p>在环绕通知中可以获取到哪些数据？</p>
<h4 id="2-1-获取参数"><a href="#2-1-获取参数" class="headerlink" title="2.1 获取参数"></a>2.1 获取参数</h4><blockquote>
<p>说明：在前置通知和环绕通知中都可以获取到连接点方法的参数们</p>
</blockquote>
<ul>
<li>JoinPoint对象描述了连接点方法的运行状态，可以获取到原始方法的调用参数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Before(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">before</span><span class="params">(JoinPoint jp)</span> &#123;</span><br><span class="line">    Object[] args = jp.getArgs(); <span class="comment">//获取连接点方法的参数们</span></span><br><span class="line">    System.out.println(Arrays.toString(args));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ProccedJointPoint是JoinPoint的子类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    Object[] args = pjp.getArgs(); <span class="comment">//获取连接点方法的参数们</span></span><br><span class="line">    System.out.println(Arrays.toString(args));</span><br><span class="line">    <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-获取返回值"><a href="#2-2-获取返回值" class="headerlink" title="2.2 获取返回值"></a>2.2 获取返回值</h4><blockquote>
<p>说明：在返回后通知和环绕通知中都可以获取到连接点方法的返回值</p>
</blockquote>
<ul>
<li>抛出异常后通知可以获取切入点方法中出现的异常信息，使用形参可以接收对应的异常对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterReturning(value = &quot;pt()&quot;,returning = &quot;ret&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterReturning</span><span class="params">(String ret)</span> &#123; <span class="comment">//变量名要和returning=&quot;ret&quot;的属性值一致</span></span><br><span class="line">    System.out.println(<span class="string">&quot;afterReturning advice ...&quot;</span>+ret);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>环绕通知中可以手工书写对原始方法的调用，得到的结果即为原始方法的返回值</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">    <span class="comment">// 手动调用连接点方法，返回值就是连接点方法的返回值</span></span><br><span class="line">    <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed();</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-获取异常"><a href="#2-3-获取异常" class="headerlink" title="2.3 获取异常"></a>2.3 获取异常</h4><blockquote>
<p>说明：在抛出异常后通知和环绕通知中都可以获取到连接点方法中出现的异常</p>
</blockquote>
<ul>
<li>抛出异常后通知可以获取切入点方法中出现的异常信息，使用形参可以接收对应的异常对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@AfterThrowing(value = &quot;pt()&quot;,throwing = &quot;t&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterThrowing</span><span class="params">(Throwable t)</span> &#123;<span class="comment">//变量名要和throwing = &quot;t&quot;的属性值一致</span></span><br><span class="line">    System.out.println(<span class="string">&quot;afterThrowing advice ...&quot;</span>+ t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>抛出异常后通知可以获取切入点方法运行的异常信息，使用形参可以接收运行时抛出的异常对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Around(&quot;pt()&quot;)</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">around</span><span class="params">(ProceedingJoinPoint pjp)</span>  &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//此处需要try...catch处理，catch中捕获到的异常就是连接点方法中抛出的异常</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ret = pjp.proceed();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Throwable t) &#123;</span><br><span class="line">        t.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-案例-百度网盘密码数据兼容处理"><a href="#3-案例-百度网盘密码数据兼容处理" class="headerlink" title="3 案例-百度网盘密码数据兼容处理"></a>3 案例-百度网盘密码数据兼容处理</h3><h4 id="问题导入-7"><a href="#问题导入-7" class="headerlink" title="问题导入"></a>问题导入</h4><p>请说出我们该使用什么类型的通知来完成这个需求？</p>
<h4 id="3-1-需求和分析"><a href="#3-1-需求和分析" class="headerlink" title="3.1 需求和分析"></a>3.1 需求和分析</h4><p>需求：对百度网盘分享链接输入密码时尾部多输入的空格做兼容处理</p>
<p>分析：<br>①：在业务方法执行之前对所有的输入参数进行格式处理——trim()<br>②：使用处理后的参数调用原始方法——环绕通知中存在对原始方法的调用</p>
<h4 id="3-2-代码实现"><a href="#3-2-代码实现" class="headerlink" title="3.2 代码实现"></a>3.2 代码实现</h4><h5 id="【前置工作】环境准备-1"><a href="#【前置工作】环境准备-1" class="headerlink" title="【前置工作】环境准备"></a>【前置工作】环境准备</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//-------------service层代码-----------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ResourcesService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">openURL</span><span class="params">(String url ,String password)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourcesServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">ResourcesService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ResourcesDao resourcesDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">openURL</span><span class="params">(String url, String password)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> resourcesDao.readResources(url,password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//-------------dao层代码-----------------------</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ResourcesDao</span> &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">readResources</span><span class="params">(String url, String password)</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ResourcesDaoImpl</span> <span class="keyword">implements</span> <span class="title class_">ResourcesDao</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">readResources</span><span class="params">(String url, String password)</span> &#123;</span><br><span class="line">        System.out.println(password.length());</span><br><span class="line">        <span class="comment">//模拟校验</span></span><br><span class="line">        <span class="keyword">return</span> password.equals(<span class="string">&quot;root&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="【第一步】编写通知类-1"><a href="#【第一步】编写通知类-1" class="headerlink" title="【第一步】编写通知类"></a>【第一步】编写通知类</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">DataAdvice</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Pointcut(&quot;execution(boolean com.itheima.service.*Service.*(*,*))&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">servicePt</span><span class="params">()</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;DataAdvice.servicePt()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">trimStr</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        Object[] args = pjp.getArgs();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; args.length; i++) &#123;</span><br><span class="line">            <span class="comment">//判断参数是不是字符串</span></span><br><span class="line">            <span class="keyword">if</span>(args[i].getClass().equals(String.class))&#123;</span><br><span class="line">                args[i] = args[i].toString().trim();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">ret</span> <span class="operator">=</span> pjp.proceed(args);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="【第二步】在SpringConfig配置类上开启AOP注解功能-1"><a href="#【第二步】在SpringConfig配置类上开启AOP注解功能-1" class="headerlink" title="【第二步】在SpringConfig配置类上开启AOP注解功能"></a>【第二步】在SpringConfig配置类上开启AOP注解功能</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@EnableAspectJAutoProxy</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="【第三步】运行测试类，查看结果-1"><a href="#【第三步】运行测试类，查看结果-1" class="headerlink" title="【第三步】运行测试类，查看结果"></a>【第三步】运行测试类，查看结果</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">App</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigApplicationContext</span>(SpringConfig.class);</span><br><span class="line">        <span class="type">ResourcesService</span> <span class="variable">resourcesService</span> <span class="operator">=</span> ctx.getBean(ResourcesService.class);</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> resourcesService.openURL(<span class="string">&quot;http://pan.baidu.com/haha&quot;</span>, <span class="string">&quot;root &quot;</span>);</span><br><span class="line">        System.out.println(flag);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-AOP开发总结"><a href="#4-AOP开发总结" class="headerlink" title="4 AOP开发总结"></a>4 AOP开发总结</h3><h4 id="4-1-AOP的核心概念"><a href="#4-1-AOP的核心概念" class="headerlink" title="4.1 AOP的核心概念"></a>4.1 AOP的核心概念</h4><ul>
<li>概念：AOP(Aspect Oriented Programming)面向切面编程，一种编程范式</li>
<li>作用：在不惊动原始设计的基础上为方法进行功能增强</li>
<li>核心概念<ul>
<li>代理（Proxy）：SpringAOP的核心本质是采用代理模式实现的</li>
<li>连接点（JoinPoint）：	在SpringAOP中，理解为任意方法的执行</li>
<li>切入点（Pointcut）：匹配连接点的式子，也是具有共性功能的方法描述</li>
<li>通知（Advice）：若干个方法的共性功能，在切入点处执行，最终体现为一个方法</li>
<li>切面（Aspect）：描述通知与切入点的对应关系</li>
<li>目标对象（Target）：被代理的原始对象成为目标对象</li>
</ul>
</li>
</ul>
<h4 id="4-2-切入点表达式语法"><a href="#4-2-切入点表达式语法" class="headerlink" title="4.2 切入点表达式语法"></a>4.2 切入点表达式语法</h4><ul>
<li>切入点表达式标准格式：动作关键字(访问修饰符  返回值  包名.类&#x2F;接口名.方法名（参数）异常名)<ul>
<li>execution(_ com.itheima.service._Service.*(..))</li>
</ul>
</li>
<li>切入点表达式描述通配符：<ul>
<li>作用：用于快速描述，范围描述</li>
<li>*：匹配任意符号（常用）</li>
<li>.. ：匹配多个连续的任意符号（常用）</li>
<li>+：匹配子类类型</li>
</ul>
</li>
<li>切入点表达式书写技巧<br>1.按标准规范开发<br>2.查询操作的返回值建议使用<em>匹配<br>3.减少使用..的形式描述包<br>4.对接口进行描述，使用</em>表示模块名，例如UserService的匹配描述为<em>Service<br>5.方法名书写保留动词，例如get，使用</em>表示名词，例如getById匹配描述为getBy*<br>6.参数根据实际情况灵活调整</li>
</ul>
<h4 id="4-3-五种通知类型"><a href="#4-3-五种通知类型" class="headerlink" title="4.3 五种通知类型"></a>4.3 五种通知类型</h4><ul>
<li>前置通知</li>
<li>后置通知<ul>
<li>环绕通知（重点）</li>
<li>环绕通知依赖形参ProceedingJoinPoint才能实现对原始方法的调用</li>
<li>环绕通知可以隔离原始方法的调用执行</li>
<li>环绕通知返回值设置为Object类型</li>
<li>环绕通知中可以对原始方法调用过程中出现的异常进行处理</li>
</ul>
</li>
<li>返回后通知</li>
<li>抛出异常后通知</li>
</ul>
<h2 id="三、Spring事务管理"><a href="#三、Spring事务管理" class="headerlink" title="三、Spring事务管理"></a>三、Spring事务管理</h2><h3 id="1-Spring事务简介【重点】"><a href="#1-Spring事务简介【重点】" class="headerlink" title="1 Spring事务简介【重点】"></a>1 Spring事务简介【重点】</h3><h4 id="问题导入-8"><a href="#问题导入-8" class="headerlink" title="问题导入"></a>问题导入</h4><p>Spring提供的事务管理是数据层的事务还是业务层的事务?</p>
<h4 id="1-1-Spring事务作用"><a href="#1-1-Spring事务作用" class="headerlink" title="1.1 Spring事务作用"></a>1.1 Spring事务作用</h4><ul>
<li>事务作用：在数据层保障一系列的数据库操作同成功同失败</li>
<li>Spring事务作用：在数据层或<strong>业务层</strong>保障一系列的数据库操作同成功同失败</li>
</ul>
<p><img src="/assets/image-20210801190820853.png#id=otKsX&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<h4 id="1-2-需求和分析"><a href="#1-2-需求和分析" class="headerlink" title="1.2 需求和分析"></a>1.2 需求和分析</h4><ul>
<li>需求：实现任意两个账户间转账操作</li>
<li>需求微缩：A账户减钱，B账户加钱</li>
<li>分析：<br>①：数据层提供基础操作，指定账户减钱（outMoney），指定账户加钱（inMoney）<br>②：业务层提供转账操作（transfer），调用减钱与加钱的操作<br>③：提供2个账号和操作金额执行转账操作<br>④：基于Spring整合MyBatis环境搭建上述操作</li>
<li>结果分析：<br>①：程序正常执行时，账户金额A减B加，没有问题<br>②：程序出现异常后，转账失败，但是异常之前操作成功，异常之后操作失败，整体业务失败</li>
</ul>
<h4 id="1-3-代码实现"><a href="#1-3-代码实现" class="headerlink" title="1.3 代码实现"></a>1.3 代码实现</h4><h5 id="【前置工作】环境准备-2"><a href="#【前置工作】环境准备-2" class="headerlink" title="【前置工作】环境准备"></a>【前置工作】环境准备</h5><blockquote>
<p>Spring整合Mybatis相关代码(依赖、JdbcConfig、MybatisConfig、SpringConfig)省略。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tbl_account set money = money + #&#123;money&#125; where name = #&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">inMoney</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name, <span class="meta">@Param(&quot;money&quot;)</span> Double money)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tbl_account set money = money - #&#123;money&#125; where name = #&#123;name&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">outMoney</span><span class="params">(<span class="meta">@Param(&quot;name&quot;)</span> String name, <span class="meta">@Param(&quot;money&quot;)</span> Double money)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 转账操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> out 传出方</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> in 转入方</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> money 金额</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span> &#123;</span><br><span class="line">        accountDao.outMoney(out,money);</span><br><span class="line">        <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">        accountDao.inMoney(in,money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="【第一步】在业务层接口上添加Spring事务管理"><a href="#【第一步】在业务层接口上添加Spring事务管理" class="headerlink" title="【第一步】在业务层接口上添加Spring事务管理"></a>【第一步】在业务层接口上添加Spring事务管理</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="comment">//配置当前接口方法具有事务</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意事项</p>
<ol>
<li>Spring注解式事务通常添加在业务层接口中而不会添加到业务层实现类中，降低耦合</li>
<li>注解式事务可以添加到业务方法上表示当前方法开启事务，也可以添加到接口上表示当前接口所有方法开启事务</li>
</ol>
<h5 id="【第二步】设置事务管理器-将事务管理器添加到IOC容器中"><a href="#【第二步】设置事务管理器-将事务管理器添加到IOC容器中" class="headerlink" title="【第二步】设置事务管理器(将事务管理器添加到IOC容器中)"></a>【第二步】设置事务管理器(将事务管理器添加到IOC容器中)</h5><blockquote>
<p>说明：可以在JdbcConfig中配置事务管理器</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置事务管理器，mybatis使用的是jdbc事务</span></span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">    <span class="type">DataSourceTransactionManager</span> <span class="variable">dtm</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">    transactionManager.setDataSource(dataSource);</span><br><span class="line">    <span class="keyword">return</span> transactionManager;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意事项</p>
<ol>
<li>事务管理器要根据实现技术进行选择</li>
<li>MyBatis框架使用的是JDBC事务</li>
</ol>
<h5 id="【第三步】开启注解式事务驱动"><a href="#【第三步】开启注解式事务驱动" class="headerlink" title="【第三步】开启注解式事务驱动"></a>【第三步】开启注解式事务驱动</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class,MybatisConfig.class&#125;)</span></span><br><span class="line"><span class="comment">//开启注解式事务驱动</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="【第四步】运行测试类，查看结果"><a href="#【第四步】运行测试类，查看结果" class="headerlink" title="【第四步】运行测试类，查看结果"></a>【第四步】运行测试类，查看结果</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransfer</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        accountService.transfer(<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;Jerry&quot;</span>,<span class="number">100D</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-Spring事务角色【理解】"><a href="#2-Spring事务角色【理解】" class="headerlink" title="2 Spring事务角色【理解】"></a>2 Spring事务角色【理解】</h3><h4 id="问题导入-9"><a href="#问题导入-9" class="headerlink" title="问题导入"></a>问题导入</h4><p>什么是事务管理员，什么是事务协调员？</p>
<h4 id="2-1-Spring事务角色"><a href="#2-1-Spring事务角色" class="headerlink" title="2.1 Spring事务角色"></a>2.1 Spring事务角色</h4><ul>
<li>事务管理员：发起事务方，在Spring中通常指代业务层开启事务的方法</li>
<li>事务协调员：加入事务方，在Spring中通常指代数据层方法，也可以是业务层方法</li>
</ul>
<p><img src="/assets/image-20210801192453227.png#id=JX1tn&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<h3 id="3-Spring事务相关配置"><a href="#3-Spring事务相关配置" class="headerlink" title="3 Spring事务相关配置"></a>3 Spring事务相关配置</h3><h4 id="问题导入-10"><a href="#问题导入-10" class="headerlink" title="问题导入"></a>问题导入</h4><p>什么样的异常，Spring事务默认是不进行回滚的？</p>
<h4 id="3-1-事务配置"><a href="#3-1-事务配置" class="headerlink" title="3.1 事务配置"></a>3.1 事务配置</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695896648401-86ab3c98-594b-43c3-98da-697f45785824.png#clientId=u458f7ce2-b5d6-4&from=paste&height=867&id=uff6aa079&originHeight=867&originWidth=1848&originalType=binary&ratio=1&rotation=0&showTitle=false&size=191775&status=done&style=none&taskId=u869b3c41-6ab4-4008-9c3d-967aaa9a5eb&title=&width=1848" alt="image-20210802151553053.png"></p>
<blockquote>
<p>说明：对于RuntimeException类型异常或者Error错误，Spring事务能够进行回滚操作。但是对于编译器异常，Spring事务是不进行回滚的，所以需要使用rollbackFor来设置要回滚的异常。</p>
</blockquote>
<h4 id="3-2-案例：转账业务追加日志"><a href="#3-2-案例：转账业务追加日志" class="headerlink" title="3.2 案例：转账业务追加日志"></a>3.2 案例：转账业务追加日志</h4><h5 id="需求和分析"><a href="#需求和分析" class="headerlink" title="需求和分析"></a>需求和分析</h5><ul>
<li>需求：实现任意两个账户间转账操作，并对每次转账操作在数据库进行留痕</li>
<li>需求微缩：A账户减钱，B账户加钱，数据库记录日志</li>
<li>分析：<br>①：基于转账操作案例添加日志模块，实现数据库中记录日志<br>②：业务层转账操作（transfer），调用减钱、加钱与记录日志功能</li>
<li>实现效果预期：<br>无论转账操作是否成功，均进行转账操作的日志留痕</li>
<li>存在的问题：<br>日志的记录与转账操作隶属同一个事务，同成功同失败</li>
<li>实现效果预期改进：<br>无论转账操作是否成功，日志必须保留</li>
<li>事务传播行为：事务协调员对事务管理员所携带事务的处理态度</li>
</ul>
<p><img src="/assets/image-20210802153216460.png#id=wf125&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<h5 id="【准备工作】环境整备"><a href="#【准备工作】环境整备" class="headerlink" title="【准备工作】环境整备"></a>【准备工作】环境整备</h5><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">USE spring_db;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tbl_log(</span><br><span class="line">	id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT,</span><br><span class="line">	info <span class="type">VARCHAR</span>(<span class="number">255</span>),</span><br><span class="line">	createDate <span class="type">DATE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LogService</span> &#123;</span><br><span class="line">    <span class="comment">//propagation设置事务属性：传播行为设置为当前操作需要新事务</span></span><br><span class="line">    <span class="meta">@Transactional</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String out, String in, Double money)</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LogServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">LogService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LogDao logDao;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String out,String in,Double money )</span> &#123;</span><br><span class="line">        logDao.log(<span class="string">&quot;转账操作由&quot;</span>+out+<span class="string">&quot;到&quot;</span>+in+<span class="string">&quot;,金额：&quot;</span>+money);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LogDao</span> &#123;</span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tbl_log (info,createDate) values(#&#123;info&#125;,now())&quot;)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String info)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="【第一步】在AccountServiceImpl中调用logService中添加日志的方法"><a href="#【第一步】在AccountServiceImpl中调用logService中添加日志的方法" class="headerlink" title="【第一步】在AccountServiceImpl中调用logService中添加日志的方法"></a>【第一步】在AccountServiceImpl中调用logService中添加日志的方法</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">AccountService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountDao accountDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> LogService logService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transfer</span><span class="params">(String out,String in ,Double money)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            accountDao.outMoney(out,money);</span><br><span class="line">            <span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">1</span>/<span class="number">0</span>;</span><br><span class="line">            accountDao.inMoney(in,money);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            logService.log(out,in,money);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="【第二步】在LogService的log-方法上设置事务的传播行为"><a href="#【第二步】在LogService的log-方法上设置事务的传播行为" class="headerlink" title="【第二步】在LogService的log()方法上设置事务的传播行为"></a>【第二步】在LogService的log()方法上设置事务的传播行为</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">LogService</span> &#123;</span><br><span class="line">    <span class="comment">//propagation设置事务属性：传播行为设置为当前操作需要新事务</span></span><br><span class="line">    <span class="meta">@Transactional(propagation = Propagation.REQUIRES_NEW)</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">log</span><span class="params">(String out, String in, Double money)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="【第三步】运行测试类，查看结果-2"><a href="#【第三步】运行测试类，查看结果-2" class="headerlink" title="【第三步】运行测试类，查看结果"></a>【第三步】运行测试类，查看结果</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AccountServiceTest</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AccountService accountService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testTransfer</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        accountService.transfer(<span class="string">&quot;Tom&quot;</span>,<span class="string">&quot;Jerry&quot;</span>,<span class="number">50D</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-事务传播行为"><a href="#3-3-事务传播行为" class="headerlink" title="3.3 事务传播行为"></a>3.3 事务传播行为</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695896700337-fb1e29c2-9d71-4259-a0b7-a1992ace21a2.png#clientId=u458f7ce2-b5d6-4&from=paste&height=882&id=u952941f0&originHeight=882&originWidth=1905&originalType=binary&ratio=1&rotation=0&showTitle=false&size=121268&status=done&style=none&taskId=u1c44cae3-6363-4af4-a95e-e7d6e528008&title=&width=1905" alt="image-20210802153014296.png"><br><img src="/assets/image-20210802153014296.png#id=BHxJ7&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot</title>
    <url>/2024/04/26/springboot/</url>
    <content><![CDATA[<h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul>
<li><input disabled="" type="checkbox"> 基于SpringBoot框架的程序开发步骤</li>
<li><input disabled="" type="checkbox"> 熟练使用SpringBoot配置信息修改服务器配置</li>
<li><input disabled="" type="checkbox"> 基于SpringBoot的完成SSM整合项目开发</li>
</ul>
<h2 id="一、SpringBoot简介"><a href="#一、SpringBoot简介" class="headerlink" title="一、SpringBoot简介"></a>一、SpringBoot简介</h2><h3 id="1-入门案例"><a href="#1-入门案例" class="headerlink" title="1. 入门案例"></a>1. 入门案例</h3><h4 id="问题导入"><a href="#问题导入" class="headerlink" title="问题导入"></a>问题导入</h4><p>SpringMVC的HelloWord程序大家还记得吗？</p>
<ul>
<li>SpringBoot是由Pivotal团队提供的全新框架，其设计目的是用来简化Spring应用的初始搭建以及开发过程</li>
</ul>
<h4 id="1-1-入门案例开发步骤"><a href="#1-1-入门案例开发步骤" class="headerlink" title="1.1 入门案例开发步骤"></a>1.1 入门案例开发步骤</h4><p>①：创建新模块，选择Spring初始化，并配置模块相关基础信息<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695900196994-ca749a76-0265-40fb-913b-4789b656b799.png#clientId=u20633d59-751c-4&from=paste&height=507&id=u9c674548&originHeight=507&originWidth=1182&originalType=binary&ratio=1&rotation=0&showTitle=false&size=133972&status=done&style=none&taskId=ua6bd8ecf-35ca-4fa4-bd40-95f96b39c4d&title=&width=1182" alt="image-20210811183922621.png"><br>②：选择当前模块需要使用的技术集<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695900210841-7b72d6c5-028a-4adc-8c96-8c1176f2deba.png#clientId=u20633d59-751c-4&from=paste&height=499&id=u21859345&originHeight=499&originWidth=1128&originalType=binary&ratio=1&rotation=0&showTitle=false&size=85480&status=done&style=none&taskId=uc6682488-1b53-48e8-bbfa-e2e0af3ec8b&title=&width=1128" alt="image-20210811183956586.png"></p>
<p>③：开发控制器类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;id ==&gt; &quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello , spring boot! &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>④：运行自动生成的Application类</p>
<ul>
<li>最简SpringBoot程序所包含的基础文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-01-quickstart<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Application</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>Spring程序与SpringBoot程序对比</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695900238429-61c334e3-1d79-4a43-a630-874276768dd8.png#clientId=u20633d59-751c-4&from=paste&height=306&id=u64a7b8bb&originHeight=306&originWidth=1139&originalType=binary&ratio=1&rotation=0&showTitle=false&size=28624&status=done&style=none&taskId=u6e3aadd3-5133-47da-8e33-d21607dce6d&title=&width=1139" alt="image-20210811184326884.png"></p>
<p><strong>注意事项：</strong><br><strong>基于idea开发SpringBoot程序需要确保联网且能够加载到程序框架结构</strong></p>
<h4 id="1-3-SpringBoot项目快速启动"><a href="#1-3-SpringBoot项目快速启动" class="headerlink" title="1.3 SpringBoot项目快速启动"></a>1.3 SpringBoot项目快速启动</h4><p>① 对SpringBoot项目打包（执行Maven构建指令package）<br>② 执行启动指令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java -jar springboot_01_quickstart.jar	# 项目的名称根据实际情况修改</span><br></pre></td></tr></table></figure>

<p><strong>注意事项：</strong><br><strong>jar支持命令行启动需要依赖maven插件支持，请确认打包时是否具有SpringBoot对应的maven插件。</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-SpringBoot概述"><a href="#2-SpringBoot概述" class="headerlink" title="2. SpringBoot概述"></a>2. SpringBoot概述</h3><h4 id="问题导入-1"><a href="#问题导入-1" class="headerlink" title="问题导入"></a>问题导入</h4><p>学习了SpringBoot入门案例之后，感觉对比SpringMVC哪一个更加方便简洁？</p>
<ul>
<li>SpringBoot是由Pivotal团队提供的全新框架，其设计目的是用来<strong>简化</strong>Spring应用的<strong>初始搭建</strong>以及<strong>开发过程</strong></li>
<li>Spring程序缺点<ul>
<li>配置繁琐</li>
<li>依赖设置繁琐</li>
</ul>
</li>
<li>SpringBoot程序优点<ul>
<li>自动配置</li>
<li>起步依赖（简化依赖配置）</li>
<li>辅助功能（内置服务器，……）</li>
</ul>
</li>
</ul>
<h4 id="2-1-起步依赖"><a href="#2-1-起步依赖" class="headerlink" title="2.1 起步依赖"></a>2.1 起步依赖</h4><ul>
<li>starter<ul>
<li>SpringBoot中常见项目名称，定义了当前项目使用的所有项目坐标，以达到减少依赖配置的目的</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.itheima<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springboot-01-quickstart<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-api.version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">servlet-api.version</span>&gt;</span>        </span><br><span class="line">        ...</span><br><span class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>parent<ul>
<li>所有SpringBoot项目要继承的项目，定义了若干个坐标版本号（依赖管理，而非依赖），以达到减少依赖冲突的目的</li>
<li>spring-boot-starter-parent（2.5.0）与 spring-boot-starter-parent（2.4.6）共计57处坐标版本不同</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span>    </span><br><span class="line">    ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>实际开发<ul>
<li>使用任意坐标时，仅书写GAV中的G和A，V由SpringBoot提供</li>
<li>如发生坐标错误，再指定version（要小心版本冲突）</li>
</ul>
</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;servlet-api.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-辅助功能"><a href="#2-2-辅助功能" class="headerlink" title="2.2 辅助功能"></a>2.2 辅助功能</h4><ul>
<li>SpringBoot程序启动</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Springboot01QuickstartApplication</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        SpringApplication.run(Springboot01QuickstartApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>SpringBoot在创建项目时，采用jar的打包方式</li>
<li>SpringBoot的引导类是项目的入口，运行main方法就可以启动项目</li>
<li>使用maven依赖管理变更起步依赖项</li>
<li>Jetty比Tomcat更轻量级，可扩展性更强（相较于Tomcat），谷歌应用引擎（GAE）已经全面切换为Jetty</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--web起步依赖环境中，排除Tomcat起步依赖--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-tomcat<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--添加Jetty起步依赖，版本由SpringBoot的starter控制--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jetty<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="二、基础配置"><a href="#二、基础配置" class="headerlink" title="二、基础配置"></a>二、基础配置</h2><h3 id="1-配置文件格式"><a href="#1-配置文件格式" class="headerlink" title="1. 配置文件格式"></a>1. 配置文件格式</h3><h4 id="问题导入-2"><a href="#问题导入-2" class="headerlink" title="问题导入"></a>问题导入</h4><p>框架常见的配置文件有哪几种形式？</p>
<h4 id="1-1-修改服务器端口"><a href="#1-1-修改服务器端口" class="headerlink" title="1.1 修改服务器端口"></a>1.1 修改服务器端口</h4><p><a href="http://localhost:8080/books/1">http://localhost:8080/books/1</a>		&gt;&gt;&gt;		<a href="http://localhost/books/1">http://localhost/books/1</a></p>
<p>SpringBoot提供了多种属性配置方式</p>
<ul>
<li>application.properties</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></table></figure>

<ul>
<li>application.yml</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">81</span></span><br></pre></td></tr></table></figure>

<ul>
<li>application.yaml</li>
</ul>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">82</span></span><br></pre></td></tr></table></figure>

<h4 id="1-2-自动提示功能消失解决方案"><a href="#1-2-自动提示功能消失解决方案" class="headerlink" title="1.2 自动提示功能消失解决方案"></a>1.2 自动提示功能消失解决方案</h4><p>操作步骤：<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695900318688-1218f649-9182-4de6-b2b7-a5e489aef048.png#clientId=u20633d59-751c-4&from=paste&height=239&id=uf698ff6f&originHeight=239&originWidth=310&originalType=binary&ratio=1&rotation=0&showTitle=false&size=37073&status=done&style=none&taskId=ubf78f696-064c-4b4b-8d01-522c7d6d615&title=&width=310" alt="image-20210811211456419.png"><br><img src="/assets/image-20210811211456419.png#id=gQuUx&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695900326198-0b4596e9-1e21-41fa-8809-81afdf646c9b.png#clientId=u20633d59-751c-4&from=paste&height=251&id=ue5544911&originHeight=297&originWidth=424&originalType=binary&ratio=1&rotation=0&showTitle=false&size=18005&status=done&style=none&taskId=u42ba9e55-0263-49de-87c6-3a908300e99&title=&width=358" alt="image-20210811211507840.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695900333538-4c2bc339-0943-4d15-b1cd-b6ae76cada42.png#clientId=u20633d59-751c-4&from=paste&height=168&id=ud94e83ee&originHeight=192&originWidth=416&originalType=binary&ratio=1&rotation=0&showTitle=false&size=21964&status=done&style=none&taskId=u1a1cdf28-bda5-4133-b4f6-0537ecd5929&title=&width=364" alt="image-20210811211516197.png"><br><img src="/assets/image-20210811211507840.png#id=VOJNt&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695900347044-4cea8163-9ddc-4acf-8302-e8e18d811310.png#clientId=u20633d59-751c-4&from=paste&height=195&id=u83ba30b6&originHeight=251&originWidth=634&originalType=binary&ratio=1&rotation=0&showTitle=false&size=19241&status=done&style=none&taskId=ufb444893-cccb-4fd8-9c7e-b7de74fc2fa&title=&width=492" alt="image-20210811211525671.png"><br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695900354532-382c7798-04aa-4f0b-9e38-115250c1d24e.png#clientId=u20633d59-751c-4&from=paste&height=284&id=ue7bb67da&originHeight=371&originWidth=526&originalType=binary&ratio=1&rotation=0&showTitle=false&size=44311&status=done&style=none&taskId=u365cc1dd-784f-416b-a83d-c3745624a70&title=&width=403" alt="image-20210811211548589.png"><br><img src="/assets/image-20210811211516197.png#id=Vwd4Q&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695900366328-4871a3a5-c824-4381-8952-07185ea1f6d7.png#clientId=u20633d59-751c-4&from=paste&height=271&id=uec7be845&originHeight=337&originWidth=633&originalType=binary&ratio=1&rotation=0&showTitle=false&size=90331&status=done&style=none&taskId=u78f7baa7-a9fa-4f2c-ba85-0587d6bfcd5&title=&width=509" alt="image-20210811211556445.png"></p>
<h4 id="1-3-SpringBoot配置文件加载顺序（了解）"><a href="#1-3-SpringBoot配置文件加载顺序（了解）" class="headerlink" title="1.3 SpringBoot配置文件加载顺序（了解）"></a>1.3 SpringBoot配置文件加载顺序（了解）</h4><ul>
<li>application.<strong>properties</strong> &gt; application.<strong>yml</strong> &gt; application.<strong>yaml</strong></li>
</ul>
<p><strong>注意事项：</strong></p>
<ol>
<li><strong>SpringBoot核心配置文件名为application</strong></li>
<li><strong>SpringBoot内置属性过多，且所有属性集中在一起修改，在使用时，通过提示键+关键字修改属性</strong></li>
</ol>
<h3 id="2-yaml"><a href="#2-yaml" class="headerlink" title="2. yaml"></a>2. yaml</h3><h4 id="问题导入-3"><a href="#问题导入-3" class="headerlink" title="问题导入"></a>问题导入</h4><p>什么是yaml，和properties有什么区别？</p>
<ul>
<li>YAML（YAML Ain’t Markup Language），一种数据序列化格式</li>
<li>优点：<ul>
<li>容易阅读</li>
<li>容易与脚本语言交互</li>
<li>以数据为核心，重数据轻格式</li>
</ul>
</li>
<li>YAML文件扩展名<ul>
<li>.yml（主流）</li>
<li>.yaml</li>
</ul>
</li>
</ul>
<h4 id="2-1-yaml语法规则"><a href="#2-1-yaml语法规则" class="headerlink" title="2.1 yaml语法规则"></a>2.1 yaml语法规则</h4><ul>
<li>大小写敏感</li>
<li>属性层级关系使用多行描述，每行结尾使用冒号结束</li>
<li>使用缩进表示层级关系，同层级左侧对齐，只允许使用空格（不允许使用Tab键）</li>
<li>属性值前面添加空格（属性名与属性值之间使用冒号+空格作为分隔）</li>
<li>#表示注释</li>
<li>核心规则：<strong>数据前面要加空格与冒号隔开</strong></li>
</ul>
<h4 id="2-2-yaml数组数据"><a href="#2-2-yaml数组数据" class="headerlink" title="2.2 yaml数组数据"></a>2.2 yaml数组数据</h4><ul>
<li>数组数据在数据书写位置的下方使用减号作为数据开始符号，每行书写一个数据，减号与数据间空格分隔</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695900417018-84745714-dfbb-4e5a-b3c6-a38e2cd24ee7.png#clientId=u20633d59-751c-4&from=paste&height=233&id=ud53c14f2&originHeight=282&originWidth=322&originalType=binary&ratio=1&rotation=0&showTitle=false&size=9328&status=done&style=none&taskId=uef0b20d7-9a0c-4b1d-b96c-bb10ab2bb58&title=&width=266" alt="image-20210811195722156.png"><br><img src="/assets/image-20210811195722156.png#id=u0AwQ&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<h4 id="2-3-yaml数据读取"><a href="#2-3-yaml数据读取" class="headerlink" title="2.3 yaml数据读取"></a>2.3 yaml数据读取</h4><ul>
<li>使用@Value读取单个数据，属性名引用方式：${一级属性名.二级属性名……}</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695900435469-bcb42aee-6841-44b2-8db1-92c783bbd737.png#clientId=u20633d59-751c-4&from=paste&height=502&id=u7a562def&originHeight=502&originWidth=1051&originalType=binary&ratio=1&rotation=0&showTitle=false&size=54226&status=done&style=none&taskId=u5b530f93-a8a9-43e6-bef1-7447fab5165&title=&width=1051" alt="image-20210811195801430.png"><br><img src="/assets/image-20210811195801430.png#id=dwK61&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<ul>
<li>封装全部数据到Environment对象</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695900446867-68a26757-f4a5-4dba-9e19-e26074f34389.png#clientId=u20633d59-751c-4&from=paste&height=501&id=u70e7e008&originHeight=501&originWidth=1278&originalType=binary&ratio=1&rotation=0&showTitle=false&size=91515&status=done&style=none&taskId=u755f2d41-897b-4fdf-9442-c3a31c50b0b&title=&width=1278" alt="image-20210811195823054.png"><br><img src="/assets/image-20210811195823054.png#id=EKKt8&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<ul>
<li><strong>自定义对象封装指定数据【常用】</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Enterprise</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="keyword">private</span> String tel;</span><br><span class="line">    <span class="keyword">private</span> String[] subject;</span><br><span class="line">    <span class="comment">//自行添加getter、setter、toString()等方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695900496865-df004d55-22ca-459a-9df1-e9eb1183affb.png#clientId=u20633d59-751c-4&from=paste&height=525&id=uc4a81fbb&originHeight=525&originWidth=1326&originalType=binary&ratio=1&rotation=0&showTitle=false&size=59644&status=done&style=none&taskId=udb859213-8803-4c16-ae48-f2048347b50&title=&width=1326" alt="image-20210811195844691.png"><br><img src="/assets/image-20210811195844691.png#id=gxdTS&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<ul>
<li>自定义对象封装数据警告解决方案</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695900530139-5b95f18d-fe74-4cf7-b4dd-97bb37d25ac2.png#clientId=u20633d59-751c-4&from=paste&height=121&id=ue8da7ac5&originHeight=121&originWidth=1801&originalType=binary&ratio=1&rotation=0&showTitle=false&size=18925&status=done&style=none&taskId=ue5739ad8-08b0-4907-95f1-daad8372ab9&title=&width=1801" alt="image-20210815102251887.png"></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-多环境开发配置"><a href="#3-多环境开发配置" class="headerlink" title="3. 多环境开发配置"></a>3. 多环境开发配置</h3><h4 id="问题导入-4"><a href="#问题导入-4" class="headerlink" title="问题导入"></a>问题导入</h4><p>在实际开发中，项目的开发环境、测试环境、生产环境的配置信息是否会一致？如何快速切换？</p>
<h4 id="3-1-多环境启动配置"><a href="#3-1-多环境启动配置" class="headerlink" title="3.1 多环境启动配置"></a>3.1 多环境启动配置</h4><ul>
<li><strong>yaml文件多环境启动</strong></li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695900581412-62df0776-c68c-4f04-846b-5223bee2058d.png#clientId=u20633d59-751c-4&from=paste&height=536&id=u7069b952&originHeight=536&originWidth=1172&originalType=binary&ratio=1&rotation=0&showTitle=false&size=59112&status=done&style=none&taskId=u6a6663a7-ba97-40c6-9c10-54d5b845fa3&title=&width=1172" alt="image-20210811200002937.png"><br><img src="/assets/image-20210811195942997.png#id=Q9zNK&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695900588859-eb162ac5-6799-4218-a4cc-2d4f68965de2.png#clientId=u20633d59-751c-4&from=paste&height=427&id=u022ec9d9&originHeight=427&originWidth=1105&originalType=binary&ratio=1&rotation=0&showTitle=false&size=29232&status=done&style=none&taskId=u2062aeb3-1fa3-4717-b5f4-3b5e899d8bf&title=&width=1105" alt="image-20210811200030710.png"></p>
<ul>
<li><strong>properties文件多环境启动</strong></li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#主启动配置文件 application.properties</span></span><br><span class="line"><span class="attr">spring.profiles.active</span>=<span class="string">pro</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#环境分类配置文件 application-pro.properties</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">80</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#环境分类配置文件 application-dev.properties</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">81</span></span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#环境分类配置文件application-test.properties</span></span><br><span class="line"><span class="attr">server.port</span>=<span class="string">82</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-多环境启动命令格式"><a href="#3-2-多环境启动命令格式" class="headerlink" title="3.2 多环境启动命令格式"></a>3.2 多环境启动命令格式</h4><ul>
<li>带参数启动SpringBoot</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">java</span> <span class="string">–jar springboot.jar --spring.profiles.active=test</span></span><br><span class="line"><span class="attr">java</span> <span class="string">–jar springboot.jar --server.port=88</span></span><br><span class="line"><span class="attr">java</span> <span class="string">–jar springboot.jar --server.port=88 --spring.profiles.active=test</span></span><br></pre></td></tr></table></figure>

<ul>
<li>参数加载优先顺序<ul>
<li>参看文档：<a href="https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html">https://docs.spring.io/spring-boot/docs/current/reference/html/spring-boot-features.html#boot-features-external-config</a></li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695900647334-a25a26d1-7229-4ed4-9be2-097f9fcbe221.png#clientId=u20633d59-751c-4&from=paste&height=519&id=ua1dff41c&originHeight=519&originWidth=1057&originalType=binary&ratio=1&rotation=0&showTitle=false&size=198529&status=done&style=none&taskId=u906dddb3-36fa-450b-953a-572fa34e6fa&title=&width=1057" alt="image-20210811200354075.png"><br><img src="/assets/image-20210811200354075.png#id=IM1dm&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<h4 id="3-3-多环境开发控制"><a href="#3-3-多环境开发控制" class="headerlink" title="3.3 多环境开发控制"></a>3.3 多环境开发控制</h4><p><strong>Maven与SpringBoot多环境兼容（步骤）</strong><br>①：Maven中设置多环境属性</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profiles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>dev_env<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>dev<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activation</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">activeByDefault</span>&gt;</span>true<span class="tag">&lt;/<span class="name">activeByDefault</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activation</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>pro_env<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>pro<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">profile</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>test_env<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">profile.active</span>&gt;</span>test<span class="tag">&lt;/<span class="name">profile.active</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">profiles</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>②：SpringBoot中引用Maven属性</p>
<p><img src="/assets/image-20210811200516648.png#id=jpeOz&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<p>③：执行Maven打包指令</p>
<ul>
<li>Maven指令执行完毕后，生成了对应的包，其中类参与编译，但是配置文件并没有编译，而是复制到包中</li>
</ul>
<p><img src="/assets/image-20210811200646189.png#id=tsAVO&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<ul>
<li>解决思路：对于源码中非java类的操作要求加载Maven对应的属性，解析${}占位符</li>
</ul>
<p>④：对资源文件开启对默认占位符的解析</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">encoding</span>&gt;</span>utf-8<span class="tag">&lt;/<span class="name">encoding</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">useDefaultDelimiters</span>&gt;</span>true<span class="tag">&lt;/<span class="name">useDefaultDelimiters</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Maven打包加载到属性，打包顺利通过</li>
</ul>
<p><img src="/assets/image-20210811200628431.png#id=EQgqN&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<h3 id="4-配置文件分类"><a href="#4-配置文件分类" class="headerlink" title="4. 配置文件分类"></a>4. 配置文件分类</h3><h4 id="问题导入-5"><a href="#问题导入-5" class="headerlink" title="问题导入"></a>问题导入</h4><p>SpringBoot的配置文件可以放在项目的哪些地方？</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">java</span> <span class="string">–jar springboot.jar --spring.profiles.active=test --server.port=85 --server.servlet.context-path=/heima --server.tomcat.connection-timeout=-1 ... ...</span></span><br></pre></td></tr></table></figure>

<ul>
<li>SpringBoot中4级配置文件<br>1级： file ：config&#x2F;application.yml 【最高】<br>2级： file ：application.yml<br>3级：classpath：config&#x2F;application.yml<br>4级：classpath：application.yml  【最低】</li>
<li>作用：<br>1级与2级留做系统打包后设置通用属性<br>3级与4级用于系统开发阶段设置通用属性</li>
</ul>
<h2 id="三、整合第三方技术"><a href="#三、整合第三方技术" class="headerlink" title="三、整合第三方技术"></a>三、整合第三方技术</h2><h3 id="1-整合JUnit"><a href="#1-整合JUnit" class="headerlink" title="1. 整合JUnit"></a>1. 整合JUnit</h3><h4 id="问题导入-6"><a href="#问题导入-6" class="headerlink" title="问题导入"></a>问题导入</h4><p>回忆一下Spring整合JUnit的步骤？</p>
<h4 id="1-1-Spring整合JUnit（复习）"><a href="#1-1-Spring整合JUnit（复习）" class="headerlink" title="1.1 Spring整合JUnit（复习）"></a>1.1 Spring整合JUnit（复习）</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695900759422-a53b0356-16ce-4f78-a1ab-fc98e60bf5b0.png#clientId=u20633d59-751c-4&from=paste&height=486&id=u5d550f43&originHeight=486&originWidth=1166&originalType=binary&ratio=1&rotation=0&showTitle=false&size=51641&status=done&style=none&taskId=u072e2932-4935-43d8-8f3e-62677406305&title=&width=1166" alt="image-20210811200833143.png"></p>
<h4 id="1-2-SpringBoot整合JUnit"><a href="#1-2-SpringBoot整合JUnit" class="headerlink" title="1.2 SpringBoot整合JUnit"></a>1.2 SpringBoot整合JUnit</h4><p>【第一步】添加整合junit起步依赖(可以直接勾选)</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>【第二步】编写测试类，默认自动生成了一个</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot07JunitApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testSave</span><span class="params">()</span> &#123;</span><br><span class="line">        bookService.save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-基于SpringBoot实现SSM整合"><a href="#2-基于SpringBoot实现SSM整合" class="headerlink" title="2. 基于SpringBoot实现SSM整合"></a>2. 基于SpringBoot实现SSM整合</h3><h4 id="问题导入-7"><a href="#问题导入-7" class="headerlink" title="问题导入"></a>问题导入</h4><p>回忆一下Spring整合MyBatis的核心思想？</p>
<h4 id="2-1-Spring整合MyBatis（复习）"><a href="#2-1-Spring整合MyBatis（复习）" class="headerlink" title="2.1 Spring整合MyBatis（复习）"></a>2.1 Spring整合MyBatis（复习）</h4><ul>
<li>SpringConfig<ul>
<li>导入JdbcConfig</li>
<li>导入MyBatisConfig</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima&quot;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class, MyBatisConfig.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>JDBCConfig<ul>
<li>定义数据源（加载properties配置项：driver、url、username、password）</li>
</ul>
</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#jdbc.properties</span></span><br><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/spring_db</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">itheima</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String userName;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">getDataSource</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        ds.setDriverClassName(driver);</span><br><span class="line">        ds.setUrl(url);</span><br><span class="line">        ds.setUsername(userName);</span><br><span class="line">        ds.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>MyBatisConfig<ul>
<li>定义SqlSessionFactoryBean</li>
<li>定义映射配置</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">getSqlSessionFactoryBean</span><span class="params">(DataSource dataSource)</span> &#123;</span><br><span class="line">    <span class="type">SqlSessionFactoryBean</span> <span class="variable">ssfb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">    ssfb.setTypeAliasesPackage(<span class="string">&quot;com.itheima.domain&quot;</span>);</span><br><span class="line">    ssfb.setDataSource(dataSource);</span><br><span class="line">    <span class="keyword">return</span> ssfb;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">getMapperScannerConfigurer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">    msc.setBasePackage(<span class="string">&quot;com.itheima.dao&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> msc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-SpringBoot整合MyBatis"><a href="#2-2-SpringBoot整合MyBatis" class="headerlink" title="2.2 SpringBoot整合MyBatis"></a>2.2 SpringBoot整合MyBatis</h4><ul>
<li>SpringBoot整合Spring（不存在）</li>
<li>SpringBoot整合SpringMVC（不存在）</li>
<li>SpringBoot整合MyBatis（主要）</li>
</ul>
<p>①：创建新模块，选择Spring初始化，并配置模块相关基础信息<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695900801742-74ea1822-d8f9-4ca4-8452-00d1adfcf263.png#clientId=u20633d59-751c-4&from=paste&height=502&id=u1a591e13&originHeight=502&originWidth=1175&originalType=binary&ratio=1&rotation=0&showTitle=false&size=133834&status=done&style=none&taskId=u22585a36-fb9b-47cf-8020-7902f16af11&title=&width=1175" alt="image-20210811201314649.png"><br><img src="/assets/image-20210811201314649.png#id=Vvzop&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>②：选择当前模块需要使用的技术集（MyBatis、MySQL）<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695900815824-6ad7d0bb-b974-4d7d-8a1c-7aa260ea018c.png#clientId=u20633d59-751c-4&from=paste&height=462&id=ucfd14b3b&originHeight=462&originWidth=736&originalType=binary&ratio=1&rotation=0&showTitle=false&size=93088&status=done&style=none&taskId=u9ffed64d-20ae-479f-b750-aaefd3266f4&title=&width=736" alt="image-20210811201328652.png"><br><img src="/assets/image-20210811201328652.png#id=bjJ8E&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>③：设置数据源参数</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db?serverTimezone=UTC</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure>

<p>注意事项：</p>
<ol>
<li>SpringBoot版本低于2.4.3(不含)，Mysql驱动版本大于8.0时，需要在url连接串中配置时区，或在MySQL数据库端配置时区解决此问题</li>
</ol>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc</span>:<span class="string">mysql://localhost:3306/ssm_db?serverTimezone=UTC</span></span><br></pre></td></tr></table></figure>

<p>④：定义数据层接口与映射配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">UserDao</span> &#123;</span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book where id=#&#123;id&#125;&quot;)</span></span><br><span class="line">    Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>⑤：测试类中注入dao接口，测试功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Springboot08MybatisApplicationTests</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookDao.getById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-案例-SpringBoot实现ssm整合"><a href="#2-3-案例-SpringBoot实现ssm整合" class="headerlink" title="2.3 案例-SpringBoot实现ssm整合"></a>2.3 案例-SpringBoot实现ssm整合</h4><p><strong>【第一步】创建SpringBoot工程，添加druid依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- todo 1 添加druid连接池依赖--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>【第二步】复制springmvc_11_page工程各种资源(主java类、页面、测试类)</strong></p>
<p><strong>【第三步】删除config包中的所有配置，在BookDao接口上加@Mapper注解</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//todo 3 在BookDao接口上加@Mapper注解，让SpringBoot给接口创建代理对象</span></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>【第四步】将application.properties修改成application.yml，配置端口号和连接参数</strong></p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"><span class="comment"># todo 4 配置数据库连接参数</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://localhost:3306/ssm_db</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">com.alibaba.druid.pool.DruidDataSource</span></span><br></pre></td></tr></table></figure>

<p><strong>【第五步】修改BookServiceTest配置类，进行配置</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// todo 5 修改单元测试类，添加@SpringBootTest主键，修复@Test注解导包</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getById(<span class="number">2</span>); <span class="comment">//传递参数1会抛出异常</span></span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Book&gt; all = bookService.getAll();</span><br><span class="line">        System.out.println(all);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>【第六步】在static目录中提供index.html页面，跳转到”pages&#x2F;books.html”</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    location.<span class="property">href</span>=<span class="string">&quot;pages/books.html&quot;</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>最后：运行引导类即可访问</strong></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>springmvc_2</title>
    <url>/2024/04/24/springmvc-2/</url>
    <content><![CDATA[<h2 id="今日内容"><a href="#今日内容" class="headerlink" title="今日内容"></a>今日内容</h2><ul>
<li><input disabled="" type="checkbox"> 能够掌握SSM整合的流程</li>
<li><input disabled="" type="checkbox"> 能够编写SSM整合功能模块类</li>
<li><input disabled="" type="checkbox"> 能够使用Result统一表现层响应结果</li>
<li><input disabled="" type="checkbox"> 能够编写异常处理器进行项目异常</li>
<li><input disabled="" type="checkbox"> 能够完成SSM整合前端页面发送请求实现增删改查操作</li>
<li><input disabled="" type="checkbox"> 能够编写拦截器并配置拦截器</li>
</ul>
<h2 id="一、SSM整合【重点】"><a href="#一、SSM整合【重点】" class="headerlink" title="一、SSM整合【重点】"></a>一、SSM整合【重点】</h2><h3 id="1-SSM整合配置"><a href="#1-SSM整合配置" class="headerlink" title="1 SSM整合配置"></a>1 SSM整合配置</h3><h4 id="问题导入"><a href="#问题导入" class="headerlink" title="问题导入"></a>问题导入</h4><p>请描述“SSM整合流程”中各个配置类的作用？</p>
<h4 id="1-1-SSM整合流程"><a href="#1-1-SSM整合流程" class="headerlink" title="1.1 SSM整合流程"></a>1.1 SSM整合流程</h4><ol>
<li>创建工程</li>
<li>SSM整合<ul>
<li>Spring<ul>
<li>SpringConfig</li>
</ul>
</li>
<li>MyBatis<ul>
<li>MybatisConfig</li>
<li>JdbcConfig</li>
<li>jdbc.properties</li>
</ul>
</li>
<li>SpringMVC<ul>
<li>ServletConfig</li>
<li>SpringMvcConfig</li>
</ul>
</li>
</ul>
</li>
<li>功能模块<ul>
<li>表与实体类</li>
<li>dao（接口+自动代理）</li>
<li>service（接口+实现类）<ul>
<li>业务层接口测试（整合JUnit）</li>
</ul>
</li>
<li>controller<ul>
<li>表现层接口测试（PostMan）</li>
</ul>
</li>
</ul>
</li>
</ol>
<h4 id="1-2-SSM整合配置"><a href="#1-2-SSM整合配置" class="headerlink" title="1.2 SSM整合配置"></a>1.2 SSM整合配置</h4><h5 id="1-2-1-创建工程，添加依赖和插件"><a href="#1-2-1-创建工程，添加依赖和插件" class="headerlink" title="1.2.1 创建工程，添加依赖和插件"></a>1.2.1 创建工程，添加依赖和插件<img src="/assets/image-20210805164125741.png#id=Sz5sk&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.47<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.12<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="1-2-2-Spring整合Mybatis"><a href="#1-2-2-Spring整合Mybatis" class="headerlink" title="1.2.2 Spring整合Mybatis"></a>1.2.2 Spring整合Mybatis</h5><ul>
<li>创建数据库和表</li>
</ul>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 创建ssm_db数据库</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> ssm_db <span class="type">CHARACTER</span> <span class="keyword">SET</span> utf8;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 使用ssm_db数据库</span></span><br><span class="line">USE ssm_db;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 创建tbl_book表</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> tbl_book(</span><br><span class="line">    id <span class="type">INT</span> <span class="keyword">PRIMARY</span> KEY AUTO_INCREMENT, <span class="comment">-- 图书编号</span></span><br><span class="line">    TYPE <span class="type">VARCHAR</span>(<span class="number">100</span>), <span class="comment">-- 图书类型</span></span><br><span class="line">    NAME <span class="type">VARCHAR</span>(<span class="number">100</span>), <span class="comment">-- 图书名称</span></span><br><span class="line">    description <span class="type">VARCHAR</span>(<span class="number">100</span>) <span class="comment">-- 图书描述</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">-- 添加初始化数据</span></span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_book <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Spring实战 第5版&#x27;</span>,<span class="string">&#x27;Spring入门经典教材，深入理解Spring原理技术内幕&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_book <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Spring 5核心原理与30个类手写实战&#x27;</span>,<span class="string">&#x27;十年沉淀之作,手写Spring精华思想&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_book <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;计算机理论&#x27;</span>,<span class="string">&#x27;Spring 5设计模式&#x27;</span>,<span class="string">&#x27;深入Spring源码剖析,Spring源码蕴含的10大设计模式&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_book <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;市场营销&#x27;</span>,<span class="string">&#x27;直播就该这么做:主播高效沟通实战指南&#x27;</span>,<span class="string">&#x27;李子柒、李佳琦、薇娅成长为网红的秘密都在书中&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_book <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;市场营销&#x27;</span>,<span class="string">&#x27;直播销讲实战一本通&#x27;</span>,<span class="string">&#x27;和秋叶一起学系列网络营销书籍&#x27;</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> tbl_book <span class="keyword">VALUES</span>(<span class="keyword">NULL</span>,<span class="string">&#x27;市场营销&#x27;</span>,<span class="string">&#x27;直播带货:淘宝、天猫直播从新手到高手&#x27;</span>,<span class="string">&#x27;一本教你如何玩转直播的书,10堂课轻松实现带货月入3W+&#x27;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>jdbc.properties属性文件</li>
</ul>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="attr">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/ssm_db</span></span><br><span class="line"><span class="attr">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">jdbc.password</span>=<span class="string">root</span></span><br></pre></td></tr></table></figure>

<ul>
<li>JdbcConfig配置类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.driver&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String driver;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.url&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String url;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;jdbc.password&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">	<span class="comment">//配置连接池</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> DataSource <span class="title function_">dataSource</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">DruidDataSource</span> <span class="variable">dataSource</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DruidDataSource</span>();</span><br><span class="line">        dataSource.setDriverClassName(driver);</span><br><span class="line">        dataSource.setUrl(url);</span><br><span class="line">        dataSource.setUsername(username);</span><br><span class="line">        dataSource.setPassword(password);</span><br><span class="line">        <span class="keyword">return</span> dataSource;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//Spring事务管理需要的平台事务管理器对象</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> PlatformTransactionManager <span class="title function_">transactionManager</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">DataSourceTransactionManager</span> <span class="variable">ds</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataSourceTransactionManager</span>();</span><br><span class="line">        ds.setDataSource(dataSource);</span><br><span class="line">        <span class="keyword">return</span> ds;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>MybatisConfig配置类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyBatisConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> SqlSessionFactoryBean <span class="title function_">sqlSessionFactory</span><span class="params">(DataSource dataSource)</span>&#123;</span><br><span class="line">        <span class="type">SqlSessionFactoryBean</span> <span class="variable">factoryBean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBean</span>();</span><br><span class="line">        factoryBean.setDataSource(dataSource);</span><br><span class="line">        factoryBean.setTypeAliasesPackage(<span class="string">&quot;com.itheima.domain&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> factoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MapperScannerConfigurer <span class="title function_">mapperScannerConfigurer</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">MapperScannerConfigurer</span> <span class="variable">msc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MapperScannerConfigurer</span>();</span><br><span class="line">        msc.setBasePackage(<span class="string">&quot;com.itheima.dao&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> msc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>SpringConfig配置类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima.service&quot;&#125;)</span></span><br><span class="line"><span class="meta">@PropertySource(&quot;classpath:jdbc.properties&quot;)</span></span><br><span class="line"><span class="meta">@Import(&#123;JdbcConfig.class,MyBatisConfig.class&#125;)</span></span><br><span class="line"><span class="meta">@EnableTransactionManagement</span> <span class="comment">//开启Spring事务管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="1-2-3-Spring整合SpringMVC"><a href="#1-2-3-Spring整合SpringMVC" class="headerlink" title="1.2.3 Spring整合SpringMVC"></a>1.2.3 Spring整合SpringMVC</h5><ul>
<li>SpringMvcConfig配置类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.controller&quot;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ServletConfig配置类，加载SpringMvcConfig和SpringConfig配置类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-功能模块开发"><a href="#2-功能模块开发" class="headerlink" title="2 功能模块开发"></a>2 功能模块开发</h3><h4 id="2-1-数据层开发-BookDao"><a href="#2-1-数据层开发-BookDao" class="headerlink" title="2.1 数据层开发(BookDao)"></a>2.1 数据层开发(BookDao)</h4><ul>
<li>Book实体类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="comment">//同学们自己添加getter、setter、toString()方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>BookDao接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookDao</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//@Insert(&quot;insert into tbl_book values(null,#&#123;type&#125;,#&#123;name&#125;,#&#123;description&#125;)&quot;)</span></span><br><span class="line">    <span class="meta">@Insert(&quot;insert into tbl_book (type,name,description) values(#&#123;type&#125;,#&#123;name&#125;,#&#123;description&#125;)&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">save</span><span class="params">(Book book)</span>;  <span class="comment">//返回值表示影响的行数</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Update(&quot;update tbl_book set type = #&#123;type&#125;, name = #&#123;name&#125;, description = #&#123;description&#125; where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">update</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Delete(&quot;delete from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book where id = #&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Select(&quot;select * from tbl_book&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-业务层开发-BookService-BookServiceImpl"><a href="#2-2-业务层开发-BookService-BookServiceImpl" class="headerlink" title="2.2 业务层开发(BookService&#x2F;BookServiceImpl)"></a>2.2 业务层开发(BookService&#x2F;BookServiceImpl)</h4><ul>
<li>BookService接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Transactional</span> <span class="comment">//表示所有方法进行事务管理</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 修改</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> book</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Book book)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按id删除</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 按id查询</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查询全部</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>BookServiceImpl实现类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        bookDao.save(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        bookDao.update(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        bookDao.delete(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-表现层开发-BookController"><a href="#2-3-表现层开发-BookController" class="headerlink" title="2.3 表现层开发(BookController)"></a>2.3 表现层开发(BookController)</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.save(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.update(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.delete(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.getById(id);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookService.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-接口测试"><a href="#3-接口测试" class="headerlink" title="3 接口测试"></a>3 接口测试</h3><h4 id="3-1-Spring整合Junit测试业务层方法"><a href="#3-1-Spring整合Junit测试业务层方法" class="headerlink" title="3.1 Spring整合Junit测试业务层方法"></a>3.1 Spring整合Junit测试业务层方法</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RunWith(SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@ContextConfiguration(classes = SpringConfig.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceTest</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetById</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getById(<span class="number">1</span>);</span><br><span class="line">        System.out.println(book);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testGetAll</span><span class="params">()</span>&#123;</span><br><span class="line">        List&lt;Book&gt; all = bookService.getAll();</span><br><span class="line">        System.out.println(all);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-postman测试表现层接口"><a href="#3-2-postman测试表现层接口" class="headerlink" title="3.2 postman测试表现层接口"></a>3.2 postman测试表现层接口</h4><ul>
<li>测试保存图书</li>
</ul>
<blockquote>
<p>这里就以保存图书为例，其他接口同学们自己测试</p>
</blockquote>
<h2 id="二、表现层数据封装【重点】"><a href="#二、表现层数据封装【重点】" class="headerlink" title="二、表现层数据封装【重点】"></a>二、表现层数据封装【重点】</h2><h3 id="问题导入-1"><a href="#问题导入-1" class="headerlink" title="问题导入"></a>问题导入</h3><p>目前我们表现层响应给客户端的数据有哪几种？</p>
<h3 id="1-表现层响应数据的问题"><a href="#1-表现层响应数据的问题" class="headerlink" title="1 表现层响应数据的问题"></a>1 表现层响应数据的问题</h3><p>问题：我们表现层增删改方法返回true或者false表示是否成功，getById()方法返回一个json对象，getAll()方法返回一个json对象数组，这里就出现了三种格式的响应结果，极其不利于前端解析。<br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695898955819-927d6ccb-39d8-41c6-a20f-190c15680027.png#clientId=u1cd790b9-cca8-4&from=paste&height=230&id=u8f95f311&originHeight=678&originWidth=2089&originalType=binary&ratio=1&rotation=0&showTitle=false&size=133211&status=done&style=none&taskId=udde5e015-5204-4c81-9c20-de39a2bcda9&title=&width=708" alt="image-20210805170157483.png"><br><img src="/assets/image-20210805170157483.png#id=a7auY&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="><br>解决：我们需要统一响应结果的格式</p>
<h3 id="2-定义Result类封装响应结果"><a href="#2-定义Result类封装响应结果" class="headerlink" title="2 定义Result类封装响应结果"></a>2 定义Result类封装响应结果</h3><h4 id="2-1-Result类封装响应结果"><a href="#2-1-Result类封装响应结果" class="headerlink" title="2.1 Result类封装响应结果"></a>2.1 Result类封装响应结果</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Result</span> &#123;</span><br><span class="line">    <span class="comment">//描述统一格式中的数据</span></span><br><span class="line">    <span class="keyword">private</span> Object data;</span><br><span class="line">    <span class="comment">//描述统一格式中的编码，用于区分操作，可以简化配置0或1表示成功失败</span></span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="comment">//描述统一格式中的消息，可选属性</span></span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(Integer code,Object data)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Result</span><span class="params">(Integer code, Object data, String msg)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.data = data;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">        <span class="built_in">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="comment">//同学们自己添加getter、setter、toString()方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意事项：</strong><br>Result类中的字段并不是固定的，可以根据需要自行增减</p>
<h4 id="2-2-Code类封装响应码"><a href="#2-2-Code类封装响应码" class="headerlink" title="2.2 Code类封装响应码"></a>2.2 Code类封装响应码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//状态码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SAVE_OK</span> <span class="operator">=</span> <span class="number">20011</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">DELETE_OK</span> <span class="operator">=</span> <span class="number">20021</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">UPDATE_OK</span> <span class="operator">=</span> <span class="number">20031</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">GET_OK</span> <span class="operator">=</span> <span class="number">20041</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SAVE_ERR</span> <span class="operator">=</span> <span class="number">20010</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">DELETE_ERR</span> <span class="operator">=</span> <span class="number">20020</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">UPDATE_ERR</span> <span class="operator">=</span> <span class="number">20030</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">GET_ERR</span> <span class="operator">=</span> <span class="number">20040</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意事项：</strong><br>Code类的常量设计也不是固定的，可以根据需要自行增减，例如将查询再进行细分为GET_OK，GET_ALL_OK，GET_PAGE_OK</p>
<h3 id="3-表现层数据封装返回Result对象"><a href="#3-表现层数据封装返回Result对象" class="headerlink" title="3 表现层数据封装返回Result对象"></a>3 表现层数据封装返回Result对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookService bookService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> bookService.save(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(flag ? Code.SAVE_OK:Code.SAVE_ERR,flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PutMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> bookService.update(book);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(flag ? Code.UPDATE_OK:Code.UPDATE_ERR,flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> bookService.delete(id);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(flag ? Code.DELETE_OK:Code.DELETE_ERR,flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span> &#123;</span><br><span class="line">        <span class="type">Book</span> <span class="variable">book</span> <span class="operator">=</span> bookService.getById(id);</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span> book != <span class="literal">null</span> ? Code.GET_OK : Code.GET_ERR;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> book != <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;数据查询失败，请重试！&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code,book,msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        List&lt;Book&gt; bookList = bookService.getAll();</span><br><span class="line">        <span class="type">Integer</span> <span class="variable">code</span> <span class="operator">=</span> bookList != <span class="literal">null</span> ? Code.GET_OK : Code.GET_ERR;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> bookList != <span class="literal">null</span> ? <span class="string">&quot;&quot;</span> : <span class="string">&quot;数据查询失败，请重试！&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(code,bookList,msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三、异常处理器【理解】"><a href="#三、异常处理器【理解】" class="headerlink" title="三、异常处理器【理解】"></a>三、异常处理器【理解】</h2><h3 id="问题导入-2"><a href="#问题导入-2" class="headerlink" title="问题导入"></a>问题导入</h3><p>问题1：项目各个个层级均可能出现异常，异常处理代码书写在哪一层？</p>
<h3 id="1-异常介绍"><a href="#1-异常介绍" class="headerlink" title="1 异常介绍"></a>1 异常介绍</h3><ul>
<li>程序开发过程中不可避免的会遇到异常现象，我们不能让用户看到这样的页面数据</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695899014925-2c8cd3b9-d8f3-483f-a9c2-0261f051bd76.png#clientId=u1cd790b9-cca8-4&from=paste&height=350&id=u12443c41&originHeight=780&originWidth=1401&originalType=binary&ratio=1&rotation=0&showTitle=false&size=307045&status=done&style=none&taskId=uf60fe7f7-ba20-4f73-b80a-ea9120e2831&title=&width=628" alt="image-20210805172011686.png"></p>
<ul>
<li>出现异常现象的常见位置与常见诱因如下：<ul>
<li>框架内部抛出的异常：因使用不合规导致</li>
<li>数据层抛出的异常：因外部服务器故障导致（例如：服务器访问超时）</li>
<li>业务层抛出的异常：因业务逻辑书写错误导致（例如：遍历业务书写操作，导致索引异常等）</li>
<li>表现层抛出的异常：因数据收集、校验等规则导致（例如：不匹配的数据类型间导致异常）</li>
<li>工具类抛出的异常：因工具类书写不严谨不够健壮导致（例如：必要释放的连接长期未释放等）</li>
</ul>
</li>
</ul>
<h3 id="2-异常处理器"><a href="#2-异常处理器" class="headerlink" title="2 异常处理器"></a>2 异常处理器</h3><h4 id="2-2-1-编写异常处理器"><a href="#2-2-1-编写异常处理器" class="headerlink" title="2.2.1 编写异常处理器"></a>2.2.1 编写异常处理器</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span>  <span class="comment">//用于标识当前类为REST风格对应的异常处理器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//统一处理所有的Exception异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doOtherException</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(<span class="number">666</span>,<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>使用异常处理器之后的效果</strong><br><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695899063601-5dee2250-2ce9-4a4c-b2b8-13d6ef37e715.png#clientId=u1cd790b9-cca8-4&from=paste&height=218&id=u2da9075f&originHeight=522&originWidth=1604&originalType=binary&ratio=1&rotation=0&showTitle=false&size=65153&status=done&style=none&taskId=uee035ad4-1ed5-41ed-bdd4-8a804113268&title=&width=671" alt="image-20210805171924452.png"></p>
<h4 id="2-2-2-RestControllerAdvice注解介绍"><a href="#2-2-2-RestControllerAdvice注解介绍" class="headerlink" title="2.2.2 @RestControllerAdvice注解介绍"></a>2.2.2 @RestControllerAdvice注解介绍</h4><ul>
<li>名称：<a href="/RestControllerAdvice">@RestControllerAdvice </a></li>
<li>类型：类注解</li>
<li>位置：Rest风格开发的控制器增强类定义上方</li>
<li>作用：为Rest风格开发的控制器类做增强</li>
<li>说明：此注解自带@ResponseBody注解与@Component注解，具备对应的功能</li>
</ul>
<h4 id="2-2-3-ExceptionHandler注解介绍"><a href="#2-2-3-ExceptionHandler注解介绍" class="headerlink" title="2.2.3 @ExceptionHandler注解介绍"></a>2.2.3 @ExceptionHandler注解介绍</h4><ul>
<li>名称：<a href="/ExceptionHandler">@ExceptionHandler </a></li>
<li>类型：方法注解</li>
<li>位置：专用于异常处理的控制器方法上方</li>
<li>作用：设置指定异常的处理方案，功能等同于控制器方法，出现异常后终止原始控制器执行，并转入当前方法执行</li>
<li>说明：此类方法可以根据处理的异常不同，制作多个方法分别处理对应的异常</li>
</ul>
<h2 id="四、项目异常处理方案【理解】"><a href="#四、项目异常处理方案【理解】" class="headerlink" title="四、项目异常处理方案【理解】"></a>四、项目异常处理方案【理解】</h2><h3 id="问题导入-3"><a href="#问题导入-3" class="headerlink" title="问题导入"></a>问题导入</h3><p>请说出项目当前异常的分类以及对应类型异常该如何处理？</p>
<h3 id="1-项目异常分类"><a href="#1-项目异常分类" class="headerlink" title="1 项目异常分类"></a>1 项目异常分类</h3><ul>
<li>业务异常（BusinessException）<ul>
<li>规范的用户行为产生的异常</li>
<li>不规范的用户行为操作产生的异常</li>
</ul>
</li>
<li>系统异常（SystemException）<ul>
<li>项目运行过程中可预计且无法避免的异常</li>
</ul>
</li>
<li>其他异常（Exception）<ul>
<li>编程人员未预期到的异常</li>
</ul>
</li>
</ul>
<h3 id="2-项目异常处理方案"><a href="#2-项目异常处理方案" class="headerlink" title="2 项目异常处理方案"></a>2 项目异常处理方案</h3><ul>
<li>业务异常（BusinessException）<ul>
<li>发送对应消息传递给用户，提醒规范操作</li>
</ul>
</li>
<li>系统异常（SystemException）<ul>
<li>发送固定消息传递给用户，安抚用户</li>
<li>发送特定消息给运维人员，提醒维护</li>
<li>记录日志</li>
</ul>
</li>
<li>其他异常（Exception）<ul>
<li>发送固定消息传递给用户，安抚用户</li>
<li>发送特定消息给编程人员，提醒维护（纳入预期范围内）</li>
<li>记录日志</li>
</ul>
</li>
</ul>
<h3 id="3-项目异常处理代码实现"><a href="#3-项目异常处理代码实现" class="headerlink" title="3 项目异常处理代码实现"></a>3 项目异常处理代码实现</h3><h4 id="3-1-根据异常分类自定义异常类"><a href="#3-1-根据异常分类自定义异常类" class="headerlink" title="3.1 根据异常分类自定义异常类"></a>3.1 根据异常分类自定义异常类</h4><h5 id="3-1-1-自定义项目系统级异常"><a href="#3-1-1-自定义项目系统级异常" class="headerlink" title="3.1.1 自定义项目系统级异常"></a>3.1.1 自定义项目系统级异常</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义异常处理器，用于封装异常信息，对异常进行分类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SystemException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">SystemException</span><span class="params">(Integer code, String message, Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3-1-2-自定义项目业务级异常"><a href="#3-1-2-自定义项目业务级异常" class="headerlink" title="3.1.2 自定义项目业务级异常"></a>3.1.2 自定义项目业务级异常</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义异常处理器，用于封装异常信息，对异常进行分类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BusinessException</span> <span class="keyword">extends</span> <span class="title class_">RuntimeException</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Integer <span class="title function_">getCode</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCode</span><span class="params">(Integer code)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(Integer code, String message)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">BusinessException</span><span class="params">(Integer code,String message,Throwable cause)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(message, cause);</span><br><span class="line">        <span class="built_in">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-自定义异常编码（持续补充）"><a href="#3-2-自定义异常编码（持续补充）" class="headerlink" title="3.2 自定义异常编码（持续补充）"></a>3.2 自定义异常编码（持续补充）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Code</span> &#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//之前其他状态码省略没写，以下是新补充的状态码，可以根据需要自己补充</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SYSTEM_ERR</span> <span class="operator">=</span> <span class="number">50001</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SYSTEM_TIMEOUT_ERR</span> <span class="operator">=</span> <span class="number">50002</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">SYSTEM_UNKNOW_ERR</span> <span class="operator">=</span> <span class="number">59999</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Integer</span> <span class="variable">BUSINESS_ERR</span> <span class="operator">=</span> <span class="number">60002</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-3-触发自定义异常"><a href="#3-3-触发自定义异常" class="headerlink" title="3.3 触发自定义异常"></a>3.3 触发自定义异常</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//在getById演示触发异常，其他方法省略没有写进来</span></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="comment">//模拟业务异常，包装成自定义异常</span></span><br><span class="line">        <span class="keyword">if</span>(id &lt;<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(Code.BUSINESS_ERR,<span class="string">&quot;请不要使用你的技术挑战我的耐性!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-4-在异常通知类中拦截并处理异常"><a href="#3-4-在异常通知类中拦截并处理异常" class="headerlink" title="3.4 在异常通知类中拦截并处理异常"></a>3.4 在异常通知类中拦截并处理异常</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span> <span class="comment">//用于标识当前类为REST风格对应的异常处理器</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectExceptionAdvice</span> &#123;</span><br><span class="line">    <span class="comment">//@ExceptionHandler用于设置当前处理器类对应的异常类型</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(SystemException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doSystemException</span><span class="params">(SystemException ex)</span>&#123;</span><br><span class="line">        <span class="comment">//记录日志</span></span><br><span class="line">        <span class="comment">//发送消息给运维</span></span><br><span class="line">        <span class="comment">//发送邮件给开发人员,ex对象发送给开发人员</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(ex.getCode(),<span class="literal">null</span>,ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler(BusinessException.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doBusinessException</span><span class="params">(BusinessException ex)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(ex.getCode(),<span class="literal">null</span>,ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//除了自定义的异常处理器，保留对Exception类型的异常处理，用于处理非预期的异常</span></span><br><span class="line">    <span class="meta">@ExceptionHandler(Exception.class)</span></span><br><span class="line">    <span class="keyword">public</span> Result <span class="title function_">doOtherException</span><span class="params">(Exception ex)</span>&#123;</span><br><span class="line">        <span class="comment">//记录日志</span></span><br><span class="line">        <span class="comment">//发送消息给运维</span></span><br><span class="line">        <span class="comment">//发送邮件给开发人员,ex对象发送给开发人员</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Result</span>(Code.SYSTEM_UNKNOW_ERR,<span class="literal">null</span>,<span class="string">&quot;系统繁忙，请稍后再试！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试：在postman中发送请求访问getById方法，传递参数-1，得到以下结果：</p>
<p><img src="/assets/image-20210805173815730.png#id=kvuNO&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<h2 id="五、SSM整合页面开发【重点】"><a href="#五、SSM整合页面开发【重点】" class="headerlink" title="五、SSM整合页面开发【重点】"></a>五、SSM整合页面开发【重点】</h2><h3 id="1-准备工作"><a href="#1-准备工作" class="headerlink" title="1 准备工作"></a>1 准备工作</h3><blockquote>
<p>为了确保静态资源能够被访问到，需要设置静态资源过滤</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/pages/**&quot;</span>)</span><br><span class="line">            .addResourceLocations(<span class="string">&quot;/pages/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/css/**&quot;</span>)</span><br><span class="line">            .addResourceLocations(<span class="string">&quot;/css/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/js/**&quot;</span>)</span><br><span class="line">            .addResourceLocations(<span class="string">&quot;/js/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/plugins/**&quot;</span>)</span><br><span class="line">            .addResourceLocations(<span class="string">&quot;/plugins/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-列表查询功能"><a href="#2-列表查询功能" class="headerlink" title="2 列表查询功能"></a>2 列表查询功能</h3><ul>
<li>前端代码</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//列表</span></span><br><span class="line"><span class="title function_">getAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//发送ajax请求</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;/books&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dataList</span> = res.<span class="property">data</span>.<span class="property">data</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-添加功能"><a href="#3-添加功能" class="headerlink" title="3 添加功能"></a>3 添加功能</h3><ul>
<li>前端代码</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//弹出添加窗口</span></span><br><span class="line"><span class="title function_">handleCreate</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">true</span>;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">resetForm</span>();</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//重置表单</span></span><br><span class="line"><span class="title function_">resetForm</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">formData</span> = &#123;&#125;;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//添加</span></span><br><span class="line">handleAdd () &#123;</span><br><span class="line">    <span class="comment">//发送ajax请求</span></span><br><span class="line">    axios.<span class="title function_">post</span>(<span class="string">&quot;/books&quot;</span>,<span class="variable language_">this</span>.<span class="property">formData</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res.<span class="property">data</span>);</span><br><span class="line">        <span class="comment">//如果操作成功，关闭弹层，显示数据</span></span><br><span class="line">        <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20011</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;添加成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20010</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;添加失败&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">msg</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<ul>
<li>后台代码改进</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">BookService</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookDao bookDao;</span><br><span class="line">	<span class="comment">//增删改的方法判断了影响的行数是否大于0，而不是固定返回true</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.save(book) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//增删改的方法判断了影响的行数是否大于0，而不是固定返回true</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">update</span><span class="params">(Book book)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.update(book) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="comment">//增删改的方法判断了影响的行数是否大于0，而不是固定返回true</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">delete</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.delete(id) &gt; <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Book <span class="title function_">getById</span><span class="params">(Integer id)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(id &lt; <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BusinessException</span>(Code.BUSINESS_ERR,<span class="string">&quot;请不要使用你的技术挑战我的耐性!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> bookDao.getById(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> bookDao.getAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-修改功能"><a href="#4-修改功能" class="headerlink" title="4 修改功能"></a>4 修改功能</h3><ul>
<li>显示弹出框查询图书信息</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//弹出编辑窗口</span></span><br><span class="line"><span class="title function_">handleUpdate</span>(<span class="params">row</span>) &#123;</span><br><span class="line">    <span class="comment">// console.log(row);   //row.id 查询条件</span></span><br><span class="line">    <span class="comment">//查询数据，根据id查询</span></span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;/books/&quot;</span>+row.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">// console.log(res.data.data);</span></span><br><span class="line">        <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20041</span>)&#123;</span><br><span class="line">            <span class="comment">//展示弹层，加载数据</span></span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">formData</span> = res.<span class="property">data</span>.<span class="property">data</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">dialogFormVisible4Edit</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">msg</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>保存修改后的图书信息</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//编辑</span></span><br><span class="line"><span class="title function_">handleEdit</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">//发送ajax请求</span></span><br><span class="line">    axios.<span class="title function_">put</span>(<span class="string">&quot;/books&quot;</span>,<span class="variable language_">this</span>.<span class="property">formData</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//如果操作成功，关闭弹层，显示数据</span></span><br><span class="line">        <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20031</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">dialogFormVisible4Edit</span> = <span class="literal">false</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;修改成功&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20030</span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;修改失败&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(res.<span class="property">data</span>.<span class="property">msg</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-删除功能"><a href="#5-删除功能" class="headerlink" title="5 删除功能"></a>5 删除功能</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 删除</span></span><br><span class="line"><span class="title function_">handleDelete</span>(<span class="params">row</span>) &#123;</span><br><span class="line">    <span class="comment">//1.弹出提示框</span></span><br><span class="line">    <span class="variable language_">this</span>.$confirm(<span class="string">&quot;此操作永久删除当前数据，是否继续？&quot;</span>,<span class="string">&quot;提示&quot;</span>,&#123;</span><br><span class="line">        <span class="attr">type</span>:<span class="string">&#x27;info&#x27;</span></span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//2.做删除业务</span></span><br><span class="line">        axios.<span class="title function_">delete</span>(<span class="string">&quot;/books/&quot;</span>+row.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">code</span> == <span class="number">20021</span>)&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">success</span>(<span class="string">&quot;删除成功&quot;</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">error</span>(<span class="string">&quot;删除失败&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).<span class="title function_">finally</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">getAll</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;).<span class="title function_">catch</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">        <span class="comment">//3.取消删除</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$message</span>.<span class="title function_">info</span>(<span class="string">&quot;取消删除操作&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="六、拦截器【理解】"><a href="#六、拦截器【理解】" class="headerlink" title="六、拦截器【理解】"></a>六、拦截器【理解】</h2><h3 id="1-拦截器简介"><a href="#1-拦截器简介" class="headerlink" title="1 拦截器简介"></a>1 拦截器简介</h3><h4 id="问题导入-4"><a href="#问题导入-4" class="headerlink" title="问题导入"></a>问题导入</h4><p>问题1：拦截器拦截的对象是谁？<br>问题2：拦截器和过滤器有什么区别？</p>
<h4 id="1-1-拦截器概念和作用"><a href="#1-1-拦截器概念和作用" class="headerlink" title="1.1 拦截器概念和作用"></a>1.1 拦截器概念和作用</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695899279816-e1cac047-eee2-4e9c-8277-20848e348dd6.png#clientId=u1cd790b9-cca8-4&from=paste&height=269&id=u403e4b23&originHeight=902&originWidth=2085&originalType=binary&ratio=1&rotation=0&showTitle=false&size=174260&status=done&style=none&taskId=ud645a502-2266-48ff-857d-d73eece5be4&title=&width=622" alt="image-20210805175445422.png"></p>
<ul>
<li>拦截器（Interceptor）是一种动态拦截方法调用的机制，在SpringMVC中动态拦截控制器方法的执行</li>
<li>作用：<ol>
<li>在指定的方法调用前后执行预先设定的代码</li>
<li>阻止原始方法的执行</li>
<li>总结：增强</li>
</ol>
</li>
<li>核心原理：AOP思想</li>
</ul>
<h4 id="1-2-拦截器和过滤器的区别"><a href="#1-2-拦截器和过滤器的区别" class="headerlink" title="1.2 拦截器和过滤器的区别"></a>1.2 拦截器和过滤器的区别</h4><ul>
<li>归属不同：Filter属于Servlet技术，Interceptor属于SpringMVC技术</li>
<li>拦截内容不同：Filter对所有访问进行增强，Interceptor仅针对SpringMVC的访问进行增强</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695899327395-f88b2f76-74e9-4f50-b153-c5604a7734f7.png#clientId=u1cd790b9-cca8-4&from=paste&height=217&id=ufbd16584&originHeight=694&originWidth=2091&originalType=binary&ratio=1&rotation=0&showTitle=false&size=72401&status=done&style=none&taskId=u2385df80-38aa-49c3-a704-f934745b48d&title=&width=655" alt="image-20210805175539717.png"></p>
<h3 id="2-入门案例"><a href="#2-入门案例" class="headerlink" title="2 入门案例"></a>2 入门案例</h3><h4 id="问题导入-5"><a href="#问题导入-5" class="headerlink" title="问题导入"></a>问题导入</h4><p>定义拦截器需要实现什么接口？</p>
<h4 id="2-1-拦截器代码实现"><a href="#2-1-拦截器代码实现" class="headerlink" title="2.1 拦截器代码实现"></a>2.1 拦截器代码实现</h4><h5 id="【第一步】定义拦截器"><a href="#【第一步】定义拦截器" class="headerlink" title="【第一步】定义拦截器"></a>【第一步】定义拦截器</h5><blockquote>
<p>做法：定义一个类，实现HandlerInterceptor接口即可</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span> <span class="comment">//注意当前类必须受Spring容器控制</span></span><br><span class="line"><span class="comment">//定义拦截器类，实现HandlerInterceptor接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//原始方法调用前执行的内容</span></span><br><span class="line">    <span class="comment">//返回值类型可以拦截控制的执行，true放行，false终止</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle...&quot;</span>+contentType);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//原始方法调用后执行的内容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="comment">//原始方法调用完成后执行的内容</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion...&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="【第二步】配置加载拦截器"><a href="#【第二步】配置加载拦截器" class="headerlink" title="【第二步】配置加载拦截器"></a>【第二步】配置加载拦截器</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectInterceptor projectInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//配置拦截器</span></span><br><span class="line">        registry.addInterceptor(projectInterceptor)</span><br><span class="line">            .addPathPatterns(<span class="string">&quot;/books&quot;</span>,<span class="string">&quot;/books/*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用标准接口WebMvcConfigurer简化开发（注意：侵入式较强）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima.controller&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="comment">//实现WebMvcConfigurer接口可以简化开发，但具有一定的侵入性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectInterceptor projectInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//配置多拦截器</span></span><br><span class="line">        registry.addInterceptor(projectInterceptor)</span><br><span class="line">            .addPathPatterns(<span class="string">&quot;/books&quot;</span>,<span class="string">&quot;/books/*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-拦截器流程分析"><a href="#2-2-拦截器流程分析" class="headerlink" title="2.2 拦截器流程分析"></a>2.2 拦截器流程分析</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695899431508-7ca01274-db4b-43d4-a264-b2682376bd8d.png#clientId=u1cd790b9-cca8-4&from=paste&height=259&id=u2f46f00b&originHeight=768&originWidth=2164&originalType=binary&ratio=1&rotation=0&showTitle=false&size=87839&status=done&style=none&taskId=ue8948216-ec9a-4cb0-b980-d451ee599ec&title=&width=730" alt="image-20210805180846313.png"></p>
<h3 id="3-拦截器参数"><a href="#3-拦截器参数" class="headerlink" title="3 拦截器参数"></a>3 拦截器参数</h3><h4 id="问题导入-6"><a href="#问题导入-6" class="headerlink" title="问题导入"></a>问题导入</h4><p>postHandle()和afterCompletion()方法都是处理器方法执行之后执行，有什么区别？</p>
<h4 id="3-1-前置处理"><a href="#3-1-前置处理" class="headerlink" title="3.1 前置处理"></a>3.1 前置处理</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原始方法调用前执行的内容</span></span><br><span class="line"><span class="comment">//返回值类型可以拦截控制的执行，true放行，false终止</span></span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;preHandle...&quot;</span>+contentType);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>参数<ol>
<li>request:请求对象</li>
<li>response:响应对象</li>
<li>handler:被调用的处理器对象，本质上是一个方法对象，对反射技术中的Method对象进行了再包装</li>
</ol>
</li>
<li>返回值<br>返回值为false，被拦截的处理器将不执行。</li>
</ul>
<h4 id="3-2-后置处理"><a href="#3-2-后置处理" class="headerlink" title="3.2 后置处理"></a>3.2 后置处理</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原始方法调用后执行的内容</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;postHandle...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>参数<br>modelAndView：如果处理器执行完成具有返回结果，可以读取到对应数据与页面信息，并进行跳转</li>
</ul>
<blockquote>
<p>注意：如果处理器方法出现异常了，该方法不会执行</p>
</blockquote>
<h4 id="3-3-完成后处理"><a href="#3-3-完成后处理" class="headerlink" title="3.3 完成后处理"></a>3.3 完成后处理</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//原始方法调用完成后执行的内容</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;afterCompletion...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>参数<br>ex:如果处理器执行过程中出现异常对象，可以针对异常情况进行单独处理</li>
</ul>
<blockquote>
<p>注意：无论处理器方法内部是否出现异常，该方法都会执行。</p>
</blockquote>
<h3 id="4-拦截器链配置"><a href="#4-拦截器链配置" class="headerlink" title="4 拦截器链配置"></a>4 拦截器链配置</h3><h4 id="问题导入-7"><a href="#问题导入-7" class="headerlink" title="问题导入"></a>问题导入</h4><p>什么是拦截器链？</p>
<h4 id="4-1-多个拦截器配置"><a href="#4-1-多个拦截器配置" class="headerlink" title="4.1 多个拦截器配置"></a>4.1 多个拦截器配置</h4><ul>
<li>定义第二个拦截器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProjectInterceptor2</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;preHandle...222&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;postHandle...222&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;afterCompletion...222&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>配置第二个拦截器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima.controller&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="comment">//实现WebMvcConfigurer接口可以简化开发，但具有一定的侵入性</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectInterceptor projectInterceptor;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ProjectInterceptor2 projectInterceptor2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//配置多拦截器</span></span><br><span class="line">        registry.addInterceptor(projectInterceptor)</span><br><span class="line">            .addPathPatterns(<span class="string">&quot;/books&quot;</span>,<span class="string">&quot;/books/*&quot;</span>);</span><br><span class="line">        registry.addInterceptor(projectInterceptor2)</span><br><span class="line">            .addPathPatterns(<span class="string">&quot;/books&quot;</span>,<span class="string">&quot;/books/*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-多个连接器工作流程分析"><a href="#4-2-多个连接器工作流程分析" class="headerlink" title="4.2 多个连接器工作流程分析"></a>4.2 多个连接器工作流程分析</h4><ul>
<li>当配置多个拦截器时，形成拦截器链</li>
<li>拦截器链的运行顺序参照拦截器添加顺序为准</li>
<li>当拦截器中出现对原始处理器的拦截，后面的拦截器均终止运行</li>
<li>当拦截器运行中断，仅运行配置在前面的拦截器的afterCompletion操作</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695899546647-8a951f1f-1eb6-4027-ba19-b2cd18b30c87.png#clientId=u1cd790b9-cca8-4&from=paste&height=625&id=u85e111e8&originHeight=625&originWidth=2522&originalType=binary&ratio=1&rotation=0&showTitle=false&size=80850&status=done&style=none&taskId=u94de0e16-c007-4557-9005-da616039b73&title=&width=2522" alt="image-20210805181537718.png"><br><img src="/assets/image-20210805181537718.png#id=SrKIi&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>包管理工具npm_yarn_cnpm</title>
    <url>/2024/09/19/%E5%8C%85%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7npm-yarn-cnpm/</url>
    <content><![CDATA[<h3 id="npm的配置文件"><a href="#npm的配置文件" class="headerlink" title="npm的配置文件"></a>npm的配置文件</h3><ul>
<li><p>那么对于一个项目来说，我们如何使用npm来管理这么多包呢？</p>
<ul>
<li>事实上，我们每一个项目都会有一个对应的配置文件，无论是前端项目（Vue、React）还是后端项目（Node）；</li>
<li>这个配置文件会记录着你项目的名称、版本号、项目描述等；</li>
<li>也会记录着你项目所依赖的其他库的信息和依赖库的版本号；</li>
</ul>
</li>
<li><p><strong>这个配置文件就是package.json</strong></p>
</li>
<li><p>那么这个配置文件如何得到呢？</p>
<ul>
<li>方式一：手动从零创建项目，npm init –y</li>
<li>方式二：通过脚手架创建项目，脚手架会帮助我们生成package.json，并且里面有相关的配置</li>
</ul>
</li>
<li><p>必须填写的属性：name、version</p>
<ul>
<li><font style="color:#DF2A3F;">name</font>是项目的名称；</li>
<li><font style="color:#DF2A3F;">version</font>是当前项目的版本号；</li>
<li><font style="color:#DF2A3F;">description</font>是描述信息，很多时候是作为项目的基本描述；</li>
<li><font style="color:#DF2A3F;">author</font>是作者相关信息（发布时用到）；</li>
<li><font style="color:#DF2A3F;">license</font>是开源协议（发布时用到）；</li>
</ul>
</li>
<li><p>private属性：</p>
<ul>
<li>private属性记录当前的项目是否是私有的；</li>
<li><strong>当值为true时，npm是不能发布它的</strong>，这是防止私有项目或模块发布出去的方式；</li>
</ul>
</li>
<li><p><strong>main属性：</strong></p>
<ul>
<li>设置程序的入口。<ul>
<li>比如我们使用axios模块 const axios &#x3D; require(‘axios’);</li>
<li>如果有main属性，实际上是<font style="color:#DF2A3F;">找到对应的main属性查找文件</font>的；</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688478028092-5dd757a8-563e-4820-8953-c2ff39e9661f.png"></li>
</ul>
</li>
</ul>
</li>
<li><p><strong>scripts属性</strong></p>
<ul>
<li><font style="color:#DF2A3F;">scripts属性用于配置一些脚本命令</font>，以<font style="color:#DF2A3F;">键值对</font>的形式存在；</li>
<li>配置后我们可以通过 <font style="color:#DF2A3F;">npm run</font> 命令的key来执行这个命令；</li>
<li>npm start和npm run start的区别是什么？<ul>
<li>它们是等价的；</li>
<li>对于常用的 start、 test、stop、restart可以省略掉run直接通过 npm start等方式运行；</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>dependencies属性</strong></p>
<ul>
<li>dependencies属性是指定<font style="color:#DF2A3F;">无论开发环境还是生成环境都需要依赖的包；</font></li>
<li>通常是我们项目实际开发用到的一些库模块vue、vuex、vue-router、react、react-dom、axios等等；</li>
<li>与之对应的是devDependencies；</li>
</ul>
</li>
<li><p><strong>devDependencies属性</strong></p>
<ul>
<li>一些包<font style="color:#DF2A3F;">在生成环境是不需要的，</font>比如webpack、babel等；</li>
<li>这个时候我们会通过 npm install webpack<font style="color:#DF2A3F;"> –save-dev</font>，将它安装到devDependencies属性中；</li>
</ul>
</li>
<li><p><strong>peerDependencies属性</strong></p>
<ul>
<li>还有一种项目依赖关系是对等依赖，也就是你依赖的一个包，它必须是以另外一个宿主包为前提的；</li>
<li>比如element-plus是依赖于vue3的，ant design是依赖于react、react-dom；</li>
</ul>
</li>
<li></li>
</ul>
<h3 id="依赖的版本管理"><a href="#依赖的版本管理" class="headerlink" title="依赖的版本管理"></a>依赖的版本管理</h3><ul>
<li>我们会发现安装的依赖版本出现：^2.0.3或~2.0.3，这是什么意思呢？</li>
<li>npm的包通常需要遵从semver版本规范</li>
<li>semver版本规范是X.Y.Z：<ul>
<li><font style="color:#DF2A3F;">X主版本号</font>（major）：当你做了不兼容的 API 修改（可能不兼容之前的版本）；</li>
<li><font style="color:#DF2A3F;">Y次版本号</font>（minor）：当你做了向下兼容的功能性新增（新功能增加，但是兼容之前的版本）；</li>
<li><font style="color:#DF2A3F;">Z修订号</font>（patch）：当你做了向下兼容的问题修正（没有新功能，修复了之前版本的bug）</li>
</ul>
</li>
<li>我们这里解释一下 ^和~的区别：<ul>
<li><font style="color:#DF2A3F;">x.y.z</font>：表示一个<font style="color:#DF2A3F;">明确的版本号</font>；</li>
<li><font style="color:#DF2A3F;">^x.y.z</font>：表示<font style="color:#DF2A3F;">x是保持不变</font>的，<font style="color:#DF2A3F;">y和z永远安装最新的版本；</font></li>
<li><font style="color:#DF2A3F;">~x.y.z</font>：表示<font style="color:#DF2A3F;">x和y保持不变</font>的，<font style="color:#DF2A3F;">z永远安装最新的版本；</font></li>
</ul>
</li>
</ul>
<h3 id="npm-install-命令"><a href="#npm-install-命令" class="headerlink" title="npm install 命令"></a>npm install 命令</h3><ul>
<li>安装npm包分两种情况：<ul>
<li>全局安装（global install）： npm install webpack -g;</li>
<li>项目（局部）安装（local install）： npm install webpack</li>
</ul>
</li>
<li>全局安装<ul>
<li>全局安装是直接将某个包安装到全局：</li>
<li>比如全局安装yarn： <code>&lt;font style=&quot;color:#DF2A3F;&quot;&gt; npm install yarn -g&lt;/font&gt;</code></li>
</ul>
</li>
<li>但是很多人对全局安装有一些误会：<ul>
<li>通常使用npm全局安装的包都是一些工具包：yarn、webpack等；</li>
<li>并不是类似于 axios、express、koa等库文件；</li>
<li>所以全局安装了之后并不能让我们在所有的项目中使用 axios等库；</li>
</ul>
</li>
</ul>
<h3 id="项目安装"><a href="#项目安装" class="headerlink" title="项目安装"></a>项目安装</h3><ul>
<li>项目安装会在当前目录下生成一个 node_modules 文件夹，我们之前讲解require查找顺序时有讲解过这个包在什么情况下被 查找；</li>
<li>局部安装分为开发时依赖和生产时依赖</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1688478538704-bf14d9e6-55d0-43f8-b20e-77ed2ee3a953.png"></li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>前端工程化基础</category>
      </categories>
      <tags>
        <tag>前端工程化基础</tag>
      </tags>
  </entry>
  <entry>
    <title>springmvc_1</title>
    <url>/2024/04/23/springmvc-1/</url>
    <content><![CDATA[<h2 id="今日目标"><a href="#今日目标" class="headerlink" title="今日目标"></a>今日目标</h2><ul>
<li><input disabled="" type="checkbox"> 能够知道SpringMVC的优点</li>
<li><input disabled="" type="checkbox"> 能够编写SpringMVC入门案例</li>
<li><input disabled="" type="checkbox"> 能够使用PostMan发送请求</li>
<li><input disabled="" type="checkbox"> 能够掌握普通类型参数传递</li>
<li><input disabled="" type="checkbox"> 能够掌握POJO类型参数传递</li>
<li><input disabled="" type="checkbox"> 能够掌握json数据参数传递</li>
<li><input disabled="" type="checkbox"> 能够掌握响应json数据</li>
<li><input disabled="" type="checkbox"> 能够掌握rest风格快速开发</li>
<li><input disabled="" type="checkbox"> 能够完成基于restful页面数据交互案例</li>
</ul>
<h2 id="一、SpringMVC简介"><a href="#一、SpringMVC简介" class="headerlink" title="一、SpringMVC简介"></a>一、SpringMVC简介</h2><h3 id="1-SpringMVC概述"><a href="#1-SpringMVC概述" class="headerlink" title="1 SpringMVC概述"></a>1 SpringMVC概述</h3><h4 id="问题导入"><a href="#问题导入" class="headerlink" title="问题导入"></a>问题导入</h4><p>SpringMVC框架有什么优点？</p>
<h4 id="1-1-SpringMVC概述"><a href="#1-1-SpringMVC概述" class="headerlink" title="1.1 SpringMVC概述"></a>1.1 SpringMVC概述</h4><ol>
<li>SpringMVC是一种基于Java实现MVC模型的轻量级Web框架</li>
<li>优点<ol>
<li>使用简单，开发便捷（相比于Servlet）</li>
<li>灵活性强</li>
</ol>
</li>
</ol>
<h3 id="2-入门案例【重点】"><a href="#2-入门案例【重点】" class="headerlink" title="2 入门案例【重点】"></a>2 入门案例【重点】</h3><h4 id="问题导入-1"><a href="#问题导入-1" class="headerlink" title="问题导入"></a>问题导入</h4><p>在Controller中如何定义访问路径，如何响应数据？</p>
<h4 id="2-1-实现步骤"><a href="#2-1-实现步骤" class="headerlink" title="2.1 实现步骤"></a>2.1 实现步骤</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1 创建web工程（Maven结构）</span><br><span class="line">2 设置tomcat服务器，加载web工程(tomcat插件）</span><br><span class="line">3 导入坐标（SpringMVC+Servlet）</span><br><span class="line">4 定义处理请求的功能类（UserController）</span><br><span class="line">5 编写SpringMVC配置类，加载处理请求的Bean。</span><br><span class="line">6 加载SpringMVC配置，并设置SpringMVC请求拦截的路径</span><br></pre></td></tr></table></figure>

<h4 id="2-2-代码实现"><a href="#2-2-代码实现" class="headerlink" title="2.2 代码实现"></a>2.2 代码实现</h4><h5 id="【第一步】创建web工程（Maven结构）"><a href="#【第一步】创建web工程（Maven结构）" class="headerlink" title="【第一步】创建web工程（Maven结构）"></a>【第一步】创建web工程（Maven结构）</h5><h5 id="【第二步】设置tomcat服务器，加载web工程-tomcat插件）"><a href="#【第二步】设置tomcat服务器，加载web工程-tomcat插件）" class="headerlink" title="【第二步】设置tomcat服务器，加载web工程(tomcat插件）"></a>【第二步】设置tomcat服务器，加载web工程(tomcat插件）</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="【第三步】导入坐标（SpringMVC-Servlet）"><a href="#【第三步】导入坐标（SpringMVC-Servlet）" class="headerlink" title="【第三步】导入坐标（SpringMVC+Servlet）"></a>【第三步】导入坐标（SpringMVC+Servlet）</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.10.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>注意事项：</strong></p>
<ol>
<li>课程版本基于Spring主版本5.2.10.RELEASE制作</li>
<li>导入spring-webmvc坐标自动依赖spring相关坐标</li>
</ol>
<h5 id="【第四步】定义处理请求的功能类（UserController）"><a href="#【第四步】定义处理请求的功能类（UserController）" class="headerlink" title="【第四步】定义处理请求的功能类（UserController）"></a>【第四步】定义处理请求的功能类（UserController）</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义表现层控制器bean</span></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="comment">//设置映射路径为/save，即外部访问路径</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line">    <span class="comment">//设置当前操作返回结果为指定json数据（本质上是一个字符串信息）</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user save ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;info&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意事项：</strong><br>对于SpringMVC而言，Controller方法返回值默认表示要跳转的页面，没有对应的页面就会报错。如果不想跳转页面而是响应数据，那么就需要在方法上使用@ResponseBody注解。</p>
<h5 id="【第五步】编写SpringMVC配置类，加载处理请求的Bean。"><a href="#【第五步】编写SpringMVC配置类，加载处理请求的Bean。" class="headerlink" title="【第五步】编写SpringMVC配置类，加载处理请求的Bean。"></a>【第五步】编写SpringMVC配置类，加载处理请求的Bean。</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//springmvc配置类，本质上还是一个spring配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.controller&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="【第六步】加载SpringMVC配置，并设置SpringMVC请求拦截的路径"><a href="#【第六步】加载SpringMVC配置，并设置SpringMVC请求拦截的路径" class="headerlink" title="【第六步】加载SpringMVC配置，并设置SpringMVC请求拦截的路径"></a>【第六步】加载SpringMVC配置，并设置SpringMVC请求拦截的路径</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//web容器配置类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="comment">//加载springmvc配置类，产生springmvc容器（本质还是spring容器）</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createServletApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//初始化WebApplicationContext对象</span></span><br><span class="line">        <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        <span class="comment">//加载指定配置类</span></span><br><span class="line">        ctx.register(SpringMvcConfig.class);</span><br><span class="line">        <span class="keyword">return</span> ctx;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置由springmvc控制器处理的请求映射路径</span></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加载spring配置类</span></span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-运行结果"><a href="#2-3-运行结果" class="headerlink" title="2.3 运行结果"></a>2.3 运行结果</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695897605537-16a3438a-5960-43ff-8d72-bd82ae61e52c.png" alt="image-20210804191218260.png"><br><img src="/assets/image-20210804191218260.png"></p>
<h4 id="2-4-案例注解和类解析"><a href="#2-4-案例注解和类解析" class="headerlink" title="2.4 案例注解和类解析"></a>2.4 案例注解和类解析</h4><h5 id="2-4-1-Controller注解"><a href="#2-4-1-Controller注解" class="headerlink" title="2.4.1 @Controller注解"></a>2.4.1 @Controller注解</h5><ul>
<li>名称：<a href="/Controller">@Controller </a></li>
<li>类型：类注解</li>
<li>位置：SpringMVC控制器类定义上方</li>
<li>作用：设定SpringMVC的核心控制器bean</li>
<li>范例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-4-2-RequestMapping注解"><a href="#2-4-2-RequestMapping注解" class="headerlink" title="2.4.2 @RequestMapping注解"></a>2.4.2 @RequestMapping注解</h5><ul>
<li>名称：<a href="/RequestMapping">@RequestMapping </a></li>
<li>类型：方法注解</li>
<li>位置：SpringMVC控制器方法定义上方</li>
<li>作用：设置当前控制器方法请求访问路径</li>
<li>范例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;user save ...&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：其实@RequestMapping注解还可以写到类上面，笔记后面会介绍到。</p>
</blockquote>
<h5 id="2-4-3-ResponseBody注解"><a href="#2-4-3-ResponseBody注解" class="headerlink" title="2.4.3 @ResponseBody注解"></a>2.4.3 @ResponseBody注解</h5><ul>
<li>名称：<a href="/ResponseBody">@ResponseBody </a></li>
<li>类型：方法注解</li>
<li>位置：SpringMVC控制器方法定义上方</li>
<li>作用：设置当前控制器方法响应内容为当前返回值，无需解析</li>
<li>范例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/save&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;user save ...&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;info&#x27;:&#x27;springmvc&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-4-4-AbstractDispatcherServletInitializer类"><a href="#2-4-4-AbstractDispatcherServletInitializer类" class="headerlink" title="2.4.4 AbstractDispatcherServletInitializer类"></a>2.4.4 AbstractDispatcherServletInitializer类</h5><ul>
<li>AbstractDispatcherServletInitializer类是SpringMVC提供的快速初始化Web3.0容器的抽象类</li>
<li>AbstractDispatcherServletInitializer提供三个接口方法供用户实现<ul>
<li>createServletApplicationContext()方法，创建Servlet容器时，加载SpringMVC对应的bean并放入WebApplicationContext对象范围中，而WebApplicationContext的作用范围为ServletContext范围，即整个web容器范围。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载springmvc配置类，产生springmvc容器（本质还是spring容器）</span></span><br><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">createServletApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">    ctx.register(SpringMvcConfig.class);</span><br><span class="line">    <span class="keyword">return</span> ctx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>getServletMappings()方法，设定SpringMVC对应的请求映射路径，设置为&#x2F;表示拦截所有请求，任意请求都将转入到SpringMVC进行处理。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//设置由springmvc控制器处理的请求映射路径</span></span><br><span class="line"><span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>createRootApplicationContext()方法，如果创建Servlet容器时需要加载非SpringMVC对应的bean，使用当前方法进行，使用方式同createServletApplicationContext()</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加载spring配置类</span></span><br><span class="line"><span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-5-入门程序开发总结-1-N"><a href="#2-5-入门程序开发总结-1-N" class="headerlink" title="2.5 入门程序开发总结(1+N)"></a>2.5 入门程序开发总结(1+N)</h4><ul>
<li>一次性工作<ul>
<li>创建工程，设置服务器，加载工程</li>
<li>导入坐标</li>
<li>创建web容器启动类，加载SpringMVC配置，并设置SpringMVC请求拦截路径</li>
<li>SpringMVC核心配置类（设置配置类，扫描controller包，加载Controller控制器bean）</li>
</ul>
</li>
<li>多次工作<ul>
<li>定义处理请求的控制器类</li>
<li>定义处理请求的控制器方法，并配置映射路径（@RequestMapping）与返回json数据（@ResponseBody）</li>
</ul>
</li>
</ul>
<h3 id="3-入门案例工作流程分析【理解】"><a href="#3-入门案例工作流程分析【理解】" class="headerlink" title="3 入门案例工作流程分析【理解】"></a>3 入门案例工作流程分析【理解】</h3><h4 id="3-1-启动服务器初始化过程"><a href="#3-1-启动服务器初始化过程" class="headerlink" title="3.1 启动服务器初始化过程"></a>3.1 启动服务器初始化过程</h4><ol>
<li>服务器启动，执行ServletContainersInitConfig类，初始化web容器</li>
<li>执行createServletApplicationContext方法，创建了WebApplicationContext对象</li>
<li>加载SpringMvcConfig配置类</li>
<li>执行@ComponentScan加载对应的bean</li>
<li>加载UserController，每个@RequestMapping的名称对应一个具体的方法</li>
<li>执行getServletMappings方法，定义所有的请求都通过SpringMVC</li>
</ol>
<h4 id="3-2-单次请求过程"><a href="#3-2-单次请求过程" class="headerlink" title="3.2 单次请求过程"></a>3.2 单次请求过程</h4><ol>
<li>发送请求localhost&#x2F;save</li>
<li>web容器发现所有请求都经过SpringMVC，将请求交给SpringMVC处理</li>
<li>解析请求路径&#x2F;save</li>
<li>由&#x2F;save匹配执行对应的方法save(）</li>
<li>执行save()</li>
<li>检测到有@ResponseBody直接将save()方法的返回值作为响应求体返回给请求方</li>
</ol>
<h3 id="4-Controller加载控制"><a href="#4-Controller加载控制" class="headerlink" title="4 Controller加载控制"></a>4 Controller加载控制</h3><h4 id="问题导入-2"><a href="#问题导入-2" class="headerlink" title="问题导入"></a>问题导入</h4><p>因为功能不同，如何避免Spring错误的加载到SpringMVC的bean？</p>
<h4 id="4-1-Controller加载控制与业务bean加载控制"><a href="#4-1-Controller加载控制与业务bean加载控制" class="headerlink" title="4.1 Controller加载控制与业务bean加载控制"></a>4.1 Controller加载控制与业务bean加载控制</h4><ul>
<li>SpringMVC相关bean（表现层bean）</li>
<li>Spring控制的bean<ol>
<li>业务bean（Service）</li>
<li>功能bean（DataSource等）</li>
</ol>
</li>
<li>SpringMVC相关bean加载控制<ol>
<li>SpringMVC加载的bean对应的包均在com.itheima.controller包内</li>
</ol>
</li>
<li>Spring相关bean加载控制<ol>
<li>方式一：Spring加载的bean设定扫描范围为com.itheima，排除掉controller包内的bean</li>
<li>方式二：Spring加载的bean设定扫描范围为精准范围，例如service包、dao包等</li>
<li>方式三：不区分Spring与SpringMVC的环境，加载到同一个环境中</li>
</ol>
</li>
</ul>
<h4 id="4-2-方式一代码实现"><a href="#4-2-方式一代码实现" class="headerlink" title="4.2 方式一代码实现"></a>4.2 方式一代码实现</h4><ul>
<li>名称：<a href="/ComponentScan">@ComponentScan </a></li>
<li>类型：类注解</li>
<li>范例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(value = &quot;com.itheima&quot;,</span></span><br><span class="line"><span class="meta">               excludeFilters = @ComponentScan.Filter(</span></span><br><span class="line"><span class="meta">                   type = FilterType.ANNOTATION,</span></span><br><span class="line"><span class="meta">                   classes = Controller.class</span></span><br><span class="line"><span class="meta">               )</span></span><br><span class="line"><span class="meta">              )</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>属性<ol>
<li>excludeFilters：排除扫描路径中加载的bean，需要指定类别（type）与具体项（classes）</li>
<li>includeFilters：加载指定的bean，需要指定类别（type）与具体项（classes）</li>
</ol>
</li>
</ul>
<h4 id="4-3-Bean的加载格式"><a href="#4-3-Bean的加载格式" class="headerlink" title="4.3 Bean的加载格式"></a>4.3 Bean的加载格式</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractDispatcherServletInitializer</span> &#123; </span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createServletApplicationContext</span><span class="params">()</span> &#123; </span><br><span class="line">        <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();</span><br><span class="line">        ctx.register(SpringMvcConfig.class);</span><br><span class="line">        <span class="keyword">return</span> ctx;  </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">protected</span> WebApplicationContext <span class="title function_">createRootApplicationContext</span><span class="params">()</span> &#123;  </span><br><span class="line">        <span class="type">AnnotationConfigWebApplicationContext</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">AnnotationConfigWebApplicationContext</span>();      </span><br><span class="line">        ctx.register(SpringConfig.class);        </span><br><span class="line">        <span class="keyword">return</span> ctx;  </span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>简化格式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="5-PostMan【掌握】"><a href="#5-PostMan【掌握】" class="headerlink" title="5 PostMan【掌握】"></a>5 PostMan【掌握】</h3><h4 id="5-1-PostMan介绍"><a href="#5-1-PostMan介绍" class="headerlink" title="5.1 PostMan介绍"></a>5.1 PostMan介绍</h4><ul>
<li>Postman是一款功能强大的网页调试与发送网页HTTP请求的Chrome插件。<img src="/assets/image-20210804194708518.png#id=rHDV7&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></li>
<li>作用：常用于进行接口测试</li>
<li>特征<ul>
<li>简单</li>
<li>实用</li>
<li>美观</li>
<li>大方</li>
</ul>
</li>
</ul>
<h4 id="5-2-PostMan安装"><a href="#5-2-PostMan安装" class="headerlink" title="5.2 PostMan安装"></a>5.2 PostMan安装</h4><blockquote>
<p>双击资料中的“Postman-win64-8.3.1-Setup.exe”即可自动按照，打开之后需要注册，如果底部有如下链接，可以点击跳过注册</p>
</blockquote>
<h2 id="二、请求与响应"><a href="#二、请求与响应" class="headerlink" title="二、请求与响应"></a>二、请求与响应</h2><h3 id="1-请求映射路径【重点】"><a href="#1-请求映射路径【重点】" class="headerlink" title="1 请求映射路径【重点】"></a>1 请求映射路径【重点】</h3><h4 id="问题导入-3"><a href="#问题导入-3" class="headerlink" title="问题导入"></a>问题导入</h4><p>@RequestMapping注解注解可以写在哪？有什么作用？</p>
<h4 id="1-1-RequestMapping注解"><a href="#1-1-RequestMapping注解" class="headerlink" title="1.1 @RequestMapping注解"></a>1.1 @RequestMapping注解</h4><ul>
<li>名称：<a href="/RequestMapping">@RequestMapping </a></li>
<li>类型：方法注解  类注解</li>
<li>位置：SpringMVC控制器方法定义上方</li>
<li>作用：设置当前控制器方法请求访问路径，如果设置在类上统一设置当前控制器方法请求访问路径前缀</li>
<li>范例</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="comment">//类上方配置的请求映射与方法上面配置的请求映射连接在一起，形成完整的请求映射路径</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line">    <span class="comment">//请求路径映射</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/save&quot;)</span> <span class="comment">//此时save方法的访问路径是：/user/save</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user save ...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user save&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-请求参数"><a href="#2-请求参数" class="headerlink" title="2 请求参数"></a>2 请求参数</h3><h4 id="2-1-发送普通类型参数【重点】"><a href="#2-1-发送普通类型参数【重点】" class="headerlink" title="2.1 发送普通类型参数【重点】"></a>2.1 发送普通类型参数【重点】</h4><h5 id="问题导入-4"><a href="#问题导入-4" class="headerlink" title="问题导入"></a>问题导入</h5><p>如何解决POST请求中文乱码问题？</p>
<h5 id="2-1-1-请求方式"><a href="#2-1-1-请求方式" class="headerlink" title="2.1.1 请求方式"></a>2.1.1 请求方式</h5><ul>
<li>GET请求</li>
<li>POST请求</li>
</ul>
<h5 id="2-1-2-GET请求传递普通参数"><a href="#2-1-2-GET请求传递普通参数" class="headerlink" title="2.1.2 GET请求传递普通参数"></a>2.1.2 GET请求传递普通参数</h5><ul>
<li>普通参数：url地址传参，地址参数名与形参变量名相同，定义形参即可接收参数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//普通参数：请求参数与形参名称对应即可完成参数传递</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/commonParam&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">commonParam</span><span class="params">(String name ,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;普通参数传递 name ==&gt; &quot;</span>+name);</span><br><span class="line">    System.out.println(<span class="string">&quot;普通参数传递 age ==&gt; &quot;</span>+age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;common param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>问题：如果同学们传递的参数是中文试试，你们会发现接收到的参数出现了中文乱码问题。</li>
<li>原因：tomcat 8.5版本之后GET请求就不再出现中文乱码问题，但是我们使用的是tomcat7插件，所以会出现GET请求中文乱码问题。</li>
<li>解决：在pom.xml添加tomcat7插件处配置UTF-8字符集，解决GET请求中文乱码问题。</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">port</span>&gt;</span>80<span class="tag">&lt;/<span class="name">port</span>&gt;</span><span class="comment">&lt;!--tomcat端口号--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span> <span class="comment">&lt;!--虚拟目录--&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span><span class="comment">&lt;!--访问路径编解码字符集--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="2-1-3-POST请求传递普通参数"><a href="#2-1-3-POST请求传递普通参数" class="headerlink" title="2.1.3 POST请求传递普通参数"></a>2.1.3 POST请求传递普通参数</h5><ul>
<li>普通参数：form表单post请求传参，表单参数名与形参变量名相同，定义形参即可接收参数</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//普通参数：请求参数与形参名称对应即可完成参数传递</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/commonParam&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">commonParam</span><span class="params">(String name ,<span class="type">int</span> age)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;普通参数传递 name ==&gt; &quot;</span>+name);</span><br><span class="line">    System.out.println(<span class="string">&quot;普通参数传递 age ==&gt; &quot;</span>+age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;common param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题：我们发现，POST请求传递的参数如果包含中文那么就会出现中文乱码问题，说明我们之前配置的tomcat插件uri路径编解码字符集无法解决POST请求中文乱码问题。那么如何解决呢？</p>
<h5 id="2-1-4-POST请求中文乱码处理"><a href="#2-1-4-POST请求中文乱码处理" class="headerlink" title="2.1.4 POST请求中文乱码处理"></a>2.1.4 POST请求中文乱码处理</h5><blockquote>
<p>在加载SpringMVC配置的配置类中指定字符过滤器。</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//乱码处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        filter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;filter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-五种类型参数传递"><a href="#2-2-五种类型参数传递" class="headerlink" title="2.2 五种类型参数传递"></a>2.2 五种类型参数传递</h4><h5 id="问题导入-5"><a href="#问题导入-5" class="headerlink" title="问题导入"></a>问题导入</h5><p>当请求参数名与形参变量名不同，该如何接收请求参数？</p>
<h5 id="2-2-1-五种类型参数介绍"><a href="#2-2-1-五种类型参数介绍" class="headerlink" title="2.2.1 五种类型参数介绍"></a>2.2.1 五种类型参数介绍</h5><ul>
<li>普通参数</li>
<li>POJO类型参数</li>
<li>嵌套POJO类型参数</li>
<li>数组类型参数</li>
<li>集合类型参数</li>
</ul>
<h5 id="2-2-2-普通参数【重点】"><a href="#2-2-2-普通参数【重点】" class="headerlink" title="2.2.2 普通参数【重点】"></a>2.2.2 普通参数【重点】</h5><ul>
<li>普通参数：当请求参数名与形参变量名不同，使用@RequestParam绑定参数关系</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695897954283-0225f72d-235a-4573-8550-d71bb2accb17.png#clientId=u59ec80ea-96b9-4&from=paste&height=545&id=u2a82c132&originHeight=545&originWidth=2148&originalType=binary&ratio=1&rotation=0&showTitle=false&size=29950&status=done&style=none&taskId=ueeee95d8-5fc7-43a2-a560-1f0a7c4a81c&title=&width=2148" alt="image-20210805104824258.png"></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//普通参数：请求参数名与形参名不同时，使用@RequestParam注解关联请求参数名称与形参名称之间的关系</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/commonParamDifferentName&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">commonParamDifferentName</span><span class="params">(<span class="meta">@RequestParam(&quot;name&quot;)</span> String userName , <span class="type">int</span> age)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;普通参数传递 userName ==&gt; &quot;</span>+userName);</span><br><span class="line">    System.out.println(<span class="string">&quot;普通参数传递 age ==&gt; &quot;</span>+age);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;common param different name&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>名称：<a href="/RequestParam">@RequestParam </a></li>
<li>类型：形参注解</li>
<li>位置：SpringMVC控制器方法形参定义前面</li>
<li>作用：绑定请求参数与处理器方法形参间的关系</li>
<li>参数：<ul>
<li>required：是否为必传参数</li>
<li>defaultValue：参数默认值</li>
</ul>
</li>
</ul>
<h5 id="2-2-3-POJO类型参数【重点】"><a href="#2-2-3-POJO类型参数【重点】" class="headerlink" title="2.2.3 POJO类型参数【重点】"></a>2.2.3 POJO类型参数【重点】</h5><ul>
<li>POJO参数：请求参数名与形参对象属性名相同，定义POJO类型形参即可接收参数</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695897992821-9066e687-577a-49c2-8269-3f6c2f47da84.png#clientId=u59ec80ea-96b9-4&from=paste&height=545&id=u3960653c&originHeight=545&originWidth=2148&originalType=binary&ratio=1&rotation=0&showTitle=false&size=29041&status=done&style=none&taskId=u9949c076-b908-4119-8bcf-60090cc8009&title=&width=2148" alt="image-20210805105056731.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="comment">//同学们自己添加getter/setter/toString()方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//POJO参数：请求参数与形参对象中的属性对应即可完成参数传递</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/pojoParam&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">pojoParam</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;pojo参数传递 user ==&gt; &quot;</span>+user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;pojo param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意事项：请求参数key的名称要和POJO中属性的名称一致，否则无法封装。</strong></p>
<h5 id="2-2-4-嵌套POJO类型参数"><a href="#2-2-4-嵌套POJO类型参数" class="headerlink" title="2.2.4 嵌套POJO类型参数"></a>2.2.4 嵌套POJO类型参数</h5><ul>
<li>POJO对象中包含POJO对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">User</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">    <span class="comment">//同学们自己添加getter/setter/toString()方法</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Address</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String province;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> Address address;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>嵌套POJO参数：请求参数名与形参对象属性名相同，按照对象层次结构关系即可接收嵌套POJO属性参数</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695898016807-182757d7-3b2d-486b-a613-6a49340aea0d.png#clientId=u59ec80ea-96b9-4&from=paste&height=682&id=u06b95090&originHeight=682&originWidth=2132&originalType=binary&ratio=1&rotation=0&showTitle=false&size=41366&status=done&style=none&taskId=ud9779145-ceb5-40ce-a6c4-c3c7ebab51c&title=&width=2132" alt="image-20210805105505625.png"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//嵌套POJO参数：嵌套属性按照层次结构设定名称即可完成参数传递</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/pojoContainPojoParam&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">pojoContainPojoParam</span><span class="params">(User user)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;pojo嵌套pojo参数传递 user ==&gt; &quot;</span>+user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;pojo contain pojo param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意事项：请求参数key的名称要和POJO中属性的名称一致，否则无法封装。</strong></p>
<h5 id="2-2-5-数组类型参数"><a href="#2-2-5-数组类型参数" class="headerlink" title="2.2.5 数组类型参数"></a>2.2.5 数组类型参数</h5><ul>
<li>数组参数：请求参数名与形参对象属性名相同且请求参数为多个，定义数组类型即可接收参数</li>
</ul>
<p><img src="/assets/image-20210805105825688.png#id=S5f9N&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数组参数：同名请求参数可以直接映射到对应名称的形参数组对象中</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/arrayParam&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">arrayParam</span><span class="params">(String[] likes)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;数组参数传递 likes ==&gt; &quot;</span>+ Arrays.toString(likes));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;array param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-6-集合类型参数"><a href="#2-2-6-集合类型参数" class="headerlink" title="2.2.6 集合类型参数"></a>2.2.6 集合类型参数</h5><ul>
<li>集合保存普通参数：请求参数名与形参集合对象名相同且请求参数为多个，@RequestParam绑定参数关系</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695898076621-1a45d4c1-1bbc-447f-9ccb-b2eb61dd5b10.png#clientId=u59ec80ea-96b9-4&from=paste&height=612&id=u0ade4f16&originHeight=612&originWidth=2134&originalType=binary&ratio=1&rotation=0&showTitle=false&size=32397&status=done&style=none&taskId=u920c4d22-47fc-4edc-87ad-db29551773a&title=&width=2134" alt="image-20210805105957957.png"><img src="/assets/image-20210805105957957.png#id=zIkK2&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//集合参数：同名请求参数可以使用@RequestParam注解映射到对应名称的集合对象中作为数据</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/listParam&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">listParam</span><span class="params">(<span class="meta">@RequestParam</span> List&lt;String&gt; likes)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;集合参数传递 likes ==&gt; &quot;</span>+ likes);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;list param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-json数据参数传递"><a href="#2-3-json数据参数传递" class="headerlink" title="2.3 json数据参数传递"></a>2.3 json数据参数传递</h4><h5 id="问题导入-6"><a href="#问题导入-6" class="headerlink" title="问题导入"></a>问题导入</h5><p>问题：@EnableWebMvc注解和@ResponseBody注解有什么用？</p>
<h5 id="2-3-1-json数据参数介绍"><a href="#2-3-1-json数据参数介绍" class="headerlink" title="2.3.1 json数据参数介绍"></a>2.3.1 json数据参数介绍</h5><ul>
<li>json普通数组（[“”,””,””,…]）</li>
<li>json对象（{key:value,key:value,…}）</li>
<li>json对象数组（[{key:value,…},{key:value,…}]）</li>
</ul>
<h5 id="2-3-2-传递json普通数组"><a href="#2-3-2-传递json普通数组" class="headerlink" title="2.3.2 传递json普通数组"></a>2.3.2 传递json普通数组</h5><h6 id="2-3-2-1-代码演示"><a href="#2-3-2-1-代码演示" class="headerlink" title="2.3.2.1 代码演示"></a>2.3.2.1 代码演示</h6><ol>
<li>添加json数据转换相关坐标</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>设置发送json数据（请求body中添加json数据）</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695898128927-3b508504-a07a-4ce5-87bb-8aaa47ef5ee9.png#clientId=u59ec80ea-96b9-4&from=paste&height=523&id=u9ab4f045&originHeight=523&originWidth=2053&originalType=binary&ratio=1&rotation=0&showTitle=false&size=33989&status=done&style=none&taskId=u9767008a-aea7-41bb-8b57-2f6af6ba4af&title=&width=2053" alt="image-20210805110937684.png"></p>
<ol start="3">
<li>开启自动转换json数据的支持</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.controller&quot;)</span></span><br><span class="line"><span class="comment">//开启json数据类型自动转换</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意事项：</strong><br>@EnableWebMvc注解功能强大，该注解整合了多个功能，此处仅使用其中一部分功能，即json数据进行自动类型转换</p>
<ol start="4">
<li>在Controller中编写方法接收json参数</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//集合参数：json格式</span></span><br><span class="line"><span class="comment">//1.开启json数据格式的自动转换，在配置类中开启@EnableWebMvc</span></span><br><span class="line"><span class="comment">//2.使用@RequestBody注解将外部传递的json数组数据映射到形参的集合对象中作为数据</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/listParamForJson&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">listParamForJson</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;String&gt; likes)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;list common(json)参数传递 list ==&gt; &quot;</span>+likes);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;list common for json param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="2-3-2-2-EnableWebMvc注解介绍"><a href="#2-3-2-2-EnableWebMvc注解介绍" class="headerlink" title="2.3.2.2 @EnableWebMvc注解介绍"></a>2.3.2.2 @EnableWebMvc注解介绍</h6><ul>
<li>名称：<a href="/EnableWebMvc">@EnableWebMvc </a></li>
<li>类型：配置类注解</li>
<li>位置：SpringMVC配置类定义上方</li>
<li>作用：开启SpringMVC多项辅助功能</li>
<li>范例：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&quot;com.itheima.controller&quot;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h6 id="2-3-2-3-RequestBody注解介绍"><a href="#2-3-2-3-RequestBody注解介绍" class="headerlink" title="2.3.2.3 @RequestBody注解介绍"></a>2.3.2.3 @RequestBody注解介绍</h6><ul>
<li>名称：<a href="/RequestBody">@RequestBody </a></li>
<li>类型：形参注解</li>
<li>位置：SpringMVC控制器方法形参定义前面</li>
<li>作用：将请求中请求体所包含的数据传递给请求参数，此注解一个处理器方法只能使用一次</li>
<li>范例：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/listParamForJson&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">listParamForJson</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;String&gt; likes)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;list common(json)参数传递 list ==&gt; &quot;</span>+likes);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;list common for json param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-3-传递json对象"><a href="#2-3-3-传递json对象" class="headerlink" title="2.3.3 传递json对象"></a>2.3.3 传递json对象</h5><ul>
<li>POJO参数：json数据与形参对象属性名相同，定义POJO类型形参即可接收参数</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695898196483-fa9d1198-3b4e-4dea-847d-544f8ba7994f.png#clientId=u59ec80ea-96b9-4&from=paste&height=635&id=u013f8346&originHeight=635&originWidth=2148&originalType=binary&ratio=1&rotation=0&showTitle=false&size=37018&status=done&style=none&taskId=uf8f1f6d1-5910-4b06-9250-fae38f2e0e6&title=&width=2148" alt="image-20210805111544701.png"><img src="/assets/image-20210805111544701.png#id=TSqTb&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//POJO参数：json格式</span></span><br><span class="line"><span class="comment">//1.开启json数据格式的自动转换，在配置类中开启@EnableWebMvc</span></span><br><span class="line"><span class="comment">//2.使用@RequestBody注解将外部传递的json数据映射到形参的实体类对象中，要求属性名称一一对应</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/pojoParamForJson&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">pojoParamForJson</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;pojo(json)参数传递 user ==&gt; &quot;</span>+user);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;pojo for json param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-4-传递json对象数组"><a href="#2-3-4-传递json对象数组" class="headerlink" title="2.3.4 传递json对象数组"></a>2.3.4 传递json对象数组</h5><ul>
<li>POJO集合参数：json数组数据与集合泛型属性名相同，定义List类型形参即可接收参数</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695898231456-45d26432-a5db-49b6-8a12-b38b20e67190.png#clientId=u59ec80ea-96b9-4&from=paste&height=626&id=u61978d1e&originHeight=626&originWidth=2147&originalType=binary&ratio=1&rotation=0&showTitle=false&size=38323&status=done&style=none&taskId=u1e06c26d-93f1-4a63-9c24-0a059966c5a&title=&width=2147" alt="image-20210805111626095.png"><img src="/assets/image-20210805111626095.png#id=aVh1O&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//集合参数：json格式</span></span><br><span class="line"><span class="comment">//1.开启json数据格式的自动转换，在配置类中开启@EnableWebMvc</span></span><br><span class="line"><span class="comment">//2.使用@RequestBody注解将外部传递的json数组数据映射到形参的保存实体类对象的集合对象中，要求属性名称一一对应</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/listPojoParamForJson&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">listPojoParamForJson</span><span class="params">(<span class="meta">@RequestBody</span> List&lt;User&gt; list)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;list pojo(json)参数传递 list ==&gt; &quot;</span>+list);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;list pojo for json param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="2-3-5-RequestBody与-RequestParam区别"><a href="#2-3-5-RequestBody与-RequestParam区别" class="headerlink" title="2.3.5 @RequestBody与@RequestParam区别"></a>2.3.5 @RequestBody与@RequestParam区别</h5><ul>
<li>区别<br>@RequestParam用于接收url地址传参，表单传参【application&#x2F;x-www-form-urlencoded】<br>@RequestBody用于接收json数据【application&#x2F;json】</li>
<li>应用<br>后期开发中，发送json格式数据为主，@RequestBody应用较广<br>如果发送非json格式数据，选用@RequestParam接收请求参数</li>
</ul>
<h3 id="3-日期类型参数传递【重点】"><a href="#3-日期类型参数传递【重点】" class="headerlink" title="3 日期类型参数传递【重点】"></a>3 日期类型参数传递【重点】</h3><h4 id="问题导入-7"><a href="#问题导入-7" class="headerlink" title="问题导入"></a>问题导入</h4><p>@DateTimeFormat注解的作用是什么？</p>
<h4 id="3-1-代码演示"><a href="#3-1-代码演示" class="headerlink" title="3.1 代码演示"></a>3.1 代码演示</h4><ul>
<li>日期类型数据基于系统不同格式也不尽相同<br>2088-08-18<br>2088&#x2F;08&#x2F;18<br>08&#x2F;18&#x2F;2088</li>
<li>接收形参时，根据不同的日期格式设置不同的接收方式</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695898265224-14faf4a5-0b1f-4fde-94fa-c011964d38af.png#clientId=u59ec80ea-96b9-4&from=paste&height=567&id=u2ad548c7&originHeight=567&originWidth=2173&originalType=binary&ratio=1&rotation=0&showTitle=false&size=79929&status=done&style=none&taskId=u024a3196-e689-42d6-b824-6cd7ee64485&title=&width=2173" alt="image-20210805113333189.png"><br><img src="/assets/image-20210805113333189.png#id=uDnJI&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//日期参数 http://localhost:80/dataParam?date=2088/08/08&amp;date1=2088-08-18&amp;date2=2088/08/28 8:08:08</span></span><br><span class="line"><span class="comment">//使用@DateTimeFormat注解设置日期类型数据格式，默认格式yyyy/MM/dd</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/dataParam&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">dataParam</span><span class="params">(Date date,</span></span><br><span class="line"><span class="params">                  <span class="meta">@DateTimeFormat(pattern=&quot;yyyy-MM-dd&quot;)</span> Date date1,</span></span><br><span class="line"><span class="params">                  <span class="meta">@DateTimeFormat(pattern=&quot;yyyy/MM/dd HH:mm:ss&quot;)</span> Date date2)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;参数传递 date ==&gt; &quot;</span>+date);</span><br><span class="line">    System.out.println(<span class="string">&quot;参数传递 date1(yyyy-MM-dd) ==&gt; &quot;</span>+date1);</span><br><span class="line">    System.out.println(<span class="string">&quot;参数传递 date2(yyyy/MM/dd HH:mm:ss) ==&gt; &quot;</span>+date2);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;data param&#x27;&#125;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-2-DateTimeFormat注解介绍"><a href="#3-2-DateTimeFormat注解介绍" class="headerlink" title="3.2 @DateTimeFormat注解介绍"></a>3.2 @DateTimeFormat注解介绍</h4><ul>
<li>名称：<a href="/DateTimeFormat">@DateTimeFormat </a></li>
<li>类型：形参注解</li>
<li>位置：SpringMVC控制器方法形参前面</li>
<li>作用：设定日期时间型数据格式</li>
<li>属性：pattern：指定日期时间格式字符串</li>
</ul>
<h4 id="3-3-工作原理"><a href="#3-3-工作原理" class="headerlink" title="3.3 工作原理"></a>3.3 工作原理</h4><ul>
<li>其内部依赖Converter接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Converter</span>&lt;S, T&gt; &#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    T <span class="title function_">convert</span><span class="params">(S var1)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>请求参数年龄数据（String→Integer）</li>
<li>json数据转对象（json → POJO）</li>
<li>日期格式转换（String → Date）</li>
</ul>
<h4 id="3-4-注意事项"><a href="#3-4-注意事项" class="headerlink" title="3.4 注意事项"></a>3.4 注意事项</h4><p>传递日期类型参数必须在配置类上使用@EnableWebMvc注解。其功能之一：根据类型匹配对应的类型转换器。</p>
<h3 id="4-响应"><a href="#4-响应" class="headerlink" title="4 响应"></a>4 响应</h3><h4 id="问题导入-8"><a href="#问题导入-8" class="headerlink" title="问题导入"></a>问题导入</h4><p>如何响应json数据？</p>
<h4 id="4-1响应页面【了解】"><a href="#4-1响应页面【了解】" class="headerlink" title="4.1响应页面【了解】"></a>4.1响应页面【了解】</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//响应页面/跳转页面</span></span><br><span class="line">    <span class="comment">//返回值为String类型，设置返回值为页面名称，即可实现页面跳转</span></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toJumpPage&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toJumpPage</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;跳转页面&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;page.jsp&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=&quot;text/html;charset=UTF-8&quot; language=&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">        &lt;h2&gt;Hello Spring MVC!&lt;/h2&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-文本数据【了解】"><a href="#4-2-文本数据【了解】" class="headerlink" title="4.2 文本数据【了解】"></a>4.2 文本数据【了解】</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//响应文本数据</span></span><br><span class="line"><span class="comment">//返回值为String类型，设置返回值为任意字符串信息，即可实现返回指定字符串信息，需要依赖@ResponseBody注解</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/toText&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">toText</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;返回纯文本数据&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;response text&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-3-json数据【重点】"><a href="#4-3-json数据【重点】" class="headerlink" title="4.3 json数据【重点】"></a>4.3 json数据【重点】</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//响应POJO对象</span></span><br><span class="line"><span class="comment">//返回值为实体类对象，设置返回值为实体类类型，即可实现返回对应对象的json数据，需要依赖@ResponseBody注解和@EnableWebMvc注解</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/toJsonPOJO&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> User <span class="title function_">toJsonPOJO</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;返回json对象数据&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user.setName(<span class="string">&quot;itcast&quot;</span>);</span><br><span class="line">    user.setAge(<span class="number">15</span>);</span><br><span class="line">    <span class="keyword">return</span> user;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//响应POJO集合对象</span></span><br><span class="line"><span class="comment">//返回值为集合对象，设置返回值为集合类型，即可实现返回对应集合的json数组数据，需要依赖@ResponseBody注解和@EnableWebMvc注解</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/toJsonList&quot;)</span></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="keyword">public</span> List&lt;User&gt; <span class="title function_">toJsonList</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;返回json集合数据&quot;</span>);</span><br><span class="line">    <span class="type">User</span> <span class="variable">user1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user1.setName(<span class="string">&quot;传智播客&quot;</span>);</span><br><span class="line">    user1.setAge(<span class="number">15</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">User</span> <span class="variable">user2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>();</span><br><span class="line">    user2.setName(<span class="string">&quot;黑马程序员&quot;</span>);</span><br><span class="line">    user2.setAge(<span class="number">12</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;User&gt; userList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;User&gt;();</span><br><span class="line">    userList.add(user1);</span><br><span class="line">    userList.add(user2);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> userList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意：需要添加jackson-databind依赖以及在SpringMvcConfig配置类上添加@EnableWebMvc注解</strong></p>
<h2 id="三、REST风格"><a href="#三、REST风格" class="headerlink" title="三、REST风格"></a>三、REST风格</h2><h3 id="1-REST简介"><a href="#1-REST简介" class="headerlink" title="1 REST简介"></a>1 REST简介</h3><h4 id="问题导入-9"><a href="#问题导入-9" class="headerlink" title="问题导入"></a>问题导入</h4><p>Rest风格使用了几种请求方式定义访问行为？</p>
<h4 id="1-1-REST介绍"><a href="#1-1-REST介绍" class="headerlink" title="1.1 REST介绍"></a>1.1 REST介绍</h4><ul>
<li>REST（Representational State Transfer），表现形式状态转换<ul>
<li>传统风格资源描述形式<br><a href="http://localhost/user/getById?id=1">http://localhost/user/getById?id=1</a><br><a href="http://localhost/user/saveUser">http://localhost/user/saveUser</a></li>
<li>REST风格描述形式<br><a href="http://localhost/user/1">http://localhost/user/1</a><br><a href="http://localhost/user">http://localhost/user</a></li>
</ul>
</li>
<li>优点：<ul>
<li>隐藏资源的访问行为，无法通过地址得知对资源是何种操作</li>
<li>书写简化</li>
</ul>
</li>
</ul>
<h4 id="1-2-RESTful介绍"><a href="#1-2-RESTful介绍" class="headerlink" title="1.2 RESTful介绍"></a>1.2 RESTful介绍</h4><ul>
<li>按照REST风格访问资源时使用行为动作区分对资源进行了何种操作<br><a href="http://localhost/users">http://localhost/users</a>		查询全部用户信息	（查询）<br><a href="http://localhost/users/1">http://localhost/users/1</a>		查询指定用户信息（查询）<br><a href="http://localhost/users">http://localhost/users</a>		添加用户信息（新增&#x2F;保存）<br><a href="http://localhost/users">http://localhost/users</a>		修改用户信息（修改&#x2F;更新）<br><a href="http://localhost/users/1">http://localhost/users/1</a>		删除用户信息（删除）</li>
<li>根据REST风格对资源进行访问称为RESTful</li>
</ul>
<h4 id="1-3-注意事项"><a href="#1-3-注意事项" class="headerlink" title="1.3 注意事项"></a>1.3 注意事项</h4><ul>
<li>上述行为是约定方式，约定不是规范，可以打破，所以称REST风格，而不是REST规范</li>
<li>描述模块的名称通常使用复数，也就是加s的格式描述，表示此类资源，而非单个资源，例如：users、books、accounts……</li>
</ul>
<h3 id="2-RESTful入门案例"><a href="#2-RESTful入门案例" class="headerlink" title="2 RESTful入门案例"></a>2 RESTful入门案例</h3><h4 id="问题导入-10"><a href="#问题导入-10" class="headerlink" title="问题导入"></a>问题导入</h4><p>Rest风格如何通过路径传递参数？</p>
<h4 id="2-1-快速入门"><a href="#2-1-快速入门" class="headerlink" title="2.1 快速入门"></a>2.1 快速入门</h4><blockquote>
<p>做法：在Controller中定义方法时设定”http请求动作(请求方式)”和”设定请求参数（路径变量）”</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UserController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置当前请求方法为POST，表示REST风格中的添加操作</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/users&quot;,method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user save...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user save&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置当前请求方法为DELETE，表示REST风格中的删除操作</span></span><br><span class="line">    <span class="comment">//@PathVariable注解用于设置路径变量（路径参数），要求路径上设置对应的占位符，并且占位符名称与方法形参名称相同</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/users/&#123;id&#125;&quot;,method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user delete...&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user delete&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置当前请求方法为PUT，表示REST风格中的修改操作</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/users&quot;,method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> User user)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user update...&quot;</span>+user);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user update&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置当前请求方法为GET，表示REST风格中的查询操作</span></span><br><span class="line">    <span class="comment">//@PathVariable注解用于设置路径变量（路径参数），要求路径上设置对应的占位符，并且占位符名称与方法形参名称相同</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/users/&#123;id&#125;&quot; ,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user getById...&quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user getById&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置当前请求方法为GET，表示REST风格中的查询操作</span></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/users&quot;,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;user getAll...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;user getAll&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-2-PathVariable介绍"><a href="#2-2-PathVariable介绍" class="headerlink" title="2.2 @PathVariable介绍"></a>2.2 @PathVariable介绍</h4><ul>
<li>名称：<a href="/PathVariable">@PathVariable </a></li>
<li>类型：形参注解</li>
<li>位置：SpringMVC控制器方法形参定义前面</li>
<li>作用：绑定路径参数与处理器方法形参间的关系，要求路径参数名与形参名一一对应</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695898404148-0a60e708-5fcb-4e43-bf51-17eae7f7508c.png" alt="image-20210805120253164.png"></p>
<h4 id="2-3-RequestBody、-RequestParam、-PathVariable区别和应用"><a href="#2-3-RequestBody、-RequestParam、-PathVariable区别和应用" class="headerlink" title="2.3 @RequestBody、@RequestParam、@PathVariable区别和应用"></a>2.3 @RequestBody、@RequestParam、@PathVariable区别和应用</h4><ul>
<li>区别<br>@RequestParam用于接收url地址传参或表单传参<br>@RequestBody用于接收json数据<br>@PathVariable用于接收路径参数，使用{参数名称}描述路径参数</li>
<li>应用<br>后期开发中，发送请求参数超过1个时，以json格式为主，@RequestBody应用较广<br>如果发送非json格式数据，选用@RequestParam接收请求参数<br>采用RESTful进行开发，当参数数量较少时，例如1个，可以采用@PathVariable接收请求路径变量，通常用于传递id值</li>
</ul>
<h3 id="3-REST快速开发【重点】"><a href="#3-REST快速开发【重点】" class="headerlink" title="3 REST快速开发【重点】"></a>3 REST快速开发【重点】</h3><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h4 id="3-2-Rest快速开发"><a href="#3-2-Rest快速开发" class="headerlink" title="3.2 Rest快速开发"></a>3.2 Rest快速开发</h4><blockquote>
<p>解决以上三个问题</p>
</blockquote>
<p>解决问题1：在Controller类上使用@RequestMapping定义共同的访问路径。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@RequestMapping(method = RequestMethod.POST)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book save...&quot;</span> + book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book save&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/&#123;id&#125;&quot; ,method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book delete...&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book delete&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book update...&quot;</span>+book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book update&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/&#123;id&#125;&quot; ,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book getById...&quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book getById&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(method = RequestMethod.GET)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book getAll...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book getAll&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>解决问题2：使用<a href="/GetMapping">@GetMapping </a>  <a href="/PostMapping">@PostMapping </a>  <a href="/PutMapping">@PutMapping </a>  @DeleteMapping代替@RequestMapping(method&#x3D;RequestMethod.XXX)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span>   </span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @RequestMapping( method = RequestMethod.POST)</span></span><br><span class="line">    <span class="meta">@PostMapping</span><span class="comment">//使用@PostMapping简化Post请求方法对应的映射配置</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book save...&quot;</span> + book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book save&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/&#123;id&#125;&quot; ,method = RequestMethod.DELETE)</span></span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span>  <span class="comment">//使用@DeleteMapping简化DELETE请求方法对应的映射配置</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">delete</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book delete...&quot;</span> + id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book delete&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @RequestMapping(method = RequestMethod.PUT)</span></span><br><span class="line">    <span class="meta">@PutMapping</span>   <span class="comment">//使用@PutMapping简化Put请求方法对应的映射配置</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">update</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book update...&quot;</span>+book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book update&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @RequestMapping(value = &quot;/&#123;id&#125;&quot; ,method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span>    <span class="comment">//使用@GetMapping简化GET请求方法对应的映射配置</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getById</span><span class="params">(<span class="meta">@PathVariable</span> Integer id)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book getById...&quot;</span>+id);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book getById&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    @RequestMapping(method = RequestMethod.GET)</span></span><br><span class="line">    <span class="meta">@GetMapping</span>      <span class="comment">//使用@GetMapping简化GET请求方法对应的映射配置</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book getAll...&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book getAll&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>名称：<a href="/GetMapping">@GetMapping </a>  <a href="/PostMapping">@PostMapping </a>  <a href="/PutMapping">@PutMapping </a>  <a href="/DeleteMapping">@DeleteMapping </a></li>
<li>类型：方法注解</li>
<li>位置：基于SpringMVC的RESTful开发控制器方法定义上方</li>
<li>作用：设置当前控制器方法请求访问路径与请求动作，每种对应一个请求动作，例如@GetMapping对应GET请求</li>
<li>属性：<br>value（默认）：请求访问路径</li>
</ul>
<p>解决问题3：在Controller类上使用@RestController注解，等同于@Controller与@ResponseBody两个注解组合功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span>     <span class="comment">//使用@RestController注解替换@Controller与@ResponseBody注解，简化书写</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line">    <span class="comment">//方法省略了没写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>名称：<a href="/RestController">@RestController </a></li>
<li>类型：类注解</li>
<li>位置：基于SpringMVC的RESTful开发控制器类定义上方</li>
<li>作用：设置当前控制器类为RESTful风格，等同于@Controller与@ResponseBody两个注解组合功能</li>
</ul>
<h3 id="4案例：基于RESTful页面数据交互"><a href="#4案例：基于RESTful页面数据交互" class="headerlink" title="4案例：基于RESTful页面数据交互"></a>4案例：基于RESTful页面数据交互</h3><h4 id="4-1-案例效果和环境准备"><a href="#4-1-案例效果和环境准备" class="headerlink" title="4.1 案例效果和环境准备"></a>4.1 案例效果和环境准备</h4><h5 id="4-1-1-案例效果"><a href="#4-1-1-案例效果" class="headerlink" title="4.1.1 案例效果"></a>4.1.1 案例效果</h5><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695898694120-8a9d2292-9f1e-411c-a1bb-263fca1a56ed.png#clientId=u59ec80ea-96b9-4&from=paste&height=733&id=uc9feac14&originHeight=733&originWidth=2856&originalType=binary&ratio=1&rotation=0&showTitle=false&size=126623&status=done&style=none&taskId=u0064fdfc-a771-4163-ad3d-1674086de0a&title=&width=2856" alt="image-20210805140535262.png"></p>
<h5 id="4-1-2-环境准备"><a href="#4-1-2-环境准备" class="headerlink" title="4.1.2 环境准备"></a>4.1.2 环境准备</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//POJO实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Book</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String type;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">    <span class="comment">//同学们自己重写getter、setter、toString()方法...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//SpringMVC容器初始化类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ServletContainersInitConfig</span> <span class="keyword">extends</span> <span class="title class_">AbstractAnnotationConfigDispatcherServletInitializer</span> &#123;</span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getRootConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Class&lt;?&gt;[] getServletConfigClasses() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;SpringMvcConfig.class&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> String[] getServletMappings() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">String</span>[]&#123;<span class="string">&quot;/&quot;</span>&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//乱码处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> Filter[] getServletFilters() &#123;</span><br><span class="line">        <span class="type">CharacterEncodingFilter</span> <span class="variable">filter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">CharacterEncodingFilter</span>();</span><br><span class="line">        filter.setEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Filter</span>[]&#123;filter&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//SpringMVC配置类</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ComponentScan(&#123;&quot;com.itheima.controller&quot;,&quot;com.itheima.config&quot;&#125;)</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcConfig</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4-2-代码实现"><a href="#4-2-代码实现" class="headerlink" title="4.2 代码实现"></a>4.2 代码实现</h4><h5 id="4-2-1-制作SpringMVC控制器，并通过PostMan测试接口功能"><a href="#4-2-1-制作SpringMVC控制器，并通过PostMan测试接口功能" class="headerlink" title="4.2.1 制作SpringMVC控制器，并通过PostMan测试接口功能"></a>4.2.1 制作SpringMVC控制器，并通过PostMan测试接口功能</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/books&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BookController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">save</span><span class="params">(<span class="meta">@RequestBody</span> Book book)</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book save ==&gt; &quot;</span>+ book);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&#123;&#x27;module&#x27;:&#x27;book save success&#x27;&#125;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Book&gt; <span class="title function_">getAll</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;book getAll is running ...&quot;</span>);</span><br><span class="line">        List&lt;Book&gt; bookList = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;Book&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="type">Book</span> <span class="variable">book1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book1.setType(<span class="string">&quot;计算机&quot;</span>);</span><br><span class="line">        book1.setName(<span class="string">&quot;SpringMVC入门教程&quot;</span>);</span><br><span class="line">        book1.setDescription(<span class="string">&quot;小试牛刀&quot;</span>);</span><br><span class="line">        bookList.add(book1);</span><br><span class="line"></span><br><span class="line">        <span class="type">Book</span> <span class="variable">book2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book2.setType(<span class="string">&quot;计算机&quot;</span>);</span><br><span class="line">        book2.setName(<span class="string">&quot;SpringMVC实战教程&quot;</span>);</span><br><span class="line">        book2.setDescription(<span class="string">&quot;一代宗师&quot;</span>);</span><br><span class="line">        bookList.add(book2);</span><br><span class="line"></span><br><span class="line">        <span class="type">Book</span> <span class="variable">book3</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Book</span>();</span><br><span class="line">        book3.setType(<span class="string">&quot;计算机丛书&quot;</span>);</span><br><span class="line">        book3.setName(<span class="string">&quot;SpringMVC实战教程进阶&quot;</span>);</span><br><span class="line">        book3.setDescription(<span class="string">&quot;一代宗师呕心创作&quot;</span>);</span><br><span class="line">        bookList.add(book3);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> bookList;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-2-2-设置对静态资源的访问放行"><a href="#4-2-2-设置对静态资源的访问放行" class="headerlink" title="4.2.2 设置对静态资源的访问放行"></a>4.2.2 设置对静态资源的访问放行</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SpringMvcSupport</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="comment">//设置静态资源访问过滤，当前类需要设置为配置类，并被扫描加载</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        <span class="comment">//当访问/pages/????时候，从/pages目录下查找内容</span></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/pages/**&quot;</span>)</span><br><span class="line">            .addResourceLocations(<span class="string">&quot;/pages/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/js/**&quot;</span>)</span><br><span class="line">            .addResourceLocations(<span class="string">&quot;/js/&quot;</span>);        		</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/css/**&quot;</span>)</span><br><span class="line">            .addResourceLocations(<span class="string">&quot;/css/&quot;</span>);       </span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/plugins/**&quot;</span>)</span><br><span class="line">            .addResourceLocations(<span class="string">&quot;/plugins/&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="4-2-3-前端页面通过异步提交访问后台控制器"><a href="#4-2-3-前端页面通过异步提交访问后台控制器" class="headerlink" title="4.2.3 前端页面通过异步提交访问后台控制器"></a>4.2.3 前端页面通过异步提交访问后台控制器</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加</span></span><br><span class="line">saveBook () &#123;</span><br><span class="line">    axios.<span class="title function_">post</span>(<span class="string">&quot;/books&quot;</span>,<span class="variable language_">this</span>.<span class="property">formData</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//主页列表查询</span></span><br><span class="line"><span class="title function_">getAll</span>(<span class="params"></span>) &#123;</span><br><span class="line">    axios.<span class="title function_">get</span>(<span class="string">&quot;/books&quot;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">dataList</span> = res.<span class="property">data</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序-API调用</title>
    <url>/2024/10/30/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-API%E8%B0%83%E7%94%A8/</url>
    <content><![CDATA[<h3 id="网络请求-–-API参数"><a href="#网络请求-–-API参数" class="headerlink" title="网络请求 – API参数"></a>网络请求 – API参数</h3><p>微信提供了专属的API接口,用于网络请求: wx.request(Object object)</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690984393090-53ab6417-1920-4389-86ba-e04356b59da5.png"></p>
<h4 id="网络请求-–-API使用"><a href="#网络请求-–-API使用" class="headerlink" title="网络请求 – API使用"></a>网络请求 – API使用</h4><p>直接使用wx.request(Object object)发送请求：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690984423745-2d9ea868-7c64-43b0-8fad-6c35690bf070.png"></p>
<h4 id="网络请求-–-API封装"><a href="#网络请求-–-API封装" class="headerlink" title="网络请求 – API封装"></a>网络请求 – API封装</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690984440820-9fbfeb48-015a-4acc-a42c-093690093e0b.png"></p>
<h3 id="展示弹窗效果"><a href="#展示弹窗效果" class="headerlink" title="展示弹窗效果"></a>展示弹窗效果</h3><p>小程序中展示弹窗有四种方式: showToast、showModal、showLoading、showActionSheet</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690984501644-7f8d9fa0-b626-47d0-8945-01f89f509b98.png"></p>
<h3 id="分享功能"><a href="#分享功能" class="headerlink" title="分享功能"></a>分享功能</h3><ul>
<li>分享是小程序扩散的一种重要方式，小程序中有两种分享方式：<ul>
<li>方式一：点击右上角的菜单按钮，之后点击转发</li>
<li>方式二：点击某一个按钮，直接转发</li>
</ul>
</li>
<li>当我们转发给好友一个小程序时，通常小程序中会显示一些信息：<ul>
<li>如何决定这些信息的展示呢？通过 <font style="color:#DF2A3F;">onShareAppMessage</font></li>
<li>监听用户点击页面内<font style="color:#DF2A3F;">转发按钮（button 组件 open-type&#x3D;”share”）</font>或<font style="color:#DF2A3F;">右上角菜单“转发”按钮</font>的行为，并自定义转发内容</li>
<li>此事件处理函数需要<font style="color:#DF2A3F;"> return 一个 Object</font>，用于自定义转发内容；</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690984581146-11c432e6-cdd8-4dd6-8741-f7d10084333c.png"></li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690984591234-e1fded00-aea2-4e07-852e-db9d5ea396fc.png"></li>
</ul>
<h3 id="获取设备信息"><a href="#获取设备信息" class="headerlink" title="获取设备信息"></a>获取设备信息</h3><ul>
<li>在开发中，我们需要经常获取当前设备的信息，用于手机信息或者进行一些适配工作。<ul>
<li>小程序提供了相关个API：wx.getSystemInfo(Object object)</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690984621815-03d4374f-aa88-4f81-9b40-1eaa1d40e9d7.png"></li>
</ul>
</li>
</ul>
<h3 id="获取位置信息"><a href="#获取位置信息" class="headerlink" title="获取位置信息"></a>获取位置信息</h3><ul>
<li>开发中我们需要经常获取用户的位置信息，以方便给用户提供相关的服务：<ul>
<li>我们可以通过API获取：wx.getLocation(Object object)</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690984662780-2a2b5ae8-846f-4391-9d16-513edfc2d93d.png"></li>
</ul>
</li>
<li>对于用户的关键信息，需要获取用户的授权后才能获得<ul>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#permission">链接</a><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#permission">https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html#permission</a></li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690984673062-98d4dcc6-ac4f-42e5-87a4-86463a6fb85e.png"></li>
</ul>
</li>
</ul>
<h3 id="Storage存储"><a href="#Storage存储" class="headerlink" title="Storage存储"></a>Storage存储</h3><ul>
<li>在开发中，某些常见我们需要将一部分数据存储在本地：比如token、用户信息等。<ul>
<li>小程序提供了专门的Storage用于进行本地存储。</li>
</ul>
</li>
<li>同步存取数据的方法：<ul>
<li>wx.setStorageSync(string key, any data)</li>
<li>any wx.getStorageSync(string key)</li>
<li>wx.removeStorageSync(string key)</li>
<li>wx.clearStorageSync()</li>
</ul>
</li>
<li>异步存储数据的方法：<ul>
<li>wx.setStorage(Object object)</li>
<li>wx.getStorage(Object object)</li>
<li>wx.removeStorage(Object object)</li>
<li>wx.clearStorage(Object object)</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690984746961-47f56e35-d7b3-40a2-9875-76ad0387e925.png"></li>
</ul>
<h3 id="界面跳转的方式"><a href="#界面跳转的方式" class="headerlink" title="界面跳转的方式"></a>界面跳转的方式</h3><ul>
<li>界面的跳转有两种方式：通过navigator组件 和 通过wx的API跳转</li>
<li>这里我们先以wx的API作为讲解：</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690984782976-40920733-1a63-45bb-ba61-916fb9b34eea.png"></li>
</ul>
<h4 id="页面跳转-navigateTo"><a href="#页面跳转-navigateTo" class="headerlink" title="页面跳转 - navigateTo"></a>页面跳转 - navigateTo</h4><ul>
<li>wx.navigateTo(Object object)<ul>
<li>保留当前页面，跳转到<font style="color:#DF2A3F;">应用内的某个页面；</font></li>
<li>但是<font style="color:#DF2A3F;">不能跳到 tabbar 页面；</font></li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690984829341-785caafd-4572-48f8-a4cc-148f7d7f1a3c.png"></li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690984846405-52ddb4df-a04b-475d-b1d6-18fec918ecb3.png"></li>
</ul>
<h4 id="页面返回-navigateBack"><a href="#页面返回-navigateBack" class="headerlink" title="页面返回 - navigateBack"></a>页面返回 - navigateBack</h4><ul>
<li>wx.navigateBack(Object object)<ul>
<li>关闭当前页面，返回<font style="color:#DF2A3F;">上一页面或多级页面。</font></li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690984875472-aeb68e39-8340-4385-a02f-3a482761fd37.png"></li>
</ul>
<h3 id="页面跳转-数据传递（一）"><a href="#页面跳转-数据传递（一）" class="headerlink" title="页面跳转 - 数据传递（一）"></a>页面跳转 - 数据传递（一）</h3><ul>
<li>如何在界面跳转过程中我们需要相互传递一些数据，应该如何完成呢？<ul>
<li>首页 -&gt; 详情页：使用URL中的query字段</li>
<li>详情页 -&gt; 首页：在详情页内部拿到首页的页面对象，直接修改数据</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690984920868-ec119d71-fb5a-4707-b963-85560e125732.png"></p>
<h3 id="页面跳转-数据传递（二）"><a href="#页面跳转-数据传递（二）" class="headerlink" title="页面跳转 - 数据传递（二）"></a>页面跳转 - 数据传递（二）</h3><p>早期数据的传递方式只能通过上述的方式来进行，在小程序基础库 2.7.3 开始支持events参数，也可以用于数据的传递。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690984981009-f09f61c0-eef0-40f0-9301-b932dea91293.png"></p>
<h3 id="界面跳转的方式-1"><a href="#界面跳转的方式-1" class="headerlink" title="界面跳转的方式"></a>界面跳转的方式</h3><p>navigator组件主要就是用于界面的跳转的，也可以跳转到其他小程序中：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690985029686-6e8ce999-444d-489f-a6ea-4cbc0f9d8721.png"></p>
<h3 id="小程序用户登录的流程"><a href="#小程序用户登录的流程" class="headerlink" title="小程序用户登录的流程"></a>小程序用户登录的流程</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690985070341-e8a08746-3246-464d-8466-da55170a1a06.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690985076865-bd1452f3-770c-4513-848e-29d9f44d4c1f.png"></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序-组件化开发</title>
    <url>/2024/10/30/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E7%BB%84%E4%BB%B6%E5%8C%96%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<h3 id="创建一个组件"><a href="#创建一个组件" class="headerlink" title="创建一个组件"></a>创建一个组件</h3><ul>
<li>类似于页面，自定义组件由 json wxml wxss js 4个文件组成。<ul>
<li>按照我的个人习惯, 我们会先在根目录下创建一个文件夹；</li>
<li>components, 里面存放我们之后自定义的公共组件；</li>
<li>常见一个自定义组件 my-cpn: 包含对应的四个文件；</li>
</ul>
</li>
<li>自定义组件的步骤：<ul>
<li>1.首先需要在 json 文件中进行自定义组件声明（将component 字段设 为 true 可这一组文件设为自定义组件）：</li>
<li>2.在wxml中编写属于我们组件自己的模板</li>
<li>3.在wxss中编写属于我们组件自己的相关样式</li>
<li>4.在js文件中, 可以定义数据或组件内部的相关逻辑(后续我们再使用)</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690983566236-64e01b61-e628-42f0-bfa3-c0e927c4346a.png"></li>
</ul>
<h3 id="使用自定义组件和细节注意事项"><a href="#使用自定义组件和细节注意事项" class="headerlink" title="使用自定义组件和细节注意事项"></a>使用自定义组件和细节注意事项</h3><ul>
<li>一些需要注意的细节：<ul>
<li><font style="color:#DF2A3F;">自定义组件也是可以引用自定义组件的</font>，引用方法类似于页面引用自定义组件的方式（使用usingComponents 字段）。</li>
<li>自定义组件和页面所在项目根目录名 <font style="color:#DF2A3F;">不能以“wx-”为前缀</font>，否则会报错。</li>
<li>如果在<font style="color:#DF2A3F;">app.json的usingComponents声明某个组件</font>，那么<font style="color:#DF2A3F;">所有页面和组件可以直接使用该组件。</font>  \</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690983628357-8a84bbc5-b901-4e4f-b2ce-938c0555e21a.png"></li>
</ul>
<h3 id="组件的样式细节"><a href="#组件的样式细节" class="headerlink" title="组件的样式细节"></a>组件的样式细节</h3><ul>
<li>课题一：组件内的样式 对 外部样式 的影响<ul>
<li>结论一：组件内的class样式，只对组件wxml内的节点生效, 对于引用组件的Page页面不生效。</li>
<li>结论二：组件内不能使用id选择器、属性选择器、标签选择器</li>
</ul>
</li>
<li>课题二：外部样式 对 组件内样式 的影响<ul>
<li>结论一：外部使用class的样式，只对外部wxml的class生效，对组件内是不生效的</li>
<li>结论二：外部使用了id选择器、属性选择器不会对组件内产生影响</li>
<li>结论三：外部使用了标签选择器，会对组件内产生影响</li>
</ul>
</li>
<li>课题三：如何让class可以相互影响<ul>
<li>在<font style="color:#DF2A3F;">Component对象</font>中，可以传入一个<font style="color:#DF2A3F;">options属性</font>，其中options属性中有一个<font style="color:#DF2A3F;">styleIsolation（隔离）属性。</font></li>
<li>styleIsolation有三个取值：<ul>
<li><ul>
<li><font style="color:#DF2A3F;">isolated</font> 表示启用样式隔离，在自定义组件内外，使用 class 指定的样式将不会相互影响（默认取值）；</li>
</ul>
</li>
<li><ul>
<li><font style="color:#DF2A3F;">apply-shared</font> 表示页面 wxss 样式将影响到自定义组件，但自定义组件 wxss 中指定的样式不会影响页面；</li>
</ul>
</li>
<li><ul>
<li><font style="color:#DF2A3F;">shared</font> 表示页面 wxss 样式将影响到自定义组件，自定义组件 wxss 中指定的样式也会影响页面和其他设置 了</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="组件的通信"><a href="#组件的通信" class="headerlink" title="组件的通信"></a>组件的通信</h3><p>很多情况下，组件内展示的内容（数据、样式、标签），并不是在组件内写死的，而且可以由使用者来决定。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690983757115-d88910d0-dbc9-4f0c-a605-8ba9df806626.png"></p>
<h3 id="向组件传递数据-properties"><a href="#向组件传递数据-properties" class="headerlink" title="向组件传递数据 - properties"></a>向组件传递数据 - properties</h3><ul>
<li>给组件传递数据：<ul>
<li>大部分情况下，组件只负责布局和样式，内容是由使用组件的对象决定的；</li>
<li>所以，我们经常需要从外部传递数据给我们的组件，让我们的组件来进行展示；</li>
</ul>
</li>
<li>如何传递呢？<ul>
<li>使用<font style="color:#DF2A3F;">properties</font>属性；</li>
</ul>
</li>
<li>支持的类型：<ul>
<li><font style="color:#DF2A3F;">String、Number、Boolean</font></li>
<li><font style="color:#DF2A3F;">Object、Array、null（不限制类型）</font></li>
</ul>
</li>
<li>默认值：<ul>
<li>可以通过<font style="color:#DF2A3F;">value设置默认值</font>；</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690983834078-a8ebb9c1-8299-4e5c-ae1e-1519b5ca6dbb.png"></li>
</ul>
<h3 id="向组件传递样式-externalClasses"><a href="#向组件传递样式-externalClasses" class="headerlink" title="向组件传递样式 - externalClasses"></a>向组件传递样式 - externalClasses</h3><ul>
<li>给组件传递样式：<ul>
<li>有时候，我们不希望将样式在组件内固定不变，而是外部可以决定样式。</li>
</ul>
</li>
<li>这个时候，我们可以使用externalClasses属性：<ul>
<li>1.在Component对象中，定义<font style="color:#DF2A3F;">externalClasses</font>属性</li>
<li>2.在组件内的wxml中使用externalClasses属性中的class</li>
<li>3.在页面中传入对应的class，并且给这个class设置样式</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690983905072-b7081ab4-ad27-4018-ba1b-22c0d515befb.png"></p>
<h3 id="组件向外传递事件-–-自定义事件"><a href="#组件向外传递事件-–-自定义事件" class="headerlink" title="组件向外传递事件 – 自定义事件"></a>组件向外传递事件 – 自定义事件</h3><p>有时候是自定义组件内部发生了事件，需要告知使用者，这个时候可以使用自定义事件：</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690983925513-c3a3f778-e862-4dde-a98f-ca5d6307777d.png"></p>
<hr>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690983978386-7bd32d42-ac85-4707-a4a8-52aac4862738.png"></p>
<h3 id="页面直接调用组件方法"><a href="#页面直接调用组件方法" class="headerlink" title="页面直接调用组件方法"></a>页面直接调用组件方法</h3><ul>
<li>可在父组件里调用 this.selectComponent ，获取子组件的实例对象。<ul>
<li>调用时需要传入一个匹配选择器 selector，如：this.selectComponent(“.my-component”)。</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690984069776-b0f88263-f3d5-41aa-a0c3-8256d56b495b.png"></li>
</ul>
</li>
</ul>
<h3 id="什么是插槽？"><a href="#什么是插槽？" class="headerlink" title="什么是插槽？"></a>什么是插槽？</h3><ul>
<li>slot翻译为插槽：<ul>
<li>在生活中很多地方都有插槽，电脑的USB插槽，插板当中的电源插槽。</li>
<li>插槽的目的是让我们原来的设备具备更多的扩展性。</li>
<li>比如电脑的USB我们可以插入U盘、硬盘、手机、音响、键盘、鼠标等等。</li>
</ul>
</li>
<li>组件的插槽：<ul>
<li>组件的插槽也是为了让我们封装的组件更加具有扩展性。</li>
<li>让使用者可以决定组件内部的一些内容到底展示什么。</li>
</ul>
</li>
<li>栗子：移动网站中的导航栏。<ul>
<li>移动开发中，几乎每个页面都有导航栏。</li>
<li>导航栏我们必然会封装成一个插件，比如nav-bar组件。</li>
<li>一旦有了这个组件，我们就可以在多个页面中复用了。</li>
</ul>
</li>
<li>但是，每个页面的导航是一样的吗？类似<ul>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690984130925-b8128c12-5e9c-4d7b-81af-1a31fb898f1d.png"></li>
</ul>
</li>
</ul>
<h3 id="单个插槽的使用"><a href="#单个插槽的使用" class="headerlink" title="单个插槽的使用"></a>单个插槽的使用</h3><ul>
<li>除了内容和样式可能由外界决定之外，也可能外界想决定显示的方式<ul>
<li>比如我们有一个组件定义了头部和尾部，但是中间的内容可能是一段文字，也可能是一张图片，或者是一个进 度条。</li>
<li>在不确定外界想插入什么其他组件的前提下，我们可以在组件内预留插槽：</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690984175526-b7c6035e-8c7b-4ffc-9eec-3180444982c8.png"></p>
<h3 id="多个插槽的使用"><a href="#多个插槽的使用" class="headerlink" title="多个插槽的使用"></a>多个插槽的使用</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690984189783-10f69790-f774-4f7d-a023-1358c56dd789.png"></p>
<h3 id="behaviors"><a href="#behaviors" class="headerlink" title="behaviors"></a>behaviors</h3><ul>
<li>behaviors 是用于组件间代码共享的特性，类似于一些编程语言中的 “mixins”。<ul>
<li>每个 behavior 可以包含一组属性、数据、生命周期函数和方法；</li>
<li>组件引用它时，它的属性、数据和方法会被合并到组件中，生命周期函数也会在对应时机被调用；</li>
<li>每个组件可以引用多个 behavior ，behavior 也可以引用其它 behavior ；</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690984253169-5af7eec2-2e54-45f6-91e5-39fcb00485f0.png"></li>
</ul>
<h3 id="组件的生命周期"><a href="#组件的生命周期" class="headerlink" title="组件的生命周期"></a>组件的生命周期</h3><ul>
<li>组件的生命周期，指的是组件自身的一些函数，这些函数在特殊的时间点或遇到一些特殊的框架事件时被自动触发。<ul>
<li>其中，最重要的生命周期是 created attached detached ，包含一个组件实例生命流程的最主要时间点。</li>
</ul>
</li>
<li>自小程序基础库版本 2.2.3 起，组件的的生命周期也可以在 lifetimes 字段内进行声明（这是推荐的方式，其优先级最高）。</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690984290776-0ef62286-769d-4ada-a81e-e58f1ed9b8ab.png"></p>
<h3 id="组件所在页面的生命周期"><a href="#组件所在页面的生命周期" class="headerlink" title="组件所在页面的生命周期"></a>组件所在页面的生命周期</h3><ul>
<li>还有一些特殊的生命周期，它们并非与组件有很强的关联，但有时组件需要获知，以便组件内部处理。<ul>
<li>样的生命周期称为“组件所在页面的生命周期”，在 pageLifetimes 定义段中定义。</li>
</ul>
</li>
<li>其中可用的生命周期包括：</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690984326902-4c8cb506-b924-475b-badb-eadc021e83ad.png"></li>
</ul>
<h3 id="Component构造器"><a href="#Component构造器" class="headerlink" title="Component构造器"></a>Component构造器</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690984342843-8c8e293a-31ab-4d00-856a-0a646180dcb3.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690984355425-820eed4f-5083-47f6-9ce4-bdbcd49fb0ee.png"></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序-内置组件</title>
    <url>/2024/10/30/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E5%86%85%E7%BD%AE%E7%BB%84%E4%BB%B6/</url>
    <content><![CDATA[<h3 id="Text组件解析"><a href="#Text组件解析" class="headerlink" title="Text组件解析"></a>Text组件解析</h3><ul>
<li>Text组件用于显示文本, 类似于span标签, 是行内元素</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690981012698-aeac2d02-dc1c-41b6-b334-b889855811d7.png"></p>
<ul>
<li>user-select属性决定文本内容是否可以让用户选中<img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690981073729-ea9702d8-e033-4c32-bc70-f6c12232819a.png"></li>
<li>space有三个取值(了解)</li>
<li>decode是否解码(了解)<ul>
<li>decode可以解析的有 &nbsp; &lt; …</li>
</ul>
</li>
</ul>
<h3 id="Button组件解析"><a href="#Button组件解析" class="headerlink" title="Button组件解析"></a>Button组件解析</h3><ul>
<li>Button组件用于创建按钮，默认块级元素</li>
<li>常见属性：</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690981105767-35a6efb7-83dd-473c-96cf-045aab6bff9b.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690981192714-662ba0ab-a5c3-4a2a-9442-69da3c6a6040.png"></p>
<h4 id="open-type属性"><a href="#open-type属性" class="headerlink" title="open-type属性"></a>open-type属性</h4><p>open-type用户获取一些特殊性的权限，可以绑定一些特殊的事件</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690981262939-1111b1bf-69dd-451c-99e6-1962f1627ad2.png"></p>
<h3 id="View组件解析"><a href="#View组件解析" class="headerlink" title="View组件解析"></a>View组件解析</h3><p>视图组件（块级元素，独占一行，通常用作容器组件）</p>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690981297895-9533f75e-0f26-4dd0-8ad2-03e15be47b96.png"></p>
<h3 id="Image组件解析"><a href="#Image组件解析" class="headerlink" title="Image组件解析"></a>Image组件解析</h3><ul>
<li>Image组件用于显示图片，有如下常见属性<ul>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690981349977-7d88ba47-b957-403e-bbed-732ac54d9636.png"></li>
</ul>
</li>
<li>其中src可以是本地图片，也可以是网络图片</li>
<li>Mode属性使用也非常关键，详情查看官网：<ul>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/component/image.html">链接</a><a href="https://developers.weixin.qq.com/miniprogram/dev/component/image.html">https://developers.weixin.qq.com/miniprogram/dev/component/image.html</a></li>
</ul>
</li>
<li>注意：image组件默认宽度320px、高度240px</li>
</ul>
<h3 id="scroll-view组件解析"><a href="#scroll-view组件解析" class="headerlink" title="scroll-view组件解析"></a>scroll-view组件解析</h3><ul>
<li>scroll-view可以实现局部滚动，常见属性如下<ul>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690981458286-8f78a98c-eec9-4521-92fc-3088766c181d.png"></li>
</ul>
</li>
<li>注意事项：<ul>
<li>实现滚动效果必须添加scroll-x或者scroll-y属性（只需要添加即可，属性值相当于为true了）</li>
<li>垂直方向滚动必须设置scroll-view一个高度</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690981557508-f697490a-18d9-4f15-b0dc-3c5695b989f8.png"></li>
</ul>
<h3 id="组件共同的属性"><a href="#组件共同的属性" class="headerlink" title="组件共同的属性"></a>组件共同的属性</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690981584683-ee804de4-315d-431a-ab24-f9dfb9cddf30.png"></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序-事件处理</title>
    <url>/2024/10/30/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<h3 id="事件的监听"><a href="#事件的监听" class="headerlink" title="事件的监听"></a>事件的监听</h3><ul>
<li>什么时候会产生事件呢？<ul>
<li>小程序需要经常和用户进行某种交互，比如点击界面上的某个按钮或者区域，比如滑动了某个区域；</li>
<li>事件是视图层到逻辑层的通讯方式；</li>
<li>事件可以将用户的行为反馈到逻辑层进行处理；</li>
<li>事件可以绑定在组件上，当触发事件时，就会执行逻辑层中对应的事件处理函数；</li>
<li>事件对象可以携带额外信息，如 id, dataset, touches；</li>
</ul>
</li>
<li>事件时如何处理呢？<ul>
<li><ul>
<li>事件是<font style="color:#DF2A3F;">通过bind&#x2F;catch</font>这个属性绑定在组件上的（和普通的属性写法很相似, 以key&#x3D;“value”形式）；</li>
</ul>
</li>
<li><ul>
<li>key以<font style="color:#DF2A3F;">bind或catch开头</font>, 从1.5.0版本开始, 可以在<font style="color:#DF2A3F;">bind和catch后加上一个冒号</font>；</li>
</ul>
</li>
<li><ul>
<li>同时在当前页面的Page构造器中定义对应的事件处理函数, 如果没有对应的函数, 触发事件时会报错；</li>
</ul>
</li>
<li><ul>
<li>比如当用户点击该button区域时，达到触发条件生成事件tap，该事件处理函数会被执行，同时还会收到一个事件对象 event。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="组件的特殊事件"><a href="#组件的特殊事件" class="headerlink" title="组件的特殊事件"></a>组件的特殊事件</h3><ul>
<li>某些组件会有自己特性的事件类型，大家可以在使用组件时具体查看对应的文档<ul>
<li><ul>
<li>比如input有bindinput&#x2F;bindblur&#x2F;bindfocus等</li>
</ul>
</li>
<li><ul>
<li>比如scroll-view有bindscrolltowpper&#x2F;bindscrolltolower等</li>
</ul>
</li>
</ul>
</li>
<li>这里我们讨论几个组件都有的, 并且也比较常见的事件类型：</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690982642054-5bfbe704-9256-43a9-9626-7fe16b0177e1.png"></li>
</ul>
<h3 id="事件对象event"><a href="#事件对象event" class="headerlink" title="事件对象event"></a>事件对象event</h3><ul>
<li>当某个事件触发时, 会产生一个事件对象, 并且这个对象被传入到回调函数中, 事件对象有哪些常见的属性呢?</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690982694566-a0444d45-3340-40f1-944b-b71e44d0b444.png"></li>
</ul>
<h4 id="currentTarget和target的区别"><a href="#currentTarget和target的区别" class="headerlink" title="currentTarget和target的区别"></a>currentTarget和target的区别</h4><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690982724036-1c764f7f-5baa-4c08-b231-b7fa575ed1e3.png"></p>
<h3 id="touches和changedTouches的区别"><a href="#touches和changedTouches的区别" class="headerlink" title="touches和changedTouches的区别"></a>touches和changedTouches的区别</h3><ul>
<li>1.在touchend中不同</li>
<li>2.多手指触摸时不同</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690982767058-4a134f36-65b4-4f9a-8647-a57490563f0f.png"></li>
</ul>
<h3 id="事件参数的传递"><a href="#事件参数的传递" class="headerlink" title="事件参数的传递"></a>事件参数的传递</h3><ul>
<li>当视图层发生事件时，某些情况需要事件携带一些参数到执行的函数中, 这个时候就可以通过data-属性来完成：<ul>
<li>格式：<font style="color:#DF2A3F;">data-属性</font>的名称</li>
<li>获取：<font style="color:#DF2A3F;">e.currentTarget.dataset.</font>属性的名称</li>
</ul>
</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690982818996-5b2ffc7f-0598-43dc-b4cb-e4d55960096b.png"></li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690982837115-cc4c3075-8013-4654-8dec-cc73abe4b832.png"></li>
</ul>
<h3 id="事件冒泡和事件捕获"><a href="#事件冒泡和事件捕获" class="headerlink" title="事件冒泡和事件捕获"></a>事件冒泡和事件捕获</h3><ul>
<li>当界面产生一个事件时，事件分为了捕获阶段和冒泡阶段。</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690983483051-3c5a2535-200d-4483-beea-4220a4d903a1.png"></li>
</ul>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序-语法</title>
    <url>/2024/10/30/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h3 id="WXSS支持的选择器"><a href="#WXSS支持的选择器" class="headerlink" title="WXSS支持的选择器"></a>WXSS支持的选择器</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690981622628-6d1aa1f7-49f4-4e79-a8f0-f69e74e8ee3f.png"></p>
<h3 id="wxss的扩展-–-尺寸单位"><a href="#wxss的扩展-–-尺寸单位" class="headerlink" title="wxss的扩展 – 尺寸单位"></a>wxss的扩展 – 尺寸单位</h3><ul>
<li>尺寸单位<ul>
<li>rpx（responsive pixel）: 可以根据屏幕宽度进行自适应，规定屏幕宽为750rpx。</li>
<li>如在 iPhone6 上，屏幕宽度为375px，共有750个物理像素，则750rpx &#x3D; 375px &#x3D; 750物理像素，1rpx &#x3D; 0.5px &#x3D; 1物理 像素。</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690981892089-5f5a887b-08d0-4762-9cf5-b63fd6aa9c8a.png"></li>
</ul>
</li>
<li>建议： 开发微信小程序时设计师可以用 iPhone6 作为视觉稿的标准。</li>
</ul>
<h3 id="hidden属性"><a href="#hidden属性" class="headerlink" title="hidden属性"></a>hidden属性</h3><ul>
<li>hidden属性:<ul>
<li>hidden是所有的组件都默认拥有的属性；</li>
<li>当hidden属性为true时, 组件会被隐藏；</li>
<li>当hidden属性为false时, 组件会显示出来；</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690981965134-06892f66-bceb-4ebe-8c1e-d5c9e9b5ec73.png"><ul>
<li>hidden和wx:if的区别<ul>
<li>hidden控制隐藏和显示是控制是否添加hidden属性</li>
<li>wx:if是控制组件是否渲染的</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="列表渲染-–-wx-for基础"><a href="#列表渲染-–-wx-for基础" class="headerlink" title="列表渲染 – wx:for基础"></a>列表渲染 – wx:for基础</h3><ul>
<li>为什么使用wx:for？<ul>
<li>我们知道，在实际开发中，服务器经常返回各种列表数据，我们不可能一一从列表中取出数据进行展示；</li>
<li>需要通过for循环的方式，遍历所有的数据，一次性进行展示；</li>
</ul>
</li>
<li>在组件中，我们可以使用wx:for来遍历一个数组 （字符串 - 数字）<ul>
<li>默认情况下，遍历后在wxml中可以使用一个<font style="color:#DF2A3F;">变量index，保存的是当前遍历数据的下标值</font>。</li>
<li>数组中对应某项的数据，<font style="color:#DF2A3F;">使用变量名item获取</font>。</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690982032433-d1fb2750-cabf-4add-93aa-0d4abb74cdbf.png"></li>
</ul>
</li>
</ul>
<h3 id="block标签"><a href="#block标签" class="headerlink" title="block标签"></a>block标签</h3><ul>
<li>什么是block标签？<ul>
<li>某些情况下，我们需要使用 wx:if 或 wx:for时，可能需要包裹一组组件标签</li>
<li>我们希望对这一组组件标签进行整体的操作，这个时候怎么办呢？</li>
</ul>
</li>
<li>注意：<ul>
<li><block/>并不是一个组件，它仅仅是一个包装元素，不会在页面中做任何渲染，只接受控制属性。</li>
</ul>
</li>
<li>使用block有两个好处：<ul>
<li>1）将需要进行遍历或者判断的内容进行包裹。</li>
<li>2）将遍历和判断的属性放在block便签中，不影响普通属性的阅读，提高代码的可读性。</li>
</ul>
</li>
</ul>
<h3 id="列表渲染-item-index名称"><a href="#列表渲染-item-index名称" class="headerlink" title="列表渲染 - item&#x2F;index名称"></a>列表渲染 - item&#x2F;index名称</h3><ul>
<li>默认情况下，item – index的名字是固定的<ul>
<li>但是某些情况下，我们可能想使用其他名称</li>
<li>或者当出现多层遍历时，名字会重复</li>
</ul>
</li>
<li>这个时候，我们可以指定item和index的名称：</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690982134695-a13943a4-062c-41fe-8f27-1406e0b842f5.png"></li>
</ul>
<h3 id="列表渲染-–-key作用"><a href="#列表渲染-–-key作用" class="headerlink" title="列表渲染 – key作用"></a>列表渲染 – key作用</h3><ul>
<li>我们看到，使用wx:for时，会报一个警告：<ul>
<li>这个提示告诉我们，可以添加一个key来提供性能。</li>
</ul>
</li>
<li>为什么需要这个key属性呢？<ul>
<li>这个其实和小程序内部也使用了虚拟DOM有关系（和Vue、React很相似）。</li>
<li>当某一层有很多相同的节点时，也就是列表节点时，我们希望插入、删除一个新的节点，可以更好的复用节点；</li>
</ul>
</li>
<li>wx:key 的值以两种形式提供<ul>
<li><font style="color:#DF2A3F;">字符串</font>，代表在 for 循环的 array 中 <font style="color:#DF2A3F;">item 的某个 property</font>，该 property 的值需要是列表中唯一的字符串或数字，且不能 动态改变。</li>
<li><font style="color:#DF2A3F;">保留关键字 *this</font> 代表在 for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字。</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690982230945-dd95fbed-8fec-4e83-873a-ecd2ee510d8a.png"></li>
</ul>
</li>
</ul>
<h3 id="什么是WXS？"><a href="#什么是WXS？" class="headerlink" title="什么是WXS？"></a>什么是WXS？</h3><ul>
<li>WXS是<strong>小程序的一套脚本语言，结合 WXML，可以构建出页面的结构</strong>。<ul>
<li>官方：WXS 与 JavaScript 是不同的语言，有自己的语法，并不和 JavaScript 一致。（不过基本一致）</li>
</ul>
</li>
<li>为什么要设计WXS语言呢？<ul>
<li>在WXML中是不能直接调用Page&#x2F;Component中定义的函数的.</li>
<li>但是某些情况, 我们可以希望使用函数来处理WXML中的数据(类似于Vue中的过滤器)，这个时候就使用WXS了</li>
</ul>
</li>
<li>WXS使用的限制和特点：<ul>
<li>WXS 不依赖于运行时的基础库版本，可以在所有版本的小程序中运行；</li>
<li>WXS 的运行环境和其他 JavaScript 代码是隔离的，WXS 中不能调用其他 JavaScript 文件中定义的函数，也不能调用小程序 提供的API；</li>
<li>由于运行环境的差异，在 iOS 设备上小程序内的 WXS 会比 JavaScript 代码快 2 ~ 20 倍。在 android 设备 上二者运行效率 无差异；</li>
</ul>
</li>
</ul>
<h3 id="WXS的写法"><a href="#WXS的写法" class="headerlink" title="WXS的写法"></a>WXS的写法</h3><ul>
<li>WXS有两种写法：<ul>
<li><ul>
<li>写在标签中</li>
</ul>
</li>
<li><ul>
<li>写在以.wxs结尾的文件中</li>
</ul>
</li>
</ul>
</li>
<li><wxs>标签的属性：<ul>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690982368042-d545f3b3-cd8a-43fa-99c6-97ab8f694699.png"></li>
</ul>
</li>
<li>每一个 .wxs 文件和<wsx> 标签都是一个单独的模块。<ul>
<li>每个模块都有自己独立的作用域。即在一个模块里面定义的变量与函数，默认为私有的，对其他模块不可见；</li>
<li>一个模块要想对外暴露其内部的私有变量与函数，只能通过 <font style="color:#DF2A3F;">module.exports</font> 实现；</li>
</ul>
</li>
</ul>
<h3 id="WXS的练习"><a href="#WXS的练习" class="headerlink" title="WXS的练习"></a>WXS的练习</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690982426545-233fa11c-c72c-4e67-be9c-4768c48f01de.png"></p>
<ul>
<li>案例练习题目：<ul>
<li>题目一：传入一个数字，格式化后进行展示（例如36456，展示结果3.6万）；</li>
<li>题目二：传入一个事件，格式化后进行展示（例如100秒，展示结果为01:40）；</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690982485010-0c02b3a0-d042-4218-94b5-f64113f9b930.png"></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>类加载器、反射</title>
    <url>/2024/04/30/%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8%E3%80%81%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h2 id="1-类加载器"><a href="#1-类加载器" class="headerlink" title="1.类加载器"></a>1.类加载器</h2><h3 id="1-1类加载器【理解】"><a href="#1-1类加载器【理解】" class="headerlink" title="1.1类加载器【理解】"></a>1.1类加载器【理解】</h3><ul>
<li>作用<br>负责将.class文件（存储的物理文件）加载在到内存中<br><img src="/.%5Cimg%5C01_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8.png#id=UcKDM&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></li>
</ul>
<h3 id="1-2类加载的过程【理解】"><a href="#1-2类加载的过程【理解】" class="headerlink" title="1.2类加载的过程【理解】"></a>1.2类加载的过程【理解】</h3><ul>
<li>类加载时机<ul>
<li>创建类的实例（对象）</li>
<li>调用类的类方法</li>
<li>访问类或者接口的类变量，或者为该类变量赋值</li>
<li>使用反射方式来强制创建某个类或接口对应的java.lang.Class对象</li>
<li>初始化某个类的子类</li>
<li>直接使用java.exe命令来运行某个主类</li>
</ul>
</li>
<li>类加载过程<ol>
<li>加载<ul>
<li>通过包名 + 类名，获取这个类，准备用流进行传输</li>
<li>在这个类加载到内存中</li>
<li>加载完毕创建一个class对象</li>
</ul>
</li>
<li>链接<ul>
<li>验证<br>确保Class文件字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身安全<br>(文件中的信息是否符合虚拟机规范有没有安全隐患)</li>
<li>准备<br>负责为类的类变量（被static修饰的变量）分配内存，并设置默认初始化值<br>(初始化静态变量)</li>
<li>解析<br>将类的二进制数据流中的符号引用替换为直接引用<br>(本类中如果用到了其他类，此时就需要找到对应的类)</li>
</ul>
</li>
<li>初始化<br>根据程序员通过程序制定的主观计划去初始化类变量和其他资源<br>(静态变量赋值以及初始化其他资源)<br><img src="/.%5Cimg%5C06_%E7%B1%BB%E5%8A%A0%E8%BD%BD%E8%BF%87%E7%A8%8B%E5%88%9D%E5%A7%8B%E5%8C%96.png#id=gCq8O&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></li>
</ol>
</li>
<li>小结<ul>
<li>当一个类被使用的时候，才会加载到内存</li>
<li>类加载的过程: 加载、验证、准备、解析、初始化</li>
</ul>
</li>
</ul>
<h3 id="1-3类加载的分类【理解】"><a href="#1-3类加载的分类【理解】" class="headerlink" title="1.3类加载的分类【理解】"></a>1.3类加载的分类【理解】</h3><ul>
<li>分类<ul>
<li>Bootstrap class loader：虚拟机的内置类加载器，通常表示为null ，并且没有父null</li>
<li>Platform class loader：平台类加载器,负责加载JDK中一些特殊的模块</li>
<li>System class loader：系统类加载器,负责加载用户类路径上所指定的类库</li>
</ul>
</li>
<li>类加载器的继承关系<ul>
<li>System的父加载器为Platform</li>
<li>Platform的父加载器为Bootstrap</li>
</ul>
</li>
<li>代码演示</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoaderDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="comment">//获取系统类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">systemClassLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取系统类加载器的父加载器 --- 平台类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader1</span> <span class="operator">=</span> systemClassLoader.getParent();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取平台类加载器的父加载器 --- 启动类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader2</span> <span class="operator">=</span> classLoader1.getParent();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;系统类加载器&quot;</span> + systemClassLoader);</span><br><span class="line">        System.out.println(<span class="string">&quot;平台类加载器&quot;</span> + classLoader1);</span><br><span class="line">        System.out.println(<span class="string">&quot;启动类加载器&quot;</span> + classLoader2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="1-4双亲委派模型【理解】"><a href="#1-4双亲委派模型【理解】" class="headerlink" title="1.4双亲委派模型【理解】"></a>1.4双亲委派模型【理解】</h3><ul>
<li>介绍<br>如果一个类加载器收到了类加载请求，它并不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类加载器还存在其父类加载器，则进一步向上委托，依次递归，请求最终将到达顶层的启动类加载器，如果父类加载器可以完成类加载任务，就成功返回，倘若父类加载器无法完成此加载任务，子加载器才会尝试自己去加载，这就是双亲委派模式<br><img src="/.%5Cimg%5C07_%E5%8F%8C%E4%BA%B2%E5%A7%94%E6%B4%BE%E6%A8%A1%E5%9E%8B.png#id=laWjN&originalType=binary&ratio=1&rotation=0&showTitle=false&status=done&style=none&title="></li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1695867452300-77adc464-24f7-4ca4-8bdb-711d5e7f6bc3.png#averageHue=%23f5f4f4&clientId=uac045bf5-76ae-4&from=paste&height=362&id=u7856131a&originHeight=650&originWidth=801&originalType=binary&ratio=1&rotation=0&showTitle=false&size=55960&status=done&style=none&taskId=u755711db-69b5-419a-8c02-2964f502634&title=&width=446" alt="07_双亲委派模型.png"></p>
<h3 id="1-5ClassLoader-中的两个方法【应用】"><a href="#1-5ClassLoader-中的两个方法【应用】" class="headerlink" title="1.5ClassLoader 中的两个方法【应用】"></a>1.5ClassLoader 中的两个方法【应用】</h3><ul>
<li>方法介绍</li>
</ul>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>public static ClassLoader getSystemClassLoader()</td>
<td>获取系统类加载器</td>
</tr>
<tr>
<td>public InputStream getResourceAsStream(String name)</td>
<td>加载某一个资源文件</td>
</tr>
</tbody></table>
<ul>
<li></li>
<li>示例代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ClassLoaderDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="comment">//static ClassLoader getSystemClassLoader() 获取系统类加载器</span></span><br><span class="line">        <span class="comment">//InputStream getResourceAsStream(String name)  加载某一个资源文件</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取系统类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">systemClassLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//利用加载器去加载一个指定的文件</span></span><br><span class="line">        <span class="comment">//参数：文件的路径（放在src的根目录下，默认去那里加载）</span></span><br><span class="line">        <span class="comment">//返回值：字节流。</span></span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">is</span> <span class="operator">=</span> systemClassLoader.getResourceAsStream(<span class="string">&quot;prop.properties&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">prop</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        prop.load(is);</span><br><span class="line"></span><br><span class="line">        System.out.println(prop);</span><br><span class="line"></span><br><span class="line">        is.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="2-反射"><a href="#2-反射" class="headerlink" title="2.反射"></a>2.反射</h2><h3 id="2-1反射的概述【理解】"><a href="#2-1反射的概述【理解】" class="headerlink" title="2.1反射的概述【理解】"></a>2.1反射的概述【理解】</h3><ul>
<li>反射机制<br>是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；<br>对于任意一个对象，都能够调用它的任意属性和方法；<br>这种动态获取信息以及动态调用对象方法的功能称为Java语言的反射机制。</li>
</ul>
<h3 id="2-2获取Class类对象的三种方式【应用】"><a href="#2-2获取Class类对象的三种方式【应用】" class="headerlink" title="2.2获取Class类对象的三种方式【应用】"></a>2.2获取Class类对象的三种方式【应用】</h3><ul>
<li>三种方式分类<ul>
<li>类名.class属性</li>
<li>对象名.getClass()方法</li>
<li>Class.forName(全类名)方法</li>
</ul>
</li>
<li>示例代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;学生在学习&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//1.Class类中的静态方法forName(&quot;全类名&quot;)</span></span><br><span class="line">            <span class="comment">//全类名:包名 + 类名</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.myreflect2.Student&quot;</span>);</span><br><span class="line">        System.out.println(clazz);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.通过class属性来获取</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz2</span> <span class="operator">=</span> Student.class;</span><br><span class="line">        System.out.println(clazz2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.利用对象的getClass方法来获取class对象</span></span><br><span class="line">        <span class="comment">//getClass方法是定义在Object类中.</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>();</span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz3</span> <span class="operator">=</span> s.getClass();</span><br><span class="line">        System.out.println(clazz3);</span><br><span class="line"></span><br><span class="line">        System.out.println(clazz == clazz2);</span><br><span class="line">        System.out.println(clazz2 == clazz3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="2-3反射获取构造方法并使用【应用】"><a href="#2-3反射获取构造方法并使用【应用】" class="headerlink" title="2.3反射获取构造方法并使用【应用】"></a>2.3反射获取构造方法并使用【应用】</h3><h4 id="2-3-1Class类获取构造方法对象的方法"><a href="#2-3-1Class类获取构造方法对象的方法" class="headerlink" title="2.3.1Class类获取构造方法对象的方法"></a>2.3.1Class类获取构造方法对象的方法</h4><ul>
<li>方法介绍</li>
</ul>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Constructor&lt;?&gt;[] getConstructors()</td>
<td>返回所有公共构造方法对象的数组</td>
</tr>
<tr>
<td>Constructor&lt;?&gt;[] getDeclaredConstructors()</td>
<td>返回所有构造方法对象的数组</td>
</tr>
<tr>
<td>Constructor getConstructor(Class&lt;?&gt;… parameterTypes)</td>
<td>返回单个公共构造方法对象</td>
</tr>
<tr>
<td>Constructor getDeclaredConstructor(Class&lt;?&gt;… parameterTypes)</td>
<td>返回单个构造方法对象</td>
</tr>
</tbody></table>
<ul>
<li></li>
<li>示例代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有的有参构造方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Student</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name的值为:&quot;</span> + name);</span><br><span class="line">        System.out.println(<span class="string">&quot;private...Student...有参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//公共的无参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;public...Student...无参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//公共的有参构造方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;name的值为:&quot;</span> + name + <span class="string">&quot;age的值为:&quot;</span> + age);</span><br><span class="line">        System.out.println(<span class="string">&quot;public...Student...有参构造方法&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">//method1();</span></span><br><span class="line">        <span class="comment">//method2();</span></span><br><span class="line">        <span class="comment">//method3();</span></span><br><span class="line">        <span class="comment">//method4();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">//        Constructor&lt;T&gt; getDeclaredConstructor(Class&lt;?&gt;... parameterTypes)：</span></span><br><span class="line"><span class="comment">//                                      返回单个构造方法对象</span></span><br><span class="line">        <span class="comment">//1.获取Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.myreflect3.Student&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class);</span><br><span class="line">        System.out.println(constructor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">//        Constructor&lt;T&gt; getConstructor(Class&lt;?&gt;... parameterTypes)：</span></span><br><span class="line"><span class="comment">//                                      返回单个公共构造方法对象</span></span><br><span class="line">        <span class="comment">//1.获取Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.myreflect3.Student&quot;</span>);</span><br><span class="line">        <span class="comment">//小括号中,一定要跟构造方法的形参保持一致.</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor1</span> <span class="operator">=</span> clazz.getConstructor();</span><br><span class="line">        System.out.println(constructor1);</span><br><span class="line"></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor2</span> <span class="operator">=</span> clazz.getConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">        System.out.println(constructor2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//因为Student类中,没有只有一个int的构造,所以这里会报错.</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor3</span> <span class="operator">=</span> clazz.getConstructor(<span class="type">int</span>.class);</span><br><span class="line">        System.out.println(constructor3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//        Constructor&lt;?&gt;[] getDeclaredConstructors()：</span></span><br><span class="line"><span class="comment">//                                      返回所有构造方法对象的数组</span></span><br><span class="line">        <span class="comment">//1.获取Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.myreflect3.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Constructor[] constructors = clazz.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//        Constructor&lt;?&gt;[] getConstructors()：</span></span><br><span class="line"><span class="comment">//                                      返回所有公共构造方法对象的数组</span></span><br><span class="line">        <span class="comment">//1.获取Class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.myreflect3.Student&quot;</span>);</span><br><span class="line">        Constructor[] constructors = clazz.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor constructor : constructors) &#123;</span><br><span class="line">            System.out.println(constructor);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-3-2Constructor类用于创建对象的方法"><a href="#2-3-2Constructor类用于创建对象的方法" class="headerlink" title="2.3.2Constructor类用于创建对象的方法"></a>2.3.2Constructor类用于创建对象的方法</h4><ul>
<li>方法介绍</li>
</ul>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>T newInstance(Object…initargs)</td>
<td>根据指定的构造方法创建对象</td>
</tr>
<tr>
<td>setAccessible(boolean flag)</td>
<td>设置为true,表示取消访问检查</td>
</tr>
</tbody></table>
<ul>
<li></li>
<li>示例代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Student类同上一个示例,这里就不在重复提供了</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InvocationTargetException, InstantiationException &#123;</span><br><span class="line">        <span class="comment">//T newInstance(Object... initargs)：根据指定的构造方法创建对象</span></span><br><span class="line">        <span class="comment">//method1();</span></span><br><span class="line">        <span class="comment">//method2();</span></span><br><span class="line">        <span class="comment">//method3();</span></span><br><span class="line">        <span class="comment">//method4();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="comment">//获取一个私有的构造方法并创建对象</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.myreflect3.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取一个私有化的构造方法.</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getDeclaredConstructor(String.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//被private修饰的成员,不能直接使用的</span></span><br><span class="line">        <span class="comment">//如果用反射强行获取并使用,需要临时取消访问检查</span></span><br><span class="line">        constructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.直接创建对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) constructor.newInstance(<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">//简写格式</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.myreflect3.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.在Class类中,有一个newInstance方法,可以利用空参直接创建一个对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) clazz.newInstance();<span class="comment">//这个方法现在已经过时了,了解一下</span></span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.myreflect3.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取构造方法对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getConstructor();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.利用空参来创建Student的对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) constructor.newInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, InstantiationException, IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.myreflect3.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取构造方法对象</span></span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">constructor</span> <span class="operator">=</span> clazz.getConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.利用newInstance创建Student的对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) constructor.newInstance(<span class="string">&quot;zhangsan&quot;</span>, <span class="number">23</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="2-3-3小结"><a href="#2-3-3小结" class="headerlink" title="2.3.3小结"></a>2.3.3小结</h4><ul>
<li>获取class对象<br>三种方式: Class.forName(“全类名”), 类名.class, 对象名.getClass()</li>
<li>获取里面的构造方法对象<br>getConstructor (Class<?>... parameterTypes)
getDeclaredConstructor (Class<?>… parameterTypes)</li>
<li>如果是public的，直接创建对象<br>newInstance(Object… initargs)</li>
<li>如果是非public的，需要临时取消检查，然后再创建对象<br>setAccessible(boolean)  暴力反射</li>
</ul>
<h3 id="2-4反射获取成员变量并使用【应用】"><a href="#2-4反射获取成员变量并使用【应用】" class="headerlink" title="2.4反射获取成员变量并使用【应用】"></a>2.4反射获取成员变量并使用【应用】</h3><h4 id="2-4-1Class类获取成员变量对象的方法"><a href="#2-4-1Class类获取成员变量对象的方法" class="headerlink" title="2.4.1Class类获取成员变量对象的方法"></a>2.4.1Class类获取成员变量对象的方法</h4><ul>
<li>方法分类</li>
</ul>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Field[] getFields()</td>
<td>返回所有公共成员变量对象的数组</td>
</tr>
<tr>
<td>Field[] getDeclaredFields()</td>
<td>返回所有成员变量对象的数组</td>
</tr>
<tr>
<td>Field getField(String name)</td>
<td>返回单个公共成员变量对象</td>
</tr>
<tr>
<td>Field getDeclaredField(String name)</td>
<td>返回单个成员变量对象</td>
</tr>
</tbody></table>
<ul>
<li></li>
<li>示例代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String gender;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">money</span> <span class="operator">=</span> <span class="number">300</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Student&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&quot;, gender=&#x27;&quot;</span> + gender + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, money=&quot;</span> + money +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException &#123;</span><br><span class="line">       <span class="comment">// method1();</span></span><br><span class="line">        <span class="comment">//method2();</span></span><br><span class="line">        <span class="comment">//method3();</span></span><br><span class="line">        <span class="comment">//method4();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="comment">//        Field getDeclaredField(String name)：返回单个成员变量对象</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.myreflect4.Student&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//2.获取money成员变量</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;money&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//3.打印一下</span></span><br><span class="line">        System.out.println(field);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException &#123;</span><br><span class="line">        <span class="comment">//        Field getField(String name)：返回单个公共成员变量对象</span></span><br><span class="line">        <span class="comment">//想要获取的成员变量必须是真实存在的</span></span><br><span class="line">        <span class="comment">//且必须是public修饰的.</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.myreflect4.Student&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//2.获取name这个成员变量</span></span><br><span class="line">        <span class="comment">//Field field = clazz.getField(&quot;name&quot;);</span></span><br><span class="line">        <span class="comment">//Field field = clazz.getField(&quot;name1&quot;);</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getField(<span class="string">&quot;money&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//3.打印一下</span></span><br><span class="line">        System.out.println(field);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//        Field[] getDeclaredFields()：返回所有成员变量对象的数组</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.myreflect4.Student&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//2.获取所有的Field对象</span></span><br><span class="line">        Field[] fields = clazz.getDeclaredFields();</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//        Field[] getFields()：返回所有公共成员变量对象的数组</span></span><br><span class="line">  </span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.myreflect4.Student&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//2.获取Field对象.</span></span><br><span class="line">        Field[] fields = clazz.getFields();</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="2-4-2Field类用于给成员变量赋值的方法"><a href="#2-4-2Field类用于给成员变量赋值的方法" class="headerlink" title="2.4.2Field类用于给成员变量赋值的方法"></a>2.4.2Field类用于给成员变量赋值的方法</h4><ul>
<li>方法介绍</li>
</ul>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>void set(Object obj, Object value)</td>
<td>赋值</td>
</tr>
<tr>
<td>Object get(Object obj)</td>
<td>获取值</td>
</tr>
</tbody></table>
<ul>
<li></li>
<li>示例代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Student类同上一个示例,这里就不在重复提供了</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InstantiationException &#123;</span><br><span class="line"><span class="comment">//        Object get(Object obj) 返回由该 Field表示的字段在指定对象上的值。</span></span><br><span class="line">        <span class="comment">//method1();</span></span><br><span class="line">        <span class="comment">//method2();</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.myreflect4.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取成员变量Field的对象</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getDeclaredField(<span class="string">&quot;money&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.取消一下访问检查</span></span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.调用get方法来获取值</span></span><br><span class="line">        <span class="comment">//4.1创建一个对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) clazz.newInstance();</span><br><span class="line">        <span class="comment">//4.2获取指定对象的money的值</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> field.get(student);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.打印一下</span></span><br><span class="line">        System.out.println(o);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchFieldException, InstantiationException, IllegalAccessException &#123;</span><br><span class="line">        <span class="comment">//        void set(Object obj, Object value)：给obj对象的成员变量赋值为value</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.myreflect4.Student&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.获取name这个Field对象</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> clazz.getField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.利用set方法进行赋值.</span></span><br><span class="line">        <span class="comment">//3.1先创建一个Student对象</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) clazz.newInstance();</span><br><span class="line">        <span class="comment">//3.2有了对象才可以给指定对象进行赋值</span></span><br><span class="line">        field.set(student,<span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(student);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="2-5反射获取成员方法并使用【应用】"><a href="#2-5反射获取成员方法并使用【应用】" class="headerlink" title="2.5反射获取成员方法并使用【应用】"></a>2.5反射获取成员方法并使用【应用】</h3><h4 id="2-5-1Class类获取成员方法对象的方法"><a href="#2-5-1Class类获取成员方法对象的方法" class="headerlink" title="2.5.1Class类获取成员方法对象的方法"></a>2.5.1Class类获取成员方法对象的方法</h4><ul>
<li>方法分类</li>
</ul>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Method[] getMethods()</td>
<td>返回所有公共成员方法对象的数组，包括继承的</td>
</tr>
<tr>
<td>Method[] getDeclaredMethods()</td>
<td>返回所有成员方法对象的数组，不包括继承的</td>
</tr>
<tr>
<td>Method getMethod(String name, Class&lt;?&gt;… parameterTypes)</td>
<td>返回单个公共成员方法对象</td>
</tr>
<tr>
<td>Method getDeclaredMethod(String name, Class&lt;?&gt;… parameterTypes)</td>
<td>返回单个成员方法对象</td>
</tr>
</tbody></table>
<ul>
<li></li>
<li>示例代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//私有的，无参无返回值</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;私有的show方法，无参无返回值&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//公共的，无参无返回值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">function1</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;function1方法，无参无返回值&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//公共的，有参无返回值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">function2</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;function2方法，有参无返回值,参数为&quot;</span> + name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//公共的，无参有返回值</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">function3</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;function3方法，无参有返回值&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//公共的，有参有返回值</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">function4</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;function4方法，有参有返回值,参数为&quot;</span> + name);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;aaa&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo1</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">//method1();</span></span><br><span class="line">        <span class="comment">//method2();</span></span><br><span class="line">        <span class="comment">//method3();</span></span><br><span class="line">        <span class="comment">//method4();</span></span><br><span class="line">        <span class="comment">//method5();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method5</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">//        Method getDeclaredMethod(String name, Class&lt;?&gt;... parameterTypes)：</span></span><br><span class="line"><span class="comment">//                                返回单个成员方法对象</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.myreflect5.Student&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取一个成员方法show</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getDeclaredMethod(<span class="string">&quot;show&quot;</span>);</span><br><span class="line">        <span class="comment">//3.打印一下</span></span><br><span class="line">        System.out.println(method);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method4</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.myreflect5.Student&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取一个有形参的方法function2</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;function2&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">//3.打印一下</span></span><br><span class="line">        System.out.println(method);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method3</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException &#123;</span><br><span class="line">        <span class="comment">//        Method getMethod(String name, Class&lt;?&gt;... parameterTypes) ：</span></span><br><span class="line"><span class="comment">//                                返回单个公共成员方法对象</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.myreflect5.Student&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取成员方法function1</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method1</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;function1&quot;</span>);</span><br><span class="line">        <span class="comment">//3.打印一下</span></span><br><span class="line">        System.out.println(method1);</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//        Method[] getDeclaredMethods()：</span></span><br><span class="line"><span class="comment">//                                返回所有成员方法对象的数组，不包括继承的</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.myreflect5.Student&quot;</span>);</span><br><span class="line">  </span><br><span class="line">        <span class="comment">//2.获取Method对象</span></span><br><span class="line">        Method[] methods = clazz.getDeclaredMethods();</span><br><span class="line">        <span class="comment">//3.遍历一下数组</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">//        Method[] getMethods()：返回所有公共成员方法对象的数组，包括继承的</span></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.myreflect5.Student&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取成员方法对象</span></span><br><span class="line">        Method[] methods = clazz.getMethods();</span><br><span class="line">        <span class="comment">//3.遍历</span></span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h4 id="2-5-2Method类用于执行方法的方法"><a href="#2-5-2Method类用于执行方法的方法" class="headerlink" title="2.5.2Method类用于执行方法的方法"></a>2.5.2Method类用于执行方法的方法</h4><ul>
<li>方法介绍</li>
</ul>
<table>
<thead>
<tr>
<th>方法名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>Object invoke(Object obj, Object… args)</td>
<td>运行方法</td>
</tr>
</tbody></table>
<ul>
<li>参数一: 用obj对象调用该方法<br>参数二: 调用方法的传递的参数(如果没有就不写)<br>返回值: 方法的返回值(如果没有就不写)</li>
<li>示例代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ReflectDemo2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNotFoundException, NoSuchMethodException, IllegalAccessException, InstantiationException, InvocationTargetException &#123;</span><br><span class="line"><span class="comment">//        Object invoke(Object obj, Object... args)：运行方法</span></span><br><span class="line"><span class="comment">//        参数一：用obj对象调用该方法</span></span><br><span class="line"><span class="comment">//        参数二：调用方法的传递的参数（如果没有就不写）</span></span><br><span class="line"><span class="comment">//        返回值：方法的返回值（如果没有就不写）</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.获取class对象</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">clazz</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;com.itheima.myreflect5.Student&quot;</span>);</span><br><span class="line">        <span class="comment">//2.获取里面的Method对象  function4</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> clazz.getMethod(<span class="string">&quot;function4&quot;</span>, String.class);</span><br><span class="line">        <span class="comment">//3.运行function4方法就可以了</span></span><br><span class="line">        <span class="comment">//3.1创建一个Student对象,当做方法的调用者</span></span><br><span class="line">        <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) clazz.newInstance();</span><br><span class="line">        <span class="comment">//3.2运行方法</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(student, <span class="string">&quot;zhangsan&quot;</span>);</span><br><span class="line">        <span class="comment">//4.打印一下返回值</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Java基础</category>
      </categories>
      <tags>
        <tag>Java基础</tag>
      </tags>
  </entry>
  <entry>
    <title>软考高级系统架构师通过</title>
    <url>/2024/06/25/%E8%BD%AF%E8%80%83%E9%AB%98%E7%BA%A7%E7%B3%BB%E7%BB%9F%E6%9E%B6%E6%9E%84%E5%B8%88%E9%80%9A%E8%BF%87/</url>
    <content><![CDATA[<h3 id="喜报"><a href="#喜报" class="headerlink" title="喜报"></a>喜报</h3><hr>
<p>2024上半年软考刚刚出成绩了，已通过，特此纪念</p>
<p>开心~</p>
]]></content>
      <categories>
        <category>生活随笔</category>
      </categories>
      <tags>
        <tag>生活随笔</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序-配置</title>
    <url>/2024/10/30/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F-%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id=""><a href="#" class="headerlink" title=""></a></h3><h3 id="小程序的配置文件"><a href="#小程序的配置文件" class="headerlink" title="小程序的配置文件"></a>小程序的配置文件</h3><ul>
<li>小程序的很多开发需求被规定在了配置文件中。</li>
<li>为什么这样做呢?<ul>
<li>这样做可以更有利于我们的开发效率；</li>
<li>并且可以保证开发出来的小程序的某些风格是比较一致的；</li>
<li>比如导航栏 – 顶部TabBar，以及页面路由等等。</li>
</ul>
</li>
<li>常见的配置文件有哪些呢?<ul>
<li><font style="color:#DF2A3F;">project.config.json</font>：项目配置文件, 比如项目名称、appid等；<ul>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/projectconfig.html">链接</a><a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/projectconfig.html">https://developers.weixin.qq.com/miniprogram/dev/devtools/projectconfig.html</a></li>
</ul>
</li>
<li><font style="color:#DF2A3F;">sitemap.json</font>：小程序搜索相关的；<ul>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/sitemap.html">链接</a><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/sitemap.html">https://developers.weixin.qq.com/miniprogram/dev/framework/sitemap.html</a></li>
</ul>
</li>
<li><font style="color:#DF2A3F;">app.json</font>：全局配置；</li>
<li><font style="color:#DF2A3F;">page.json</font>：页面配置；</li>
</ul>
</li>
</ul>
<h3 id="全局app配置文件"><a href="#全局app配置文件" class="headerlink" title="全局app配置文件"></a>全局app配置文件</h3><ul>
<li>全局配置比较多, 我们这里将几个比较重要的. 完整的查看官方文档.<ul>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html">https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/app.html</a></li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690979776989-22f96b70-dad6-4f17-b7fd-7dc1ff04231f.png"></li>
</ul>
</li>
<li><strong>pages: 页面路径列表</strong><ul>
<li>用于指定小程序由哪些页面组成，每一项都对应一个页面的 路径（含文件名） 信息。</li>
<li>小程序中所有的页面都是必须在pages中进行注册的。</li>
</ul>
</li>
<li><strong>window: 全局的默认窗口展示</strong><ul>
<li>用户指定窗口如何展示, 其中还包含了很多其他的属性</li>
</ul>
</li>
<li><strong>tabBar: 顶部tab栏的展示</strong><ul>
<li>具体属性稍后我们进行演示</li>
</ul>
</li>
</ul>
<h3 id="配置案例实现"><a href="#配置案例实现" class="headerlink" title="配置案例实现"></a>配置案例实现</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690979822807-9e42b26c-d571-41a3-93fe-906e30890301.png"></p>
<h3 id="页面page配置文件"><a href="#页面page配置文件" class="headerlink" title="页面page配置文件"></a>页面page配置文件</h3><ul>
<li>每一个小程序页面也可以使用 .json 文件来对本页面的窗口表现进行配置。<ul>
<li>页面中配置项在当前页面会覆盖 app.json 的 window 中相同的配置项。</li>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/page.html">链接</a><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/page.html">https://developers.weixin.qq.com/miniprogram/dev/reference/configuration/page.html</a></li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690979885827-cef1fcb8-95b8-47ca-95fd-a9dd455534de.png"></li>
</ul>
</li>
</ul>
<h3 id="注册小程序-–-App函数"><a href="#注册小程序-–-App函数" class="headerlink" title="注册小程序 – App函数"></a>注册小程序 – App函数</h3><ul>
<li>每个小程序都需要在 app.js 中调用 App 函数 注册小程序示例<ul>
<li>在注册时, 可以绑定对应的生命周期函数；</li>
<li>在生命周期函数中, 执行对应的代码；</li>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html">链接</a><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html">https://developers.weixin.qq.com/miniprogram/dev/reference/api/App.html</a></li>
</ul>
</li>
<li>我们来思考：注册App时，我们一般会做什么呢？<ul>
<li><ol>
<li>判断小程序的进入场景</li>
</ol>
</li>
<li><ol start="2">
<li>监听生命周期函数，在生命周期中执行对应的业务逻辑，比如在某个生命周期函数中进行登录操作或者请求网络数据；</li>
</ol>
</li>
<li><ol start="3">
<li>因为App()实例只有一个，并且是全局共享的（单例对象），所以我们可以将一些共享数据放在这里；</li>
</ol>
</li>
</ul>
</li>
</ul>
<h3 id="App函数的参数"><a href="#App函数的参数" class="headerlink" title="App函数的参数"></a>App函数的参数</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690980033081-9c8d4b9d-0a7c-4a52-b4db-11b1b2f77d1c.png"></p>
<h4 id="作用一：判断打开场景"><a href="#作用一：判断打开场景" class="headerlink" title="作用一：判断打开场景"></a>作用一：判断打开场景</h4><ul>
<li>小程序的打开场景较多：<ul>
<li>常见的打开场景：群聊会话中打开、小程序列表中打开、微信扫一扫打开、另一个小程序打开</li>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/scene-list.html">链接</a><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/scene-list.html">https://developers.weixin.qq.com/miniprogram/dev/reference/scene-list.html</a></li>
</ul>
</li>
<li>如何确定场景?<ul>
<li>在onLaunch和onShow生命周期回调函数中，会有<font style="color:#DF2A3F;">options参数</font>，其中有<font style="color:#DF2A3F;">scene</font>值；  <img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690980105734-e298e81a-867a-4fe9-9a76-2359adbdf616.png"></li>
</ul>
</li>
</ul>
<h5 id="作用二：定义全局App的数据"><a href="#作用二：定义全局App的数据" class="headerlink" title="作用二：定义全局App的数据"></a>作用二：定义全局App的数据</h5><ul>
<li>作用：可以在Object中定义全局App的数据<ul>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690980139097-6e626749-c78c-440a-9834-ce9c3f770b98.png"></li>
</ul>
</li>
<li>定义的数据可以在其他任何页面中访问：<ul>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690980145056-e93dc9ed-4e3f-412c-9ed8-ab637efeec28.png"></li>
</ul>
</li>
</ul>
<h4 id="作用三-–-生命周期函数"><a href="#作用三-–-生命周期函数" class="headerlink" title="作用三 – 生命周期函数"></a>作用三 – 生命周期函数</h4><ul>
<li>作用：在生命周期函数中，完成应用程序启动后的初始化操作<ul>
<li>比如登录操作（这个后续会详细讲解）；</li>
<li>比如读取本地数据（类似于token，然后保存在全局方便使用）</li>
<li>比如请求整个应用程序需要的数据；</li>
<li><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690980684485-c50b631d-e5fa-43f8-8fe1-3dd08d827a33.png"></li>
</ul>
</li>
</ul>
<h3 id="注册页面-–-Page函数"><a href="#注册页面-–-Page函数" class="headerlink" title="注册页面 – Page函数"></a>注册页面 – Page函数</h3><ul>
<li>小程序中的每个页面, 都有一个对应的js文件, 其中调用Page函数注册页面示例<ul>
<li>在注册时, 可以绑定初始化数据、生命周期回调、事件处理函数等。</li>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html">链接</a><a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html">https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html</a></li>
</ul>
</li>
<li>我们来思考：注册一个Page页面时，我们一般需要做什么呢？<ul>
<li>1.在生命周期函数中发送网络请求，从服务器获取数据；</li>
<li>2.初始化一些数据，以方便被wxml引用展示；</li>
<li>3.监听wxml中的事件，绑定对应的事件函数；</li>
<li>4.其他一些监听（比如页面滚动、上拉刷新、下拉加载更多等）；</li>
</ul>
</li>
</ul>
<h3 id="注册Page时做什么呢"><a href="#注册Page时做什么呢" class="headerlink" title="注册Page时做什么呢?"></a>注册Page时做什么呢?</h3><p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690980768647-f1e88a5e-de2c-4629-ae6e-103f97605f63.png"></p>
<h3 id="上拉和下拉的监听"><a href="#上拉和下拉的监听" class="headerlink" title="上拉和下拉的监听"></a>上拉和下拉的监听</h3><ul>
<li>监听页面的下拉刷新和上拉加载更多：<ul>
<li>步骤一：配置页面的json文件</li>
<li>步骤二：代码中进行监听；</li>
</ul>
</li>
</ul>
<p><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690980821313-342f3c18-0c57-4797-8a8f-c7a439aab5ec.png"><img src="https://cdn.nlark.com/yuque/0/2023/png/35551100/1690980828318-3538f391-d6bd-49df-b3c7-cb0edf622e19.png"></p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-常用命令</title>
    <url>/2024/10/31/docker-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<h1 id="3-Docker常用命令"><a href="#3-Docker常用命令" class="headerlink" title="3 Docker常用命令"></a>3 Docker常用命令</h1><h2 id="3-1-帮助启动类命令"><a href="#3-1-帮助启动类命令" class="headerlink" title="3.1 帮助启动类命令"></a>3.1 帮助启动类命令</h2><ul>
<li>启动docker： <code>systemctl start docker</code></li>
<li>停止docker： <code>systemctl stop docker</code></li>
<li>重启docker： <code>systemctl restart docker</code></li>
<li>查看docker状态： <code>systemctl status docker</code></li>
<li>开机启动： <code>systemctl enable docker</code></li>
<li>查看docker概要信息： <code>docker info</code></li>
<li>查看docker总体帮助文档： <code>docker --help</code></li>
<li>查看docker命令帮助文档：<code> docker 具体命令 --help</code></li>
</ul>
<h2 id="3-2-镜像命令"><a href="#3-2-镜像命令" class="headerlink" title="3.2 镜像命令"></a>3.2 镜像命令</h2><h3 id="3-2-1docker-images"><a href="#3-2-1docker-images" class="headerlink" title="3.2.1docker images"></a>3.2.1<code>docker images</code></h3><p>列出本地主机上的镜像</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658128356068-5e3ff7a4-7f38-4a11-90e0-12bf83456dae.png"></p>
<p>:::info<br>各个选项说明:</p>
<p>REPOSITORY：表示镜像的仓库源</p>
<p>TAG：镜像的标签版本号</p>
<p>IMAGE ID：镜像ID</p>
<p>CREATED：镜像创建时间</p>
<p>SIZE：镜像大小</p>
<p>同一仓库源可以有多个 TAG版本，代表这个仓库源的不同个版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。</p>
<p>如果你不指定一个镜像的版本标签，例如你只使用 ubuntu，docker 将默认使用 ubuntu:latest 镜像</p>
<p>OPTIONS说明：</p>
<p>-a :列出本地所有的镜像（含历史映像层）</p>
<p>-q :只显示镜像ID。</p>
<p>:::</p>
<h3 id="3-2-2docker-search-某个XXX镜像名字"><a href="#3-2-2docker-search-某个XXX镜像名字" class="headerlink" title="3.2.2docker search 某个XXX镜像名字"></a>3.2.2<code>docker search 某个XXX镜像名字</code></h3><p>网站：<a href="https://hub.docker.com/">https://hub.docker.com</a></p>
<p>命令：<code>docker search [OPTIONS] 镜像名字</code></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658128663501-7a2ed748-1710-4a5b-a807-6d2f5904224e.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658128646788-0a2bb440-6da9-42de-ad89-9c7d8e758397.png"></p>
<p>:::info<br>OPTIONS说明：</p>
<p>–limit : 只列出N个镜像，默认25个</p>
<p>docker search –limit 5 redis</p>
<p>:::</p>
<h3 id="3-2-3docker-pull-某个XXX镜像名字"><a href="#3-2-3docker-pull-某个XXX镜像名字" class="headerlink" title="3.2.3docker pull 某个XXX镜像名字"></a>3.2.3<code>docker pull 某个XXX镜像名字</code></h3><p>下载镜像</p>
<p><code>docker pull 镜像名字[:TAG]</code></p>
<p><code>docker pull 镜像名字</code></p>
<p>没有TAG就是最新版</p>
<p>等价于</p>
<p><code>docker pull 镜像名字:latest</code></p>
<p><code>docker pull ubuntu</code></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658128687848-01ba57aa-4730-4b81-88f0-62e356717c87.png"></p>
<h3 id="3-2-4docker-system-df"><a href="#3-2-4docker-system-df" class="headerlink" title="3.2.4docker system df "></a>3.2.4<code>docker system df </code></h3><p>查看镜像&#x2F;容器&#x2F;数据卷所占的空间</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658128697120-12812d85-0d3d-419f-ac6f-767d8c470316.png"></p>
<h3 id="3-2-5docker-rmi-某个XXX镜像名字ID"><a href="#3-2-5docker-rmi-某个XXX镜像名字ID" class="headerlink" title="3.2.5docker rmi 某个XXX镜像名字ID"></a>3.2.5<code>docker rmi 某个XXX镜像名字ID</code></h3><p>删除镜像</p>
<p>删除单个</p>
<p><code>docker rmi -f 镜像ID</code></p>
<p>删除多个</p>
<p><code>docker rmi -f 镜像名1:TAG 镜像名2:TAG </code></p>
<p>删除全部</p>
<p><code>docker rmi -f $(docker images -qa)</code></p>
<h3 id="3-2-6-面试题：谈谈docker虚悬镜像是什么？"><a href="#3-2-6-面试题：谈谈docker虚悬镜像是什么？" class="headerlink" title="3.2.6 面试题：谈谈docker虚悬镜像是什么？"></a>3.2.6 面试题：谈谈docker虚悬镜像是什么？</h3><p><font style="color:#E8323C;">是什么？</font></p>
<p>仓库名、标签都是<none>的镜像，俗称虚悬镜像dangling image</p>
<p><font style="color:#E8323C;">长什么样？</font></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658128731936-a1972083-d868-493b-b199-818efc071b0f.png"></p>
<h2 id="3-3-容器命令"><a href="#3-3-容器命令" class="headerlink" title="3.3 容器命令"></a>3.3 容器命令</h2><h3 id="3-3-1-有镜像才能创建容器，-这是根本前提-下载一个CentOS或者ubuntu镜像演示"><a href="#3-3-1-有镜像才能创建容器，-这是根本前提-下载一个CentOS或者ubuntu镜像演示" class="headerlink" title="3.3.1 有镜像才能创建容器， 这是根本前提(下载一个CentOS或者ubuntu镜像演示)"></a>3.3.1 有镜像才能创建容器， 这是根本前提(下载一个CentOS或者ubuntu镜像演示)</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658129060820-e3bbad90-56b9-44d7-971b-305557ab2ed9.png"></p>
<p><code>docker pull centos</code></p>
<p><code>docker pull ubuntu</code></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658129093993-0b483619-b517-46b5-a248-887a445e78eb.png"></p>
<h3 id="3-3-2-新建-启动容器"><a href="#3-3-2-新建-启动容器" class="headerlink" title="3.3.2 新建+启动容器"></a>3.3.2 新建+启动容器</h3><p><code>docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</code></p>
<p>:::info<br>OPTIONS说明</p>
<p>OPTIONS说明（常用）：有些是一个减号，有些是两个减号</p>
<p>–name&#x3D;”容器新名字”       为容器指定一个名称；</p>
<p>-d: 后台运行容器并返回容器ID，也即启动守护式容器(后台运行)；</p>
<p>-i：以交互模式运行容器，通常与 -t 同时使用；</p>
<p>-t：为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p>
<p>也即启动交互式容器(前台有伪终端，等待交互)；</p>
<p>-P: 随机端口映射，大写P</p>
<p>-p: 指定端口映射，小写p</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658129219778-97778de9-d0a0-4824-93f7-14f42b329784.png"></p>
<p>:::</p>
<p>启动交互式容器(前台命令行)</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658129248609-498afeab-bed1-4ff1-b3f4-4c6b55ef6aea.png"></p>
<p>#使用镜像centos:latest以交互模式启动一个容器,在容器内执行&#x2F;bin&#x2F;bash命令。</p>
<p><code>docker run -it centos /bin/bash </code></p>
<p>:::info<br>参数说明：</p>
<p>-i: 交互式操作。</p>
<p>-t: 终端。</p>
<p>centos : centos 镜像。</p>
<p>&#x2F;bin&#x2F;bash：放在镜像名后的是命令，这里我们希望有个交互式 Shell，因此用的是 &#x2F;bin&#x2F;bash。</p>
<p>要退出终端，直接输入 exit:</p>
<p>:::</p>
<h3 id="3-3-3-列出当前所有正在运行的容器"><a href="#3-3-3-列出当前所有正在运行的容器" class="headerlink" title="3.3.3 列出当前所有正在运行的容器"></a>3.3.3 列出当前所有正在运行的容器</h3><p><code>docker ps [OPTIONS]</code></p>
<p>:::info<br>OPTIONS说明（常用）：</p>
<p>-a :列出当前所有正在运行的容器+历史上运行过的</p>
<p>-l :显示最近创建的容器。</p>
<p>-n：显示最近n个创建的容器。</p>
<p>-q :静默模式，只显示容器编号。</p>
<p>:::</p>
<h3 id="3-3-4-退出容器"><a href="#3-3-4-退出容器" class="headerlink" title="3.3.4 退出容器"></a>3.3.4 退出容器</h3><p>两种退出方式</p>
<p><code>exit</code></p>
<p>run进去容器，exit退出，容器停止</p>
<p><code>ctrl+p+q</code></p>
<p>run进去容器，ctrl+p+q退出，容器不停止</p>
<h3 id="3-3-5-启动已停止运行的容器"><a href="#3-3-5-启动已停止运行的容器" class="headerlink" title="3.3.5 启动已停止运行的容器"></a>3.3.5 启动已停止运行的容器</h3><p><code>docker start 容器ID或者容器名</code></p>
<h3 id="3-3-6-重启容器"><a href="#3-3-6-重启容器" class="headerlink" title="3.3.6 重启容器"></a>3.3.6 重启容器</h3><p><code>docker restart 容器ID或者容器名</code></p>
<h3 id="3-3-7-停止容器"><a href="#3-3-7-停止容器" class="headerlink" title="3.3.7 停止容器"></a>3.3.7 停止容器</h3><p><code>docker stop 容器ID或者容器名</code></p>
<h3 id="3-3-8-强制停止容器"><a href="#3-3-8-强制停止容器" class="headerlink" title="3.3.8 强制停止容器"></a>3.3.8 强制停止容器</h3><p><code>docker kill 容器ID或容器名</code></p>
<h3 id="3-3-9-删除已停止的容器"><a href="#3-3-9-删除已停止的容器" class="headerlink" title="3.3.9 删除已停止的容器"></a>3.3.9 删除已停止的容器</h3><p><code>docker rm 容器ID</code></p>
<blockquote>
<p>删除容器是 <code>docker rm</code>，删除镜像是 <code>docker rmi</code>，注意区分。</p>
</blockquote>
<p>一次性删除多个容器实例</p>
<p><code>docker rm -f $(docker ps -a -q)</code></p>
<p><code>docker ps -a -q | xargs docker rm</code></p>
<h3 id="3-3-10-重要"><a href="#3-3-10-重要" class="headerlink" title="3.3.10 重要"></a>3.3.10 重要</h3><ol>
<li><strong>有镜像才能创建容器，这是根本前提(下载一个Redis6.0.8镜像演示)</strong></li>
<li><strong>启动守护式容器(后台服务器)</strong></li>
</ol>
<p>在大部分的场景下，我们希望 docker 的服务是在后台运行的， 我们可以过 -d 指定容器的后台运行模式。</p>
<p><code>docker run -d 容器名</code></p>
<p>#使用镜像centos:latest以后台模式启动一个容器</p>
<p><code>docker run -d centos</code></p>
<p><font style="color:#E8323C;">问题：然后docker ps -a 进行查看, 会发现容器已经退出</font></p>
<p>很重要的要说明的一点: Docker容器后台运行,就必须有一个前台进程。</p>
<p>容器运行的命令如果不是那些一直挂起的命令（比如运行top，tail），就是会自动退出的。</p>
<p>这个是docker的机制问题,比如你的web容器,我们以nginx为例，正常情况下,我们配置启动服务只需要启动响应的service即可。例如service nginx start。但是,这样做,nginx为后台进程模式运行,就导致docker前台没有运行的应用，这样的容器后台启动后，会立即自杀因为他觉得他没事可做了。所以，最佳的解决方案是将你要运行的程序以前台进程的形式运行，常见就是命令行模式，表示我还有交互操作，别中断。</p>
<p>redis 前后台启动演示case</p>
<p>前台交互式启动</p>
<p><code>docker run -it redis:6.0.8</code></p>
<p>后台守护式启动</p>
<p><code>docker run -d redis:6.0.8</code></p>
<ol start="3">
<li><strong>查看容器日志</strong></li>
</ol>
<p><code>docker logs 容器ID</code></p>
<ol start="4">
<li><strong>查看容器内运行的进程</strong></li>
</ol>
<p><code>docker top 容器ID</code></p>
<ol start="5">
<li><strong>查看容器内部细节</strong></li>
</ol>
<p><code>docker inspect 容器ID</code></p>
<ol start="6">
<li><strong>进入正在运行的容器并以命令行交互</strong></li>
</ol>
<p><code>docker exec -it 容器ID bashShell</code></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658129562647-19bbffb5-a7ca-4d2f-a8ca-b01397829662.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658129567142-bc7d765d-1b49-4fd0-b3d9-244c8b10ced9.png"></p>
<p>重新进入<code>docker attach 容器ID</code></p>
<p><font style="color:#E8323C;">上述两个区别？</font></p>
<p>attach 直接进入容器启动命令的终端，不会启动新的进程 用exit退出，会导致容器的停止。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658129646053-362cd580-f5d7-44f6-bc46-5ea6f147c32f.png"></p>
<p>exec 是在容器中打开新的终端，并且可以启动新的进程 用exit退出，不会导致容器的停止。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658129692386-311936c6-f387-4624-bdad-10036137c934.png"></p>
<p>推荐大家使用 docker exec 命令，因为退出容器终端，不会导致容器的停止。</p>
<p>用之前的redis容器实例进入试试</p>
<p>进入redis服务</p>
<p><code>docker exec -it 容器ID /bin/bash</code></p>
<p><code>docker exec -it 容器ID redis-cli</code></p>
<p>一般用-d后台启动的程序，再用exec进入对应容器实例</p>
<ol start="7">
<li><strong>从容器内拷贝文件到主机上</strong></li>
</ol>
<p>容器→主机</p>
<p><code>docker cp 容器ID:容器内路径 目的主机路径</code></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658129765070-038e032d-52d3-496a-b3a6-5e0cc96f9cfa.png"></p>
<p>宿主机文件拷贝到容器中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker cp 主机路径 容器ID:容器内路径</span><br></pre></td></tr></table></figure>



<h1 id="导入和导出容器"><a href="#导入和导出容器" class="headerlink" title="导入和导出容器"></a>导入和导出容器</h1><ol start="8">
<li><strong>导入和导出容器</strong></li>
</ol>
<p><code>export </code>导出容器的内容留作为一个tar归档文件[对应import命令]</p>
<p><code>import </code>从tar包中的内容创建一个新的文件系统再导入为镜像[对应export]</p>
<p>案例</p>
<p><code>docker export 容器ID &gt; 文件名.tar</code></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658129809181-66670b9e-4977-40ab-8111-f18db9ef6da6.png"></p>
<blockquote>
<p>导入</p>
</blockquote>
<p><code>cat 文件名.tar | docker import - 镜像用户/镜像名:镜像版本号</code></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658129845413-9942d9fa-3481-4211-b348-fdd0d4369dbf.png"></p>
<h1 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h1><p>卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过UnionFS，提供一些用于持续存储或共享数据。</p>
<p>特性：卷设计的目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷。</p>
<p>特点：</p>
<ul>
<li>数据卷可以在容器之间共享或重用数据</li>
<li>卷中的更改可以直接实施生效</li>
<li>数据卷中的更改不会包含在镜像的更新中</li>
<li>数据卷的生命周期一直持续到没有容器使用它为止</li>
</ul>
<p>运行一个带有容器卷存储功能的容器实例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -it --privileged=true -v 宿主机绝对路径目录:容器内目录[rw | ro] 镜像名</span><br></pre></td></tr></table></figure>



<p>可以使用<code>docker inspect</code>查看容器绑定的数据卷。</p>
<p>权限：</p>
<ul>
<li><code>rw</code>：读写</li>
<li><code>ro</code>：只读。如果宿主机写入内容，可以同步给容器内，容器内可以读取。</li>
</ul>
<p>容器卷的继承：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动一个容器</span></span><br><span class="line">docker run -it --privileged=true /tmp/test:/tmp/docker --name u1 ubuntu /bin/bash</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用 --volumes-from 继承 u1的容器卷映射配置</span></span><br><span class="line">docker run -it --privileged=true --volumes-from u1 --name u2 ubuntu</span><br></pre></td></tr></table></figure>

<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h2 id="3-4-小总结"><a href="#3-4-小总结" class="headerlink" title="3.4 小总结"></a>3.4 小总结</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658128808416-bc53f29a-c6b0-4b5f-966c-b6cb83a9e66b.png"></p>
<p>:::info<br>attach    Attach to a running container                 # 当前 shell 下 attach 连接指定运行镜像</p>
<p>build     Build an image from a Dockerfile              # 通过 Dockerfile 定制镜像</p>
<p>commit    Create a new image from a container changes   # 提交当前容器为新的镜像</p>
<p>cp        Copy files&#x2F;folders from the containers filesystem to the host path   #从容器中拷贝指定文件或者目录到宿主机中</p>
<p>create    Create a new container                        # 创建一个新的容器，同 run，但不启动容器</p>
<p>diff      Inspect changes on a container’s filesystem   # 查看 docker 容器变化</p>
<p>events    Get real time events from the server          # 从 docker 服务获取容器实时事件</p>
<p>exec      Run a command in an existing container        # 在已存在的容器上运行命令</p>
<p>export    Stream the contents of a container as a tar archive   # 导出容器的内容流作为一个 tar 归档文件[对应 import ]</p>
<p>history   Show the history of an image                  # 展示一个镜像形成历史</p>
<p>images    List images                                   # 列出系统当前镜像</p>
<p>import    Create a new filesystem image from the contents of a tarball # 从tar包中的内容创建一个新的文件系统映像[对应export]</p>
<p>info      Display system-wide information               # 显示系统相关信息</p>
<p>inspect   Return low-level information on a container   # 查看容器详细信息</p>
<p>kill      Kill a running container                      # kill 指定 docker 容器</p>
<p>load      Load an image from a tar archive              # 从一个 tar 包中加载一个镜像[对应 save]</p>
<p>login     Register or Login to the docker registry server    # 注册或者登陆一个 docker 源服务器</p>
<p>logout    Log out from a Docker registry server          # 从当前 Docker registry 退出</p>
<p>logs      Fetch the logs of a container                 # 输出当前容器日志信息</p>
<p>port      Lookup the public-facing port which is NAT-ed to PRIVATE_PORT    # 查看映射端口对应的容器内部源端口</p>
<p>pause     Pause all processes within a container        # 暂停容器</p>
<p>ps        List containers                               # 列出容器列表</p>
<p>pull      Pull an image or a repository from the docker registry server   # 从docker镜像源服务器拉取指定镜像或者库镜像</p>
<p>push      Push an image or a repository to the docker registry server    # 推送指定镜像或者库镜像至docker源服务器</p>
<p>restart   Restart a running container                   # 重启运行的容器</p>
<p>rm        Remove one or more containers                 # 移除一个或者多个容器</p>
<p>rmi       Remove one or more images       # 移除一个或多个镜像[无容器使用该镜像才可删除，否则需删除相关容器才可继续或 -f 强制删除]</p>
<p>run       Run a command in a new container              # 创建一个新的容器并运行一个命令</p>
<p>save      Save an image to a tar archive                # 保存一个镜像为一个 tar 包[对应 load]</p>
<p>search    Search for an image on the Docker Hub         # 在 docker hub 中搜索镜像</p>
<p>start     Start a stopped containers                    # 启动容器</p>
<p>stop      Stop a running containers                     # 停止容器</p>
<p>tag       Tag an image into a repository                # 给源中镜像打标签</p>
<p>top       Lookup the running processes of a container   # 查看容器中运行的进程信息</p>
<p>unpause   Unpause a paused container                    # 取消暂停容器</p>
<p>version   Show the docker version information           # 查看 docker 版本号</p>
<p>wait      Block until a container stops, then print its exit code   # 截取容器停止时的退出状态值</p>
<p>:::</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-容器数据卷</title>
    <url>/2024/10/31/docker-%E5%AE%B9%E5%99%A8%E6%95%B0%E6%8D%AE%E5%8D%B7/</url>
    <content><![CDATA[<h1 id="7-Docker容器数据卷"><a href="#7-Docker容器数据卷" class="headerlink" title="7 Docker容器数据卷"></a>7 Docker容器数据卷</h1><h2 id="7-1-坑：容器卷记得加入"><a href="#7-1-坑：容器卷记得加入" class="headerlink" title="7.1 坑：容器卷记得加入"></a>7.1 坑：容器卷记得加入</h2><p><code>--privileged=true</code></p>
<p>Docker挂载主机目录访问如果出现cannot open directory .: Permission denied</p>
<p><strong>解决办法：在挂载目录后多加一个–privileged&#x3D;true参数即可</strong></p>
<p>如果是CentOS7安全模块会比之前系统版本加强，不安全的会先禁止，所以目录挂载的情况被默认为不安全的行为，在SELinux里面挂载目录被禁止掉了，如果要开启，我们一般使用–privileged&#x3D;true命令，扩大容器的权限解决挂载目录没有权限的问题，也即使用该参数，container内的root拥有真正的root权限，否则，container内的root只是外部的一个普通用户权限。</p>
<h2 id="7-2-回顾下上一讲的知识点，参数V"><a href="#7-2-回顾下上一讲的知识点，参数V" class="headerlink" title="7.2 回顾下上一讲的知识点，参数V"></a>7.2 回顾下上一讲的知识点，参数V</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658193898005-66ac7a6e-7f2f-4f7b-899d-5114a1215fa0.png"></p>
<h2 id="7-3-是什么"><a href="#7-3-是什么" class="headerlink" title="7.3 是什么"></a>7.3 是什么</h2><p>卷就是目录或文件，存在于一个或多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过Union File System提供一些用于持续存储或共享数据的特性：<font style="color:#DF2A3F;">卷的设计目的就是数据的持久化</font>，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷。</p>
<p><strong>一句话：有点类似我们Redis里面的rdb和aof文件。</strong></p>
<p>将docker容器内的数据保存进宿主机的磁盘中，运行一个带有容器卷存储功能的容器实例。</p>
<p><code> docker run -it --privileged=true -v /宿主机绝对路径目录:/容器内目录      镜像名</code></p>
<h2 id="7-4-能干嘛"><a href="#7-4-能干嘛" class="headerlink" title="7.4 能干嘛"></a>7.4 能干嘛</h2><p>将运用与运行的环境打包镜像，run后形成容器实例运行 ，但是我们对数据的要求希望是持久化的。</p>
<p>Docker容器产生的数据，如果不备份，那么当容器实例删除后，容器内的数据自然也就没有了。为了能保存数据在docker中我们使用卷。</p>
<p>特点：</p>
<ol>
<li><strong>数据卷可在容器之间共享或重用数据</strong></li>
<li><strong>卷中的更改可以直接实时生效，爽</strong></li>
<li><strong>数据卷中的更改不会包含在镜像的更新中</strong></li>
<li><strong>数据卷的生命周期一直持续到没有容器使用它为止</strong></li>
</ol>
<h2 id="7-5-数据卷案例"><a href="#7-5-数据卷案例" class="headerlink" title="7.5 数据卷案例"></a>7.5 数据卷案例</h2><h3 id="7-5-1-宿主vs容器之间映射添加容器卷"><a href="#7-5-1-宿主vs容器之间映射添加容器卷" class="headerlink" title="7.5.1 宿主vs容器之间映射添加容器卷"></a>7.5.1 宿主vs容器之间映射添加容器卷</h3><ol>
<li><code>直接命令添加</code></li>
</ol>
<p><code>docker run -it --privileged=true -v /宿主机绝对路径目录:/容器内目录 镜像名</code></p>
<p>公式：<code>docker run -it -v /宿主机目录:/容器内目录 ubuntu /bin/bash</code></p>
<p><code>docker run -it --name myu3 --privileged=true -v /tmp/myHostData:/tmp/myDockerData ubuntu /bin/bash</code></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658226408944-61a9764d-b3db-42f6-b8e6-10ed888287d9.png"></p>
<ol start="2">
<li><strong>查看数据卷是否挂载成功</strong></li>
</ol>
<p><code>docker inspect 容器ID</code></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658226437704-b3a2cbb1-9110-4a67-b6d8-fcf33c3fae29.png"></p>
<ol start="3">
<li><strong>容器和宿主机之间数据共享</strong><ol>
<li>docker修改，主机同步获得 。</li>
<li>主机修改，docker同步获得。</li>
<li>docker容器stop，主机修改，docker容器重启看数据是否同步。</li>
</ol>
</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658226473979-b13500a4-0605-49d3-aa07-7e405342dd92.png"></p>
<h3 id="7-5-2-读写规则映射添加说明"><a href="#7-5-2-读写规则映射添加说明" class="headerlink" title="7.5.2 读写规则映射添加说明"></a>7.5.2 读写规则映射添加说明</h3><p>读写(默认)</p>
<p><code>docker run -it --privileged=true -v /宿主机绝对路径目录:/容器内目录:rw 镜像名</code></p>
<p>默认同上案例，默认就是rw</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658226514729-c2112eaf-6ec8-47ee-94a0-35f8ea7c9beb.png"></p>
<p>rw &#x3D; read + write</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658226520150-41d79186-a2ef-460f-80b6-dcb0bbee1ecb.png"></p>
<p>只读</p>
<p>容器实例内部被限制，只能读取不能写</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658226536605-315fd061-8879-4685-a4cd-345ff3fcd1d7.png"></p>
<p>&#x2F;容器目录:ro 镜像名               就能完成功能，此时容器自己只能读取不能写</p>
<p>ro &#x3D; read only</p>
<p>此时如果宿主机写入内容，可以同步给容器内，容器可以读取到。</p>
<p><code>docker run -it --privileged=true -v /宿主机绝对路径目录:/容器内目录:ro 镜像名</code></p>
<h3 id="7-5-3-卷的继承和共享"><a href="#7-5-3-卷的继承和共享" class="headerlink" title="7.5.3 卷的继承和共享"></a>7.5.3 卷的继承和共享</h3><p>容器1完成和宿主机的映射</p>
<p><code>docker run -it  --privileged=true -v /mydocker/u:/tmp --name u1 ubuntu</code></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658226567377-ed27036f-cba3-4e16-9d6a-b18e249e0464.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658226571771-a1484811-0dae-4ddb-bf4b-e3c69b001269.png"></p>
<p>容器2继承容器1的卷规则</p>
<p><code>docker run -it  --privileged=true --volumes-from 父类  --name u2 ubuntu</code></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658226594280-b1d73980-163b-4bbb-bc46-823b22e432dd.png"></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-本地镜像发布到阿里云与私有库</title>
    <url>/2024/10/31/docker-%E6%9C%AC%E5%9C%B0%E9%95%9C%E5%83%8F%E5%8F%91%E5%B8%83%E5%88%B0%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%8E%E7%A7%81%E6%9C%89%E5%BA%93/</url>
    <content><![CDATA[<h1 id="5-本地镜像发布到阿里云"><a href="#5-本地镜像发布到阿里云" class="headerlink" title="5 本地镜像发布到阿里云"></a>5 本地镜像发布到阿里云</h1><h2 id="5-1-本地镜像发布到阿里云流程"><a href="#5-1-本地镜像发布到阿里云流程" class="headerlink" title="5.1 本地镜像发布到阿里云流程"></a>5.1 本地镜像发布到阿里云流程</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139786698-1f881901-f53d-482d-8198-5c71a779db6f.png"></p>
<h2 id="5-2-镜像的生成方法"><a href="#5-2-镜像的生成方法" class="headerlink" title="5.2 镜像的生成方法"></a>5.2 镜像的生成方法</h2><p>基于当前容器创建一个新的镜像，新功能增强 <code>docker commit [OPTIONS] 容器ID [REPOSITORY[:TAG]]</code></p>
<p>:::info<br>OPTIONS说明：</p>
<p>-a :提交的镜像作者；</p>
<p>-m :提交时的说明文字；</p>
<p>:::</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139828870-7f14de5e-85a2-4409-b30d-1d833b6e014a.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139835046-ce1ff5bb-96dc-46a8-92ac-9cc522f730ab.png"></p>
<h2 id="5-3-将本地镜像推送到阿里云"><a href="#5-3-将本地镜像推送到阿里云" class="headerlink" title="5.3 将本地镜像推送到阿里云"></a>5.3 将本地镜像推送到阿里云</h2><p>本地镜像素材原型</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139862888-96cc93ff-c7a6-4f73-9268-c9a9fd06dad3.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139867564-59ac7072-d068-4d74-b012-de24e64f65b0.png"></p>
<p>阿里云开发者平台</p>
<p><a href="https://promotion.aliyun.com/ntms/act/kubernetes.html">https://promotion.aliyun.com/ntms/act/kubernetes.html</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139877321-2fee875d-2343-460f-93ba-5eadd35c479b.png"></p>
<h3 id="5-3-1-创建仓库镜像"><a href="#5-3-1-创建仓库镜像" class="headerlink" title="5.3.1 创建仓库镜像"></a>5.3.1 创建仓库镜像</h3><ol>
<li><strong>选择控制台，进入容器镜像服务</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139928853-ccc16d88-bb05-4f73-82f3-429a883e6754.png"></p>
<ol start="2">
<li><strong>选择个人实例</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139936677-14362c3e-3c89-4af3-8ebf-233b303e59ce.png"></p>
<ol start="3">
<li><strong>命名空间</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139942874-f2e3db26-3f56-46d1-b353-da6c80b4064e.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139948785-659bd67e-b21f-46ef-9b9c-4cff763f0c30.png"></p>
<ol start="4">
<li><strong>仓库名称</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139954429-530f3efa-c1cf-41ab-8ee3-4d0ed47a5423.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139962035-85aaed76-b131-4997-8ba6-aeafc9e45a45.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139971022-400de815-a008-4fbd-8ac3-16d2337d68a3.png"></p>
<ol start="5">
<li><strong>进入管理界面获得脚本</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139979398-d997e648-e878-44bf-97a9-99a9b4cc182b.png"></p>
<h3 id="5-3-2-将镜像推送到阿里云"><a href="#5-3-2-将镜像推送到阿里云" class="headerlink" title="5.3.2 将镜像推送到阿里云"></a>5.3.2 将镜像推送到阿里云</h3><ol>
<li><strong>管理界面脚本</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658140037335-a8e58945-9160-4db5-82d7-51bdce65a98f.png"></p>
<ol start="2">
<li><strong>脚本实例</strong></li>
</ol>
<p><code>docker login --username=zzyybuy registry.cn-hangzhou.aliyuncs.com</code></p>
<p><code>docker tag cea1bb40441c registry.cn-hangzhou.aliyuncs.com/atguiguwh/myubuntu:1.1</code></p>
<p><code>docker push registry.cn-hangzhou.aliyuncs.com/atguiguwh/myubuntu:1.1</code></p>
<p>上面命令是阳哥自己本地的，你自己酌情处理，不要粘贴我的。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658140061637-73ca4162-693e-4e3a-8431-b7b3f969d791.png"></p>
<h2 id="5-4-将阿里云上的镜像下载到本地"><a href="#5-4-将阿里云上的镜像下载到本地" class="headerlink" title="5.4 将阿里云上的镜像下载到本地"></a>5.4 将阿里云上的镜像下载到本地</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658140107483-05a4996e-cc38-4cc9-8ede-6b137c76d182.png"></p>
<p><code>docker pull registry.cn-hangzhou.aliyuncs.com/atguiguwh/myubuntu:1.1</code></p>
<h1 id="6-本地镜像发布到私有库"><a href="#6-本地镜像发布到私有库" class="headerlink" title="6 本地镜像发布到私有库"></a>6 本地镜像发布到私有库</h1><p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658140528137-0139f39f-85e8-4b9c-8b90-176cf342f638.png"></p>
<h2 id="6-1-是什么"><a href="#6-1-是什么" class="headerlink" title="6.1 是什么"></a>6.1 是什么</h2><p>1 官方Docker Hub地址：<a href="https://hub.docker.com/">https://hub.docker.com/</a>，中国大陆访问太慢了且准备被阿里云取代的趋势，不太主流。</p>
<p>2 Dockerhub、阿里云这样的公共镜像仓库可能不太方便，涉及机密的公司不可能提供镜像给公网，所以需要创建一个本地私人仓库供给团队使用，基于公司内部项目构建镜像。</p>
<p>Docker Registry是官方提供的工具，可以用于构建私有镜像仓库</p>
<h2 id="6-2-将本地镜像推送到私有库"><a href="#6-2-将本地镜像推送到私有库" class="headerlink" title="6.2 将本地镜像推送到私有库"></a>6.2 将本地镜像推送到私有库</h2><h2 id="Nexus私有仓库-详细步骤请看xmind笔记"><a href="#Nexus私有仓库-详细步骤请看xmind笔记" class="headerlink" title="Nexus私有仓库 详细步骤请看xmind笔记"></a>Nexus私有仓库 详细步骤请看xmind笔记</h2><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">mkdir</span> <span class="string">nexus</span></span><br><span class="line"><span class="string">chmod</span> <span class="number">777</span> <span class="string">-R</span> <span class="string">nexus/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动 nexus 容器</span></span><br><span class="line"><span class="string">docker</span> <span class="string">run</span> <span class="string">-d</span> <span class="string">--restart=always</span> <span class="string">-p</span> <span class="number">8868</span><span class="string">:8081</span> <span class="string">-p</span> <span class="number">5000</span><span class="string">:5000</span> <span class="string">-p</span> <span class="number">5001</span><span class="string">:5001</span> <span class="string">--name</span> <span class="string">nexus</span> <span class="string">-v</span> <span class="string">/opt/docker/nexus:/nexus-data</span> <span class="string">sonatype/nexus3</span></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-镜像</title>
    <url>/2024/10/31/docker-%E9%95%9C%E5%83%8F/</url>
    <content><![CDATA[<h1 id="4-Docker镜像"><a href="#4-Docker镜像" class="headerlink" title="4 Docker镜像"></a>4 Docker镜像</h1><h3 id="4-1-是什么"><a href="#4-1-是什么" class="headerlink" title="4.1 是什么"></a>4.1 是什么</h3><p>是一种轻量级、可执行的独立软件包，它包含运行某个软件所需的所有内容，我们把应用程序和配置依赖打包好形成一个可交付的运行环境(包括代码、运行时需要的库、环境变量和配置文件等)，这个打包好的运行环境就是image镜像文件。</p>
<p>只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来一个对象)。</p>
<h4 id="4-1-1-分层的镜像"><a href="#4-1-1-分层的镜像" class="headerlink" title="4.1.1 分层的镜像"></a>4.1.1 分层的镜像</h4><p>以我们的pull为例，在下载的过程中我们可以看到docker的镜像好像是在一层一层的在下载</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139351043-7a36850b-bd26-491a-9597-76535f2b0a1f.png"></p>
<h4 id="4-1-2-UnionFS（联合文件系统）"><a href="#4-1-2-UnionFS（联合文件系统）" class="headerlink" title="4.1.2 UnionFS（联合文件系统）"></a>4.1.2 UnionFS（联合文件系统）</h4><p>UnionFS（联合文件系统）：Union文件系统（UnionFS）是一种分层、轻量级并且高性能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下(unite several directories into a single virtual filesystem)。Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种具体的应用镜像。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139366360-eee5b96b-2f64-4a11-a3ae-5aa027fc7d33.png"></p>
<p>特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录</p>
<h4 id="4-1-3-Docker镜像加载原理"><a href="#4-1-3-Docker镜像加载原理" class="headerlink" title="4.1.3 Docker镜像加载原理"></a>4.1.3 Docker镜像加载原理</h4><p>docker的镜像实际上由一层一层的文件系统组成，这种层级的文件系统UnionFS。</p>
<p>bootfs(boot file system)主要包含bootloader和kernel, bootloader主要是引导加载kernel, Linux刚启动时会加载bootfs文件系统，在Docker镜像的最底层是引导文件系统bootfs。这一层与我们典型的Linux&#x2F;Unix系统是一样的，包含boot加载器和内核。当boot加载完成之后整个内核就都在内存中了，此时内存的使用权已由bootfs转交给内核，此时系统也会卸载bootfs。</p>
<p>rootfs (root file system) ，在bootfs之上。包含的就是典型 Linux 系统中的 &#x2F;dev, &#x2F;proc, &#x2F;bin, &#x2F;etc 等标准目录和文件。rootfs就是各种不同的操作系统发行版，比如Ubuntu，Centos等等。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139389739-dedef184-d920-4cb8-b046-6d74cd73a390.png"></p>
<p>平时我们安装进虚拟机的CentOS都是好几个G，为什么docker这里才200M？？</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139396091-72001717-33f4-4790-afbe-9d4e8198447a.png"></p>
<p>对于一个精简的OS，rootfs可以很小，只需要包括最基本的命令、工具和程序库就可以了，因为底层直接用Host的kernel，自己只需要提供 rootfs 就行了。由此可见对于不同的linux发行版, bootfs基本是一致的, rootfs会有差别, 因此不同的发行版可以公用bootfs。</p>
<h4 id="4-1-4-为什么-Docker-镜像要采用这种分层结构呢"><a href="#4-1-4-为什么-Docker-镜像要采用这种分层结构呢" class="headerlink" title="4.1.4 为什么 Docker 镜像要采用这种分层结构呢"></a>4.1.4 为什么 Docker 镜像要采用这种分层结构呢</h4><p>镜像分层最大的一个好处就是共享资源，方便复制迁移，就是为了复用。</p>
<p>比如说有多个镜像都从相同的 base 镜像构建而来，那么 Docker Host 只需在磁盘上保存一份 base 镜像；</p>
<p>同时内存中也只需加载一份 base 镜像，就可以为所有容器服务了。而且镜像的每一层都可以被共享。</p>
<h3 id="4-2-重点理解"><a href="#4-2-重点理解" class="headerlink" title="4.2 重点理解"></a>4.2 重点理解</h3><p>Docker镜像层都是只读的，容器层是可写的。当容器启动时，一个新的可写层被加载到镜像的顶部。 这一层通常被称作“容器层”，“容器层”之下的都叫“镜像层”。</p>
<p>所有对容器的改动 - 无论添加、删除、还是修改文件都只会发生在容器层中。只有容器层是可写的，容器层下面的所有镜像层都是只读的。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139462778-98182b2f-6e3d-4e23-96ca-04107d94efe9.png"></p>
<h3 id="4-3-Docker镜像commit操作案例"><a href="#4-3-Docker镜像commit操作案例" class="headerlink" title="4.3 Docker镜像commit操作案例"></a>4.3 Docker镜像commit操作案例</h3><p>docker commit 提交容器副本使之成为一个新的镜像</p>
<p><code>docker commit -m=&quot;提交的描述信息&quot; -a=&quot;作者&quot; 容器ID 要创建的目标镜像名:[标签名]</code></p>
<h4 id="4-3-1-案例演示ubuntu安装vim"><a href="#4-3-1-案例演示ubuntu安装vim" class="headerlink" title="4.3.1 案例演示ubuntu安装vim"></a>4.3.1 案例演示ubuntu安装vim</h4><ol>
<li><strong>从Hub上下载ubuntu镜像到本地并成功运行</strong></li>
<li><strong>原始的默认Ubuntu镜像是不带着vim命令的</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139528237-90855992-8e34-4d7b-bfb5-ce29b0ac411f.png"></p>
<ol start="3">
<li><strong>外网连通的情况下，安装vim</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139546512-e54ea2c6-cf8e-4782-915a-b0c59fb0c5dc.png"></p>
<p>docker容器内执行上述两条命令：</p>
<p><code>apt-get update</code></p>
<p><code>apt-get -y install vim</code></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139552106-4c75c757-2789-4b36-9162-d435e5278456.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139557574-59af7f26-86c4-4af9-bba7-650897d6ff82.png"></p>
<ol start="4">
<li><strong>安装完成后，commit我们自己的新镜像</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139596868-4312899d-c9dd-4a45-9b34-8a075d61116c.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139602000-6bb1bb7f-a2f8-4bad-8d03-ff1f147da555.png"></p>
<ol start="5">
<li><strong>启动我们的新镜像并和原来的对比</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139612305-4d9e9f72-1e44-4988-8ef3-255090cd1b82.png"></p>
<pre><code>1. 官网是默认下载的Ubuntu没有vim命令
2. 我们自己commit构建的镜像，新增加了vim功能，可以成功使用。
</code></pre>
<h4 id="4-3-2-小总结"><a href="#4-3-2-小总结" class="headerlink" title="4.3.2 小总结"></a>4.3.2 小总结</h4><p>Docker中的镜像分层，支持通过扩展现有镜像，创建新的镜像。类似Java继承于一个Base基础类，自己再按需扩展。</p>
<p>新镜像是从 base 镜像一层一层叠加生成的。每安装一个软件，就在现有镜像的基础上增加一层</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658139701434-5322591f-b716-4232-8f3c-9420ba706072.png"></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-简介与安装</title>
    <url>/2024/10/31/docker-%E7%AE%80%E4%BB%8B%E4%B8%8E%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="1-Docker简介"><a href="#1-Docker简介" class="headerlink" title="1 Docker简介"></a>1 Docker简介</h1><h2 id="1-1-是什么？"><a href="#1-1-是什么？" class="headerlink" title="1.1 是什么？"></a>1.1 是什么？</h2><h3 id="1-1-1-问题：为什么会有docker出现？"><a href="#1-1-1-问题：为什么会有docker出现？" class="headerlink" title="1.1.1 问题：为什么会有docker出现？"></a>1.1.1 问题：为什么会有docker出现？</h3><p>假定您在开发一个尚硅谷的谷粒商城，您使用的是一台笔记本电脑而且您的开发环境具有特定的配置。其他开发人员身处的环境配置也各有不同。您正在开发的应用依赖于您当前的配置且还要依赖于某些配置文件。此外，您的企业还拥有标准化的测试和生产环境，且具有自身的配置和一系列支持文件。您希望尽可能多在本地模拟这些环境而不产生重新创建服务器环境的开销。请问？</p>
<p>您要如何确保应用能够在这些环境中运行和通过质量检测？并且在部署过程中不出现令人头疼的版本、配置问题，也无需重新编写代码和进行故障修复？</p>
<p>答案就是使用容器。Docker之所以发展如此迅速，也是因为它对此给出了一个标准化的解决方案—–系统平滑移植，容器虚拟化技术。</p>
<p>环境配置相当麻烦，换一台机器，就要重来一次，费力费时。很多人想到，能不能从根本上解决问题，软件可以带环境安装？也就是说，安装的时候，把原始环境一模一样地复制过来。开发人员利用 Docker 可以消除协作编码时“在我的机器上可正常工作”的问题。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1657877273526-d0933d80-8df6-4f97-88f8-5408d85b0cac.png"></p>
<p>之前在服务器配置一个应用的运行环境，要安装各种软件，就拿尚硅谷电商项目的环境来说，Java&#x2F;RabbitMQ&#x2F;MySQL&#x2F;JDBC驱动包等。安装和配置这些东西有多麻烦就不说了，它还不能跨平台。假如我们是在 Windows 上安装的这些环境，到了 Linux 又得重新装。况且就算不跨操作系统，换另一台同样操作系统的服务器，要移植应用也是非常麻烦的。</p>
<p>传统上认为，软件编码开发&#x2F;测试结束后，所产出的成果即是程序或是能够编译执行的二进制字节码等(java为例)。而为了让这些程序可以顺利执行，开发团队也得准备完整的部署文件，让维运团队得以部署应用程式，开发需要清楚的告诉运维部署团队，用的全部配置文件+所有软件环境。不过，即便如此，仍然常常发生部署失败的状况。Docker的出现使得Docker得以打破过去「程序即应用」的观念。透过镜像(images)将作业系统核心除外，运作应用程式所需要的系统环境，由下而上打包，达到应用程式跨平台间的无缝接轨运作。</p>
<h3 id="1-1-2-Docker理念"><a href="#1-1-2-Docker理念" class="headerlink" title="1.1.2 Docker理念"></a>1.1.2 Docker理念</h3><p>Docker是基于Go语言实现的云开源项目。</p>
<p>Docker的主要目标是“Build，Ship and Run Any App,Anywhere”，也就是通过对应用组件的封装、分发、部署、运行等生命周期的管理，使用户的APP（可以是一个WEB应用或数据库应用等等）及其运行环境能够做到“一次镜像，处处运行”。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1657877364759-7c47dfbb-a80b-41cf-ae0c-b9845807a3b1.png"></p>
<p>Linux容器技术的出现就解决了这样一个问题，而 Docker 就是在它的基础上发展过来的。将应用打成镜像，通过镜像成为运行在Docker容器上面的实例，而 Docker容器在任何操作系统上都是一致的，这就实现了跨平台、跨服务器。只需要一次配置好环境，换到别的机子上就可以一键部署好，大大简化了操作。</p>
<h3 id="1-1-3-一句话"><a href="#1-1-3-一句话" class="headerlink" title="1.1.3 一句话"></a>1.1.3 一句话</h3><p>解决了运行环境和配置问题的软件容器，方便做持续集成并有助于整体发布的容器虚拟化技术。</p>
<h2 id="1-2-容器与虚拟机比较"><a href="#1-2-容器与虚拟机比较" class="headerlink" title="1.2 容器与虚拟机比较"></a>1.2 容器与虚拟机比较</h2><h3 id="1-2-2-传统虚拟机技术"><a href="#1-2-2-传统虚拟机技术" class="headerlink" title="1.2.2 传统虚拟机技术"></a>1.2.2 传统虚拟机技术</h3><p>虚拟机（virtual machine）就是带环境安装的一种解决方案。</p>
<p>虚拟机的缺点：</p>
<p>1    资源占用多               2    冗余步骤多                 3    启动慢</p>
<h3 id="1-2-3-容器虚拟化技术"><a href="#1-2-3-容器虚拟化技术" class="headerlink" title="1.2.3 容器虚拟化技术"></a>1.2.3 容器虚拟化技术</h3><p>由于前面虚拟机存在某些缺点，Linux发展出了另一种虚拟化技术：</p>
<p>Linux容器(Linux Containers，缩写为 LXC)</p>
<p>Linux容器是与系统其他部分隔离开的一系列进程，从另一个镜像运行，并由该镜像提供支持进程所需的全部文件。容器提供的镜像包含了应用的所有依赖项，因而在从开发到测试再到生产的整个过程中，它都具有可移植性和一致性。</p>
<p>Linux 容器不是模拟一个完整的操作系统而是对进程进行隔离。有了容器，就可以将软件运行所需的所有资源打包到一个隔离的容器中。容器与虚拟机不同，不需要捆绑一整套操作系统，只需要软件工作所需的库资源和设置。系统因此而变得高效轻量并保证部署在任何环境中的软件都能始终如一地运行。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1657880971689-4d2b0f1b-81e5-46f4-a049-eb3ab7388d99.png"></p>
<h3 id="1-2-4-对比"><a href="#1-2-4-对比" class="headerlink" title="1.2.4 对比"></a>1.2.4 对比</h3><p>比较了 Docker 和传统虚拟化方式的不同之处：</p>
<p>*传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；</p>
<p>*容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便。</p>
<ul>
<li>每个容器之间互相隔离，每个容器有自己的文件系统 ，容器之间进程不会相互影响，能区分计算资源。</li>
</ul>
<p>对比：</p>
<table>
<thead>
<tr>
<th>特性</th>
<th>容器</th>
<th>虚拟机</th>
</tr>
</thead>
<tbody><tr>
<td>启动</td>
<td>秒级</td>
<td>分钟级</td>
</tr>
<tr>
<td>大小</td>
<td>一般为Mb</td>
<td>一般为Gb</td>
</tr>
<tr>
<td>速度</td>
<td>接近原生</td>
<td>比较慢</td>
</tr>
<tr>
<td>系统支持数量</td>
<td>单机支持上千个容器</td>
<td>一般几十个</td>
</tr>
</tbody></table>
<h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="-1"><a href="#-1" class="headerlink" title=""></a></h3><h2 id="1-4-去哪下"><a href="#1-4-去哪下" class="headerlink" title="1.4 去哪下"></a>1.4 去哪下</h2><h3 id="1-4-1-官网"><a href="#1-4-1-官网" class="headerlink" title="1.4.1 官网"></a>1.4.1 官网</h3><p>docker官网：<a href="http://www.docker.com/">http://www.docker.com</a></p>
<h3 id="1-4-2-仓库"><a href="#1-4-2-仓库" class="headerlink" title="1.4.2 仓库"></a>1.4.2 仓库</h3><p>Docker Hub官网: <a href="https://hub.docker.com/">https://hub.docker.com/</a></p>
<h1 id="2-Docker安装"><a href="#2-Docker安装" class="headerlink" title="2 Docker安装"></a>2 Docker安装</h1><h2 id="2-1-前提说明"><a href="#2-1-前提说明" class="headerlink" title="2.1 前提说明"></a>2.1 前提说明</h2><p>CentOS Docker 安装</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658125998124-ae2d8764-3a68-4259-b7df-a945e02505e3.png"></p>
<p>前提条件</p>
<p>目前，CentOS 仅发行版本中的内核支持 Docker。Docker 运行在CentOS 7 (64-bit)上，</p>
<p>要求系统为64位、Linux系统内核版本为 3.8以上，这里选用Centos7.x</p>
<p>查看自己的内核</p>
<p>uname命令用于打印当前系统相关信息（内核版本号、硬件架构、主机名称和操作系统类型等）。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658126004570-975d10a1-54ff-444b-9ae6-6f2f6252221b.png"></p>
<h2 id="2-2-Docker的基本组成"><a href="#2-2-Docker的基本组成" class="headerlink" title="2.2 Docker的基本组成"></a>2.2 Docker的基本组成</h2><p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658126239499-f71db64a-4246-4167-bd7c-eb71b2b606be.png"></p>
<p>Docker是一个Client-Server结构的系统，Docker守护进程运行在主机上， 然后通过Socket连接从客户端访问，守护进程从客户端接受命令并管理运行在主机上的容器。 容器，是一个运行时环境，就是我们前面说到的集装箱。可以对比mysql演示对比讲解</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658126258223-a333c821-0360-4ab7-a9f8-3d77f0f39b0d.png"></p>
<h3 id="2-2-1-镜像-image"><a href="#2-2-1-镜像-image" class="headerlink" title="2.2.1 镜像(image)"></a>2.2.1 镜像(image)</h3><p>Docker 镜像（Image）就是一个只读的模板。镜像可以用来创建 Docker 容器，一个镜像可以创建很多容器。</p>
<p>它也相当于是一个root文件系统。比如官方镜像 centos:7 就包含了完整的一套 centos:7 最小系统的 root 文件系统。</p>
<p>相当于容器的“源代码”，docker镜像文件类似于Java的类模板，而docker容器实例类似于java中new出来的实例对象。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658126091673-3fabd0d4-7dd4-4575-8d38-184787b9d236.png"></p>
<h3 id="2-2-2-容器-container"><a href="#2-2-2-容器-container" class="headerlink" title="2.2.2 容器(container)"></a>2.2.2 容器(container)</h3><p><strong>1 从面向对象角度</strong></p>
<p>Docker 利用容器（Container）独立运行的一个或一组应用，应用程序或服务运行在容器里面，容器就类似于一个虚拟化的运行环境，容器是用镜像创建的运行实例。就像是Java中的类和实例对象一样，镜像是静态的定义，容器是镜像运行时的实体。容器为镜像提供了一个标准的和隔离的运行环境，它可以被启动、开始、停止、删除。每个容器都是相互隔离的、保证安全的平台</p>
<p><strong>2 从镜像容器角度</strong></p>
<p>可以把容器看做是一个简易版的 Linux 环境（包括root用户权限、进程空间、用户空间和网络空间等）和运行在其中的应用程序。</p>
<h3 id="2-2-3-仓库-repository"><a href="#2-2-3-仓库-repository" class="headerlink" title="2.2.3 仓库(repository)"></a>2.2.3 仓库(repository)</h3><p>仓库（Repository）是集中存放镜像文件的场所。</p>
<p>类似于</p>
<p>Maven仓库，存放各种jar包的地方；</p>
<p>github仓库，存放各种git项目的地方；</p>
<p>Docker公司提供的官方registry被称为Docker Hub，存放各种镜像模板的地方。</p>
<p>仓库分为公开仓库（Public）和私有仓库（Private）两种形式。</p>
<p>最大的公开仓库是 Docker Hub(<a href="https://hub.docker.com/">https://hub.docker.com/)</a>)，</p>
<p>存放了数量庞大的镜像供用户下载。国内的公开仓库包括阿里云 、网易云等。</p>
<h3 id="2-2-4-小总结"><a href="#2-2-4-小总结" class="headerlink" title="2.2.4 小总结"></a>2.2.4 小总结</h3><p>需要正确的理解仓库&#x2F;镜像&#x2F;容器这几个概念:</p>
<p>Docker 本身是一个容器运行载体或称之为管理引擎。我们把应用程序和配置依赖打包好形成一个可交付的运行环境，这个打包好的运行环境就是image镜像文件。只有通过这个镜像文件才能生成Docker容器实例(类似Java中new出来一个对象)。</p>
<p>image文件可以看作是容器的模板。Docker 根据 image 文件生成容器的实例。同一个 image 文件，可以生成多个同时运行的容器实例。</p>
<p>镜像文件</p>
<ul>
<li>image 文件生成的容器实例，本身也是一个文件，称为镜像文件。</li>
</ul>
<p>容器实例</p>
<ul>
<li>一个容器运行一种服务，当我们需要的时候，就可以通过docker客户端创建一个对应的运行实例，也就是我们的容器</li>
</ul>
<p>仓库</p>
<ul>
<li>就是放一堆镜像的地方，我们可以把镜像发布到仓库中，需要的时候再从仓库中拉下来就可以了。</li>
</ul>
<h2 id="2-3-Docker平台架构图解-架构版"><a href="#2-3-Docker平台架构图解-架构版" class="headerlink" title="2.3 Docker平台架构图解(架构版)"></a>2.3 Docker平台架构图解(架构版)</h2><p>Docker是一个 C&#x2F;S（Client-Server） 结构的系统，后端是一个松耦合架构，众多模块各司其职。</p>
<p>Docker守护进程运行在主机上，然后通过Socket连接从客户端访问，守护进程从容器接收命令并管理运行在主机上的容器。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/svg/12911942/1652093339897-20255a0a-e981-43e3-9e9e-654b8da3b2c8.svg"></p>
<p>Docker运行的基本流程为：<br>1用户是使用Docker Client 与 Docker Daemon 建立通信，并发送请求给后者<br>2Docker Daemon 作为 Docker 架构的主体部分，首先提供 Docker Server 的功能使其可以接收 Docker Client 的请求<br>3Docker Engine 执行 Docker 内部的一系列工作，每一项工作都是以一个 Job 的形式存在<br>4Job 的运行过程中，当需要容器镜像时，则从 Docker Registry 中下载镜像，并通过镜像管理驱动 Graph Driver 将下载镜像以 Graph 的形式存储<br>5当需要为 Docker 创建网络环境时，通过网络管理驱动 Network driver 创建并配置 Docker 容器网络环境<br>6当需要限制 Docker 容器运行资源或执行用户指令等操作时，则通过 Exec driver 来完成<br>7Libcontainer 是一项独立的容器管理包，Network driver 以及 Exec driver 都是通过 Libcontainer 来实现具体对容器进行的操作</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/12911942/1652093347909-4fcf65d1-da12-47cb-9a2f-0c4528d7e4c9.png?x-oss-process=image/resize,w_750,limit_0"></p>
<h2 id="2-4-安装步骤"><a href="#2-4-安装步骤" class="headerlink" title="2.4 安装步骤"></a>2.4 安装步骤</h2><p>CentOS7安装Docker：<a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p>
<h3 id="2-4-1-确定你是CentOS7及以上版本"><a href="#2-4-1-确定你是CentOS7及以上版本" class="headerlink" title="2.4.1 确定你是CentOS7及以上版本"></a>2.4.1 确定你是CentOS7及以上版本</h3><p><code>cat /etc/redhat-release</code></p>
<h3 id="2-4-2-卸载旧版本"><a href="#2-4-2-卸载旧版本" class="headerlink" title="2.4.2 卸载旧版本"></a>2.4.2 卸载旧版本</h3><p><a href="https://docs.docker.com/engine/install/centos/">https://docs.docker.com/engine/install/centos/</a></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658126844192-45e71ac5-a5bf-46ca-8942-b668436b372a.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>

<blockquote>
<p>旧版本的Docker引擎包可能叫做：<code>docker</code>、<code>docker-engine</code>。</p>
<p>新版本的Docker引擎包叫做：<code>docker-ce</code></p>
</blockquote>
<h2 id="-2"><a href="#-2" class="headerlink" title=""></a></h2><h3 id="2-4-3-yum安装gcc相关"><a href="#2-4-3-yum安装gcc相关" class="headerlink" title="2.4.3 yum安装gcc相关"></a>2.4.3 yum安装gcc相关</h3><p>CentOS7能上外网</p>
<p><code>yum -y install gcc</code></p>
<p><code>yum -y install gcc-c++</code></p>
<h3 id="2-4-4-安装需要的软件包"><a href="#2-4-4-安装需要的软件包" class="headerlink" title="2.4.4 安装需要的软件包"></a>2.4.4 安装需要的软件包</h3><p>官网要求</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658126862915-d8d43523-c57c-466a-ba96-ee1a91932a13.png"></p>
<p>执行命令</p>
<p><code>yum install -y yum-utils</code></p>
<h3 id="2-4-5-设置stable镜像仓库"><a href="#2-4-5-设置stable镜像仓库" class="headerlink" title="2.4.5 设置stable镜像仓库"></a>2.4.5 设置stable镜像仓库</h3><p>❌</p>
<p><code>yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</code></p>
<p>如果上边不行，用下边这个v</p>
<p><code>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</code></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658126979708-37e95321-1241-4470-9052-7af819b752cd.png"></p>
<p>:::danger<br>报错：</p>
<p>1   [Errno 14] curl#35 - TCP connection reset by peer</p>
<p>2   [Errno 12] curl#35 - Timeout</p>
<p>:::</p>
<p>✔️</p>
<p><code>yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658127043948-db9cd0a7-402b-49d4-aab9-96048a5b9c19.png"></p>
<h3 id="2-4-6-更新yum软件包索引（创建缓存，可选"><a href="#2-4-6-更新yum软件包索引（创建缓存，可选" class="headerlink" title="2.4.6 更新yum软件包索引（创建缓存，可选	)"></a>2.4.6 更新yum软件包索引（创建缓存，可选	)</h3><p><code>yum makecache fast</code></p>
<h3 id="2-4-7-安装DOCKER-CE"><a href="#2-4-7-安装DOCKER-CE" class="headerlink" title="2.4.7 安装DOCKER CE"></a>2.4.7 安装DOCKER CE</h3><p>安装最新版本的Docker引擎、Docker客户端：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">docker-ce是Docker引擎，docker-ce-cli是客户端</span></span><br><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure>



<p>此时，默认安装的docker引擎、客户端都是最新版本。</p>
<p>如果要安装指定版本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">查询版本列表</span></span><br><span class="line">yum list docker-ce --showduplicates | sort -r</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定版本安装17.09.0.ce版</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">sudo yum install docker-ce-&lt;VERSION_STRING&gt; docker-ce-cli-&lt;VERSION_STRING&gt; containerd.io docker-compose-plugin</span></span><br><span class="line">sudo yum install docker-ce-17.09.0.ce docker-ce-cli-17.09.0.ce containerd.io docker-compose-plugin</span><br></pre></td></tr></table></figure>

<h2 id="-3"><a href="#-3" class="headerlink" title=""></a></h2><h3 id="2-4-8-启动docker"><a href="#2-4-8-启动docker" class="headerlink" title="2.4.8 启动docker"></a>2.4.8 启动docker</h3><p><code>systemctl start docker</code></p>
<h3 id="2-4-9-测试"><a href="#2-4-9-测试" class="headerlink" title="2.4.9 测试"></a>2.4.9 测试</h3><p><code>docker version</code></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658127110699-6b35fe5b-40dd-4b00-aa5a-edf410a551c9.png"></p>
<p><code>docker run hello-world</code></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658127121361-38f89b48-1f6b-41db-a4e4-b5daa2033cd8.png"></p>
<h3 id="2-4-10-卸载"><a href="#2-4-10-卸载" class="headerlink" title="2.4.10 卸载"></a>2.4.10 卸载</h3><p>卸载Docker步骤：</p>
<ol>
<li>关闭服务</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl stop docker</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>使用<code>yum</code>删除docker引擎</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo yum remove docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>



<ol start="3">
<li>删除镜像、容器、卷、自定义配置等文件</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo rm -rf /var/lib/docker</span><br><span class="line">sudo rm -rf /var/lib/containerd</span><br></pre></td></tr></table></figure>



<h1 id="-4"><a href="#-4" class="headerlink" title=""></a></h1><h2 id="2-5-阿里云镜像加速"><a href="#2-5-阿里云镜像加速" class="headerlink" title="2.5 阿里云镜像加速"></a>2.5 阿里云镜像加速</h2><ol>
<li>是什么</li>
</ol>
<p><a href="https://promotion.aliyun.com/ntms/act/kubernetes.html">https://promotion.aliyun.com/ntms/act/kubernetes.html</a></p>
<ol start="2">
<li>注册一个属于自己的阿里云账户(可复用淘宝账号)</li>
<li>获得加速器地址连接<ol>
<li>登陆阿里云开发者平台</li>
</ol>
</li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658127431916-8d79fe8c-71ce-4bc4-89a4-9ca421cc6806.png"></p>
<pre><code>2. 点击控制台	
3. 选择容器镜像服务
</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658127461505-e6f718dd-b5f3-423d-b893-b381a253efb0.png"></p>
<pre><code>4. 获取加速器地址
</code></pre>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658127474673-4b4b8945-91f7-49b9-ad66-aec303c5e6c5.png"></p>
<p>里面提供了一个加速器地址：<code>https://xxxxx.mirror.aliyuncs.com</code>，将该地址配置到docker中：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/docker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初次进来时没有/etc/docker/daemon.json文件，直接创建该文件即可</span></span><br><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>



<p>在<code>daemon.json</code>中写入以下内容：（即加速器地址）</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;registry-mirrors&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;https://xxxxx.mirror.aliyuncs.com&quot;</span><span class="punctuation">]</span>  </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>



<p>然后刷新配置、重启docker即可：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">centos6 的命令</span></span><br><span class="line">sudo chkconfig daemon-reload</span><br><span class="line">sudo service docker restart</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">centos7 的命令</span></span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure>





<h2 id="2-6-永远的HelloWorld"><a href="#2-6-永远的HelloWorld" class="headerlink" title="2.6 永远的HelloWorld"></a>2.6 永远的HelloWorld</h2><p>启动Docker后台容器(测试运行 hello-world)</p>
<p><code>docker run hello-world</code></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658127597827-3f44d88b-495b-4203-b88a-df12a5077bec.png"></p>
<p>输出这段提示以后，hello world就会停止运行，容器自动终止。</p>
<p>run干了什么？</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658127613575-33c2ea48-6218-48dc-936d-66b4c45d8165.png"></p>
<h2 id="2-7-底层原理"><a href="#2-7-底层原理" class="headerlink" title="2.7 底层原理"></a>2.7 底层原理</h2><p>为什么Docker会比VM虚拟机快</p>
<p><strong>(1)docker有着比虚拟机更少的抽象层</strong></p>
<p>由于docker不需要Hypervisor(虚拟机)实现硬件资源虚拟化,运行在docker容器上的程序直接使用的都是实际物理机的硬件资源。因此在CPU、内存利用率上docker将会在效率上有明显优势。</p>
<p><strong>(2)docker利用的是宿主机的内核,而不需要加载操作系统OS内核</strong></p>
<p>当新建一个容器时,docker不需要和虚拟机一样重新加载一个操作系统内核。进而避免引寻、加载操作系统内核返回等比较费时费资源的过程,当新建一个虚拟机时,虚拟机软件需要加载OS,返回新建过程是分钟级别的。而docker由于直接利用宿主机的操作系统,则省略了返回过程,因此新建一个docker容器只需要几秒钟。</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658127650958-09fa7db3-82a6-4422-82f2-1f199c5587e3.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658127674217-cece7c8f-55e1-404d-80b8-4ef145cab176.png"></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>docker-常规安装简介</title>
    <url>/2024/10/31/docker-%E5%B8%B8%E8%A7%84%E5%AE%89%E8%A3%85%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="8-Docker常规安装简介"><a href="#8-Docker常规安装简介" class="headerlink" title="8 Docker常规安装简介"></a>8 Docker常规安装简介</h1><h2 id="8-1-总体步骤"><a href="#8-1-总体步骤" class="headerlink" title="8.1 总体步骤"></a>8.1 总体步骤</h2><ol>
<li>搜索镜像</li>
<li>拉取镜像</li>
<li>查看镜像</li>
<li>启动镜像 - 服务端口映射</li>
<li>停止容器</li>
<li>移除容器</li>
</ol>
<h2 id="8-2-安装tomcat"><a href="#8-2-安装tomcat" class="headerlink" title="8.2 安装tomcat"></a>8.2 安装tomcat</h2><ol>
<li><strong>docker hub上面查找tomcat镜像</strong></li>
</ol>
<p><code>docker search tomcat</code></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658227019564-3256fed5-8d29-4b9b-b63c-f9db6688647f.png"></p>
<ol start="2">
<li><strong>从docker hub上拉取tomcat镜像到本地</strong></li>
</ol>
<p><code>docker pull tomcat</code></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658227032736-fd32aed9-dbe6-4fdf-8323-37a9f764528a.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658227037231-8c821604-210e-432f-a311-552c51918845.png"></p>
<ol start="3">
<li><strong>docker images查看是否有拉取到的tomcat</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658227047824-ae101631-a620-4703-9dac-8af6d9b80fdc.png"></p>
<ol start="4">
<li><strong>使用tomcat镜像创建容器实例(也叫运行镜像)</strong></li>
</ol>
<p><code>docker run -it -p 8080:8080 tomcat</code></p>
<p>:::info<br>-p 小写，主机端口:docker容器端口</p>
<p>-P 大写，随机分配端口</p>
<p>-i 交互</p>
<p>-t 终端</p>
<p>-d 后台</p>
<p>:::</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658227076652-dccf1356-5133-4dfd-ad51-31bdc8d905d5.png"></p>
<ol start="5">
<li><strong>访问猫首页</strong></li>
</ol>
<p><font style="color:#E8323C;">问题</font></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658227151748-3f6e8cf0-c183-4a32-aec3-c17011ce7929.png"></p>
<p>解决</p>
<pre><code>1. 可能没有映射端口或者没有关闭防火墙
2. 把webapps.dist目录换成webapps
</code></pre>
<p>先成功启动tomcat</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658227198315-f76f4e96-a574-4027-ab56-e8ec70855676.png"></p>
<p>查看webapps 文件夹查看为空</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658227241415-7b7a562e-b601-45e1-982f-5cdaf482e1f9.png"></p>
<ol start="6">
<li><strong>免修改版说明</strong></li>
</ol>
<p><code>docker pull billygoo/tomcat8-jdk8</code></p>
<p><code>docker run -d -p 8080:8080 --name mytomcat8 billygoo/tomcat8-jdk8</code></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658227293652-4c38aded-e9e1-48bb-a40f-7642928172f4.png"></p>
<h2 id="8-3-安装mysql"><a href="#8-3-安装mysql" class="headerlink" title="8.3 安装mysql"></a>8.3 安装mysql</h2><h3 id="8-3-1-docker-hub上面查找mysql镜像"><a href="#8-3-1-docker-hub上面查找mysql镜像" class="headerlink" title="8.3.1 docker hub上面查找mysql镜像"></a>8.3.1 docker hub上面查找mysql镜像</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658385582810-fcaff7bf-61c8-41b5-bf2f-ae0cf7a29e84.png"></p>
<h3 id="8-3-2-从docker-hub上-阿里云加速器-拉取mysql镜像到本地标签为5-7"><a href="#8-3-2-从docker-hub上-阿里云加速器-拉取mysql镜像到本地标签为5-7" class="headerlink" title="8.3.2 从docker hub上(阿里云加速器)拉取mysql镜像到本地标签为5.7"></a>8.3.2 从docker hub上(阿里云加速器)拉取mysql镜像到本地标签为5.7</h3><p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658385588787-239d33e3-87ef-465a-9513-841f703dd972.png"></p>
<h3 id="8-3-3-使用mysql5-7镜像创建容器-也叫运行镜像"><a href="#8-3-3-使用mysql5-7镜像创建容器-也叫运行镜像" class="headerlink" title="8.3.3 使用mysql5.7镜像创建容器(也叫运行镜像)"></a>8.3.3 使用mysql5.7镜像创建容器(也叫运行镜像)</h3><h4 id="8-3-3-1-命令出处，哪里来的？"><a href="#8-3-3-1-命令出处，哪里来的？" class="headerlink" title="8.3.3.1 命令出处，哪里来的？"></a>8.3.3.1 命令出处，哪里来的？</h4><p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658385610694-1b65bab9-3a5a-4cb6-a995-d715004a0c00.png"></p>
<h4 id="8-3-3-2-简单版"><a href="#8-3-3-2-简单版" class="headerlink" title="8.3.3.2 简单版"></a>8.3.3.2 简单版</h4><p>使用mysql镜像</p>
<p><code>docker run -p 3306:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:5.7</code></p>
<p><code>docker ps</code></p>
<p><code>docker exec -it 容器ID /bin/bash</code></p>
<p><code>mysql -uroot -p</code></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658385723966-fa2bc241-6f24-4faf-96a2-3098a16d1706.png"></p>
<p>建库建表插入数据</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658385758209-655c9da4-e2cc-481b-b714-7c62d93d7d0a.png"></p>
<p>外部Win10也来连接运行在dokcer上的mysql容器实例服务</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658385770994-f0843127-92ef-4299-94b6-3b641109d2cc.png"></p>
<p><font style="color:#E8323C;">问题</font></p>
<p>插入中文数据试试</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658385783102-bdbbdfe5-30f1-493c-bdc3-79c35c2bf8f5.png"></p>
<p><font style="color:#E8323C;">为什么报错?</font></p>
<p>docker上默认字符集编码隐患,docker里面的mysql容器实例查看，内容如下：</p>
<p><code>SHOW VARIABLES LIKE &#39;character%&#39;</code></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658385796114-e5691a9b-d302-4058-9467-90bd86a26944.png"></p>
<p>删除容器后，里面的mysql数据怎么办？</p>
<h4 id="8-3-3-3-实战版"><a href="#8-3-3-3-实战版" class="headerlink" title="8.3.3.3 实战版"></a>8.3.3.3 实战版</h4><p>新建mysql容器实例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 3306:3306 </span><br><span class="line">--privileged=true </span><br><span class="line">-v /zzyyuse/mysql/log:/var/log/mysql </span><br><span class="line">-v /zzyyuse/mysql/data:/var/lib/mysql </span><br><span class="line">-v /zzyyuse/mysql/conf:/etc/mysql/conf.d </span><br><span class="line">-eMYSQL_ROOT_PASSWORD=123456  </span><br><span class="line">--name mysql mysql:5.7</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658385958447-19a567d5-61af-409b-a8de-dcfe11006d3b.png"></p>
<p>新建my.cnf，通过容器卷同步给mysql容器实例</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[client]</span><br><span class="line">default_character_set=utf8</span><br><span class="line">[mysqld]</span><br><span class="line">collation_server = utf8_general_ci</span><br><span class="line">character_set_server = utf8</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658385982627-5fe54dbd-eb94-4d5d-a7ea-354e1be76f35.png"></p>
<p>重新启动mysql容器实例再重新进入并查看字符编码</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658386018656-712d254c-d270-4f17-aa62-cf93b98577d3.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658386026933-dee09e82-39a2-4699-bb63-3930d3e8ba6e.png"></p>
<p>再新建库新建表再插入中文测试</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658386040814-18b11add-9638-4461-ab79-81799679f00c.png"></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658386045922-c04af725-cacb-4b76-a885-4cdbb82b2cc7.png"></p>
<p>结论</p>
<p>之前的DB  无效，修改字符集操作+重启mysql容器实例</p>
<p>之后的DB  有效，需要新建</p>
<p>结论：docker安装完MySQL并run出容器后，建议请先修改完字符集编码后再新建mysql库-表-插数据</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658386205878-9ade8aa5-cc6e-455a-b6d1-5b70344c05d9.png"></p>
<p>假如将当前容器实例删除，再重新来一次，之前建的db01实例还有吗？try</p>
<h2 id="8-4-安装redis"><a href="#8-4-安装redis" class="headerlink" title="8.4 安装redis"></a>8.4 安装redis</h2><ol>
<li><strong>从docker hub上(阿里云加速器)拉取redis镜像到本地标签为6.0.8</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658386269314-4f582385-baa4-478e-8dbe-d8e3cea4b808.png"></p>
<ol start="2">
<li><strong>入门命令</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658386283541-4dd83134-4c11-46e9-b6ca-de55f10d25ec.png"></p>
<ol start="3">
<li><strong>命令提醒：容器卷记得加入–privileged&#x3D;true</strong></li>
</ol>
<p>Docker挂载主机目录Docker访问出现cannot open directory .: Permission denied</p>
<p>解决办法：在挂载目录后多加一个–privileged&#x3D;true参数即可</p>
<ol start="4">
<li><strong>在CentOS宿主机下新建目录&#x2F;app&#x2F;redis</strong></li>
</ol>
<p><code>mkdir -p /app/redis</code></p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658386476816-44e3daec-8880-48c2-9412-4997a1b0cd86.png"></p>
<ol start="5">
<li><strong>将一个redis.conf文件模板拷贝进&#x2F;app&#x2F;redis目录下</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658386499130-3dfd0b28-9053-4a8a-8089-d02cfac2eabc.png"></p>
<p>将准备好的redis.conf文件放进&#x2F;app&#x2F;redis目录下</p>
<ol start="6">
<li><strong>&#x2F;app&#x2F;redis目录下修改redis.conf文件</strong></li>
</ol>
<p>默认出厂的原始redis.conf</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Redis configuration file example.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Note that in order to read the configuration file, Redis must be</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">started with the file path as first argument:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># ./redis-server /path/to/redis.conf</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Note on units: when memory size is needed, it is possible to specify</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">it <span class="keyword">in</span> the usual form of 1k 5GB 4M and so forth:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># 1k =&gt; 1000 bytes</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1kb =&gt; 1024 bytes</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1m =&gt; 1000000 bytes</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1mb =&gt; 1024*1024 bytes</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1g =&gt; 1000000000 bytes</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">1gb =&gt; 1024*1024*1024 bytes</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># units are case insensitive so 1GB 1Gb 1gB are all the same.</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">################################# INCLUDES ###################################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Include one or more other config files here.  This is useful <span class="keyword">if</span> you</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">have a standard template that goes to all Redis servers but also need</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">to customize a few per-server settings.  Include files can include</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">other files, so use this wisely.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Notice option &quot;include&quot; won&#x27;t be rewritten by command &quot;CONFIG REWRITE&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">from admin or Redis Sentinel. Since Redis always uses the last processed</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">line as value of a configuration directive, you<span class="string">&#x27;d better put includes</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">at the beginning of this file to avoid overwriting config change at runtime.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># If instead you are interested in using includes to override configuration</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">options, it is better to use include as the last line.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># include /path/to/local.conf</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">include /path/to/other.conf</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">################################# MODULES #####################################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Load modules at startup. If the server is not able to load modules</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">it will abort. It is possible to use multiple loadmodule directives.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># loadmodule /path/to/my_module.so</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">loadmodule /path/to/other_module.so</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">################################# NETWORK #####################################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">By default, if no &quot;bind&quot; configuration directive is specified, Redis listens</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">for connections from all the network interfaces available on the server.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">It is possible to listen to just one or multiple selected interfaces using</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the &quot;bind&quot; configuration directive, followed by one or more IP addresses.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Examples:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># bind 192.168.1.100 10.0.0.1</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">bind 127.0.0.1 ::1</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># ~~~ WARNING ~~~ If the computer running Redis is directly exposed to the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">internet, binding to all the interfaces is dangerous and will expose the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">instance to everybody on the internet. So by default we uncomment the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">following bind directive, that will force Redis to listen only into</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the IPv4 loopback interface address (this means Redis will be able to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">accept connections only from clients running into the same computer it</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">is running).</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># IF YOU ARE SURE YOU WANT YOUR INSTANCE TO LISTEN TO ALL THE INTERFACES</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">JUST COMMENT THE FOLLOWING LINE.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">bind 127.0.0.1</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Protected mode is a layer of security protection, in order to avoid that</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Redis instances left open on the internet are accessed and exploited.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># When protected mode is on and if:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 1) The server is not binding explicitly to a set of addresses using the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   &quot;bind&quot; directive.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">2) No password is configured.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The server only accepts connections from clients connecting from the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">IPv4 and IPv6 loopback addresses 127.0.0.1 and ::1, and from Unix domain</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">sockets.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># By default protected mode is enabled. You should disable it only if</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">you are sure you want clients from other hosts to connect to Redis</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">even if no authentication is configured, nor a specific set of interfaces</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">are explicitly listed using the &quot;bind&quot; directive.</span></span></span><br><span class="line">protected-mode no</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Accept connections on the specified port, default is 6379 (IANA #815344).</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">If port 0 is specified Redis will not listen on a TCP socket.</span></span></span><br><span class="line">port 6379</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">TCP listen() backlog.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># In high requests-per-second environments you need an high backlog in order</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">to avoid slow clients connections issues. Note that the Linux kernel</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">will silently truncate it to the value of /proc/sys/net/core/somaxconn so</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">make sure to raise both the value of somaxconn and tcp_max_syn_backlog</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">in order to get the desired effect.</span></span></span><br><span class="line">tcp-backlog 511</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Unix socket.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Specify the path for the Unix socket that will be used to listen for</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">incoming connections. There is no default, so Redis will not listen</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">on a unix socket when not specified.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># unixsocket /tmp/redis.sock</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">unixsocketperm 700</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Close the connection after a client is idle for N seconds (0 to disable)</span></span></span><br><span class="line">timeout 0</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">TCP keepalive.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># If non-zero, use SO_KEEPALIVE to send TCP ACKs to clients in absence</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">of communication. This is useful for two reasons:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 1) Detect dead peers.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">2) Take the connection alive from the point of view of network</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   equipment in the middle.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># On Linux, the specified value (in seconds) is the period used to send ACKs.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Note that to close the connection the double of the time is needed.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">On other kernels the period depends on the kernel configuration.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># A reasonable value for this option is 300 seconds, which is the new</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Redis default starting with Redis 3.2.1.</span></span></span><br><span class="line">tcp-keepalive 300</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">################################ GENERAL #####################################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">By default Redis does not run as a daemon. Use &#x27;</span><span class="built_in">yes</span><span class="string">&#x27; if you need it.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Note that Redis will write a pid file in /var/run/redis.pid when daemonized.</span></span></span><br><span class="line">daemonize no</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">If you run Redis from upstart or systemd, Redis can interact with your</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">supervision tree. Options:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  supervised no      - no supervision interaction</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  supervised upstart - signal upstart by putting Redis into SIGSTOP mode</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  supervised systemd - signal systemd by writing READY=1 to $NOTIFY_SOCKET</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  supervised auto    - detect upstart or systemd method based on</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">                       UPSTART_JOB or NOTIFY_SOCKET environment variables</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Note: these supervision methods only signal &quot;process is ready.&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">      They do not enable continuous liveness pings back to your supervisor.</span></span></span><br><span class="line">supervised no</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">If a pid file is specified, Redis writes it where specified at startup</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">and removes it at exit.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># When the server runs non daemonized, no pid file is created if none is</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">specified in the configuration. When the server is daemonized, the pid file</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">is used even if not specified, defaulting to &quot;/var/run/redis.pid&quot;.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Creating a pid file is best effort: if Redis is not able to create it</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">nothing bad happens, the server will start and run normally.</span></span></span><br><span class="line">pidfile /var/run/redis_6379.pid</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Specify the server verbosity level.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">This can be one of:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">debug (a lot of information, useful for development/testing)</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">verbose (many rarely useful info, but not a mess like the debug level)</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">notice (moderately verbose, what you want in production probably)</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">warning (only very important / critical messages are logged)</span></span></span><br><span class="line">loglevel notice</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Specify the log file name. Also the empty string can be used to force</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Redis to log on the standard output. Note that if you use standard</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">output for logging but daemonize, logs will be sent to /dev/null</span></span></span><br><span class="line">logfile &quot;&quot;</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">To enable logging to the system logger, just set &#x27;</span>syslog-enabled<span class="string">&#x27; to yes,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">and optionally update the other syslog parameters to suit your needs.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">syslog-enabled no</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Specify the syslog identity.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">syslog-ident redis</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">syslog-facility local0</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Set the number of databases. The default database is DB 0, you can select</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">a different one on a per-connection basis using SELECT &lt;dbid&gt; where</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">dbid is a number between 0 and &#x27;</span>databases<span class="string">&#x27;-1</span></span></span><br><span class="line">databases 16</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">By default Redis shows an ASCII art logo only when started to log to the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">standard output and if the standard output is a TTY. Basically this means</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">that normally a logo is displayed only in interactive sessions.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># However it is possible to force the pre-4.0 behavior and always show a</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">ASCII art logo in startup logs by setting the following option to yes.</span></span></span><br><span class="line">always-show-logo yes</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">############################### SNAPSHOTTING  ################################</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Save the DB on disk:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#   save &lt;seconds&gt; &lt;changes&gt;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#   Will save the DB if both the given number of seconds and the given</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  number of write operations against the DB occurred.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#   In the example below the behaviour will be to save:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  after 900 sec (15 min) if at least 1 key changed</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  after 300 sec (5 min) if at least 10 keys changed</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  after 60 sec if at least 10000 keys changed</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#   Note: you can disable saving completely by commenting out all &quot;save&quot; lines.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#   It is also possible to remove all the previously configured save</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  points by adding a save directive with a single empty string argument</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  like in the following example:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#   save &quot;&quot;</span></span></span><br><span class="line"> </span><br><span class="line">save 900 1</span><br><span class="line">save 300 10</span><br><span class="line">save 60 10000</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">By default Redis will stop accepting writes if RDB snapshots are enabled</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">(at least one save point) and the latest background save failed.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">This will make the user aware (in a hard way) that data is not persisting</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">on disk properly, otherwise chances are that no one will notice and some</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">disaster will happen.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># If the background saving process will start working again Redis will</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">automatically allow writes again.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># However if you have setup your proper monitoring of the Redis server</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">and persistence, you may want to disable this feature so that Redis will</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">continue to work as usual even if there are problems with disk,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">permissions, and so forth.</span></span></span><br><span class="line">stop-writes-on-bgsave-error yes</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Compress string objects using LZF when dump .rdb databases?</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">For default that&#x27;</span>s <span class="built_in">set</span> to <span class="string">&#x27;yes&#x27;</span> as it<span class="string">&#x27;s almost always a win.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">If you want to save some CPU in the saving child set it to &#x27;</span>no<span class="string">&#x27; but</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the dataset will likely be bigger if you have compressible values or keys.</span></span></span><br><span class="line">rdbcompression yes</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Since version 5 of RDB a CRC64 checksum is placed at the end of the file.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">This makes the format more resistant to corruption but there is a performance</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">hit to pay (around 10%) when saving and loading RDB files, so you can disable it</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">for maximum performances.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># RDB files created with checksum disabled have a checksum of zero that will</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">tell the loading code to skip the check.</span></span></span><br><span class="line">rdbchecksum yes</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The filename where to dump the DB</span></span></span><br><span class="line">dbfilename dump.rdb</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The working directory.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The DB will be written inside this directory, with the filename specified</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">above using the &#x27;</span>dbfilename<span class="string">&#x27; configuration directive.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The Append Only File will also be created inside this directory.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Note that you must specify a directory here, not a file name.</span></span></span><br><span class="line">dir ./</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">################################ REPLICATION #################################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Master-Replica replication. Use replicaof to make a Redis instance a copy of</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">another Redis server. A few things to understand ASAP about Redis replication.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#   +------------------+      +---------------+</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  |      Master      | ---&gt; |    Replica    |</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  | (receive writes) |      |  (exact copy) |</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  +------------------+      +---------------+</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 1) Redis replication is asynchronous, but you can configure a master to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   stop accepting writes if it appears to be not connected with at least</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   a given number of replicas.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">2) Redis replicas are able to perform a partial resynchronization with the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   master if the replication link is lost for a relatively small amount of</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   time. You may want to configure the replication backlog size (see the next</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   sections of this file) with a sensible value depending on your needs.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">3) Replication is automatic and does not need user intervention. After a</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   network partition replicas automatically try to reconnect to masters</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   and resynchronize with them.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># replicaof &lt;masterip&gt; &lt;masterport&gt;</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">If the master is password protected (using the &quot;requirepass&quot; configuration</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">directive below) it is possible to tell the replica to authenticate before</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">starting the replication synchronization process, otherwise the master will</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">refuse the replica request.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># masterauth &lt;master-password&gt;</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">When a replica loses its connection with the master, or when the replication</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">is still in progress, the replica can act in two different ways:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 1) if replica-serve-stale-data is set to &#x27;</span><span class="built_in">yes</span><span class="string">&#x27; (the default) the replica will</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   still reply to client requests, possibly with out of date data, or the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   data set may just be empty if this is the first synchronization.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 2) if replica-serve-stale-data is set to &#x27;</span>no<span class="string">&#x27; the replica will reply with</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   an error &quot;SYNC with master in progress&quot; to all the kind of commands</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   but to INFO, replicaOF, AUTH, PING, SHUTDOWN, REPLCONF, ROLE, CONFIG,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   SUBSCRIBE, UNSUBSCRIBE, PSUBSCRIBE, PUNSUBSCRIBE, PUBLISH, PUBSUB,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   COMMAND, POST, HOST: and LATENCY.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">replica-serve-stale-data yes</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">You can configure a replica instance to accept writes or not. Writing against</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">a replica instance may be useful to store some ephemeral data (because data</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">written on a replica will be easily deleted after resync with the master) but</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">may also cause problems if clients are writing to it because of a</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">misconfiguration.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Since Redis 2.6 by default replicas are read-only.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Note: read only replicas are not designed to be exposed to untrusted clients</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">on the internet. It&#x27;</span>s just a protection layer against misuse of the instance.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Still a <span class="built_in">read</span> only replica exports by default all the administrative commands</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">such as CONFIG, DEBUG, and so forth. To a limited extent you can improve</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">security of <span class="built_in">read</span> only replicas using <span class="string">&#x27;rename-command&#x27;</span> to shadow all the</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">administrative / dangerous commands.</span></span><br><span class="line">replica-read-only yes</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replication SYNC strategy: disk or socket.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># -------------------------------------------------------</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">WARNING: DISKLESS REPLICATION IS EXPERIMENTAL CURRENTLY</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">-------------------------------------------------------</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># New replicas and reconnecting replicas that are not able to continue the replication</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">process just receiving differences, need to <span class="keyword">do</span> what is called a <span class="string">&quot;full</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">synchronization&quot;</span>. An RDB file is transmitted from the master to the replicas.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The transmission can happen <span class="keyword">in</span> two different ways:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># 1) Disk-backed: The Redis master creates a new process that writes the RDB</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                file on disk. Later the file is transferred by the parent</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">                process to the replicas incrementally.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2) Diskless: The Redis master creates a new process that directly writes the</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">             RDB file to replica sockets, without touching the disk at all.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># With disk-backed replication, while the RDB file is generated, more replicas</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">can be queued and served with the RDB file as soon as the current child producing</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the RDB file finishes its work. With diskless replication instead once</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the transfer starts, new replicas arriving will be queued and a new transfer</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">will start when the current one terminates.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># When diskless replication is used, the master waits a configurable amount of</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">time (<span class="keyword">in</span> seconds) before starting the transfer <span class="keyword">in</span> the hope that multiple replicas</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">will arrive and the transfer can be parallelized.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># With slow disks and fast (large bandwidth) networks, diskless replication</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">works better.</span></span><br><span class="line">repl-diskless-sync no</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">When diskless replication is enabled, it is possible to configure the delay</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the server waits <span class="keyword">in</span> order to spawn the child that transfers the RDB via socket</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">to the replicas.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This is important since once the transfer starts, it is not possible to serve</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">new replicas arriving, that will be queued <span class="keyword">for</span> the next RDB transfer, so the server</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">waits a delay <span class="keyword">in</span> order to <span class="built_in">let</span> more replicas arrive.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># The delay is specified in seconds, and by default is 5 seconds. To disable</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">it entirely just <span class="built_in">set</span> it to 0 seconds and the transfer will start ASAP.</span></span><br><span class="line">repl-diskless-sync-delay 5</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Replicas send PINGs to server <span class="keyword">in</span> a predefined interval. It<span class="string">&#x27;s possible to change</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">this interval with the repl_ping_replica_period option. The default value is 10</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">seconds.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># repl-ping-replica-period 10</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The following option sets the replication timeout for:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 1) Bulk transfer I/O during SYNC, from the point of view of replica.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">2) Master timeout from the point of view of replicas (data, pings).</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">3) Replica timeout from the point of view of masters (REPLCONF ACK pings).</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># It is important to make sure that this value is greater than the value</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">specified for repl-ping-replica-period otherwise a timeout will be detected</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">every time there is low traffic between the master and the replica.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># repl-timeout 60</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Disable TCP_NODELAY on the replica socket after SYNC?</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># If you select &quot;yes&quot; Redis will use a smaller number of TCP packets and</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">less bandwidth to send data to replicas. But this can add a delay for</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the data to appear on the replica side, up to 40 milliseconds with</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Linux kernels using a default configuration.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># If you select &quot;no&quot; the delay for data to appear on the replica side will</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">be reduced but more bandwidth will be used for replication.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># By default we optimize for low latency, but in very high traffic conditions</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">or when the master and replicas are many hops away, turning this to &quot;yes&quot; may</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">be a good idea.</span></span></span><br><span class="line">repl-disable-tcp-nodelay no</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Set the replication backlog size. The backlog is a buffer that accumulates</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">replica data when replicas are disconnected for some time, so that when a replica</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">wants to reconnect again, often a full resync is not needed, but a partial</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">resync is enough, just passing the portion of data the replica missed while</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">disconnected.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The bigger the replication backlog, the longer the time the replica can be</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">disconnected and later be able to perform a partial resynchronization.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The backlog is only allocated once there is at least a replica connected.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># repl-backlog-size 1mb</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">After a master has no longer connected replicas for some time, the backlog</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">will be freed. The following option configures the amount of seconds that</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">need to elapse, starting from the time the last replica disconnected, for</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the backlog buffer to be freed.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Note that replicas never free the backlog for timeout, since they may be</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">promoted to masters later, and should be able to correctly &quot;partially</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">resynchronize&quot; with the replicas: hence they should always accumulate backlog.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># A value of 0 means to never release the backlog.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># repl-backlog-ttl 3600</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The replica priority is an integer number published by Redis in the INFO output.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">It is used by Redis Sentinel in order to select a replica to promote into a</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">master if the master is no longer working correctly.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># A replica with a low priority number is considered better for promotion, so</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">for instance if there are three replicas with priority 10, 100, 25 Sentinel will</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">pick the one with priority 10, that is the lowest.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># However a special priority of 0 marks the replica as not able to perform the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">role of master, so a replica with priority of 0 will never be selected by</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Redis Sentinel for promotion.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># By default the priority is 100.</span></span></span><br><span class="line">replica-priority 100</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">It is possible for a master to stop accepting writes if there are less than</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">N replicas connected, having a lag less or equal than M seconds.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The N replicas need to be in &quot;online&quot; state.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The lag in seconds, that must be &lt;= the specified value, is calculated from</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the last ping received from the replica, that is usually sent every second.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># This option does not GUARANTEE that N replicas will accept the write, but</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">will limit the window of exposure for lost writes in case not enough replicas</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">are available, to the specified number of seconds.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># For example to require at least 3 replicas with a lag &lt;= 10 seconds use:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># min-replicas-to-write 3</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">min-replicas-max-lag 10</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Setting one or the other to 0 disables the feature.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># By default min-replicas-to-write is set to 0 (feature disabled) and</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">min-replicas-max-lag is set to 10.</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">A Redis master is able to list the address and port of the attached</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">replicas in different ways. For example the &quot;INFO replication&quot; section</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">offers this information, which is used, among other tools, by</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Redis Sentinel in order to discover replica instances.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Another place where this info is available is in the output of the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;ROLE&quot; command of a master.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The listed IP and address normally reported by a replica is obtained</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">in the following way:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#   IP: The address is auto detected by checking the peer address</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  of the socket used by the replica to connect with the master.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#   Port: The port is communicated by the replica during the replication</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  handshake, and is normally the port that the replica is using to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  listen for connections.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># However when port forwarding or Network Address Translation (NAT) is</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">used, the replica may be actually reachable via different IP and port</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">pairs. The following two options can be used by a replica in order to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">report to its master a specific set of IP and port, so that both INFO</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">and ROLE will report those values.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># There is no need to use both the options if you need to override just</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the port or the IP address.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># replica-announce-ip 5.5.5.5</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">replica-announce-port 1234</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">################################# SECURITY ###################################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Require clients to issue AUTH &lt;PASSWORD&gt; before processing any other</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">commands.  This might be useful in environments in which you do not trust</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">others with access to the host running redis-server.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># This should stay commented out for backward compatibility and because most</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">people do not need auth (e.g. they run their own servers).</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Warning: since Redis is pretty fast an outside user can try up to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">150k passwords per second against a good box. This means that you should</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">use a very strong password otherwise it will be very easy to break.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># requirepass foobared</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Command renaming.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># It is possible to change the name of dangerous commands in a shared</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">environment. For instance the CONFIG command may be renamed into something</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">hard to guess so that it will still be available for internal-use tools</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">but not available for general clients.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Example:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># rename-command CONFIG b840fc02d524045429941cc15f59e41cb7be6c52</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># It is also possible to completely kill a command by renaming it into</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">an empty string:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># rename-command CONFIG &quot;&quot;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Please note that changing the name of commands that are logged into the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">AOF file or transmitted to replicas may cause problems.</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">################################## CLIENTS ####################################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Set the max number of connected clients at the same time. By default</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">this limit is set to 10000 clients, however if the Redis server is not</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">able to configure the process file limit to allow for the specified limit</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the max number of allowed clients is set to the current file limit</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">minus 32 (as Redis reserves a few file descriptors for internal uses).</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Once the limit is reached Redis will close all the new connections sending</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">an error &#x27;</span>max number of clients reached<span class="string">&#x27;.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># maxclients 10000</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">############################# MEMORY MANAGEMENT ################################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Set a memory usage limit to the specified amount of bytes.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">When the memory limit is reached Redis will try to remove keys</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">according to the eviction policy selected (see maxmemory-policy).</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># If Redis can&#x27;</span>t remove keys according to the policy, or <span class="keyword">if</span> the policy is</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">set</span> to <span class="string">&#x27;noeviction&#x27;</span>, Redis will start to reply with errors to commands</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">that would use more memory, like SET, LPUSH, and so on, and will <span class="built_in">continue</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">to reply to read-only commands like GET.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This option is usually useful when using Redis as an LRU or LFU cache, or to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">set</span> a hard memory <span class="built_in">limit</span> <span class="keyword">for</span> an instance (using the <span class="string">&#x27;noeviction&#x27;</span> policy).</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># WARNING: If you have replicas attached to an instance with maxmemory on,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the size of the output buffers needed to feed the replicas are subtracted</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">from the used memory count, so that network problems / resyncs will</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">not trigger a loop <span class="built_in">where</span> keys are evicted, and <span class="keyword">in</span> turn the output</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">buffer of replicas is full with DELs of keys evicted triggering the deletion</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">of more keys, and so forth <span class="keyword">until</span> the database is completely emptied.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># In short... if you have replicas attached it is suggested that you set a lower</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="built_in">limit</span> <span class="keyword">for</span> maxmemory so that there is some free RAM on the system <span class="keyword">for</span> replica</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">output buffers (but this is not needed <span class="keyword">if</span> the policy is <span class="string">&#x27;noeviction&#x27;</span>).</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># maxmemory &lt;bytes&gt;</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">MAXMEMORY POLICY: how Redis will <span class="keyword">select</span> what to remove when maxmemory</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">is reached. You can <span class="keyword">select</span> among five behaviors:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># volatile-lru -&gt; Evict using approximated LRU among the keys with an expire set.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">allkeys-lru -&gt; Evict any key using approximated LRU.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">volatile-lfu -&gt; Evict using approximated LFU among the keys with an expire <span class="built_in">set</span>.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">allkeys-lfu -&gt; Evict any key using approximated LFU.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">volatile-random -&gt; Remove a random key among the ones with an expire <span class="built_in">set</span>.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">allkeys-random -&gt; Remove a random key, any key.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">volatile-ttl -&gt; Remove the key with the nearest expire time (minor TTL)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">noeviction -&gt; Don<span class="string">&#x27;t evict anything, just return an error on write operations.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># LRU means Least Recently Used</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">LFU means Least Frequently Used</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Both LRU, LFU and volatile-ttl are implemented using approximated</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">randomized algorithms.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Note: with any of the above policies, Redis will return an error on write</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">      operations, when there are no suitable keys for eviction.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#       At the date of writing these commands are: set setnx setex append</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">      incr decr rpush lpush rpushx lpushx linsert lset rpoplpush sadd</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">      sinter sinterstore sunion sunionstore sdiff sdiffstore zadd zincrby</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">      zunionstore zinterstore hset hsetnx hmset hincrby incrby decrby</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">      getset mset msetnx exec sort</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The default is:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># maxmemory-policy noeviction</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">LRU, LFU and minimal TTL algorithms are not precise algorithms but approximated</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">algorithms (in order to save memory), so you can tune it for speed or</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">accuracy. For default Redis will check five keys and pick the one that was</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">used less recently, you can change the sample size using the following</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">configuration directive.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The default of 5 produces good enough results. 10 Approximates very closely</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">true LRU but costs more CPU. 3 is faster but not very accurate.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># maxmemory-samples 5</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Starting from Redis 5, by default a replica will ignore its maxmemory setting</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">(unless it is promoted to master after a failover or manually). It means</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">that the eviction of keys will be just handled by the master, sending the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">DEL commands to the replica as keys evict in the master side.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># This behavior ensures that masters and replicas stay consistent, and is usually</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">what you want, however if your replica is writable, or you want the replica to have</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">a different memory setting, and you are sure all the writes performed to the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">replica are idempotent, then you may change this default (but be sure to understand</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">what you are doing).</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Note that since the replica by default does not evict, it may end using more</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">memory than the one set via maxmemory (there are certain buffers that may</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">be larger on the replica, or data structures may sometimes take more memory and so</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">forth). So make sure you monitor your replicas and make sure they have enough</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">memory to never hit a real out-of-memory condition before the master hits</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the configured maxmemory setting.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># replica-ignore-maxmemory yes</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">############################ LAZY FREEING ####################################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Redis has two primitives to delete keys. One is called DEL and is a blocking</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">deletion of the object. It means that the server stops processing new commands</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">in order to reclaim all the memory associated with an object in a synchronous</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">way. If the key deleted is associated with a small object, the time needed</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">in order to execute the DEL command is very small and comparable to most other</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">O(1) or O(log_N) commands in Redis. However if the key is associated with an</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">aggregated value containing millions of elements, the server can block for</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">a long time (even seconds) in order to complete the operation.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># For the above reasons Redis also offers non blocking deletion primitives</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">such as UNLINK (non blocking DEL) and the ASYNC option of FLUSHALL and</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">FLUSHDB commands, in order to reclaim memory in background. Those commands</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">are executed in constant time. Another thread will incrementally free the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">object in the background as fast as possible.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># DEL, UNLINK and ASYNC option of FLUSHALL and FLUSHDB are user-controlled.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">It&#x27;</span>s up to the design of the application to understand when it is a good</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">idea to use one or the other. However the Redis server sometimes has to</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">delete keys or flush the whole database as a side effect of other operations.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Specifically Redis deletes objects independently of a user call <span class="keyword">in</span> the</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">following scenarios:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># 1) On eviction, because of the maxmemory and maxmemory policy configurations,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   <span class="keyword">in</span> order to make room <span class="keyword">for</span> new data, without going over the specified</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   memory <span class="built_in">limit</span>.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">2) Because of expire: when a key with an associated time to live (see the</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   EXPIRE <span class="built_in">command</span>) must be deleted from memory.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">3) Because of a side effect of a <span class="built_in">command</span> that stores data on a key that may</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   already exist. For example the RENAME <span class="built_in">command</span> may delete the old key</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   content when it is replaced with another one. Similarly SUNIONSTORE</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   or SORT with STORE option may delete existing keys. The SET <span class="built_in">command</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   itself removes any old content of the specified key <span class="keyword">in</span> order to replace</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   it with the specified string.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">4) During replication, when a replica performs a full resynchronization with</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   its master, the content of the whole database is removed <span class="keyword">in</span> order to</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   load the RDB file just transferred.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># In all the above cases the default is to delete objects in a blocking way,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">like <span class="keyword">if</span> DEL was called. However you can configure each <span class="keyword">case</span> specifically</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="keyword">in</span> order to instead release memory <span class="keyword">in</span> a non-blocking way like <span class="keyword">if</span> UNLINK</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">was called, using the following configuration directives:</span></span><br><span class="line"> </span><br><span class="line">lazyfree-lazy-eviction no</span><br><span class="line">lazyfree-lazy-expire no</span><br><span class="line">lazyfree-lazy-server-del no</span><br><span class="line">replica-lazy-flush no</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">############################# APPEND ONLY MODE ###############################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">By default Redis asynchronously dumps the dataset on disk. This mode is</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">good enough <span class="keyword">in</span> many applications, but an issue with the Redis process or</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">a power outage may result into a few minutes of writes lost (depending on</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the configured save points).</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># The Append Only File is an alternative persistence mode that provides</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">much better durability. For instance using the default data fsync policy</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">(see later <span class="keyword">in</span> the config file) Redis can lose just one second of writes <span class="keyword">in</span> a</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">dramatic event like a server power outage, or a single write <span class="keyword">if</span> something</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">wrong with the Redis process itself happens, but the operating system is</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">still running correctly.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># AOF and RDB persistence can be enabled at the same time without problems.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">If the AOF is enabled on startup Redis will load the AOF, that is the file</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">with the better durability guarantees.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Please check http://redis.io/topics/persistence for more information.</span></span></span><br><span class="line"> </span><br><span class="line">appendonly no</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The name of the append only file (default: <span class="string">&quot;appendonly.aof&quot;</span>)</span></span><br><span class="line"> </span><br><span class="line">appendfilename &quot;appendonly.aof&quot;</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">The fsync() call tells the Operating System to actually write data on disk</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">instead of waiting <span class="keyword">for</span> more data <span class="keyword">in</span> the output buffer. Some OS will really flush</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">data on disk, some other OS will just try to <span class="keyword">do</span> it ASAP.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Redis supports three different modes:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># no: don&#x27;t fsync, just let the OS flush the data when it wants. Faster.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">always: fsync after every write to the append only <span class="built_in">log</span>. Slow, Safest.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">everysec: fsync only one time every second. Compromise.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># The default is &quot;everysec&quot;, as that&#x27;s usually the right compromise between</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">speed and data safety. It<span class="string">&#x27;s up to you to understand if you can relax this to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;no&quot; that will let the operating system flush the output buffer when</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">it wants, for better performances (but if you can live with the idea of</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">some data loss consider the default persistence mode that&#x27;</span>s snapshotting),</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or on the contrary, use <span class="string">&quot;always&quot;</span> that<span class="string">&#x27;s very slow but a bit safer than</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">everysec.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># More details please check the following article:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">http://antirez.com/post/redis-persistence-demystified.html</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># If unsure, use &quot;everysec&quot;.</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">appendfsync always</span></span></span><br><span class="line">appendfsync everysec</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">appendfsync no</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">When the AOF fsync policy is set to always or everysec, and a background</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">saving process (a background save or AOF log background rewriting) is</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">performing a lot of I/O against the disk, in some Linux configurations</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Redis may block too long on the fsync() call. Note that there is no fix for</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">this currently, as even performing fsync in a different thread will block</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">our synchronous write(2) call.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># In order to mitigate this problem it&#x27;</span>s possible to use the following option</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">that will prevent fsync() from being called <span class="keyword">in</span> the main process <span class="keyword">while</span> a</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">BGSAVE or BGREWRITEAOF is <span class="keyword">in</span> progress.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This means that while another child is saving, the durability of Redis is</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the same as <span class="string">&quot;appendfsync none&quot;</span>. In practical terms, this means that it is</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">possible to lose up to 30 seconds of <span class="built_in">log</span> <span class="keyword">in</span> the worst scenario (with the</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">default Linux settings).</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># If you have latency problems turn this to &quot;yes&quot;. Otherwise leave it as</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;no&quot;</span> that is the safest pick from the point of view of durability.</span></span><br><span class="line"> </span><br><span class="line">no-appendfsync-on-rewrite no</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Automatic rewrite of the append only file.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Redis is able to automatically rewrite the <span class="built_in">log</span> file implicitly calling</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">BGREWRITEAOF when the AOF <span class="built_in">log</span> size grows by the specified percentage.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This is how it works: Redis remembers the size of the AOF file after the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">latest rewrite (<span class="keyword">if</span> no rewrite has happened since the restart, the size of</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the AOF at startup is used).</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># This base size is compared to the current size. If the current size is</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">bigger than the specified percentage, the rewrite is triggered. Also</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">you need to specify a minimal size <span class="keyword">for</span> the AOF file to be rewritten, this</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">is useful to avoid rewriting the AOF file even <span class="keyword">if</span> the percentage increase</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">is reached but it is still pretty small.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Specify a percentage of zero in order to disable the automatic AOF</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">rewrite feature.</span></span><br><span class="line"> </span><br><span class="line">auto-aof-rewrite-percentage 100</span><br><span class="line">auto-aof-rewrite-min-size 64mb</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">An AOF file may be found to be truncated at the end during the Redis</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">startup process, when the AOF data gets loaded back into memory.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This may happen when the system <span class="built_in">where</span> Redis is running</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">crashes, especially when an ext4 filesystem is mounted without the</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">data=ordered option (however this can<span class="string">&#x27;t happen when Redis itself</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">crashes or aborts but the operating system still works correctly).</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Redis can either exit with an error when this happens, or load as much</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">data as possible (the default now) and start if the AOF file is found</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">to be truncated at the end. The following option controls this behavior.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># If aof-load-truncated is set to yes, a truncated AOF file is loaded and</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the Redis server starts emitting a log to inform the user of the event.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Otherwise if the option is set to no, the server aborts with an error</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">and refuses to start. When the option is set to no, the user requires</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">to fix the AOF file using the &quot;redis-check-aof&quot; utility before to restart</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the server.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Note that if the AOF file will be found to be corrupted in the middle</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the server will still exit with an error. This option only applies when</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Redis will try to read more data from the AOF file but not enough bytes</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">will be found.</span></span></span><br><span class="line">aof-load-truncated yes</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">When rewriting the AOF file, Redis is able to use an RDB preamble in the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">AOF file for faster rewrites and recoveries. When this option is turned</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">on the rewritten AOF file is composed of two different stanzas:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#   [RDB file][AOF tail]</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># When loading Redis recognizes that the AOF file starts with the &quot;REDIS&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">string and loads the prefixed RDB file, and continues loading the AOF</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">tail.</span></span></span><br><span class="line">aof-use-rdb-preamble yes</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">############################### LUA SCRIPTING  ###############################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Max execution time of a Lua script in milliseconds.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># If the maximum execution time is reached Redis will log that a script is</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">still in execution after the maximum allowed time and will start to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">reply to queries with an error.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># When a long running script exceeds the maximum execution time only the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">SCRIPT KILL and SHUTDOWN NOSAVE commands are available. The first can be</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">used to stop a script that did not yet called write commands. The second</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">is the only way to shut down the server in the case a write command was</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">already issued by the script but the user doesn&#x27;</span>t want to <span class="built_in">wait</span> <span class="keyword">for</span> the natural</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">termination of the script.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Set it to 0 or a negative value for unlimited execution without warnings.</span></span></span><br><span class="line">lua-time-limit 5000</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">############################### REDIS CLUSTER  ###############################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Normal Redis instances can<span class="string">&#x27;t be part of a Redis Cluster; only nodes that are</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">started as cluster nodes can. In order to start a Redis instance as a</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">cluster node enable the cluster support uncommenting the following:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># cluster-enabled yes</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Every cluster node has a cluster configuration file. This file is not</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">intended to be edited by hand. It is created and updated by Redis nodes.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Every Redis Cluster node requires a different cluster configuration file.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Make sure that instances running in the same system do not have</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">overlapping cluster configuration file names.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># cluster-config-file nodes-6379.conf</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Cluster node timeout is the amount of milliseconds a node must be unreachable</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">for it to be considered in failure state.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Most other internal time limits are multiple of the node timeout.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># cluster-node-timeout 15000</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">A replica of a failing master will avoid to start a failover if its data</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">looks too old.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># There is no simple way for a replica to actually have an exact measure of</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">its &quot;data age&quot;, so the following two checks are performed:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 1) If there are multiple replicas able to failover, they exchange messages</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   in order to try to give an advantage to the replica with the best</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   replication offset (more data from the master processed).</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   Replicas will try to get their rank by offset, and apply to the start</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   of the failover a delay proportional to their rank.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 2) Every single replica computes the time of the last interaction with</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   its master. This can be the last ping or command received (if the master</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   is still in the &quot;connected&quot; state), or the time that elapsed since the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   disconnection with the master (if the replication link is currently down).</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   If the last interaction is too old, the replica will not try to failover</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   at all.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The point &quot;2&quot; can be tuned by user. Specifically a replica will not perform</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the failover if, since the last interaction with the master, the time</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">elapsed is greater than:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#   (node-timeout * replica-validity-factor) + repl-ping-replica-period</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># So for example if node-timeout is 30 seconds, and the replica-validity-factor</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">is 10, and assuming a default repl-ping-replica-period of 10 seconds, the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">replica will not try to failover if it was not able to talk with the master</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">for longer than 310 seconds.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># A large replica-validity-factor may allow replicas with too old data to failover</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">a master, while a too small value may prevent the cluster from being able to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">elect a replica at all.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># For maximum availability, it is possible to set the replica-validity-factor</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">to a value of 0, which means, that replicas will always try to failover the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">master regardless of the last time they interacted with the master.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">(However they&#x27;</span>ll always try to apply a delay proportional to their</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">offset rank).</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># Zero is the only value able to guarantee that when all the partitions heal</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">the cluster will always be able to <span class="built_in">continue</span>.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># cluster-replica-validity-factor 10</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Cluster replicas are able to migrate to orphaned masters, that are masters</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">that are left without working replicas. This improves the cluster ability</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">to resist to failures as otherwise an orphaned master can<span class="string">&#x27;t be failed over</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">in case of failure if it has no working replicas.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Replicas migrate to orphaned masters only if there are still at least a</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">given number of other working replicas for their old master. This number</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">is the &quot;migration barrier&quot;. A migration barrier of 1 means that a replica</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">will migrate only if there is at least 1 other working replica for its master</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">and so forth. It usually reflects the number of replicas you want for every</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">master in your cluster.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Default is 1 (replicas migrate only if their masters remain with at least</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">one replica). To disable migration just set it to a very large value.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">A value of 0 can be set but is useful only for debugging and dangerous</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">in production.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># cluster-migration-barrier 1</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">By default Redis Cluster nodes stop accepting queries if they detect there</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">is at least an hash slot uncovered (no available node is serving it).</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">This way if the cluster is partially down (for example a range of hash slots</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">are no longer covered) all the cluster becomes, eventually, unavailable.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">It automatically returns available as soon as all the slots are covered again.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># However sometimes you want the subset of the cluster which is working,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">to continue to accept queries for the part of the key space that is still</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">covered. In order to do so, just set the cluster-require-full-coverage</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">option to no.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># cluster-require-full-coverage yes</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">This option, when set to yes, prevents replicas from trying to failover its</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">master during master failures. However the master can still perform a</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">manual failover, if forced to do so.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># This is useful in different scenarios, especially in the case of multiple</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">data center operations, where we want one side to never be promoted if not</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">in the case of a total DC failure.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># cluster-replica-no-failover no</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">In order to setup your cluster make sure to read the documentation</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">available at http://redis.io web site.</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">######################### CLUSTER DOCKER/NAT support  ########################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">In certain deployments, Redis Cluster nodes address discovery fails, because</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">addresses are NAT-ted or because ports are forwarded (the typical case is</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Docker and other containers).</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># In order to make Redis Cluster working in such environments, a static</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">configuration where each node knows its public address is needed. The</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">following two options are used for this scope, and are:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># * cluster-announce-ip</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">* cluster-announce-port</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">* cluster-announce-bus-port</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Each instruct the node about its address, client port, and cluster message</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">bus port. The information is then published in the header of the bus packets</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">so that other nodes will be able to correctly map the address of the node</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">publishing the information.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># If the above options are not used, the normal Redis Cluster auto-detection</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">will be used instead.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Note that when remapped, the bus port may not be at the fixed offset of</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">clients port + 10000, so you can specify any port and bus-port depending</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">on how they get remapped. If the bus-port is not set, a fixed offset of</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">10000 will be used as usually.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Example:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># cluster-announce-ip 10.1.1.5</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">cluster-announce-port 6379</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">cluster-announce-bus-port 6380</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">################################# SLOW LOG ###################################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The Redis Slow Log is a system to log queries that exceeded a specified</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">execution time. The execution time does not include the I/O operations</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">like talking with the client, sending the reply and so forth,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">but just the time needed to actually execute the command (this is the only</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">stage of command execution where the thread is blocked and can not serve</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">other requests in the meantime).</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># You can configure the slow log with two parameters: one tells Redis</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">what is the execution time, in microseconds, to exceed in order for the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">command to get logged, and the other parameter is the length of the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">slow log. When a new command is logged the oldest one is removed from the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">queue of logged commands.</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The following time is expressed in microseconds, so 1000000 is equivalent</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">to one second. Note that a negative number disables the slow log, while</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">a value of zero forces the logging of every command.</span></span></span><br><span class="line">slowlog-log-slower-than 10000</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">There is no limit to this length. Just be aware that it will consume memory.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">You can reclaim memory used by the slow log with SLOWLOG RESET.</span></span></span><br><span class="line">slowlog-max-len 128</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">############################### LATENCY MONITOR ##############################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The Redis latency monitoring subsystem samples different operations</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">at runtime in order to collect data related to possible sources of</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">latency of a Redis instance.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Via the LATENCY command this information is available to the user that can</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">print graphs and obtain reports.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The system only logs operations that were performed in a time equal or</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">greater than the amount of milliseconds specified via the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">latency-monitor-threshold configuration directive. When its value is set</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">to zero, the latency monitor is turned off.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># By default latency monitoring is disabled since it is mostly not needed</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">if you don&#x27;</span>t have latency issues, and collecting data has a performance</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">impact, that <span class="keyword">while</span> very small, can be measured under big load. Latency</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">monitoring can easily be enabled at runtime using the <span class="built_in">command</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&quot;CONFIG SET latency-monitor-threshold &lt;milliseconds&gt;&quot;</span> <span class="keyword">if</span> needed.</span></span><br><span class="line">latency-monitor-threshold 0</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">############################ EVENT NOTIFICATION ##############################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Redis can notify Pub/Sub clients about events happening <span class="keyword">in</span> the key space.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">This feature is documented at http://redis.io/topics/notifications</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># For instance if keyspace events notification is enabled, and a client</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">performs a DEL operation on key <span class="string">&quot;foo&quot;</span> stored <span class="keyword">in</span> the Database 0, two</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">messages will be published via Pub/Sub:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># PUBLISH __keyspace@0__:foo del</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">PUBLISH __keyevent@0__:del foo</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment"># It is possible to select the events that Redis will notify among a set</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">of classes. Every class is identified by a single character:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#  K     Keyspace events, published with __keyspace@&lt;db&gt;__ prefix.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> E     Keyevent events, published with __keyevent@&lt;db&gt;__ prefix.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> g     Generic commands (non-type specific) like DEL, EXPIRE, RENAME, ...</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> $     String commands</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> l     List commands</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> s     Set commands</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> h     Hash commands</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> z     Sorted <span class="built_in">set</span> commands</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> x     Expired events (events generated every time a key expires)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> e     Evicted events (events generated when a key is evicted <span class="keyword">for</span> maxmemory)</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> A     Alias <span class="keyword">for</span> g<span class="variable">$lshzxe</span>, so that the <span class="string">&quot;AKE&quot;</span> string means all the events.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#  The &quot;notify-keyspace-events&quot; takes as argument a string that is composed</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> of zero or multiple characters. The empty string means that notifications</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> are disabled.</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#  Example: to enable list and generic events, from the point of view of the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">          event name, use:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#  notify-keyspace-events Elg</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#  Example 2: to get the stream of the expired keys subscribing to channel</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">            name __keyevent@0__:expired use:</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash">  notify-keyspace-events Ex</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"></span></span><br><span class="line"><span class="language-bash"><span class="comment">#  By default all notifications are disabled because most users don&#x27;t need</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> this feature and the feature has some overhead. Note that <span class="keyword">if</span> you don<span class="string">&#x27;t</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string"> specify at least one of K or E, no events will be delivered.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">notify-keyspace-events &quot;&quot;</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">############################## ADVANCED CONFIG ###############################</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Hashes are encoded using a memory efficient data structure when they have a</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">small number of entries, and the biggest entry does not exceed a given</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">threshold. These thresholds can be configured using the following directives.</span></span></span><br><span class="line">hash-max-ziplist-entries 512</span><br><span class="line">hash-max-ziplist-value 64</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Lists are also encoded in a special way to save a lot of space.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The number of entries allowed per internal list node can be specified</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">as a fixed maximum size or a maximum number of elements.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">For a fixed maximum size, use -5 through -1, meaning:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">-5: max size: 64 Kb  &lt;-- not recommended for normal workloads</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">-4: max size: 32 Kb  &lt;-- not recommended</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">-3: max size: 16 Kb  &lt;-- probably not recommended</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">-2: max size: 8 Kb   &lt;-- good</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">-1: max size: 4 Kb   &lt;-- good</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Positive numbers mean store up to _exactly_ that number of elements</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">per list node.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The highest performing option is usually -2 (8 Kb size) or -1 (4 Kb size),</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">but if your use case is unique, adjust the settings as necessary.</span></span></span><br><span class="line">list-max-ziplist-size -2</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Lists may also be compressed.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Compress depth is the number of quicklist ziplist nodes from *each* side of</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the list to *exclude* from compression.  The head and tail of the list</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">are always uncompressed for fast push/pop operations.  Settings are:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">0: disable all list compression</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">1: depth 1 means &quot;don&#x27;</span>t start compressing <span class="keyword">until</span> after 1 node into the list,</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">   going from either the <span class="built_in">head</span> or <span class="built_in">tail</span><span class="string">&quot;</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   So: [head]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[tail]</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   [head], [tail] will always be uncompressed; inner nodes will compress.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">2: [head]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[tail]</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   2 here means: don&#x27;t compress head or head-&gt;next or tail-&gt;prev or tail,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   but compress all nodes between them.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">3: [head]-&gt;[next]-&gt;[next]-&gt;node-&gt;node-&gt;...-&gt;node-&gt;[prev]-&gt;[prev]-&gt;[tail]</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">etc.</span></span></span><br><span class="line">list-compress-depth 0</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Sets have a special encoding in just one case: when a set is composed</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">of just strings that happen to be integers in radix 10 in the range</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">of 64 bit signed integers.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The following configuration setting sets the limit in the size of the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">set in order to use this special memory saving encoding.</span></span></span><br><span class="line">set-max-intset-entries 512</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Similarly to hashes and lists, sorted sets are also specially encoded in</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">order to save a lot of space. This encoding is only used when the length and</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">elements of a sorted set are below the following limits:</span></span></span><br><span class="line">zset-max-ziplist-entries 128</span><br><span class="line">zset-max-ziplist-value 64</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">HyperLogLog sparse representation bytes limit. The limit includes the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">16 bytes header. When an HyperLogLog using the sparse representation crosses</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">this limit, it is converted into the dense representation.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># A value greater than 16000 is totally useless, since at that point the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">dense representation is more memory efficient.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The suggested value is ~ 3000 in order to have the benefits of</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the space efficient encoding without slowing down too much PFADD,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">which is O(N) with the sparse encoding. The value can be raised to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">~ 10000 when CPU is not a concern, but space is, and the data set is</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">composed of many HyperLogLogs with cardinality in the 0 - 15000 range.</span></span></span><br><span class="line">hll-sparse-max-bytes 3000</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Streams macro node max size / items. The stream data structure is a radix</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">tree of big nodes that encode multiple items inside. Using this configuration</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">it is possible to configure how big a single node can be in bytes, and the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">maximum number of items it may contain before switching to a new node when</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">appending new stream entries. If any of the following settings are set to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">zero, the limit is ignored, so for instance it is possible to set just a</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">max entires limit by setting max-bytes to 0 and max-entries to the desired</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">value.</span></span></span><br><span class="line">stream-node-max-bytes 4096</span><br><span class="line">stream-node-max-entries 100</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Active rehashing uses 1 millisecond every 100 milliseconds of CPU time in</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">order to help rehashing the main Redis hash table (the one mapping top-level</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">keys to values). The hash table implementation Redis uses (see dict.c)</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">performs a lazy rehashing: the more operation you run into a hash table</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">that is rehashing, the more rehashing &quot;</span>steps<span class="string">&quot; are performed, so if the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">server is idle the rehashing is never complete and some more memory is used</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">by the hash table.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The default is to use this millisecond 10 times every second in order to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">actively rehash the main dictionaries, freeing memory when possible.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># If unsure:</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">use &quot;</span>activerehashing no<span class="string">&quot; if you have hard latency requirements and it is</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">not a good thing in your environment that Redis can reply from time to time</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">to queries with 2 milliseconds delay.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># use &quot;</span>activerehashing <span class="built_in">yes</span><span class="string">&quot; if you don&#x27;t have such hard requirements but</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">want to free memory asap when possible.</span></span></span><br><span class="line">activerehashing yes</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">The client output buffer limits can be used to force disconnection of clients</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">that are not reading data from the server fast enough for some reason (a</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">common reason is that a Pub/Sub client can&#x27;t consume messages as fast as the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">publisher can produce them).</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The limit can be set differently for the three different classes of clients:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># normal -&gt; normal clients including MONITOR clients</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">replica  -&gt; replica clients</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">pubsub -&gt; clients subscribed to at least one pubsub channel or pattern</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The syntax of every client-output-buffer-limit directive is the following:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># client-output-buffer-limit &lt;class&gt; &lt;hard limit&gt; &lt;soft limit&gt; &lt;soft seconds&gt;</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># A client is immediately disconnected once the hard limit is reached, or if</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the soft limit is reached and remains reached for the specified number of</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">seconds (continuously).</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">So for instance if the hard limit is 32 megabytes and the soft limit is</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">16 megabytes / 10 seconds, the client will get disconnected immediately</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">if the size of the output buffers reach 32 megabytes, but will also get</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">disconnected if the client reaches 16 megabytes and continuously overcomes</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the limit for 10 seconds.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># By default normal clients are not limited because they don&#x27;t receive data</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">without asking (in a push way), but just after a request, so only</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">asynchronous clients may create a scenario where data is requested faster</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">than it can read.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Instead there is a default limit for pubsub and replica clients, since</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">subscribers and replicas receive data in a push fashion.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Both the hard or the soft limit can be disabled by setting them to zero.</span></span></span><br><span class="line">client-output-buffer-limit normal 0 0 0</span><br><span class="line">client-output-buffer-limit replica 256mb 64mb 60</span><br><span class="line">client-output-buffer-limit pubsub 32mb 8mb 60</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Client query buffers accumulate new commands. They are limited to a fixed</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">amount by default in order to avoid that a protocol desynchronization (for</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">instance due to a bug in the client) will lead to unbound memory usage in</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the query buffer. However you can configure it here if you have very special</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">needs, such us huge multi/exec requests or alike.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># client-query-buffer-limit 1gb</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">In the Redis protocol, bulk requests, that are, elements representing single</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">strings, are normally limited ot 512 mb. However you can change this limit</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">here.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># proto-max-bulk-len 512mb</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Redis calls an internal function to perform many background tasks, like</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">closing connections of clients in timeout, purging expired keys that are</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">never requested, and so forth.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Not all tasks are performed with the same frequency, but Redis checks for</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">tasks to perform according to the specified &quot;</span>hz<span class="string">&quot; value.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># By default &quot;</span>hz<span class="string">&quot; is set to 10. Raising the value will use more CPU when</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Redis is idle, but at the same time will make Redis more responsive when</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">there are many keys expiring at the same time, and timeouts may be</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">handled with more precision.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The range is between 1 and 500, however a value over 100 is usually not</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">a good idea. Most users should use the default of 10 and raise this up to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">100 only in environments where very low latency is required.</span></span></span><br><span class="line">hz 10</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Normally it is useful to have an HZ value which is proportional to the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">number of clients connected. This is useful in order, for instance, to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">avoid too many clients are processed for each background task invocation</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">in order to avoid latency spikes.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Since the default HZ value by default is conservatively set to 10, Redis</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">offers, and enables by default, the ability to use an adaptive HZ value</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">which will temporary raise when there are many connected clients.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># When dynamic HZ is enabled, the actual configured HZ will be used as</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">as a baseline, but multiples of the configured HZ value will be actually</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">used as needed once more clients are connected. In this way an idle</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">instance will use very little CPU time while a busy instance will be</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">more responsive.</span></span></span><br><span class="line">dynamic-hz yes</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">When a child rewrites the AOF file, if the following option is enabled</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the file will be fsync-ed every 32 MB of data generated. This is useful</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">in order to commit the file to the disk more incrementally and avoid</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">big latency spikes.</span></span></span><br><span class="line">aof-rewrite-incremental-fsync yes</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">When redis saves RDB file, if the following option is enabled</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the file will be fsync-ed every 32 MB of data generated. This is useful</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">in order to commit the file to the disk more incrementally and avoid</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">big latency spikes.</span></span></span><br><span class="line">rdb-save-incremental-fsync yes</span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Redis LFU eviction (see maxmemory setting) can be tuned. However it is a good</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">idea to start with the default settings and only change them after investigating</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">how to improve the performances and how the keys LFU change over time, which</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">is possible to inspect via the OBJECT FREQ command.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># There are two tunable parameters in the Redis LFU implementation: the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">counter logarithm factor and the counter decay time. It is important to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">understand what the two parameters mean before changing them.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The LFU counter is just 8 bits per key, it&#x27;s maximum value is 255, so Redis</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">uses a probabilistic increment with logarithmic behavior. Given the value</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">of the old counter, when a key is accessed, the counter is incremented in</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">this way:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 1. A random number R between 0 and 1 is extracted.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">2. A probability P is calculated as 1/(old_value*lfu_log_factor+1).</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">3. The counter is incremented only if R &lt; P.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The default lfu-log-factor is 10. This is a table of how the frequency</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">counter changes with a different number of accesses with different</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">logarithmic factors:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># +--------+------------+------------+------------+------------+------------+</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">| factor | 100 hits   | 1000 hits  | 100K hits  | 1M hits    | 10M hits   |</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">+--------+------------+------------+------------+------------+------------+</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">| 0      | 104        | 255        | 255        | 255        | 255        |</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">+--------+------------+------------+------------+------------+------------+</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">| 1      | 18         | 49         | 255        | 255        | 255        |</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">+--------+------------+------------+------------+------------+------------+</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">| 10     | 10         | 18         | 142        | 255        | 255        |</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">+--------+------------+------------+------------+------------+------------+</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">| 100    | 8          | 11         | 49         | 143        | 255        |</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">+--------+------------+------------+------------+------------+------------+</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># NOTE: The above table was obtained by running the following commands:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash">#   redis-benchmark -n 1000000 incr foo</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">  redis-cli object freq foo</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># NOTE 2: The counter initial value is 5 in order to give new objects a chance</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">to accumulate hits.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The counter decay time is the time, in minutes, that must elapse in order</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">for the key counter to be divided by two (or decremented if it has a value</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">less &lt;= 10).</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The default value for the lfu-decay-time is 1. A Special value of 0 means to</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">decay the counter every time it happens to be scanned.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># lfu-log-factor 10</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">lfu-decay-time 1</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">########################## ACTIVE DEFRAGMENTATION #######################</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># WARNING THIS FEATURE IS EXPERIMENTAL. However it was stress tested</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">even in production and manually tested by multiple engineers for some</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">time.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># What is active defragmentation?</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">-------------------------------</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Active (online) defragmentation allows a Redis server to compact the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">spaces left between small allocations and deallocations of data in memory,</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">thus allowing to reclaim back memory.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Fragmentation is a natural process that happens with every allocator (but</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">less so with Jemalloc, fortunately) and certain workloads. Normally a server</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">restart is needed in order to lower the fragmentation, or at least to flush</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">away all the data and create it again. However thanks to this feature</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">implemented by Oran Agra for Redis 4.0 this process can happen at runtime</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">in an &quot;</span>hot<span class="string">&quot; way, while the server is running.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Basically when the fragmentation is over a certain level (see the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">configuration options below) Redis will start to create new copies of the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">values in contiguous memory regions by exploiting certain specific Jemalloc</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">features (in order to understand if an allocation is causing fragmentation</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">and to allocate it in a better place), and at the same time, will release the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">old copies of the data. This process, repeated incrementally for all the keys</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">will cause the fragmentation to drop back to normal values.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># Important things to understand:</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 1. This feature is disabled by default, and only works if you compiled Redis</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   to use the copy of Jemalloc we ship with the source code of Redis.</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   This is the default with Linux builds.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 2. You never need to enable this feature if you don&#x27;t have fragmentation</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   issues.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># 3. Once you experience fragmentation, you can enable this feature when</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">   needed with the command &quot;</span>CONFIG SET activedefrag <span class="built_in">yes</span><span class="string">&quot;.</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string"></span></span></span><br><span class="line"><span class="string"><span class="language-bash"># The configuration parameters are able to fine tune the behavior of the</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">defragmentation process. If you are not sure about what they mean it is</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">a good idea to leave the defaults untouched.</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Enabled active defragmentation</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">activedefrag yes</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Minimum amount of fragmentation waste to start active defrag</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">active-defrag-ignore-bytes 100mb</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Minimum percentage of fragmentation to start active defrag</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">active-defrag-threshold-lower 10</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Maximum percentage of fragmentation at which we use maximum effort</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">active-defrag-threshold-upper 100</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Minimal effort for defrag in CPU percentage</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">active-defrag-cycle-min 5</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Maximal effort for defrag in CPU percentage</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">active-defrag-cycle-max 75</span></span></span><br><span class="line"><span class="meta prompt_"> </span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">Maximum number of set/hash/zset/list fields that will be processed from</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">the main dictionary scan</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">active-defrag-max-scan-fields 1000</span></span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ol start="7">
<li><strong>使用redis6.0.8镜像创建容器(也叫运行镜像)</strong></li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run  </span><br><span class="line">-p 6379:6379 </span><br><span class="line">--name myr3 </span><br><span class="line">--privileged=true </span><br><span class="line">-v /app/redis/redis.conf:/etc/redis/redis.conf </span><br><span class="line">-v /app/redis/data:/data </span><br><span class="line">-d redis:6.0.8 redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658386630490-14317133-6f0e-44b1-a15a-21966767b766.png"></p>
<ol start="8">
<li><strong>测试redis-cli连接上来</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658386639463-b2b6c0a5-2dcb-49f8-9751-208fa735fd0f.png"></p>
<p><code>docker exec -it 运行着Rediis服务的容器ID redis-cli</code></p>
<ol start="9">
<li><strong>请证明docker启动使用了我们自己指定的配置文件</strong></li>
</ol>
<p>修改前</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658386662346-efff690c-15ef-4246-af15-3ceef75e82c1.png"></p>
<p>我们用的配置文件，数据库默认是16个</p>
<p>修改后</p>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658386674971-89bd06ec-8496-40c8-835a-81019dbec40b.png"></p>
<p>宿主机的修改会同步给docker容器里面的配置。记得重启服务</p>
<ol start="10">
<li><strong>测试redis-cli连接上来第2次</strong></li>
</ol>
<p><img src="https://cdn.nlark.com/yuque/0/2022/png/27791237/1658386695258-47156844-dae4-4919-9e77-fb9b215dff21.png"></p>
<h2 id="8-5-安装Nginx"><a href="#8-5-安装Nginx" class="headerlink" title="8.5 安装Nginx"></a>8.5 安装Nginx</h2><p>见高级篇Portainer</p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
</search>
